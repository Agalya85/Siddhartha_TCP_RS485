
Siddhartha_Altronic_DE-4000_POC_IP_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a05c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002260  0801a210  0801a210  0002a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c470  0801c470  0002c470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801c478  0801c478  0002c478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c480  0801c480  0002c480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00003374  20000000  0801c484  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00033374  2**0
                  CONTENTS
  8 .bss          0000e010  20003374  20003374  00033374  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20011384  20011384  00033374  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00033374  2**0
                  CONTENTS, READONLY
 11 .debug_info   00087eee  00000000  00000000  000333a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d0c2  00000000  00000000  000bb292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00022080  00000000  00000000  000c8354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002588  00000000  00000000  000ea3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028b8  00000000  00000000  000ec960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b19e  00000000  00000000  000ef218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00057a9d  00000000  00000000  0012a3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011147f  00000000  00000000  00181e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002932d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000819c  00000000  00000000  00293328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20003374 	.word	0x20003374
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a1f4 	.word	0x0801a1f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20003378 	.word	0x20003378
 80001ec:	0801a1f4 	.word	0x0801a1f4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_InitTick+0x40>)
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	fbb3 f3f0 	udiv	r3, r3, r0
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <HAL_InitTick+0x44>)
 800103e:	6810      	ldr	r0, [r2, #0]
 8001040:	fbb0 f0f3 	udiv	r0, r0, r3
 8001044:	f000 fcc4 	bl	80019d0 <HAL_SYSTICK_Config>
 8001048:	b968      	cbnz	r0, 8001066 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	2c0f      	cmp	r4, #15
 800104c:	d901      	bls.n	8001052 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
 8001050:	e00a      	b.n	8001068 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001052:	2200      	movs	r2, #0
 8001054:	4621      	mov	r1, r4
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	f000 fc77 	bl	800194c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_InitTick+0x40>)
 8001060:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
}
 8001068:	bd10      	pop	{r4, pc}
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000
 8001070:	2000295c 	.word	0x2000295c

08001074 <HAL_Init>:
{
 8001074:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x30>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800107e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001086:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800108e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 fc49 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffc8 	bl	800102c <HAL_InitTick>
  HAL_MspInit();
 800109c:	f010 fc9c 	bl	80119d8 <HAL_MspInit>
}
 80010a0:	2000      	movs	r0, #0
 80010a2:	bd08      	pop	{r3, pc}
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_IncTick+0x10>)
 80010aa:	6811      	ldr	r1, [r2, #0]
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_IncTick+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	440b      	add	r3, r1
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200044ac 	.word	0x200044ac
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010c0:	4b01      	ldr	r3, [pc, #4]	; (80010c8 <HAL_GetTick+0x8>)
 80010c2:	6818      	ldr	r0, [r3, #0]
}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200044ac 	.word	0x200044ac

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff fff6 	bl	80010c0 <HAL_GetTick>
 80010d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80010da:	d002      	beq.n	80010e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_Delay+0x24>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	f7ff ffed 	bl	80010c0 <HAL_GetTick>
 80010e6:	1b40      	subs	r0, r0, r5
 80010e8:	42a0      	cmp	r0, r4
 80010ea:	d3fa      	bcc.n	80010e2 <HAL_Delay+0x16>
  {
  }
}
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000

080010f4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <ADC_Init+0x12c>)
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80010fc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	6841      	ldr	r1, [r0, #4]
 8001102:	430a      	orrs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001106:	6802      	ldr	r2, [r0, #0]
 8001108:	6853      	ldr	r3, [r2, #4]
 800110a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800110e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001110:	6802      	ldr	r2, [r0, #0]
 8001112:	6853      	ldr	r3, [r2, #4]
 8001114:	6901      	ldr	r1, [r0, #16]
 8001116:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800111a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800111c:	6802      	ldr	r2, [r0, #0]
 800111e:	6853      	ldr	r3, [r2, #4]
 8001120:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001124:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001126:	6802      	ldr	r2, [r0, #0]
 8001128:	6853      	ldr	r3, [r2, #4]
 800112a:	6881      	ldr	r1, [r0, #8]
 800112c:	430b      	orrs	r3, r1
 800112e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	6893      	ldr	r3, [r2, #8]
 8001134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001138:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	6893      	ldr	r3, [r2, #8]
 800113e:	68c1      	ldr	r1, [r0, #12]
 8001140:	430b      	orrs	r3, r1
 8001142:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001144:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <ADC_Init+0x130>)
 8001148:	429a      	cmp	r2, r3
 800114a:	d057      	beq.n	80011fc <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800114c:	6802      	ldr	r2, [r0, #0]
 800114e:	6893      	ldr	r3, [r2, #8]
 8001150:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001154:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001156:	6802      	ldr	r2, [r0, #0]
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800115c:	430b      	orrs	r3, r1
 800115e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001168:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	6893      	ldr	r3, [r2, #8]
 800116e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001170:	430b      	orrs	r3, r1
 8001172:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001174:	6802      	ldr	r2, [r0, #0]
 8001176:	6893      	ldr	r3, [r2, #8]
 8001178:	f023 0302 	bic.w	r3, r3, #2
 800117c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800117e:	6802      	ldr	r2, [r0, #0]
 8001180:	6893      	ldr	r3, [r2, #8]
 8001182:	7e01      	ldrb	r1, [r0, #24]
 8001184:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001188:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800118a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d03f      	beq.n	8001212 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001192:	6802      	ldr	r2, [r0, #0]
 8001194:	6853      	ldr	r3, [r2, #4]
 8001196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119a:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800119c:	6802      	ldr	r2, [r0, #0]
 800119e:	6853      	ldr	r3, [r2, #4]
 80011a0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011a4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011a6:	6801      	ldr	r1, [r0, #0]
 80011a8:	684b      	ldr	r3, [r1, #4]
 80011aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80011ac:	3a01      	subs	r2, #1
 80011ae:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80011b2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011b4:	6802      	ldr	r2, [r0, #0]
 80011b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80011bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011be:	6801      	ldr	r1, [r0, #0]
 80011c0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80011c2:	69c2      	ldr	r2, [r0, #28]
 80011c4:	3a01      	subs	r2, #1
 80011c6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80011ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011d6:	6802      	ldr	r2, [r0, #0]
 80011d8:	6893      	ldr	r3, [r2, #8]
 80011da:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80011de:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80011e2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	6893      	ldr	r3, [r2, #8]
 80011e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011ec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80011ee:	6802      	ldr	r2, [r0, #0]
 80011f0:	6893      	ldr	r3, [r2, #8]
 80011f2:	6941      	ldr	r1, [r0, #20]
 80011f4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80011f8:	6093      	str	r3, [r2, #8]
}
 80011fa:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6893      	ldr	r3, [r2, #8]
 8001200:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001204:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001206:	6802      	ldr	r2, [r0, #0]
 8001208:	6893      	ldr	r3, [r2, #8]
 800120a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800120e:	6093      	str	r3, [r2, #8]
 8001210:	e7b0      	b.n	8001174 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001212:	6802      	ldr	r2, [r0, #0]
 8001214:	6853      	ldr	r3, [r2, #4]
 8001216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800121a:	6053      	str	r3, [r2, #4]
 800121c:	e7ca      	b.n	80011b4 <ADC_Init+0xc0>
 800121e:	bf00      	nop
 8001220:	40012300 	.word	0x40012300
 8001224:	0f000001 	.word	0x0f000001

08001228 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001228:	b338      	cbz	r0, 800127a <HAL_ADC_Init+0x52>
{
 800122a:	b510      	push	{r4, lr}
 800122c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800122e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001230:	b143      	cbz	r3, 8001244 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001234:	f013 0f10 	tst.w	r3, #16
 8001238:	d00b      	beq.n	8001252 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800123a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800123c:	2300      	movs	r3, #0
 800123e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001242:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001244:	f00a fe3c 	bl	800bec0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	2300      	movs	r3, #0
 800124a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800124c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001250:	e7ef      	b.n	8001232 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001258:	f023 0302 	bic.w	r3, r3, #2
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff46 	bl	80010f4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001268:	2000      	movs	r0, #0
 800126a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800126c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6423      	str	r3, [r4, #64]	; 0x40
 8001278:	e7e0      	b.n	800123c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
}
 800127c:	4770      	bx	lr
	...

08001280 <HAL_ADC_Start_IT>:
{
 8001280:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001286:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	f000 8085 	beq.w	800139a <HAL_ADC_Start_IT+0x11a>
 8001290:	2301      	movs	r3, #1
 8001292:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001296:	6803      	ldr	r3, [r0, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	f012 0f01 	tst.w	r2, #1
 800129e:	d113      	bne.n	80012c8 <HAL_ADC_Start_IT+0x48>
    __HAL_ADC_ENABLE(hadc);
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	f042 0201 	orr.w	r2, r2, #1
 80012a6:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a8:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_ADC_Start_IT+0x12c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <HAL_ADC_Start_IT+0x130>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012b8:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80012ba:	e002      	b.n	80012c2 <HAL_ADC_Start_IT+0x42>
      counter--;
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 80012c2:	9b01      	ldr	r3, [sp, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f9      	bne.n	80012bc <HAL_ADC_Start_IT+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	6893      	ldr	r3, [r2, #8]
 80012cc:	f013 0f01 	tst.w	r3, #1
 80012d0:	d065      	beq.n	800139e <HAL_ADC_Start_IT+0x11e>
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e2:	6853      	ldr	r3, [r2, #4]
 80012e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80012e8:	d005      	beq.n	80012f6 <HAL_ADC_Start_IT+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f4:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012f8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80012fc:	d022      	beq.n	8001344 <HAL_ADC_Start_IT+0xc4>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001300:	f023 0306 	bic.w	r3, r3, #6
 8001304:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001306:	2300      	movs	r3, #0
 8001308:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800130c:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8001310:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001312:	6802      	ldr	r2, [r0, #0]
 8001314:	6853      	ldr	r3, [r2, #4]
 8001316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_ADC_Start_IT+0x134>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f013 0f1f 	tst.w	r3, #31
 8001328:	d127      	bne.n	800137a <HAL_ADC_Start_IT+0xfa>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800132a:	6803      	ldr	r3, [r0, #0]
 800132c:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <HAL_ADC_Start_IT+0x138>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d011      	beq.n	8001356 <HAL_ADC_Start_IT+0xd6>
 8001332:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_ADC_Start_IT+0xca>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800133a:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_ADC_Start_IT+0x13c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d014      	beq.n	800136a <HAL_ADC_Start_IT+0xea>
  return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e02d      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	2300      	movs	r3, #0
 8001346:	6443      	str	r3, [r0, #68]	; 0x44
 8001348:	e7dd      	b.n	8001306 <HAL_ADC_Start_IT+0x86>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800134a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800134e:	6852      	ldr	r2, [r2, #4]
 8001350:	f012 0f1f 	tst.w	r2, #31
 8001354:	d1f1      	bne.n	800133a <HAL_ADC_Start_IT+0xba>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800135c:	d122      	bne.n	80013a4 <HAL_ADC_Start_IT+0x124>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001366:	2000      	movs	r0, #0
 8001368:	e01a      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800136a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800136e:	6852      	ldr	r2, [r2, #4]
 8001370:	f012 0f10 	tst.w	r2, #16
 8001374:	d0ef      	beq.n	8001356 <HAL_ADC_Start_IT+0xd6>
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
 8001378:	e012      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800137a:	6803      	ldr	r3, [r0, #0]
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_ADC_Start_IT+0x138>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d001      	beq.n	8001386 <HAL_ADC_Start_IT+0x106>
  return HAL_OK;
 8001382:	2000      	movs	r0, #0
 8001384:	e00c      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800138c:	d10c      	bne.n	80013a8 <HAL_ADC_Start_IT+0x128>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001394:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001396:	2000      	movs	r0, #0
 8001398:	e002      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
  __HAL_LOCK(hadc);
 800139a:	2002      	movs	r0, #2
 800139c:	e000      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
  return HAL_OK;
 800139e:	2000      	movs	r0, #0
}
 80013a0:	b002      	add	sp, #8
 80013a2:	4770      	bx	lr
  return HAL_OK;
 80013a4:	2000      	movs	r0, #0
 80013a6:	e7fb      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
 80013a8:	2000      	movs	r0, #0
 80013aa:	e7f9      	b.n	80013a0 <HAL_ADC_Start_IT+0x120>
 80013ac:	2000295c 	.word	0x2000295c
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	40012300 	.word	0x40012300
 80013b8:	40012000 	.word	0x40012000
 80013bc:	40012200 	.word	0x40012200

080013c0 <HAL_ADC_Start_DMA>:
{
 80013c0:	b530      	push	{r4, r5, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80013c6:	2200      	movs	r2, #0
 80013c8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80013ca:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80013ce:	2a01      	cmp	r2, #1
 80013d0:	f000 809a 	beq.w	8001508 <HAL_ADC_Start_DMA+0x148>
 80013d4:	4605      	mov	r5, r0
 80013d6:	2201      	movs	r2, #1
 80013d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013dc:	6802      	ldr	r2, [r0, #0]
 80013de:	6890      	ldr	r0, [r2, #8]
 80013e0:	f010 0f01 	tst.w	r0, #1
 80013e4:	d113      	bne.n	800140e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80013e6:	6890      	ldr	r0, [r2, #8]
 80013e8:	f040 0001 	orr.w	r0, r0, #1
 80013ec:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ee:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_ADC_Start_DMA+0x15c>)
 80013f0:	6810      	ldr	r0, [r2, #0]
 80013f2:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_ADC_Start_DMA+0x160>)
 80013f4:	fba2 2000 	umull	r2, r0, r2, r0
 80013f8:	0c80      	lsrs	r0, r0, #18
 80013fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80013fe:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001400:	e002      	b.n	8001408 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8001402:	9c01      	ldr	r4, [sp, #4]
 8001404:	3c01      	subs	r4, #1
 8001406:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001408:	9801      	ldr	r0, [sp, #4]
 800140a:	2800      	cmp	r0, #0
 800140c:	d1f9      	bne.n	8001402 <HAL_ADC_Start_DMA+0x42>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800140e:	682a      	ldr	r2, [r5, #0]
 8001410:	6890      	ldr	r0, [r2, #8]
 8001412:	f010 0f01 	tst.w	r0, #1
 8001416:	d079      	beq.n	800150c <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 8001418:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800141a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800141e:	f020 0001 	bic.w	r0, r0, #1
 8001422:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001426:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800142e:	d005      	beq.n	800143c <HAL_ADC_Start_DMA+0x7c>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001430:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001432:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800143a:	642a      	str	r2, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800143c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800143e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001442:	d036      	beq.n	80014b2 <HAL_ADC_Start_DMA+0xf2>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001444:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001446:	f022 0206 	bic.w	r2, r2, #6
 800144a:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800144c:	2200      	movs	r2, #0
 800144e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001452:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001454:	4833      	ldr	r0, [pc, #204]	; (8001524 <HAL_ADC_Start_DMA+0x164>)
 8001456:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001458:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800145a:	4833      	ldr	r0, [pc, #204]	; (8001528 <HAL_ADC_Start_DMA+0x168>)
 800145c:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800145e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001460:	4832      	ldr	r0, [pc, #200]	; (800152c <HAL_ADC_Start_DMA+0x16c>)
 8001462:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001464:	682a      	ldr	r2, [r5, #0]
 8001466:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800146a:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800146c:	6828      	ldr	r0, [r5, #0]
 800146e:	6842      	ldr	r2, [r0, #4]
 8001470:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001474:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001476:	6828      	ldr	r0, [r5, #0]
 8001478:	6882      	ldr	r2, [r0, #8]
 800147a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800147e:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001480:	6828      	ldr	r0, [r5, #0]
 8001482:	460a      	mov	r2, r1
 8001484:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8001488:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800148a:	f000 fb9d 	bl	8001bc8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_ADC_Start_DMA+0x170>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f013 0f1f 	tst.w	r3, #31
 8001496:	d127      	bne.n	80014e8 <HAL_ADC_Start_DMA+0x128>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_ADC_Start_DMA+0x174>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d011      	beq.n	80014c4 <HAL_ADC_Start_DMA+0x104>
 80014a0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_ADC_Start_DMA+0xf8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014a8:	4a23      	ldr	r2, [pc, #140]	; (8001538 <HAL_ADC_Start_DMA+0x178>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d014      	beq.n	80014d8 <HAL_ADC_Start_DMA+0x118>
  return HAL_OK;
 80014ae:	2000      	movs	r0, #0
 80014b0:	e02d      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
      ADC_CLEAR_ERRORCODE(hadc);
 80014b2:	2200      	movs	r2, #0
 80014b4:	646a      	str	r2, [r5, #68]	; 0x44
 80014b6:	e7c9      	b.n	800144c <HAL_ADC_Start_DMA+0x8c>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80014bc:	6852      	ldr	r2, [r2, #4]
 80014be:	f012 0f1f 	tst.w	r2, #31
 80014c2:	d1f1      	bne.n	80014a8 <HAL_ADC_Start_DMA+0xe8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014ca:	d122      	bne.n	8001512 <HAL_ADC_Start_DMA+0x152>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
 80014d6:	e01a      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80014dc:	6852      	ldr	r2, [r2, #4]
 80014de:	f012 0f10 	tst.w	r2, #16
 80014e2:	d0ef      	beq.n	80014c4 <HAL_ADC_Start_DMA+0x104>
  return HAL_OK;
 80014e4:	2000      	movs	r0, #0
 80014e6:	e012      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_ADC_Start_DMA+0x174>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d001      	beq.n	80014f4 <HAL_ADC_Start_DMA+0x134>
  return HAL_OK;
 80014f0:	2000      	movs	r0, #0
 80014f2:	e00c      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014fa:	d10c      	bne.n	8001516 <HAL_ADC_Start_DMA+0x156>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001504:	2000      	movs	r0, #0
 8001506:	e002      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
  __HAL_LOCK(hadc);
 8001508:	2002      	movs	r0, #2
 800150a:	e000      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
  return HAL_OK;
 800150c:	2000      	movs	r0, #0
}
 800150e:	b003      	add	sp, #12
 8001510:	bd30      	pop	{r4, r5, pc}
  return HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	e7fb      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
 8001516:	2000      	movs	r0, #0
 8001518:	e7f9      	b.n	800150e <HAL_ADC_Start_DMA+0x14e>
 800151a:	bf00      	nop
 800151c:	2000295c 	.word	0x2000295c
 8001520:	431bde83 	.word	0x431bde83
 8001524:	0800170f 	.word	0x0800170f
 8001528:	0800159d 	.word	0x0800159d
 800152c:	080016f9 	.word	0x080016f9
 8001530:	40012300 	.word	0x40012300
 8001534:	40012000 	.word	0x40012000
 8001538:	40012200 	.word	0x40012200

0800153c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800153c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001540:	2b01      	cmp	r3, #1
 8001542:	d028      	beq.n	8001596 <HAL_ADC_Stop_DMA+0x5a>
{
 8001544:	b510      	push	{r4, lr}
 8001546:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001548:	2301      	movs	r3, #1
 800154a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800154e:	6802      	ldr	r2, [r0, #0]
 8001550:	6893      	ldr	r3, [r2, #8]
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001558:	6803      	ldr	r3, [r0, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	f012 0f01 	tst.w	r2, #1
 8001560:	d004      	beq.n	800156c <HAL_ADC_Stop_DMA+0x30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001562:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001564:	2300      	movs	r3, #0
 8001566:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800156a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001572:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001574:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001576:	f000 fb61 	bl	8001c3c <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6853      	ldr	r3, [r2, #4]
 800157e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001582:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6423      	str	r3, [r4, #64]	; 0x40
 8001594:	e7e6      	b.n	8001564 <HAL_ADC_Stop_DMA+0x28>
  __HAL_LOCK(hadc);
 8001596:	2002      	movs	r0, #2
}
 8001598:	4770      	bx	lr

0800159a <HAL_ADC_ConvHalfCpltCallback>:
}
 800159a:	4770      	bx	lr

0800159c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800159c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800159e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015a0:	f7ff fffb 	bl	800159a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015a4:	bd08      	pop	{r3, pc}

080015a6 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80015a6:	4770      	bx	lr

080015a8 <HAL_ADC_ErrorCallback>:
}
 80015a8:	4770      	bx	lr

080015aa <HAL_ADC_IRQHandler>:
{
 80015aa:	b538      	push	{r3, r4, r5, lr}
 80015ac:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80015ae:	6802      	ldr	r2, [r0, #0]
 80015b0:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80015b2:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 80015b4:	f011 0f02 	tst.w	r1, #2
 80015b8:	d02f      	beq.n	800161a <HAL_ADC_IRQHandler+0x70>
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	b363      	cbz	r3, 800161a <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015c2:	f013 0f10 	tst.w	r3, #16
 80015c6:	d103      	bne.n	80015d0 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015d0:	6893      	ldr	r3, [r2, #8]
 80015d2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80015d6:	d119      	bne.n	800160c <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d8:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015da:	b9bb      	cbnz	r3, 800160c <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015de:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80015e2:	d003      	beq.n	80015ec <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015e4:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80015ea:	d10f      	bne.n	800160c <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015ec:	6853      	ldr	r3, [r2, #4]
 80015ee:	f023 0320 	bic.w	r3, r3, #32
 80015f2:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015fe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001602:	d103      	bne.n	800160c <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800160c:	4620      	mov	r0, r4
 800160e:	f010 fd71 	bl	80120f4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	f06f 0212 	mvn.w	r2, #18
 8001618:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 8001624:	f011 0f04 	tst.w	r1, #4
 8001628:	d036      	beq.n	8001698 <HAL_ADC_IRQHandler+0xee>
 800162a:	2a00      	cmp	r2, #0
 800162c:	d034      	beq.n	8001698 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800162e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001630:	f012 0f10 	tst.w	r2, #16
 8001634:	d103      	bne.n	800163e <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800163c:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001644:	d121      	bne.n	800168a <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001648:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800164c:	d003      	beq.n	8001656 <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800164e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001650:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001654:	d119      	bne.n	800168a <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001656:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001658:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800165c:	d115      	bne.n	800168a <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800165e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001660:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001664:	d111      	bne.n	800168a <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001666:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001668:	b97a      	cbnz	r2, 800168a <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001670:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001678:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800167a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800167c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001680:	d103      	bne.n	800168a <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800168a:	4620      	mov	r0, r4
 800168c:	f000 f94a 	bl	8001924 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	f06f 020c 	mvn.w	r2, #12
 8001696:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800169c:	6853      	ldr	r3, [r2, #4]
 800169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 80016a2:	f011 0f01 	tst.w	r1, #1
 80016a6:	d004      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x108>
 80016a8:	b11b      	cbz	r3, 80016b2 <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016aa:	6813      	ldr	r3, [r2, #0]
 80016ac:	f013 0f01 	tst.w	r3, #1
 80016b0:	d109      	bne.n	80016c6 <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80016b6:	6853      	ldr	r3, [r2, #4]
 80016b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 80016bc:	f011 0f20 	tst.w	r1, #32
 80016c0:	d000      	beq.n	80016c4 <HAL_ADC_IRQHandler+0x11a>
 80016c2:	b963      	cbnz	r3, 80016de <HAL_ADC_IRQHandler+0x134>
}
 80016c4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff ff69 	bl	80015a6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f06f 0201 	mvn.w	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e7e9      	b.n	80016b2 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016e6:	f06f 0520 	mvn.w	r5, #32
 80016ea:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff ff5b 	bl	80015a8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	601d      	str	r5, [r3, #0]
}
 80016f6:	e7e5      	b.n	80016c4 <HAL_ADC_IRQHandler+0x11a>

080016f8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016f8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016fc:	2340      	movs	r3, #64	; 0x40
 80016fe:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001700:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001708:	f7ff ff4e 	bl	80015a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800170c:	bd08      	pop	{r3, pc}

0800170e <ADC_DMAConvCplt>:
{
 800170e:	b508      	push	{r3, lr}
 8001710:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001712:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001714:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001716:	f012 0f50 	tst.w	r2, #80	; 0x50
 800171a:	d125      	bne.n	8001768 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800171c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001724:	6803      	ldr	r3, [r0, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800172c:	d119      	bne.n	8001762 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172e:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001730:	b9ba      	cbnz	r2, 8001762 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001734:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001738:	d003      	beq.n	8001742 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800173a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800173c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001740:	d10f      	bne.n	8001762 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	f022 0220 	bic.w	r2, r2, #32
 8001748:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800174a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800174c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001750:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001752:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001754:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001758:	d103      	bne.n	8001762 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800175a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001762:	f010 fcc7 	bl	80120f4 <HAL_ADC_ConvCpltCallback>
}
 8001766:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001768:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800176a:	f012 0f10 	tst.w	r2, #16
 800176e:	d104      	bne.n	800177a <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001770:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001772:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001774:	4618      	mov	r0, r3
 8001776:	4790      	blx	r2
}
 8001778:	e7f5      	b.n	8001766 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 800177a:	f7ff ff15 	bl	80015a8 <HAL_ADC_ErrorCallback>
 800177e:	e7f2      	b.n	8001766 <ADC_DMAConvCplt+0x58>

08001780 <HAL_ADC_ConfigChannel>:
{
 8001780:	b430      	push	{r4, r5}
 8001782:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001788:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800178c:	2b01      	cmp	r3, #1
 800178e:	f000 80bd 	beq.w	800190c <HAL_ADC_ConfigChannel+0x18c>
 8001792:	2301      	movs	r3, #1
 8001794:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001798:	680b      	ldr	r3, [r1, #0]
 800179a:	2b09      	cmp	r3, #9
 800179c:	d93e      	bls.n	800181c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800179e:	6805      	ldr	r5, [r0, #0]
 80017a0:	68ea      	ldr	r2, [r5, #12]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017a8:	3b1e      	subs	r3, #30
 80017aa:	2407      	movs	r4, #7
 80017ac:	fa04 f303 	lsl.w	r3, r4, r3
 80017b0:	ea22 0303 	bic.w	r3, r2, r3
 80017b4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017b6:	6805      	ldr	r5, [r0, #0]
 80017b8:	68ea      	ldr	r2, [r5, #12]
 80017ba:	688c      	ldr	r4, [r1, #8]
 80017bc:	880b      	ldrh	r3, [r1, #0]
 80017be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017c2:	3b1e      	subs	r3, #30
 80017c4:	fa04 f303 	lsl.w	r3, r4, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80017cc:	684b      	ldr	r3, [r1, #4]
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d83a      	bhi.n	8001848 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017d2:	6805      	ldr	r5, [r0, #0]
 80017d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017da:	3b05      	subs	r3, #5
 80017dc:	241f      	movs	r4, #31
 80017de:	fa04 f303 	lsl.w	r3, r4, r3
 80017e2:	ea22 0303 	bic.w	r3, r2, r3
 80017e6:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017e8:	6805      	ldr	r5, [r0, #0]
 80017ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017ec:	684b      	ldr	r3, [r1, #4]
 80017ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017f2:	3b05      	subs	r3, #5
 80017f4:	880c      	ldrh	r4, [r1, #0]
 80017f6:	fa04 f303 	lsl.w	r3, r4, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017fe:	6802      	ldr	r2, [r0, #0]
 8001800:	4b43      	ldr	r3, [pc, #268]	; (8001910 <HAL_ADC_ConfigChannel+0x190>)
 8001802:	429a      	cmp	r2, r3
 8001804:	d050      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001806:	6802      	ldr	r2, [r0, #0]
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_ADC_ConfigChannel+0x190>)
 800180a:	429a      	cmp	r2, r3
 800180c:	d059      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 800180e:	2300      	movs	r3, #0
 8001810:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001814:	4618      	mov	r0, r3
}
 8001816:	b002      	add	sp, #8
 8001818:	bc30      	pop	{r4, r5}
 800181a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800181c:	6805      	ldr	r5, [r0, #0]
 800181e:	692a      	ldr	r2, [r5, #16]
 8001820:	b29b      	uxth	r3, r3
 8001822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001826:	2407      	movs	r4, #7
 8001828:	fa04 f303 	lsl.w	r3, r4, r3
 800182c:	ea22 0303 	bic.w	r3, r2, r3
 8001830:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001832:	6805      	ldr	r5, [r0, #0]
 8001834:	692a      	ldr	r2, [r5, #16]
 8001836:	688c      	ldr	r4, [r1, #8]
 8001838:	880b      	ldrh	r3, [r1, #0]
 800183a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800183e:	fa04 f303 	lsl.w	r3, r4, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	612b      	str	r3, [r5, #16]
 8001846:	e7c1      	b.n	80017cc <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d816      	bhi.n	800187a <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800184c:	6805      	ldr	r5, [r0, #0]
 800184e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001850:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001854:	3b23      	subs	r3, #35	; 0x23
 8001856:	241f      	movs	r4, #31
 8001858:	fa04 f303 	lsl.w	r3, r4, r3
 800185c:	ea22 0303 	bic.w	r3, r2, r3
 8001860:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001862:	6805      	ldr	r5, [r0, #0]
 8001864:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001866:	684b      	ldr	r3, [r1, #4]
 8001868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800186c:	3b23      	subs	r3, #35	; 0x23
 800186e:	880c      	ldrh	r4, [r1, #0]
 8001870:	fa04 f303 	lsl.w	r3, r4, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	632b      	str	r3, [r5, #48]	; 0x30
 8001878:	e7c1      	b.n	80017fe <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800187a:	6805      	ldr	r5, [r0, #0]
 800187c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800187e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001882:	3b41      	subs	r3, #65	; 0x41
 8001884:	241f      	movs	r4, #31
 8001886:	fa04 f303 	lsl.w	r3, r4, r3
 800188a:	ea22 0303 	bic.w	r3, r2, r3
 800188e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001890:	6805      	ldr	r5, [r0, #0]
 8001892:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001894:	684b      	ldr	r3, [r1, #4]
 8001896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800189a:	3b41      	subs	r3, #65	; 0x41
 800189c:	880c      	ldrh	r4, [r1, #0]
 800189e:	fa04 f303 	lsl.w	r3, r4, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80018a6:	e7aa      	b.n	80017fe <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018a8:	680b      	ldr	r3, [r1, #0]
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d1ab      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_ADC_ConfigChannel+0x194>)
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80018b6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	e7a1      	b.n	8001806 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018c2:	680b      	ldr	r3, [r1, #0]
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_ADC_ConfigChannel+0x198>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d001      	beq.n	80018ce <HAL_ADC_ConfigChannel+0x14e>
 80018ca:	2b11      	cmp	r3, #17
 80018cc:	d19f      	bne.n	800180e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_ADC_ConfigChannel+0x194>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80018d6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018de:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018e0:	680a      	ldr	r2, [r1, #0]
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_ADC_ConfigChannel+0x198>)
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d192      	bne.n	800180e <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_ADC_ConfigChannel+0x19c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <HAL_ADC_ConfigChannel+0x1a0>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9b      	lsrs	r3, r3, #18
 80018f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80018fc:	e002      	b.n	8001904 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	3b01      	subs	r3, #1
 8001902:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x17e>
 800190a:	e780      	b.n	800180e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 800190c:	2002      	movs	r0, #2
 800190e:	e782      	b.n	8001816 <HAL_ADC_ConfigChannel+0x96>
 8001910:	40012000 	.word	0x40012000
 8001914:	40012300 	.word	0x40012300
 8001918:	10000012 	.word	0x10000012
 800191c:	2000295c 	.word	0x2000295c
 8001920:	431bde83 	.word	0x431bde83

08001924 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001924:	4770      	bx	lr
	...

08001928 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800192a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	0200      	lsls	r0, r0, #8
 8001936:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001944:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_NVIC_SetPriority+0x60>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001956:	f1c3 0407 	rsb	r4, r3, #7
 800195a:	2c04      	cmp	r4, #4
 800195c:	bf28      	it	cs
 800195e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001960:	1d1d      	adds	r5, r3, #4
 8001962:	2d06      	cmp	r5, #6
 8001964:	d918      	bls.n	8001998 <HAL_NVIC_SetPriority+0x4c>
 8001966:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 35ff 	mov.w	r5, #4294967295
 800196c:	fa05 f404 	lsl.w	r4, r5, r4
 8001970:	ea21 0104 	bic.w	r1, r1, r4
 8001974:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001976:	fa05 f303 	lsl.w	r3, r5, r3
 800197a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001980:	2800      	cmp	r0, #0
 8001982:	db0b      	blt.n	800199c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	0109      	lsls	r1, r1, #4
 8001986:	b2c9      	uxtb	r1, r1
 8001988:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800198c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001990:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001994:	bc30      	pop	{r4, r5}
 8001996:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001998:	2300      	movs	r3, #0
 800199a:	e7e5      	b.n	8001968 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	f000 000f 	and.w	r0, r0, #15
 80019a0:	0109      	lsls	r1, r1, #4
 80019a2:	b2c9      	uxtb	r1, r1
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <HAL_NVIC_SetPriority+0x64>)
 80019a6:	5419      	strb	r1, [r3, r0]
 80019a8:	e7f4      	b.n	8001994 <HAL_NVIC_SetPriority+0x48>
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	e000ed14 	.word	0xe000ed14

080019b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019b4:	2800      	cmp	r0, #0
 80019b6:	db07      	blt.n	80019c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b8:	f000 021f 	and.w	r2, r0, #31
 80019bc:	0940      	lsrs	r0, r0, #5
 80019be:	2301      	movs	r3, #1
 80019c0:	4093      	lsls	r3, r2
 80019c2:	4a02      	ldr	r2, [pc, #8]	; (80019cc <HAL_NVIC_EnableIRQ+0x18>)
 80019c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	3801      	subs	r0, #1
 80019d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019d6:	d20a      	bcs.n	80019ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_SYSTICK_Config+0x24>)
 80019da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_SYSTICK_Config+0x28>)
 80019de:	21f0      	movs	r1, #240	; 0xf0
 80019e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	2000      	movs	r0, #0
 80019e6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fc:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019fe:	6805      	ldr	r5, [r0, #0]
 8001a00:	682c      	ldr	r4, [r5, #0]
 8001a02:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001a06:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a08:	6804      	ldr	r4, [r0, #0]
 8001a0a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0c:	6883      	ldr	r3, [r0, #8]
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d005      	beq.n	8001a1e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001a12:	6803      	ldr	r3, [r0, #0]
 8001a14:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001a16:	6803      	ldr	r3, [r0, #0]
 8001a18:	60da      	str	r2, [r3, #12]
  }
}
 8001a1a:	bc30      	pop	{r4, r5}
 8001a1c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001a1e:	6803      	ldr	r3, [r0, #0]
 8001a20:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001a22:	6803      	ldr	r3, [r0, #0]
 8001a24:	60d9      	str	r1, [r3, #12]
 8001a26:	e7f8      	b.n	8001a1a <DMA_SetConfig+0x1e>

08001a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a28:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a2a:	6803      	ldr	r3, [r0, #0]
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	3910      	subs	r1, #16
 8001a30:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <DMA_CalcBaseAndBitshift+0x3c>)
 8001a32:	fba2 4201 	umull	r4, r2, r2, r1
 8001a36:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a38:	4c0b      	ldr	r4, [pc, #44]	; (8001a68 <DMA_CalcBaseAndBitshift+0x40>)
 8001a3a:	5ca2      	ldrb	r2, [r4, r2]
 8001a3c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a3e:	295f      	cmp	r1, #95	; 0x5f
 8001a40:	d909      	bls.n	8001a56 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001a4e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a54:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	6583      	str	r3, [r0, #88]	; 0x58
 8001a60:	e7f5      	b.n	8001a4e <DMA_CalcBaseAndBitshift+0x26>
 8001a62:	bf00      	nop
 8001a64:	aaaaaaab 	.word	0xaaaaaaab
 8001a68:	0801a210 	.word	0x0801a210

08001a6c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6e:	6982      	ldr	r2, [r0, #24]
 8001a70:	b992      	cbnz	r2, 8001a98 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d00a      	beq.n	8001a8c <DMA_CheckFifoParam+0x20>
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d002      	beq.n	8001a80 <DMA_CheckFifoParam+0x14>
 8001a7a:	b10b      	cbz	r3, 8001a80 <DMA_CheckFifoParam+0x14>
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a82:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a86:	d128      	bne.n	8001ada <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2000      	movs	r0, #0
 8001a8a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a92:	d024      	beq.n	8001ade <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	2000      	movs	r0, #0
 8001a96:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a98:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a9c:	d009      	beq.n	8001ab2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d925      	bls.n	8001aee <DMA_CheckFifoParam+0x82>
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d125      	bne.n	8001af2 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001aa8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001aac:	d123      	bne.n	8001af6 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2000      	movs	r0, #0
 8001ab0:	4770      	bx	lr
    switch (tmp)
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d803      	bhi.n	8001abe <DMA_CheckFifoParam+0x52>
 8001ab6:	e8df f003 	tbb	[pc, r3]
 8001aba:	0414      	.short	0x0414
 8001abc:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001abe:	2000      	movs	r0, #0
 8001ac0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ac4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001ac8:	d10d      	bne.n	8001ae6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2000      	movs	r0, #0
 8001acc:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ace:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ad4:	d009      	beq.n	8001aea <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	4770      	bx	lr
        status = HAL_ERROR;
 8001ada:	2001      	movs	r0, #1
 8001adc:	4770      	bx	lr
        status = HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
 8001ae0:	4770      	bx	lr
      status = HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	4770      	bx	lr
        status = HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	4770      	bx	lr
        status = HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	4770      	bx	lr
      status = HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
 8001af0:	4770      	bx	lr
    switch (tmp)
 8001af2:	2000      	movs	r0, #0
 8001af4:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_DMA_Init>:
{
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fade 	bl	80010c0 <HAL_GetTick>
  if(hdma == NULL)
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	d05b      	beq.n	8001bc0 <HAL_DMA_Init+0xc4>
 8001b08:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	2302      	movs	r3, #2
 8001b12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f012 0f01 	tst.w	r2, #1
 8001b28:	d00a      	beq.n	8001b40 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2a:	f7ff fac9 	bl	80010c0 <HAL_GetTick>
 8001b2e:	1b43      	subs	r3, r0, r5
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d9f5      	bls.n	8001b20 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b34:	2320      	movs	r3, #32
 8001b36:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001b40:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <HAL_DMA_Init+0xc8>)
 8001b44:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	6861      	ldr	r1, [r4, #4]
 8001b48:	68a2      	ldr	r2, [r4, #8]
 8001b4a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b50:	6921      	ldr	r1, [r4, #16]
 8001b52:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	69a1      	ldr	r1, [r4, #24]
 8001b5a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	6a21      	ldr	r1, [r4, #32]
 8001b62:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b64:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b68:	2904      	cmp	r1, #4
 8001b6a:	d01e      	beq.n	8001baa <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001b6c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001b6e:	6826      	ldr	r6, [r4, #0]
 8001b70:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b72:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b78:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001b7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b80:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b84:	b11b      	cbz	r3, 8001b8e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff ff70 	bl	8001a6c <DMA_CheckFifoParam>
 8001b8c:	b990      	cbnz	r0, 8001bb4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001b8e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff ff49 	bl	8001a28 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b98:	233f      	movs	r3, #63	; 0x3f
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ba8:	e7c9      	b.n	8001b3e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001baa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001bae:	4301      	orrs	r1, r0
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	e7db      	b.n	8001b6c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb4:	2340      	movs	r3, #64	; 0x40
 8001bb6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001bbe:	e7be      	b.n	8001b3e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7bc      	b.n	8001b3e <HAL_DMA_Init+0x42>
 8001bc4:	f010803f 	.word	0xf010803f

08001bc8 <HAL_DMA_Start_IT>:
{
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bcc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001bce:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001bd2:	2801      	cmp	r0, #1
 8001bd4:	d030      	beq.n	8001c38 <HAL_DMA_Start_IT+0x70>
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bdc:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001be0:	b2c0      	uxtb	r0, r0
 8001be2:	2801      	cmp	r0, #1
 8001be4:	d004      	beq.n	8001bf0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001be6:	2300      	movs	r3, #0
 8001be8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001bec:	2002      	movs	r0, #2
}
 8001bee:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff fefe 	bl	80019fc <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c02:	233f      	movs	r3, #63	; 0x3f
 8001c04:	4093      	lsls	r3, r2
 8001c06:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c08:	6822      	ldr	r2, [r4, #0]
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	f043 0316 	orr.w	r3, r3, #22
 8001c10:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	6953      	ldr	r3, [r2, #20]
 8001c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1a:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c1e:	b123      	cbz	r3, 8001c2a <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c2a:	6822      	ldr	r2, [r4, #0]
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7da      	b.n	8001bee <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001c38:	2002      	movs	r0, #2
 8001c3a:	e7d8      	b.n	8001bee <HAL_DMA_Start_IT+0x26>

08001c3c <HAL_DMA_Abort>:
{
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c40:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001c42:	f7ff fa3d 	bl	80010c0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d006      	beq.n	8001c5e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001c54:	2300      	movs	r3, #0
 8001c56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
}
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
 8001c5e:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	f023 0316 	bic.w	r3, r3, #22
 8001c68:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6a:	6822      	ldr	r2, [r4, #0]
 8001c6c:	6953      	ldr	r3, [r2, #20]
 8001c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c72:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c76:	b1e3      	cbz	r3, 8001cb2 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	f023 0308 	bic.w	r3, r3, #8
 8001c80:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	6813      	ldr	r3, [r2, #0]
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f013 0f01 	tst.w	r3, #1
 8001c94:	d011      	beq.n	8001cba <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c96:	f7ff fa13 	bl	80010c0 <HAL_GetTick>
 8001c9a:	1b43      	subs	r3, r0, r5
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d9f5      	bls.n	8001c8c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001cb0:	e7d4      	b.n	8001c5c <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1df      	bne.n	8001c78 <HAL_DMA_Abort+0x3c>
 8001cb8:	e7e3      	b.n	8001c82 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cbc:	233f      	movs	r3, #63	; 0x3f
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001cce:	e7c5      	b.n	8001c5c <HAL_DMA_Abort+0x20>

08001cd0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001cde:	2001      	movs	r0, #1
 8001ce0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001ce8:	6802      	ldr	r2, [r0, #0]
 8001cea:	6813      	ldr	r3, [r2, #0]
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001cf2:	2000      	movs	r0, #0
}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_DMA_IRQHandler>:
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_DMA_IRQHandler+0x1d4>)
 8001d04:	681d      	ldr	r5, [r3, #0]
 8001d06:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <HAL_DMA_IRQHandler+0x1d8>)
 8001d08:	fba3 3505 	umull	r3, r5, r3, r5
 8001d0c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001d10:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d14:	2308      	movs	r3, #8
 8001d16:	4093      	lsls	r3, r2
 8001d18:	4233      	tst	r3, r6
 8001d1a:	d010      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1c:	6803      	ldr	r3, [r0, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f012 0f04 	tst.w	r2, #4
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f022 0204 	bic.w	r2, r2, #4
 8001d2c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d30:	2308      	movs	r3, #8
 8001d32:	4093      	lsls	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d40:	2301      	movs	r3, #1
 8001d42:	4093      	lsls	r3, r2
 8001d44:	4233      	tst	r3, r6
 8001d46:	d009      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	6952      	ldr	r2, [r2, #20]
 8001d4c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d52:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d5e:	2304      	movs	r3, #4
 8001d60:	4093      	lsls	r3, r2
 8001d62:	4233      	tst	r3, r6
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d66:	6822      	ldr	r2, [r4, #0]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	f012 0f02 	tst.w	r2, #2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d70:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	4233      	tst	r3, r6
 8001d82:	d024      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	f012 0f08 	tst.w	r2, #8
 8001d8c:	d01f      	beq.n	8001dce <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d8e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001d98:	d00d      	beq.n	8001db6 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001da0:	d104      	bne.n	8001dac <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001da4:	b19b      	cbz	r3, 8001dce <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001da6:	4620      	mov	r0, r4
 8001da8:	4798      	blx	r3
 8001daa:	e010      	b.n	8001dce <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001dae:	b173      	cbz	r3, 8001dce <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001db0:	4620      	mov	r0, r4
 8001db2:	4798      	blx	r3
 8001db4:	e00b      	b.n	8001dce <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001dbc:	d103      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dc8:	b10b      	cbz	r3, 8001dce <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	4233      	tst	r3, r6
 8001dd6:	d055      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	f012 0f10 	tst.w	r2, #16
 8001de0:	d050      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001de2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001de4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d00e      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001df6:	d033      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001dfe:	d12a      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001e00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03e      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001e06:	4620      	mov	r0, r4
 8001e08:	4798      	blx	r3
 8001e0a:	e03b      	b.n	8001e84 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f023 0316 	bic.w	r3, r3, #22
 8001e14:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	6953      	ldr	r3, [r2, #20]
 8001e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e1e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e22:	b1a3      	cbz	r3, 8001e4e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e24:	6822      	ldr	r2, [r4, #0]
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f023 0308 	bic.w	r3, r3, #8
 8001e2c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e30:	233f      	movs	r3, #63	; 0x3f
 8001e32:	4093      	lsls	r3, r2
 8001e34:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001e36:	2300      	movs	r3, #0
 8001e38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001e42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03f      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4798      	blx	r3
        return;
 8001e4c:	e03c      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e7      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x12c>
 8001e54:	e7eb      	b.n	8001e2e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e58:	b1a3      	cbz	r3, 8001e84 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4798      	blx	r3
 8001e5e:	e011      	b.n	8001e84 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001e66:	d109      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001e70:	2300      	movs	r3, #0
 8001e72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7e:	b10b      	cbz	r3, 8001e84 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001e80:	4620      	mov	r0, r4
 8001e82:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e86:	b1fb      	cbz	r3, 8001ec8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e8a:	f013 0f01 	tst.w	r3, #1
 8001e8e:	d017      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	2305      	movs	r3, #5
 8001e92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001ea0:	9b01      	ldr	r3, [sp, #4]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	42ab      	cmp	r3, r5
 8001ea8:	d804      	bhi.n	8001eb4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f013 0f01 	tst.w	r3, #1
 8001eb2:	d1f5      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001ec0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ec2:	b10b      	cbz	r3, 8001ec8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4798      	blx	r3
}
 8001ec8:	b003      	add	sp, #12
 8001eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ecc:	2000295c 	.word	0x2000295c
 8001ed0:	1b4e81b5 	.word	0x1b4e81b5

08001ed4 <HAL_DMA_GetState>:
  return hdma->State;
 8001ed4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001ed8:	4770      	bx	lr
	...

08001edc <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001edc:	7950      	ldrb	r0, [r2, #5]
 8001ede:	7913      	ldrb	r3, [r2, #4]
 8001ee0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ee4:	4807      	ldr	r0, [pc, #28]	; (8001f04 <ETH_MACAddressConfig+0x28>)
 8001ee6:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ee8:	78d0      	ldrb	r0, [r2, #3]
 8001eea:	7893      	ldrb	r3, [r2, #2]
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ef2:	7850      	ldrb	r0, [r2, #1]
 8001ef4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001efc:	4a02      	ldr	r2, [pc, #8]	; (8001f08 <ETH_MACAddressConfig+0x2c>)
 8001efe:	508b      	str	r3, [r1, r2]
}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40028040 	.word	0x40028040
 8001f08:	40028044 	.word	0x40028044

08001f0c <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f0c:	6801      	ldr	r1, [r0, #0]
 8001f0e:	f241 0218 	movw	r2, #4120	; 0x1018
 8001f12:	588b      	ldr	r3, [r1, r2]
 8001f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f18:	508b      	str	r3, [r1, r2]
}
 8001f1a:	4770      	bx	lr

08001f1c <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f1c:	6801      	ldr	r1, [r0, #0]
 8001f1e:	f241 0218 	movw	r2, #4120	; 0x1018
 8001f22:	588b      	ldr	r3, [r1, r2]
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	508b      	str	r3, [r1, r2]
}
 8001f2a:	4770      	bx	lr

08001f2c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001f2c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <ETH_Delay+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <ETH_Delay+0x28>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	0a5b      	lsrs	r3, r3, #9
 8001f3a:	fb00 f303 	mul.w	r3, r0, r3
 8001f3e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8001f40:	bf00      	nop
  } 
  while (Delay --);
 8001f42:	9b01      	ldr	r3, [sp, #4]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	9201      	str	r2, [sp, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <ETH_Delay+0x14>
}
 8001f4c:	b002      	add	sp, #8
 8001f4e:	4770      	bx	lr
 8001f50:	2000295c 	.word	0x2000295c
 8001f54:	10624dd3 	.word	0x10624dd3

08001f58 <ETH_MACTransmissionEnable>:
{ 
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f62:	6802      	ldr	r2, [r0, #0]
 8001f64:	6813      	ldr	r3, [r2, #0]
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001f6c:	6803      	ldr	r3, [r0, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff ffda 	bl	8001f2c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	9a01      	ldr	r2, [sp, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <ETH_MACReceptionEnable>:
{ 
 8001f82:	b510      	push	{r4, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f8c:	6802      	ldr	r2, [r0, #0]
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001f96:	6803      	ldr	r3, [r0, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff ffc5 	bl	8001f2c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	9a01      	ldr	r2, [sp, #4]
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd10      	pop	{r4, pc}

08001fac <ETH_FlushTransmitFIFO>:
{
 8001fac:	b530      	push	{r4, r5, lr}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001fb6:	6802      	ldr	r2, [r0, #0]
 8001fb8:	f241 0518 	movw	r5, #4120	; 0x1018
 8001fbc:	5953      	ldr	r3, [r2, r5]
 8001fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc2:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	595b      	ldr	r3, [r3, r5]
 8001fc8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff ffae 	bl	8001f2c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	9a01      	ldr	r2, [sp, #4]
 8001fd4:	515a      	str	r2, [r3, r5]
}
 8001fd6:	b003      	add	sp, #12
 8001fd8:	bd30      	pop	{r4, r5, pc}
	...

08001fdc <ETH_MACDMAConfig>:
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	b09e      	sub	sp, #120	; 0x78
 8001fe0:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fe2:	b129      	cbz	r1, 8001ff0 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fe8:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fee:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ff0:	69e3      	ldr	r3, [r4, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d16a      	bne.n	80020cc <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffa:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001ffc:	6821      	ldr	r1, [r4, #0]
 8001ffe:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002000:	4a39      	ldr	r2, [pc, #228]	; (80020e8 <ETH_MACDMAConfig+0x10c>)
 8002002:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8002004:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8002006:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8002008:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800200a:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 800200c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800200e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002012:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002014:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201a:	2001      	movs	r0, #1
 800201c:	f7ff f856 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff f84c 	bl	80010cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	2500      	movs	r5, #0
 800203c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002046:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800204e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002052:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002058:	2001      	movs	r0, #1
 800205a:	f7ff f837 	bl	80010cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff f82e 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	f241 0518 	movw	r5, #4120	; 0x1018
 800207a:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <ETH_MACDMAConfig+0x110>)
 800207e:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002080:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8002084:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002088:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff f81c 	bl	80010cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209e:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <ETH_MACDMAConfig+0x114>)
 80020a0:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff f80e 	bl	80010cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b6:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020b8:	69a3      	ldr	r3, [r4, #24]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d009      	beq.n	80020d2 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020be:	6962      	ldr	r2, [r4, #20]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff ff0a 	bl	8001edc <ETH_MACAddressConfig>
}
 80020c8:	b01e      	add	sp, #120	; 0x78
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	9307      	str	r3, [sp, #28]
 80020d0:	e794      	b.n	8001ffc <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020d2:	6821      	ldr	r1, [r4, #0]
 80020d4:	f241 021c 	movw	r2, #4124	; 0x101c
 80020d8:	588b      	ldr	r3, [r1, r2]
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e2:	508b      	str	r3, [r1, r2]
 80020e4:	e7eb      	b.n	80020be <ETH_MACDMAConfig+0xe2>
 80020e6:	bf00      	nop
 80020e8:	ff20810f 	.word	0xff20810f
 80020ec:	f8de3f23 	.word	0xf8de3f23
 80020f0:	02c12080 	.word	0x02c12080

080020f4 <HAL_ETH_DMATxDescListInit>:
{
 80020f4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80020f6:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80020fa:	2c01      	cmp	r4, #1
 80020fc:	d032      	beq.n	8002164 <HAL_ETH_DMATxDescListInit+0x70>
 80020fe:	2401      	movs	r4, #1
 8002100:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8002104:	2402      	movs	r4, #2
 8002106:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800210a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 800210c:	2400      	movs	r4, #0
 800210e:	e001      	b.n	8002114 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002110:	60f1      	str	r1, [r6, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002112:	3401      	adds	r4, #1
 8002114:	429c      	cmp	r4, r3
 8002116:	d218      	bcs.n	800214a <HAL_ETH_DMATxDescListInit+0x56>
    dmatxdesc = DMATxDescTab + i;
 8002118:	0167      	lsls	r7, r4, #5
 800211a:	eb01 1644 	add.w	r6, r1, r4, lsl #5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800211e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8002122:	51cd      	str	r5, [r1, r7]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002124:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8002128:	fb05 2504 	mla	r5, r5, r4, r2
 800212c:	60b5      	str	r5, [r6, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800212e:	69c5      	ldr	r5, [r0, #28]
 8002130:	b91d      	cbnz	r5, 800213a <HAL_ETH_DMATxDescListInit+0x46>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002132:	59cd      	ldr	r5, [r1, r7]
 8002134:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
 8002138:	51cd      	str	r5, [r1, r7]
    if(i < (TxBuffCount-1U))
 800213a:	1e5d      	subs	r5, r3, #1
 800213c:	42a5      	cmp	r5, r4
 800213e:	d9e7      	bls.n	8002110 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002140:	1c65      	adds	r5, r4, #1
 8002142:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8002146:	60f5      	str	r5, [r6, #12]
 8002148:	e7e3      	b.n	8002112 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800214a:	6802      	ldr	r2, [r0, #0]
 800214c:	f241 0310 	movw	r3, #4112	; 0x1010
 8002150:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002152:	2301      	movs	r3, #1
 8002154:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002158:	2300      	movs	r3, #0
 800215a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800215e:	4618      	mov	r0, r3
}
 8002160:	bcf0      	pop	{r4, r5, r6, r7}
 8002162:	4770      	bx	lr
  __HAL_LOCK(heth);
 8002164:	2002      	movs	r0, #2
 8002166:	e7fb      	b.n	8002160 <HAL_ETH_DMATxDescListInit+0x6c>

08002168 <HAL_ETH_DMARxDescListInit>:
{
 8002168:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 800216a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800216e:	2c01      	cmp	r4, #1
 8002170:	d02f      	beq.n	80021d2 <HAL_ETH_DMARxDescListInit+0x6a>
 8002172:	2401      	movs	r4, #1
 8002174:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8002178:	2402      	movs	r4, #2
 800217a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 800217e:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8002180:	2400      	movs	r4, #0
 8002182:	e001      	b.n	8002188 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002184:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002186:	3401      	adds	r4, #1
 8002188:	429c      	cmp	r4, r3
 800218a:	d215      	bcs.n	80021b8 <HAL_ETH_DMARxDescListInit+0x50>
    DMARxDesc = DMARxDescTab+i;
 800218c:	0166      	lsls	r6, r4, #5
 800218e:	eb01 1544 	add.w	r5, r1, r4, lsl #5
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002192:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8002196:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002198:	f244 56f4 	movw	r6, #17908	; 0x45f4
 800219c:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800219e:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80021a2:	fb06 2604 	mla	r6, r6, r4, r2
 80021a6:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 80021a8:	1e5e      	subs	r6, r3, #1
 80021aa:	42a6      	cmp	r6, r4
 80021ac:	d9ea      	bls.n	8002184 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80021ae:	1c66      	adds	r6, r4, #1
 80021b0:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80021b4:	60ee      	str	r6, [r5, #12]
 80021b6:	e7e6      	b.n	8002186 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	f241 030c 	movw	r3, #4108	; 0x100c
 80021be:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80021c6:	2300      	movs	r3, #0
 80021c8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80021cc:	4618      	mov	r0, r3
}
 80021ce:	bcf0      	pop	{r4, r5, r6, r7}
 80021d0:	4770      	bx	lr
  __HAL_LOCK(heth);
 80021d2:	2002      	movs	r0, #2
 80021d4:	e7fb      	b.n	80021ce <HAL_ETH_DMARxDescListInit+0x66>
	...

080021d8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80021d8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80021dc:	2b01      	cmp	r3, #1
 80021de:	f000 8085 	beq.w	80022ec <HAL_ETH_TransmitFrame+0x114>
 80021e2:	2301      	movs	r3, #1
 80021e4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80021e8:	2302      	movs	r3, #2
 80021ea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 80021ee:	b1b1      	cbz	r1, 800221e <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	db1a      	blt.n	800222e <HAL_ETH_TransmitFrame+0x56>
{
 80021f8:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 80021fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021fe:	4291      	cmp	r1, r2
 8002200:	d91d      	bls.n	800223e <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002202:	4c3b      	ldr	r4, [pc, #236]	; (80022f0 <HAL_ETH_TransmitFrame+0x118>)
 8002204:	fba4 2401 	umull	r2, r4, r4, r1
 8002208:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800220a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800220e:	fb02 1214 	mls	r2, r2, r4, r1
 8002212:	b102      	cbz	r2, 8002216 <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8002214:	3401      	adds	r4, #1
  if (bufcount == 1U)
 8002216:	2c01      	cmp	r4, #1
 8002218:	d011      	beq.n	800223e <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 800221a:	2300      	movs	r3, #0
 800221c:	e048      	b.n	80022b0 <HAL_ETH_TransmitFrame+0xd8>
    heth->State = HAL_ETH_STATE_READY;
 800221e:	2301      	movs	r3, #1
 8002220:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002224:	2200      	movs	r2, #0
 8002226:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800222a:	4618      	mov	r0, r3
 800222c:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800222e:	2312      	movs	r3, #18
 8002230:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002234:	2300      	movs	r3, #0
 8002236:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
 800223c:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002244:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002248:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800224c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800224e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002256:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002258:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	f241 0214 	movw	r2, #4116	; 0x1014
 8002264:	589a      	ldr	r2, [r3, r2]
 8002266:	f012 0f04 	tst.w	r2, #4
 800226a:	d008      	beq.n	800227e <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800226c:	f241 0214 	movw	r2, #4116	; 0x1014
 8002270:	2104      	movs	r1, #4
 8002272:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	f241 0304 	movw	r3, #4100	; 0x1004
 800227a:	2100      	movs	r1, #0
 800227c:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 800227e:	2301      	movs	r3, #1
 8002280:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002284:	2300      	movs	r3, #0
 8002286:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800228a:	4618      	mov	r0, r3
}
 800228c:	bc30      	pop	{r4, r5}
 800228e:	4770      	bx	lr
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002290:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002292:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8002296:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8002298:	1e62      	subs	r2, r4, #1
 800229a:	429a      	cmp	r2, r3
 800229c:	d017      	beq.n	80022ce <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800229e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80022a0:	682a      	ldr	r2, [r5, #0]
 80022a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022a6:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80022ae:	3301      	adds	r3, #1
 80022b0:	429c      	cmp	r4, r3
 80022b2:	d9d4      	bls.n	800225e <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022b4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80022b6:	682a      	ldr	r2, [r5, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e6      	bne.n	8002290 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80022c2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80022c4:	682a      	ldr	r2, [r5, #0]
 80022c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022ca:	602a      	str	r2, [r5, #0]
 80022cc:	e7e0      	b.n	8002290 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80022ce:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80022d0:	682a      	ldr	r2, [r5, #0]
 80022d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022d6:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_ETH_TransmitFrame+0x11c>)
 80022da:	fb02 1204 	mla	r2, r2, r4, r1
 80022de:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80022e2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80022e4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022e8:	606a      	str	r2, [r5, #4]
 80022ea:	e7d8      	b.n	800229e <HAL_ETH_TransmitFrame+0xc6>
  __HAL_LOCK(heth);
 80022ec:	2002      	movs	r0, #2
}
 80022ee:	4770      	bx	lr
 80022f0:	ac02b00b 	.word	0xac02b00b
 80022f4:	fffffa0c 	.word	0xfffffa0c

080022f8 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80022f8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d040      	beq.n	8002382 <HAL_ETH_GetReceivedFrame+0x8a>
 8002300:	2301      	movs	r3, #1
 8002302:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800230c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2a00      	cmp	r2, #0
 8002312:	db0e      	blt.n	8002332 <HAL_ETH_GetReceivedFrame+0x3a>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f412 7f80 	tst.w	r2, #256	; 0x100
 800231a:	d112      	bne.n	8002342 <HAL_ETH_GetReceivedFrame+0x4a>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002322:	d028      	beq.n	8002376 <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002324:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002326:	2200      	movs	r2, #0
 8002328:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800232a:	2201      	movs	r2, #1
 800232c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 8002332:	2301      	movs	r3, #1
 8002334:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002338:	2200      	movs	r2, #0
 800233a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800233e:	4618      	mov	r0, r3
 8002340:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 8002342:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002344:	3201      	adds	r2, #1
 8002346:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002348:	2a01      	cmp	r2, #1
 800234a:	d012      	beq.n	8002372 <HAL_ETH_GetReceivedFrame+0x7a>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800234c:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8002354:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 8002356:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002358:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800235a:	6892      	ldr	r2, [r2, #8]
 800235c:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8002362:	2301      	movs	r3, #1
 8002364:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002368:	2300      	movs	r3, #0
 800236a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 800236e:	4618      	mov	r0, r3
 8002370:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002372:	6303      	str	r3, [r0, #48]	; 0x30
 8002374:	e7ea      	b.n	800234c <HAL_ETH_GetReceivedFrame+0x54>
      (heth->RxFrameInfos).SegCount++;
 8002376:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002378:	3201      	adds	r2, #1
 800237a:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	6283      	str	r3, [r0, #40]	; 0x28
 8002380:	e7d7      	b.n	8002332 <HAL_ETH_GetReceivedFrame+0x3a>
  __HAL_LOCK(heth);
 8002382:	2002      	movs	r0, #2
}
 8002384:	4770      	bx	lr

08002386 <HAL_ETH_ReadPHYRegister>:
{
 8002386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002388:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b82      	cmp	r3, #130	; 0x82
 8002390:	d033      	beq.n	80023fa <HAL_ETH_ReadPHYRegister+0x74>
 8002392:	4605      	mov	r5, r0
 8002394:	4616      	mov	r6, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002396:	2382      	movs	r3, #130	; 0x82
 8002398:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800239c:	6800      	ldr	r0, [r0, #0]
 800239e:	6902      	ldr	r2, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023a0:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80023a4:	8a2b      	ldrh	r3, [r5, #16]
 80023a6:	02db      	lsls	r3, r3, #11
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4313      	orrs	r3, r2
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80023ac:	018c      	lsls	r4, r1, #6
 80023ae:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023b2:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80023b4:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80023b8:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80023ba:	f7fe fe81 	bl	80010c0 <HAL_GetTick>
 80023be:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023c0:	f014 0f01 	tst.w	r4, #1
 80023c4:	d010      	beq.n	80023e8 <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80023c6:	f7fe fe7b 	bl	80010c0 <HAL_GetTick>
 80023ca:	1bc3      	subs	r3, r0, r7
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d202      	bcs.n	80023d8 <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 80023d2:	682b      	ldr	r3, [r5, #0]
 80023d4:	691c      	ldr	r4, [r3, #16]
 80023d6:	e7f3      	b.n	80023c0 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 80023d8:	2301      	movs	r3, #1
 80023da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80023de:	2300      	movs	r3, #0
 80023e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80023e4:	2003      	movs	r0, #3
 80023e6:	e007      	b.n	80023f8 <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
}
 80023f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80023fa:	2002      	movs	r0, #2
 80023fc:	e7fc      	b.n	80023f8 <HAL_ETH_ReadPHYRegister+0x72>

080023fe <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80023fe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b42      	cmp	r3, #66	; 0x42
 8002406:	d032      	beq.n	800246e <HAL_ETH_WritePHYRegister+0x70>
{
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800240c:	2342      	movs	r3, #66	; 0x42
 800240e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8002412:	6806      	ldr	r6, [r0, #0]
 8002414:	6930      	ldr	r0, [r6, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002416:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800241a:	8a2b      	ldrh	r3, [r5, #16]
 800241c:	02db      	lsls	r3, r3, #11
 800241e:	b29b      	uxth	r3, r3
 8002420:	4303      	orrs	r3, r0
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002422:	018c      	lsls	r4, r1, #6
 8002424:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8002428:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800242a:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800242e:	b292      	uxth	r2, r2
 8002430:	6172      	str	r2, [r6, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8002432:	682b      	ldr	r3, [r5, #0]
 8002434:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002436:	f7fe fe43 	bl	80010c0 <HAL_GetTick>
 800243a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800243c:	f014 0f01 	tst.w	r4, #1
 8002440:	d010      	beq.n	8002464 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002442:	f7fe fe3d 	bl	80010c0 <HAL_GetTick>
 8002446:	1b83      	subs	r3, r0, r6
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d202      	bcs.n	8002454 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 800244e:	682b      	ldr	r3, [r5, #0]
 8002450:	691c      	ldr	r4, [r3, #16]
 8002452:	e7f3      	b.n	800243c <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8002454:	2301      	movs	r3, #1
 8002456:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800245a:	2300      	movs	r3, #0
 800245c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8002460:	2003      	movs	r0, #3
 8002462:	e003      	b.n	800246c <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8002464:	2301      	movs	r3, #1
 8002466:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800246a:	2000      	movs	r0, #0
}
 800246c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800246e:	2002      	movs	r0, #2
}
 8002470:	4770      	bx	lr
	...

08002474 <HAL_ETH_Init>:
{
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 800247c:	2800      	cmp	r0, #0
 800247e:	f000 810e 	beq.w	800269e <HAL_ETH_Init+0x22a>
 8002482:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8002484:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002488:	2b00      	cmp	r3, #0
 800248a:	d034      	beq.n	80024f6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4b84      	ldr	r3, [pc, #528]	; (80026a4 <HAL_ETH_Init+0x230>)
 8002492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024a4:	4b80      	ldr	r3, [pc, #512]	; (80026a8 <HAL_ETH_Init+0x234>)
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80024ac:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	6a21      	ldr	r1, [r4, #32]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80024c4:	f7fe fdfc 	bl	80010c0 <HAL_GetTick>
 80024c8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	f012 0f01 	tst.w	r2, #1
 80024d6:	d013      	beq.n	8002500 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80024d8:	f7fe fdf2 	bl	80010c0 <HAL_GetTick>
 80024dc:	1b40      	subs	r0, r0, r5
 80024de:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80024e2:	d9f2      	bls.n	80024ca <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80024e4:	2503      	movs	r5, #3
 80024e6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80024ea:	2300      	movs	r3, #0
 80024ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80024f0:	4628      	mov	r0, r5
 80024f2:	b002      	add	sp, #8
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 80024f6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80024fa:	f009 fee9 	bl	800c2d0 <HAL_ETH_MspInit>
 80024fe:	e7c5      	b.n	800248c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002500:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002502:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8002506:	f002 f8df 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800250a:	4b68      	ldr	r3, [pc, #416]	; (80026ac <HAL_ETH_Init+0x238>)
 800250c:	4403      	add	r3, r0
 800250e:	4a68      	ldr	r2, [pc, #416]	; (80026b0 <HAL_ETH_Init+0x23c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d255      	bcs.n	80025c0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002514:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800251c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002520:	2100      	movs	r1, #0
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff6b 	bl	80023fe <HAL_ETH_WritePHYRegister>
 8002528:	4605      	mov	r5, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d160      	bne.n	80025f0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 800252e:	20ff      	movs	r0, #255	; 0xff
 8002530:	f7fe fdcc 	bl	80010cc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8091 	beq.w	800265e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 800253c:	f7fe fdc0 	bl	80010c0 <HAL_GetTick>
 8002540:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002542:	aa01      	add	r2, sp, #4
 8002544:	2101      	movs	r1, #1
 8002546:	4620      	mov	r0, r4
 8002548:	f7ff ff1d 	bl	8002386 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800254c:	f7fe fdb8 	bl	80010c0 <HAL_GetTick>
 8002550:	1b80      	subs	r0, r0, r6
 8002552:	f241 3388 	movw	r3, #5000	; 0x1388
 8002556:	4298      	cmp	r0, r3
 8002558:	d852      	bhi.n	8002600 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	f013 0f04 	tst.w	r3, #4
 8002560:	d0ef      	beq.n	8002542 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002566:	2100      	movs	r1, #0
 8002568:	4620      	mov	r0, r4
 800256a:	f7ff ff48 	bl	80023fe <HAL_ETH_WritePHYRegister>
 800256e:	2800      	cmp	r0, #0
 8002570:	d152      	bne.n	8002618 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8002572:	f7fe fda5 	bl	80010c0 <HAL_GetTick>
 8002576:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002578:	aa01      	add	r2, sp, #4
 800257a:	2101      	movs	r1, #1
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff ff02 	bl	8002386 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002582:	f7fe fd9d 	bl	80010c0 <HAL_GetTick>
 8002586:	1b80      	subs	r0, r0, r6
 8002588:	f241 3388 	movw	r3, #5000	; 0x1388
 800258c:	4298      	cmp	r0, r3
 800258e:	d84b      	bhi.n	8002628 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002590:	9b01      	ldr	r3, [sp, #4]
 8002592:	f013 0f20 	tst.w	r3, #32
 8002596:	d0ef      	beq.n	8002578 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002598:	aa01      	add	r2, sp, #4
 800259a:	211f      	movs	r1, #31
 800259c:	4620      	mov	r0, r4
 800259e:	f7ff fef2 	bl	8002386 <HAL_ETH_ReadPHYRegister>
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d14c      	bne.n	8002640 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80025a6:	9b01      	ldr	r3, [sp, #4]
 80025a8:	f013 0f10 	tst.w	r3, #16
 80025ac:	d050      	beq.n	8002650 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80025ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025b2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80025b4:	f013 0f04 	tst.w	r3, #4
 80025b8:	d04d      	beq.n	8002656 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80025ba:	2300      	movs	r3, #0
 80025bc:	60a3      	str	r3, [r4, #8]
 80025be:	e05e      	b.n	800267e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025c0:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_ETH_Init+0x240>)
 80025c2:	4403      	add	r3, r0
 80025c4:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <HAL_ETH_Init+0x244>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d802      	bhi.n	80025d0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025ca:	f045 050c 	orr.w	r5, r5, #12
 80025ce:	e7a3      	b.n	8002518 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_ETH_Init+0x248>)
 80025d2:	4403      	add	r3, r0
 80025d4:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <HAL_ETH_Init+0x24c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d39e      	bcc.n	8002518 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_ETH_Init+0x250>)
 80025dc:	4403      	add	r3, r0
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_ETH_Init+0x254>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d802      	bhi.n	80025ea <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025e4:	f045 0504 	orr.w	r5, r5, #4
 80025e8:	e796      	b.n	8002518 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80025ea:	f045 0510 	orr.w	r5, r5, #16
 80025ee:	e793      	b.n	8002518 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80025f0:	2101      	movs	r1, #1
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7ff fcf2 	bl	8001fdc <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80025f8:	2501      	movs	r5, #1
 80025fa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80025fe:	e777      	b.n	80024f0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8002600:	2101      	movs	r1, #1
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff fcea 	bl	8001fdc <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8002608:	2301      	movs	r3, #1
 800260a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800260e:	2300      	movs	r3, #0
 8002610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8002614:	2503      	movs	r5, #3
 8002616:	e76b      	b.n	80024f0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8002618:	2101      	movs	r1, #1
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff fcde 	bl	8001fdc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002620:	2501      	movs	r5, #1
 8002622:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8002626:	e763      	b.n	80024f0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8002628:	2101      	movs	r1, #1
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff fcd6 	bl	8001fdc <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8002630:	2301      	movs	r3, #1
 8002632:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8002636:	2300      	movs	r3, #0
 8002638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800263c:	2503      	movs	r5, #3
 800263e:	e757      	b.n	80024f0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8002640:	2101      	movs	r1, #1
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff fcca 	bl	8001fdc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002648:	2501      	movs	r5, #1
 800264a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800264e:	e74f      	b.n	80024f0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002650:	2200      	movs	r2, #0
 8002652:	60e2      	str	r2, [r4, #12]
 8002654:	e7ae      	b.n	80025b4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8002656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800265a:	60a3      	str	r3, [r4, #8]
 800265c:	e00f      	b.n	800267e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800265e:	68e2      	ldr	r2, [r4, #12]
 8002660:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002664:	68a3      	ldr	r3, [r4, #8]
 8002666:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800266a:	431a      	orrs	r2, r3
 800266c:	2100      	movs	r1, #0
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff fec5 	bl	80023fe <HAL_ETH_WritePHYRegister>
 8002674:	b958      	cbnz	r0, 800268e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002676:	f640 70ff 	movw	r0, #4095	; 0xfff
 800267a:	f7fe fd27 	bl	80010cc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800267e:	2100      	movs	r1, #0
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff fcab 	bl	8001fdc <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002686:	2301      	movs	r3, #1
 8002688:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800268c:	e730      	b.n	80024f0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800268e:	2101      	movs	r1, #1
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff fca3 	bl	8001fdc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002696:	2501      	movs	r5, #1
 8002698:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 800269c:	e728      	b.n	80024f0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 800269e:	2501      	movs	r5, #1
 80026a0:	e726      	b.n	80024f0 <HAL_ETH_Init+0x7c>
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	feced300 	.word	0xfeced300
 80026b0:	00e4e1c0 	.word	0x00e4e1c0
 80026b4:	fde9f140 	.word	0xfde9f140
 80026b8:	017d783f 	.word	0x017d783f
 80026bc:	fc6c7900 	.word	0xfc6c7900
 80026c0:	02625a00 	.word	0x02625a00
 80026c4:	fa0a1f00 	.word	0xfa0a1f00
 80026c8:	02faf07f 	.word	0x02faf07f

080026cc <HAL_ETH_Start>:
{  
 80026cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80026ce:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d01a      	beq.n	800270c <HAL_ETH_Start+0x40>
 80026d6:	4604      	mov	r4, r0
 80026d8:	2501      	movs	r5, #1
 80026da:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80026e4:	f7ff fc38 	bl	8001f58 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff fc4a 	bl	8001f82 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff fc5c 	bl	8001fac <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff fc09 	bl	8001f0c <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff fc0e 	bl	8001f1c <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8002700:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002704:	2000      	movs	r0, #0
 8002706:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800270a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 800270c:	2002      	movs	r0, #2
 800270e:	e7fc      	b.n	800270a <HAL_ETH_Start+0x3e>

08002710 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002710:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002712:	4909      	ldr	r1, [pc, #36]	; (8002738 <FLASH_Program_DoubleWord+0x28>)
 8002714:	690c      	ldr	r4, [r1, #16]
 8002716:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800271a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800271c:	690c      	ldr	r4, [r1, #16]
 800271e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002722:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002724:	690c      	ldr	r4, [r1, #16]
 8002726:	f044 0401 	orr.w	r4, r4, #1
 800272a:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800272c:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800272e:	6043      	str	r3, [r0, #4]
}
 8002730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00

0800273c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <FLASH_Program_Word+0x20>)
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002744:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8002756:	6001      	str	r1, [r0, #0]
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00

08002760 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <FLASH_Program_HalfWord+0x20>)
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002768:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002770:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800277a:	8001      	strh	r1, [r0, #0]
}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00

08002784 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <FLASH_Program_Byte+0x1c>)
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800278c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800279a:	7001      	strb	r1, [r0, #0]
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00

080027a4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f013 0f10 	tst.w	r3, #16
 80027ac:	d007      	beq.n	80027be <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027ae:	4a26      	ldr	r2, [pc, #152]	; (8002848 <FLASH_SetErrorCode+0xa4>)
 80027b0:	69d3      	ldr	r3, [r2, #28]
 80027b2:	f043 0310 	orr.w	r3, r3, #16
 80027b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80027b8:	4b22      	ldr	r3, [pc, #136]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027ba:	2210      	movs	r2, #16
 80027bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f013 0f20 	tst.w	r3, #32
 80027c6:	d007      	beq.n	80027d8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <FLASH_SetErrorCode+0xa4>)
 80027ca:	69d3      	ldr	r3, [r2, #28]
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027e0:	d007      	beq.n	80027f2 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80027e2:	4a19      	ldr	r2, [pc, #100]	; (8002848 <FLASH_SetErrorCode+0xa4>)
 80027e4:	69d3      	ldr	r3, [r2, #28]
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027fa:	d007      	beq.n	800280c <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <FLASH_SetErrorCode+0xa4>)
 80027fe:	69d3      	ldr	r3, [r2, #28]
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002814:	d008      	beq.n	8002828 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002816:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <FLASH_SetErrorCode+0xa4>)
 8002818:	69d3      	ldr	r3, [r2, #28]
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 8002822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002826:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f013 0f02 	tst.w	r3, #2
 8002830:	d007      	beq.n	8002842 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <FLASH_SetErrorCode+0xa4>)
 8002834:	69d3      	ldr	r3, [r2, #28]
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800283c:	4b01      	ldr	r3, [pc, #4]	; (8002844 <FLASH_SetErrorCode+0xa0>)
 800283e:	2202      	movs	r2, #2
 8002840:	60da      	str	r2, [r3, #12]
  }
}
 8002842:	4770      	bx	lr
 8002844:	40023c00 	.word	0x40023c00
 8002848:	200044b0 	.word	0x200044b0

0800284c <HAL_FLASH_EndOfOperationCallback>:
}
 800284c:	4770      	bx	lr

0800284e <HAL_FLASH_OperationErrorCallback>:
}
 800284e:	4770      	bx	lr

08002850 <HAL_FLASH_IRQHandler>:
{
 8002850:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_FLASH_IRQHandler+0xf0>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 800285a:	d013      	beq.n	8002884 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800285c:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d03d      	beq.n	80028e2 <HAL_FLASH_IRQHandler+0x92>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002866:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d03e      	beq.n	80028ee <HAL_FLASH_IRQHandler+0x9e>
      addresstmp = pFlash.Address;
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 8002872:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8002874:	f7ff ff96 	bl	80027a4 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff ffe8 	bl	800284e <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_FLASH_IRQHandler+0xf0>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f013 0f01 	tst.w	r3, #1
 800288c:	d013      	beq.n	80028b6 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HAL_FLASH_IRQHandler+0xf0>)
 8002890:	2201      	movs	r2, #1
 8002892:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4293      	cmp	r3, r2
 800289c:	d02a      	beq.n	80028f4 <HAL_FLASH_IRQHandler+0xa4>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d043      	beq.n	8002930 <HAL_FLASH_IRQHandler+0xe0>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028aa:	6958      	ldr	r0, [r3, #20]
 80028ac:	f7ff ffce 	bl	800284c <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b98b      	cbnz	r3, 80028e0 <HAL_FLASH_IRQHandler+0x90>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_FLASH_IRQHandler+0xf0>)
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028c8:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80028d0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80028d8:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028e4:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e7c2      	b.n	8002874 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028f0:	691c      	ldr	r4, [r3, #16]
 80028f2:	e7bf      	b.n	8002874 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	b15b      	cbz	r3, 8002918 <HAL_FLASH_IRQHandler+0xc8>
        addresstmp = pFlash.Sector;
 8002900:	4c10      	ldr	r4, [pc, #64]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 8002902:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002904:	f7ff ffa2 	bl	800284c <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8002908:	68e3      	ldr	r3, [r4, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 800290e:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002910:	7a21      	ldrb	r1, [r4, #8]
 8002912:	f000 f8c5 	bl	8002aa0 <FLASH_Erase_Sector>
 8002916:	e7ce      	b.n	80028b6 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 800291a:	f04f 34ff 	mov.w	r4, #4294967295
 800291e:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8002924:	f000 f8ea 	bl	8002afc <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff ff8f 	bl	800284c <HAL_FLASH_EndOfOperationCallback>
 800292e:	e7c2      	b.n	80028b6 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 8002930:	f000 f8e4 	bl	8002afc <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_FLASH_IRQHandler+0xf4>)
 8002936:	6918      	ldr	r0, [r3, #16]
 8002938:	f7ff ff88 	bl	800284c <HAL_FLASH_EndOfOperationCallback>
 800293c:	e7b8      	b.n	80028b0 <HAL_FLASH_IRQHandler+0x60>
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	200044b0 	.word	0x200044b0

08002948 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002948:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_FLASH_Unlock+0x28>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db01      	blt.n	8002954 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2000      	movs	r0, #0
 8002952:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_FLASH_Unlock+0x28>)
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_FLASH_Unlock+0x2c>)
 8002958:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800295a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800295e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db01      	blt.n	800296a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2000      	movs	r0, #0
 8002968:	4770      	bx	lr
      status = HAL_ERROR;
 800296a:	2001      	movs	r0, #1
}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	45670123 	.word	0x45670123

08002978 <FLASH_WaitForLastOperation>:
{ 
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <FLASH_WaitForLastOperation+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8002982:	f7fe fb9d 	bl	80010c0 <HAL_GetTick>
 8002986:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <FLASH_WaitForLastOperation+0x5c>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002990:	d00a      	beq.n	80029a8 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8002992:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002996:	d0f7      	beq.n	8002988 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002998:	b124      	cbz	r4, 80029a4 <FLASH_WaitForLastOperation+0x2c>
 800299a:	f7fe fb91 	bl	80010c0 <HAL_GetTick>
 800299e:	1b40      	subs	r0, r0, r5
 80029a0:	42a0      	cmp	r0, r4
 80029a2:	d9f1      	bls.n	8002988 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80029a4:	2003      	movs	r0, #3
 80029a6:	e00d      	b.n	80029c4 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <FLASH_WaitForLastOperation+0x5c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f013 0f01 	tst.w	r3, #1
 80029b0:	d002      	beq.n	80029b8 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <FLASH_WaitForLastOperation+0x5c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <FLASH_WaitForLastOperation+0x5c>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80029c0:	d101      	bne.n	80029c6 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 80029c2:	2000      	movs	r0, #0
}  
 80029c4:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80029c6:	f7ff feed 	bl	80027a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
 80029cc:	e7fa      	b.n	80029c4 <FLASH_WaitForLastOperation+0x4c>
 80029ce:	bf00      	nop
 80029d0:	200044b0 	.word	0x200044b0
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_FLASH_Program>:
{
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_FLASH_Program+0x74>)
 80029de:	7e12      	ldrb	r2, [r2, #24]
 80029e0:	2a01      	cmp	r2, #1
 80029e2:	d030      	beq.n	8002a46 <HAL_FLASH_Program+0x6e>
 80029e4:	4604      	mov	r4, r0
 80029e6:	460d      	mov	r5, r1
 80029e8:	461f      	mov	r7, r3
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_FLASH_Program+0x74>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f4:	f7ff ffc0 	bl	8002978 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80029f8:	b990      	cbnz	r0, 8002a20 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80029fa:	b1ac      	cbz	r4, 8002a28 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80029fc:	2c01      	cmp	r4, #1
 80029fe:	d018      	beq.n	8002a32 <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a00:	2c02      	cmp	r4, #2
 8002a02:	d01b      	beq.n	8002a3c <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8002a04:	4632      	mov	r2, r6
 8002a06:	463b      	mov	r3, r7
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f7ff fe81 	bl	8002710 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a12:	f7ff ffb1 	bl	8002978 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <HAL_FLASH_Program+0x78>)
 8002a18:	6913      	ldr	r3, [r2, #16]
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_FLASH_Program+0x74>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	761a      	strb	r2, [r3, #24]
}
 8002a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002a28:	b2f1      	uxtb	r1, r6
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f7ff feaa 	bl	8002784 <FLASH_Program_Byte>
 8002a30:	e7ed      	b.n	8002a0e <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002a32:	b2b1      	uxth	r1, r6
 8002a34:	4628      	mov	r0, r5
 8002a36:	f7ff fe93 	bl	8002760 <FLASH_Program_HalfWord>
 8002a3a:	e7e8      	b.n	8002a0e <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f7ff fe7c 	bl	800273c <FLASH_Program_Word>
 8002a44:	e7e3      	b.n	8002a0e <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8002a46:	2002      	movs	r0, #2
 8002a48:	e7ed      	b.n	8002a26 <HAL_FLASH_Program+0x4e>
 8002a4a:	bf00      	nop
 8002a4c:	200044b0 	.word	0x200044b0
 8002a50:	40023c00 	.word	0x40023c00

08002a54 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a54:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <FLASH_MassErase+0x48>)
 8002a56:	6913      	ldr	r3, [r2, #16]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5c:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8002a5e:	2903      	cmp	r1, #3
 8002a60:	d00e      	beq.n	8002a80 <FLASH_MassErase+0x2c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
  }
  else if(Banks == FLASH_BANK_1)
 8002a62:	2901      	cmp	r1, #1
 8002a64:	d013      	beq.n	8002a8e <FLASH_MassErase+0x3a>
    FLASH->CR |= FLASH_CR_MER1;
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <FLASH_MassErase+0x48>)
 8002a68:	6913      	ldr	r3, [r2, #16]
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <FLASH_MassErase+0x48>)
 8002a72:	6913      	ldr	r3, [r2, #16]
 8002a74:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002a78:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002a7c:	6110      	str	r0, [r2, #16]
}
 8002a7e:	4770      	bx	lr
    FLASH->CR |= FLASH_MER_BIT;
 8002a80:	6913      	ldr	r3, [r2, #16]
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6113      	str	r3, [r2, #16]
 8002a8c:	e7f0      	b.n	8002a70 <FLASH_MassErase+0x1c>
    FLASH->CR |= FLASH_CR_MER1;
 8002a8e:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <FLASH_MassErase+0x48>)
 8002a90:	6913      	ldr	r3, [r2, #16]
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6113      	str	r3, [r2, #16]
 8002a98:	e7ea      	b.n	8002a70 <FLASH_MassErase+0x1c>
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002aa0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002aa2:	b149      	cbz	r1, 8002ab8 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002aa4:	2901      	cmp	r1, #1
 8002aa6:	d024      	beq.n	8002af2 <FLASH_Erase_Sector+0x52>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002aa8:	2902      	cmp	r1, #2
 8002aaa:	d002      	beq.n	8002ab2 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002aac:	f44f 7440 	mov.w	r4, #768	; 0x300
 8002ab0:	e003      	b.n	8002aba <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8002ab2:	f44f 7400 	mov.w	r4, #512	; 0x200
 8002ab6:	e000      	b.n	8002aba <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8002ab8:	2400      	movs	r4, #0
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002aba:	280b      	cmp	r0, #11
 8002abc:	d900      	bls.n	8002ac0 <FLASH_Erase_Sector+0x20>
  {
    Sector += 4U;
 8002abe:	3004      	adds	r0, #4
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <FLASH_Erase_Sector+0x58>)
 8002ac2:	6919      	ldr	r1, [r3, #16]
 8002ac4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002ac8:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	4322      	orrs	r2, r4
 8002ace:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002ad6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002ade:	f040 0002 	orr.w	r0, r0, #2
 8002ae2:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002aea:	611a      	str	r2, [r3, #16]
}
 8002aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002af0:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002af2:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002af6:	e7e0      	b.n	8002aba <FLASH_Erase_Sector+0x1a>
 8002af8:	40023c00 	.word	0x40023c00

08002afc <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <FLASH_FlushCaches+0x5c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002b04:	d010      	beq.n	8002b28 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <FLASH_FlushCaches+0x5c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <FLASH_FlushCaches+0x5c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b30:	d010      	beq.n	8002b54 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <FLASH_FlushCaches+0x5c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b4a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b52:	601a      	str	r2, [r3, #0]
  }
}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_FLASHEx_Erase>:
{
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_FLASHEx_Erase+0x90>)
 8002b60:	7e1b      	ldrb	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d040      	beq.n	8002be8 <HAL_FLASHEx_Erase+0x8c>
 8002b66:	4604      	mov	r4, r0
 8002b68:	460e      	mov	r6, r1
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_FLASHEx_Erase+0x90>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b74:	f7ff ff00 	bl	8002978 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002b78:	4607      	mov	r7, r0
 8002b7a:	bb80      	cbnz	r0, 8002bde <HAL_FLASHEx_Erase+0x82>
    *SectorError = 0xFFFFFFFFU;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d016      	beq.n	8002bb6 <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b88:	68a5      	ldr	r5, [r4, #8]
 8002b8a:	68e3      	ldr	r3, [r4, #12]
 8002b8c:	68a2      	ldr	r2, [r4, #8]
 8002b8e:	4413      	add	r3, r2
 8002b90:	42ab      	cmp	r3, r5
 8002b92:	d922      	bls.n	8002bda <HAL_FLASHEx_Erase+0x7e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b94:	7c21      	ldrb	r1, [r4, #16]
 8002b96:	4628      	mov	r0, r5
 8002b98:	f7ff ff82 	bl	8002aa0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ba0:	f7ff feea 	bl	8002978 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002ba4:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <HAL_FLASHEx_Erase+0x94>)
 8002ba6:	6913      	ldr	r3, [r2, #16]
 8002ba8:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002bac:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8002bae:	4607      	mov	r7, r0
 8002bb0:	b990      	cbnz	r0, 8002bd8 <HAL_FLASHEx_Erase+0x7c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002bb2:	3501      	adds	r5, #1
 8002bb4:	e7e9      	b.n	8002b8a <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002bb6:	6861      	ldr	r1, [r4, #4]
 8002bb8:	7c20      	ldrb	r0, [r4, #16]
 8002bba:	f7ff ff4b 	bl	8002a54 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bc2:	f7ff fed9 	bl	8002978 <FLASH_WaitForLastOperation>
 8002bc6:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8002bc8:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_FLASHEx_Erase+0x94>)
 8002bca:	6913      	ldr	r3, [r2, #16]
 8002bcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	6113      	str	r3, [r2, #16]
 8002bd6:	e000      	b.n	8002bda <HAL_FLASHEx_Erase+0x7e>
          *SectorError = index;
 8002bd8:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8002bda:	f7ff ff8f 	bl	8002afc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_FLASHEx_Erase+0x90>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	4638      	mov	r0, r7
 8002be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8002be8:	2702      	movs	r7, #2
 8002bea:	e7fb      	b.n	8002be4 <HAL_FLASHEx_Erase+0x88>
 8002bec:	200044b0 	.word	0x200044b0
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f200 80e5 	bhi.w	8002dc6 <HAL_GPIO_Init+0x1d2>
{
 8002bfc:	b4f0      	push	{r4, r5, r6, r7}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	e039      	b.n	8002c76 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c02:	2209      	movs	r2, #9
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002c06:	2200      	movs	r2, #0
 8002c08:	40b2      	lsls	r2, r6
 8002c0a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c0c:	3402      	adds	r4, #2
 8002c0e:	4e6e      	ldr	r6, [pc, #440]	; (8002dc8 <HAL_GPIO_Init+0x1d4>)
 8002c10:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c14:	4a6d      	ldr	r2, [pc, #436]	; (8002dcc <HAL_GPIO_Init+0x1d8>)
 8002c16:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	43ea      	mvns	r2, r5
 8002c1a:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c1e:	684f      	ldr	r7, [r1, #4]
 8002c20:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002c24:	d001      	beq.n	8002c2a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002c26:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002c2a:	4c68      	ldr	r4, [pc, #416]	; (8002dcc <HAL_GPIO_Init+0x1d8>)
 8002c2c:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002c2e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c34:	684f      	ldr	r7, [r1, #4]
 8002c36:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002c3a:	d001      	beq.n	8002c40 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002c3c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002c40:	4c62      	ldr	r4, [pc, #392]	; (8002dcc <HAL_GPIO_Init+0x1d8>)
 8002c42:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c44:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c4a:	684f      	ldr	r7, [r1, #4]
 8002c4c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002c50:	d001      	beq.n	8002c56 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002c52:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002c56:	4c5d      	ldr	r4, [pc, #372]	; (8002dcc <HAL_GPIO_Init+0x1d8>)
 8002c58:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002c5a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5e:	684e      	ldr	r6, [r1, #4]
 8002c60:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002c64:	d001      	beq.n	8002c6a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002c66:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002c6a:	4c58      	ldr	r4, [pc, #352]	; (8002dcc <HAL_GPIO_Init+0x1d8>)
 8002c6c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6e:	3301      	adds	r3, #1
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	f200 80a5 	bhi.w	8002dc0 <HAL_GPIO_Init+0x1cc>
    ioposition = 0x01U << position;
 8002c76:	2201      	movs	r2, #1
 8002c78:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	680c      	ldr	r4, [r1, #0]
 8002c7c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002c80:	ea32 0404 	bics.w	r4, r2, r4
 8002c84:	d1f3      	bne.n	8002c6e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c86:	684c      	ldr	r4, [r1, #4]
 8002c88:	2c02      	cmp	r4, #2
 8002c8a:	d001      	beq.n	8002c90 <HAL_GPIO_Init+0x9c>
 8002c8c:	2c12      	cmp	r4, #18
 8002c8e:	d110      	bne.n	8002cb2 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->AFR[position >> 3U];
 8002c90:	08de      	lsrs	r6, r3, #3
 8002c92:	3608      	adds	r6, #8
 8002c94:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c98:	f003 0407 	and.w	r4, r3, #7
 8002c9c:	00a7      	lsls	r7, r4, #2
 8002c9e:	240f      	movs	r4, #15
 8002ca0:	40bc      	lsls	r4, r7
 8002ca2:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca6:	690c      	ldr	r4, [r1, #16]
 8002ca8:	40bc      	lsls	r4, r7
 8002caa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002cb2:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cb6:	005e      	lsls	r6, r3, #1
 8002cb8:	2403      	movs	r4, #3
 8002cba:	40b4      	lsls	r4, r6
 8002cbc:	43e7      	mvns	r7, r4
 8002cbe:	ea2c 0c04 	bic.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc2:	684c      	ldr	r4, [r1, #4]
 8002cc4:	f004 0403 	and.w	r4, r4, #3
 8002cc8:	40b4      	lsls	r4, r6
 8002cca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002cce:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd0:	684c      	ldr	r4, [r1, #4]
 8002cd2:	f104 3cff 	add.w	ip, r4, #4294967295
 8002cd6:	f1bc 0f01 	cmp.w	ip, #1
 8002cda:	d903      	bls.n	8002ce4 <HAL_GPIO_Init+0xf0>
 8002cdc:	2c11      	cmp	r4, #17
 8002cde:	d001      	beq.n	8002ce4 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ce0:	2c12      	cmp	r4, #18
 8002ce2:	d110      	bne.n	8002d06 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8002ce4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce6:	ea07 0c04 	and.w	ip, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cea:	68cc      	ldr	r4, [r1, #12]
 8002cec:	40b4      	lsls	r4, r6
 8002cee:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002cf2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002cf4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cfa:	684c      	ldr	r4, [r1, #4]
 8002cfc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002d00:	409c      	lsls	r4, r3
 8002d02:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8002d04:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002d06:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d08:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0a:	688a      	ldr	r2, [r1, #8]
 8002d0c:	40b2      	lsls	r2, r6
 8002d0e:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8002d10:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d12:	684a      	ldr	r2, [r1, #4]
 8002d14:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002d18:	d0a9      	beq.n	8002c6e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	9201      	str	r2, [sp, #4]
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <HAL_GPIO_Init+0x1dc>)
 8002d20:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002d22:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002d26:	6454      	str	r4, [r2, #68]	; 0x44
 8002d28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d2a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d2e:	9201      	str	r2, [sp, #4]
 8002d30:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	089c      	lsrs	r4, r3, #2
 8002d34:	1ca6      	adds	r6, r4, #2
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <HAL_GPIO_Init+0x1d4>)
 8002d38:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	0096      	lsls	r6, r2, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	40b2      	lsls	r2, r6
 8002d46:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_GPIO_Init+0x1e0>)
 8002d4c:	4290      	cmp	r0, r2
 8002d4e:	f43f af5a 	beq.w	8002c06 <HAL_GPIO_Init+0x12>
 8002d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d56:	4290      	cmp	r0, r2
 8002d58:	d022      	beq.n	8002da0 <HAL_GPIO_Init+0x1ac>
 8002d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5e:	4290      	cmp	r0, r2
 8002d60:	d020      	beq.n	8002da4 <HAL_GPIO_Init+0x1b0>
 8002d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d66:	4290      	cmp	r0, r2
 8002d68:	d01e      	beq.n	8002da8 <HAL_GPIO_Init+0x1b4>
 8002d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d6e:	4290      	cmp	r0, r2
 8002d70:	d01c      	beq.n	8002dac <HAL_GPIO_Init+0x1b8>
 8002d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d76:	4290      	cmp	r0, r2
 8002d78:	d01a      	beq.n	8002db0 <HAL_GPIO_Init+0x1bc>
 8002d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d7e:	4290      	cmp	r0, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_GPIO_Init+0x1c0>
 8002d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d86:	4290      	cmp	r0, r2
 8002d88:	d016      	beq.n	8002db8 <HAL_GPIO_Init+0x1c4>
 8002d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d8e:	4290      	cmp	r0, r2
 8002d90:	d014      	beq.n	8002dbc <HAL_GPIO_Init+0x1c8>
 8002d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d96:	4290      	cmp	r0, r2
 8002d98:	f43f af33 	beq.w	8002c02 <HAL_GPIO_Init+0xe>
 8002d9c:	220a      	movs	r2, #10
 8002d9e:	e733      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002da0:	2201      	movs	r2, #1
 8002da2:	e731      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002da4:	2202      	movs	r2, #2
 8002da6:	e72f      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002da8:	2203      	movs	r2, #3
 8002daa:	e72d      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002dac:	2204      	movs	r2, #4
 8002dae:	e72b      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002db0:	2205      	movs	r2, #5
 8002db2:	e729      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002db4:	2206      	movs	r2, #6
 8002db6:	e727      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002db8:	2207      	movs	r2, #7
 8002dba:	e725      	b.n	8002c08 <HAL_GPIO_Init+0x14>
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	e723      	b.n	8002c08 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	4770      	bx	lr
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40013c00 	.word	0x40013c00
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	b10a      	cbz	r2, 8002dde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dda:	6181      	str	r1, [r0, #24]
 8002ddc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dde:	0409      	lsls	r1, r1, #16
 8002de0:	6181      	str	r1, [r0, #24]
  }
}
 8002de2:	4770      	bx	lr

08002de4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002de4:	6943      	ldr	r3, [r0, #20]
 8002de6:	ea31 0303 	bics.w	r3, r1, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dec:	6181      	str	r1, [r0, #24]
  }
}
 8002dee:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002df0:	0409      	lsls	r1, r1, #16
 8002df2:	6181      	str	r1, [r0, #24]
 8002df4:	4770      	bx	lr

08002df6 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002df6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d010      	beq.n	8002e22 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e00:	6903      	ldr	r3, [r0, #16]
 8002e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e06:	d01b      	beq.n	8002e40 <I2C_Master_SB+0x4a>
        }
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8002e08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d13c      	bne.n	8002e88 <I2C_Master_SB+0x92>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e10:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	f003 0306 	and.w	r3, r3, #6
 8002e1a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002e1e:	6113      	str	r3, [r2, #16]
 8002e20:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8002e22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e24:	b92b      	cbnz	r3, 8002e32 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e28:	6802      	ldr	r2, [r0, #0]
 8002e2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002e2e:	6113      	str	r3, [r2, #16]
 8002e30:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e34:	6802      	ldr	r2, [r0, #0]
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	6113      	str	r3, [r2, #16]
 8002e3e:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b21      	cmp	r3, #33	; 0x21
 8002e48:	d00f      	beq.n	8002e6a <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e4c:	6802      	ldr	r2, [r0, #0]
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	6113      	str	r3, [r2, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e58:	b16b      	cbz	r3, 8002e76 <I2C_Master_SB+0x80>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	b17b      	cbz	r3, 8002e7e <I2C_Master_SB+0x88>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e5e:	6802      	ldr	r2, [r0, #0]
 8002e60:	6853      	ldr	r3, [r2, #4]
 8002e62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e66:	6053      	str	r3, [r2, #4]
 8002e68:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e6c:	6802      	ldr	r2, [r0, #0]
 8002e6e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002e72:	6113      	str	r3, [r2, #16]
 8002e74:	e7ef      	b.n	8002e56 <I2C_Master_SB+0x60>
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002e76:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d1ee      	bne.n	8002e5a <I2C_Master_SB+0x64>
 8002e7c:	e007      	b.n	8002e8e <I2C_Master_SB+0x98>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002e7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1eb      	bne.n	8002e5e <I2C_Master_SB+0x68>
 8002e86:	e002      	b.n	8002e8e <I2C_Master_SB+0x98>
      }
      else if (hi2c->EventCount == 1U)
 8002e88:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d000      	beq.n	8002e90 <I2C_Master_SB+0x9a>
      {
        /* Do nothing */
      }
    }
  }
}
 8002e8e:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e92:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002e96:	6802      	ldr	r2, [r0, #0]
 8002e98:	f003 0306 	and.w	r3, r3, #6
 8002e9c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8002ea0:	6113      	str	r3, [r2, #16]
}
 8002ea2:	e7f4      	b.n	8002e8e <I2C_Master_SB+0x98>

08002ea4 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ea4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002ea6:	6802      	ldr	r2, [r0, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002eac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eae:	b13b      	cbz	r3, 8002ec0 <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	b14b      	cbz	r3, 8002ec8 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eb4:	6802      	ldr	r2, [r0, #0]
 8002eb6:	6853      	ldr	r3, [r2, #4]
 8002eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ebc:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002ebe:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002ec0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	d1f4      	bne.n	8002eb0 <I2C_Master_ADD10+0xc>
 8002ec6:	e7fa      	b.n	8002ebe <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002ec8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f1      	bne.n	8002eb4 <I2C_Master_ADD10+0x10>
 8002ed0:	e7f5      	b.n	8002ebe <I2C_Master_ADD10+0x1a>

08002ed2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ed2:	b410      	push	{r4}
 8002ed4:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ed6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002eda:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002edc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ede:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ee0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b22      	cmp	r3, #34	; 0x22
 8002ee8:	d00b      	beq.n	8002f02 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	9309      	str	r3, [sp, #36]	; 0x24
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8002efa:	b00b      	add	sp, #44	; 0x2c
 8002efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f00:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f04:	b90b      	cbnz	r3, 8002f0a <I2C_Master_ADDR+0x38>
 8002f06:	2a40      	cmp	r2, #64	; 0x40
 8002f08:	d017      	beq.n	8002f3a <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f0c:	b91b      	cbnz	r3, 8002f16 <I2C_Master_ADDR+0x44>
 8002f0e:	6903      	ldr	r3, [r0, #16]
 8002f10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f14:	d019      	beq.n	8002f4a <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8002f16:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d125      	bne.n	8002f6a <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	6803      	ldr	r3, [r0, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	9202      	str	r2, [sp, #8]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	6503      	str	r3, [r0, #80]	; 0x50
 8002f38:	e7df      	b.n	8002efa <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	6803      	ldr	r3, [r0, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	9200      	str	r2, [sp, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	9b00      	ldr	r3, [sp, #0]
 8002f48:	e7d7      	b.n	8002efa <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	6803      	ldr	r3, [r0, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	9201      	str	r2, [sp, #4]
 8002f58:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f60:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f62:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f64:	3301      	adds	r3, #1
 8002f66:	6503      	str	r3, [r0, #80]	; 0x50
 8002f68:	e7c7      	b.n	8002efa <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8002f6a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d025      	beq.n	8002fbe <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8002f72:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d07b      	beq.n	8003072 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7a:	6802      	ldr	r2, [r0, #0]
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f82:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f84:	6803      	ldr	r3, [r0, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002f8c:	d00e      	beq.n	8002fac <I2C_Master_ADDR+0xda>
 8002f8e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002f92:	d007      	beq.n	8002fa4 <I2C_Master_ADDR+0xd2>
 8002f94:	2901      	cmp	r1, #1
 8002f96:	d005      	beq.n	8002fa4 <I2C_Master_ADDR+0xd2>
 8002f98:	2908      	cmp	r1, #8
 8002f9a:	d003      	beq.n	8002fa4 <I2C_Master_ADDR+0xd2>
 8002f9c:	2910      	cmp	r1, #16
 8002f9e:	d001      	beq.n	8002fa4 <I2C_Master_ADDR+0xd2>
 8002fa0:	2920      	cmp	r1, #32
 8002fa2:	d103      	bne.n	8002fac <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002faa:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fac:	2300      	movs	r3, #0
 8002fae:	9308      	str	r3, [sp, #32]
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	9208      	str	r2, [sp, #32]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	9308      	str	r3, [sp, #32]
 8002fba:	9b08      	ldr	r3, [sp, #32]
 8002fbc:	e7ba      	b.n	8002f34 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002fbe:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002fc2:	d011      	beq.n	8002fe8 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002fc4:	2908      	cmp	r1, #8
 8002fc6:	d034      	beq.n	8003032 <I2C_Master_ADDR+0x160>
 8002fc8:	2920      	cmp	r1, #32
 8002fca:	d032      	beq.n	8003032 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002fcc:	2c12      	cmp	r4, #18
 8002fce:	d02e      	beq.n	800302e <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fd0:	2904      	cmp	r1, #4
 8002fd2:	d040      	beq.n	8003056 <I2C_Master_ADDR+0x184>
 8002fd4:	2902      	cmp	r1, #2
 8002fd6:	d03e      	beq.n	8003056 <I2C_Master_ADDR+0x184>
 8002fd8:	2910      	cmp	r1, #16
 8002fda:	d03c      	beq.n	8003056 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fdc:	6802      	ldr	r2, [r0, #0]
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e03b      	b.n	8003060 <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	6802      	ldr	r2, [r0, #0]
 8002fea:	6813      	ldr	r3, [r2, #0]
 8002fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff0:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ff2:	6803      	ldr	r3, [r0, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002ffa:	d00c      	beq.n	8003016 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003004:	2300      	movs	r3, #0
 8003006:	9303      	str	r3, [sp, #12]
 8003008:	6803      	ldr	r3, [r0, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	9203      	str	r2, [sp, #12]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	9303      	str	r3, [sp, #12]
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	e78e      	b.n	8002f34 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2200      	movs	r2, #0
 8003018:	9204      	str	r2, [sp, #16]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	9204      	str	r2, [sp, #16]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	9204      	str	r2, [sp, #16]
 8003022:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e782      	b.n	8002f34 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800302e:	2901      	cmp	r1, #1
 8003030:	d0ce      	beq.n	8002fd0 <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	6802      	ldr	r2, [r0, #0]
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800303a:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303c:	2300      	movs	r3, #0
 800303e:	9306      	str	r3, [sp, #24]
 8003040:	6803      	ldr	r3, [r0, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	9206      	str	r2, [sp, #24]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	9206      	str	r2, [sp, #24]
 800304a:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e76e      	b.n	8002f34 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	6802      	ldr	r2, [r0, #0]
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003060:	2300      	movs	r3, #0
 8003062:	9305      	str	r3, [sp, #20]
 8003064:	6803      	ldr	r3, [r0, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	9205      	str	r2, [sp, #20]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	9305      	str	r3, [sp, #20]
 800306e:	9b05      	ldr	r3, [sp, #20]
 8003070:	e760      	b.n	8002f34 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003072:	2904      	cmp	r1, #4
 8003074:	d00e      	beq.n	8003094 <I2C_Master_ADDR+0x1c2>
 8003076:	2902      	cmp	r1, #2
 8003078:	d00c      	beq.n	8003094 <I2C_Master_ADDR+0x1c2>
 800307a:	2910      	cmp	r1, #16
 800307c:	d00a      	beq.n	8003094 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	6802      	ldr	r2, [r0, #0]
 8003080:	6813      	ldr	r3, [r2, #0]
 8003082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003086:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003088:	6802      	ldr	r2, [r0, #0]
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e004      	b.n	800309e <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003094:	6802      	ldr	r2, [r0, #0]
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309c:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800309e:	6803      	ldr	r3, [r0, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80030a6:	d00e      	beq.n	80030c6 <I2C_Master_ADDR+0x1f4>
 80030a8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80030ac:	d007      	beq.n	80030be <I2C_Master_ADDR+0x1ec>
 80030ae:	2901      	cmp	r1, #1
 80030b0:	d005      	beq.n	80030be <I2C_Master_ADDR+0x1ec>
 80030b2:	2908      	cmp	r1, #8
 80030b4:	d003      	beq.n	80030be <I2C_Master_ADDR+0x1ec>
 80030b6:	2910      	cmp	r1, #16
 80030b8:	d001      	beq.n	80030be <I2C_Master_ADDR+0x1ec>
 80030ba:	2920      	cmp	r1, #32
 80030bc:	d103      	bne.n	80030c6 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030c4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	9307      	str	r3, [sp, #28]
 80030ca:	6803      	ldr	r3, [r0, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	9207      	str	r2, [sp, #28]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	9307      	str	r3, [sp, #28]
 80030d4:	9b07      	ldr	r3, [sp, #28]
 80030d6:	e72d      	b.n	8002f34 <I2C_Master_ADDR+0x62>

080030d8 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80030d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b15b      	cbz	r3, 80030f6 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030de:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80030e0:	6803      	ldr	r3, [r0, #0]
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 80030f6:	4770      	bx	lr

080030f8 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80030f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b15b      	cbz	r3, 8003116 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003104:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003106:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800310c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29b      	uxth	r3, r3
 8003114:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8003116:	4770      	bx	lr

08003118 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003118:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800311a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800311e:	d004      	beq.n	800312a <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003120:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003122:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003126:	d003      	beq.n	8003130 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003128:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800312a:	2301      	movs	r3, #1
 800312c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800312e:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003130:	2308      	movs	r3, #8
 8003132:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8003134:	e7f8      	b.n	8003128 <I2C_ConvertOtherXferOptions+0x10>
	...

08003138 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003138:	2800      	cmp	r0, #0
 800313a:	f000 80c2 	beq.w	80032c2 <HAL_I2C_Init+0x18a>
{
 800313e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003140:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003142:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06d      	beq.n	8003226 <HAL_I2C_Init+0xee>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800314a:	2324      	movs	r3, #36	; 0x24
 800314c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800315a:	f001 fabb 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800315e:	6862      	ldr	r2, [r4, #4]
 8003160:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <HAL_I2C_Init+0x194>)
 8003162:	429a      	cmp	r2, r3
 8003164:	d864      	bhi.n	8003230 <HAL_I2C_Init+0xf8>
 8003166:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_I2C_Init+0x198>)
 8003168:	4298      	cmp	r0, r3
 800316a:	bf8c      	ite	hi
 800316c:	2300      	movhi	r3, #0
 800316e:	2301      	movls	r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 80a8 	bne.w	80032c6 <HAL_I2C_Init+0x18e>
  freqrange = I2C_FREQRANGE(pclk1);
 8003176:	4d57      	ldr	r5, [pc, #348]	; (80032d4 <HAL_I2C_Init+0x19c>)
 8003178:	fba5 3500 	umull	r3, r5, r5, r0
 800317c:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317e:	6826      	ldr	r6, [r4, #0]
 8003180:	6871      	ldr	r1, [r6, #4]
 8003182:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003186:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800318a:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318c:	6821      	ldr	r1, [r4, #0]
 800318e:	6a0b      	ldr	r3, [r1, #32]
 8003190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003194:	6865      	ldr	r5, [r4, #4]
 8003196:	4a4d      	ldr	r2, [pc, #308]	; (80032cc <HAL_I2C_Init+0x194>)
 8003198:	4295      	cmp	r5, r2
 800319a:	d84f      	bhi.n	800323c <HAL_I2C_Init+0x104>
 800319c:	1c7a      	adds	r2, r7, #1
 800319e:	4313      	orrs	r3, r2
 80031a0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a2:	6825      	ldr	r5, [r4, #0]
 80031a4:	69e9      	ldr	r1, [r5, #28]
 80031a6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80031aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	4a46      	ldr	r2, [pc, #280]	; (80032cc <HAL_I2C_Init+0x194>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d84c      	bhi.n	8003250 <HAL_I2C_Init+0x118>
 80031b6:	3801      	subs	r0, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80031be:	3001      	adds	r0, #1
 80031c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031c4:	4218      	tst	r0, r3
 80031c6:	d078      	beq.n	80032ba <HAL_I2C_Init+0x182>
 80031c8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80031cc:	430b      	orrs	r3, r1
 80031ce:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d0:	6821      	ldr	r1, [r4, #0]
 80031d2:	680b      	ldr	r3, [r1, #0]
 80031d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031d8:	69e2      	ldr	r2, [r4, #28]
 80031da:	6a20      	ldr	r0, [r4, #32]
 80031dc:	4302      	orrs	r2, r0
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e2:	6821      	ldr	r1, [r4, #0]
 80031e4:	688b      	ldr	r3, [r1, #8]
 80031e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ee:	6922      	ldr	r2, [r4, #16]
 80031f0:	68e0      	ldr	r0, [r4, #12]
 80031f2:	4302      	orrs	r2, r0
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	68cb      	ldr	r3, [r1, #12]
 80031fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003200:	6962      	ldr	r2, [r4, #20]
 8003202:	69a0      	ldr	r0, [r4, #24]
 8003204:	4302      	orrs	r2, r0
 8003206:	4313      	orrs	r3, r2
 8003208:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	6813      	ldr	r3, [r2, #0]
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	2000      	movs	r0, #0
 8003216:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003218:	2320      	movs	r3, #32
 800321a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003226:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800322a:	f00a fbb9 	bl	800d9a0 <HAL_I2C_MspInit>
 800322e:	e78c      	b.n	800314a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_I2C_Init+0x1a0>)
 8003232:	4298      	cmp	r0, r3
 8003234:	bf8c      	ite	hi
 8003236:	2300      	movhi	r3, #0
 8003238:	2301      	movls	r3, #1
 800323a:	e799      	b.n	8003170 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003240:	fb02 f207 	mul.w	r2, r2, r7
 8003244:	4d25      	ldr	r5, [pc, #148]	; (80032dc <HAL_I2C_Init+0x1a4>)
 8003246:	fba5 5202 	umull	r5, r2, r5, r2
 800324a:	0992      	lsrs	r2, r2, #6
 800324c:	3201      	adds	r2, #1
 800324e:	e7a6      	b.n	800319e <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003250:	68a2      	ldr	r2, [r4, #8]
 8003252:	b9ba      	cbnz	r2, 8003284 <HAL_I2C_Init+0x14c>
 8003254:	1e46      	subs	r6, r0, #1
 8003256:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800325a:	fbb6 f6f7 	udiv	r6, r6, r7
 800325e:	3601      	adds	r6, #1
 8003260:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003264:	fab6 f686 	clz	r6, r6
 8003268:	0976      	lsrs	r6, r6, #5
 800326a:	bb46      	cbnz	r6, 80032be <HAL_I2C_Init+0x186>
 800326c:	b9c2      	cbnz	r2, 80032a0 <HAL_I2C_Init+0x168>
 800326e:	1e42      	subs	r2, r0, #1
 8003270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003274:	fbb2 f2f3 	udiv	r2, r2, r3
 8003278:	3201      	adds	r2, #1
 800327a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800327e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003282:	e7a3      	b.n	80031cc <HAL_I2C_Init+0x94>
 8003284:	1e46      	subs	r6, r0, #1
 8003286:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800328a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800328e:	fbb6 f6f7 	udiv	r6, r6, r7
 8003292:	3601      	adds	r6, #1
 8003294:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003298:	fab6 f686 	clz	r6, r6
 800329c:	0976      	lsrs	r6, r6, #5
 800329e:	e7e4      	b.n	800326a <HAL_I2C_Init+0x132>
 80032a0:	1e42      	subs	r2, r0, #1
 80032a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ae:	3201      	adds	r2, #1
 80032b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80032b4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80032b8:	e788      	b.n	80031cc <HAL_I2C_Init+0x94>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e786      	b.n	80031cc <HAL_I2C_Init+0x94>
 80032be:	2301      	movs	r3, #1
 80032c0:	e784      	b.n	80031cc <HAL_I2C_Init+0x94>
    return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
}
 80032c4:	4770      	bx	lr
    return HAL_ERROR;
 80032c6:	2001      	movs	r0, #1
 80032c8:	e7ac      	b.n	8003224 <HAL_I2C_Init+0xec>
 80032ca:	bf00      	nop
 80032cc:	000186a0 	.word	0x000186a0
 80032d0:	001e847f 	.word	0x001e847f
 80032d4:	431bde83 	.word	0x431bde83
 80032d8:	003d08ff 	.word	0x003d08ff
 80032dc:	10624dd3 	.word	0x10624dd3

080032e0 <HAL_I2C_Mem_Write_IT>:
{
 80032e0:	b430      	push	{r4, r5}
 80032e2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80032e4:	2400      	movs	r4, #0
 80032e6:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80032ec:	b2e4      	uxtb	r4, r4
 80032ee:	2c20      	cmp	r4, #32
 80032f0:	d15c      	bne.n	80033ac <HAL_I2C_Mem_Write_IT+0xcc>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032f2:	4c31      	ldr	r4, [pc, #196]	; (80033b8 <HAL_I2C_Mem_Write_IT+0xd8>)
 80032f4:	6824      	ldr	r4, [r4, #0]
 80032f6:	08e4      	lsrs	r4, r4, #3
 80032f8:	4d30      	ldr	r5, [pc, #192]	; (80033bc <HAL_I2C_Mem_Write_IT+0xdc>)
 80032fa:	fba5 5404 	umull	r5, r4, r5, r4
 80032fe:	0a24      	lsrs	r4, r4, #8
 8003300:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003304:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003308:	9401      	str	r4, [sp, #4]
      count--;
 800330a:	9c01      	ldr	r4, [sp, #4]
 800330c:	3c01      	subs	r4, #1
 800330e:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003310:	9c01      	ldr	r4, [sp, #4]
 8003312:	2c00      	cmp	r4, #0
 8003314:	d03b      	beq.n	800338e <HAL_I2C_Mem_Write_IT+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003316:	6804      	ldr	r4, [r0, #0]
 8003318:	69a5      	ldr	r5, [r4, #24]
 800331a:	f015 0f02 	tst.w	r5, #2
 800331e:	d1f4      	bne.n	800330a <HAL_I2C_Mem_Write_IT+0x2a>
    __HAL_LOCK(hi2c);
 8003320:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8003324:	2d01      	cmp	r5, #1
 8003326:	d045      	beq.n	80033b4 <HAL_I2C_Mem_Write_IT+0xd4>
 8003328:	2501      	movs	r5, #1
 800332a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800332e:	6825      	ldr	r5, [r4, #0]
 8003330:	f015 0f01 	tst.w	r5, #1
 8003334:	d103      	bne.n	800333e <HAL_I2C_Mem_Write_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003336:	6825      	ldr	r5, [r4, #0]
 8003338:	f045 0501 	orr.w	r5, r5, #1
 800333c:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333e:	6805      	ldr	r5, [r0, #0]
 8003340:	682c      	ldr	r4, [r5, #0]
 8003342:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003346:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003348:	2421      	movs	r4, #33	; 0x21
 800334a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800334e:	2440      	movs	r4, #64	; 0x40
 8003350:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	2400      	movs	r4, #0
 8003356:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003358:	9d04      	ldr	r5, [sp, #16]
 800335a:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800335c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8003360:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003362:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 8003364:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003366:	4d16      	ldr	r5, [pc, #88]	; (80033c0 <HAL_I2C_Mem_Write_IT+0xe0>)
 8003368:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800336a:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800336c:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800336e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003370:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003372:	6802      	ldr	r2, [r0, #0]
 8003374:	6813      	ldr	r3, [r2, #0]
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800337c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003380:	6802      	ldr	r2, [r0, #0]
 8003382:	6853      	ldr	r3, [r2, #4]
 8003384:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003388:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 800338a:	4620      	mov	r0, r4
 800338c:	e00f      	b.n	80033ae <HAL_I2C_Mem_Write_IT+0xce>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003392:	2220      	movs	r2, #32
 8003394:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
 80033aa:	e000      	b.n	80033ae <HAL_I2C_Mem_Write_IT+0xce>
    return HAL_BUSY;
 80033ac:	2002      	movs	r0, #2
}
 80033ae:	b002      	add	sp, #8
 80033b0:	bc30      	pop	{r4, r5}
 80033b2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80033b4:	2002      	movs	r0, #2
 80033b6:	e7fa      	b.n	80033ae <HAL_I2C_Mem_Write_IT+0xce>
 80033b8:	2000295c 	.word	0x2000295c
 80033bc:	14f8b589 	.word	0x14f8b589
 80033c0:	ffff0000 	.word	0xffff0000

080033c4 <HAL_I2C_Mem_Read_IT>:
{
 80033c4:	b430      	push	{r4, r5}
 80033c6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80033c8:	2400      	movs	r4, #0
 80033ca:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033cc:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80033d0:	b2e4      	uxtb	r4, r4
 80033d2:	2c20      	cmp	r4, #32
 80033d4:	d163      	bne.n	800349e <HAL_I2C_Mem_Read_IT+0xda>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80033d6:	4c35      	ldr	r4, [pc, #212]	; (80034ac <HAL_I2C_Mem_Read_IT+0xe8>)
 80033d8:	6824      	ldr	r4, [r4, #0]
 80033da:	08e4      	lsrs	r4, r4, #3
 80033dc:	4d34      	ldr	r5, [pc, #208]	; (80034b0 <HAL_I2C_Mem_Read_IT+0xec>)
 80033de:	fba5 5404 	umull	r5, r4, r5, r4
 80033e2:	0a24      	lsrs	r4, r4, #8
 80033e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80033e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80033ec:	9401      	str	r4, [sp, #4]
      count--;
 80033ee:	9c01      	ldr	r4, [sp, #4]
 80033f0:	3c01      	subs	r4, #1
 80033f2:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80033f4:	9c01      	ldr	r4, [sp, #4]
 80033f6:	2c00      	cmp	r4, #0
 80033f8:	d042      	beq.n	8003480 <HAL_I2C_Mem_Read_IT+0xbc>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033fa:	6804      	ldr	r4, [r0, #0]
 80033fc:	69a5      	ldr	r5, [r4, #24]
 80033fe:	f015 0f02 	tst.w	r5, #2
 8003402:	d1f4      	bne.n	80033ee <HAL_I2C_Mem_Read_IT+0x2a>
    __HAL_LOCK(hi2c);
 8003404:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8003408:	2d01      	cmp	r5, #1
 800340a:	d04c      	beq.n	80034a6 <HAL_I2C_Mem_Read_IT+0xe2>
 800340c:	2501      	movs	r5, #1
 800340e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003412:	6825      	ldr	r5, [r4, #0]
 8003414:	f015 0f01 	tst.w	r5, #1
 8003418:	d103      	bne.n	8003422 <HAL_I2C_Mem_Read_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800341a:	6825      	ldr	r5, [r4, #0]
 800341c:	f045 0501 	orr.w	r5, r5, #1
 8003420:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	6805      	ldr	r5, [r0, #0]
 8003424:	682c      	ldr	r4, [r5, #0]
 8003426:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800342a:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800342c:	2422      	movs	r4, #34	; 0x22
 800342e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003432:	2440      	movs	r4, #64	; 0x40
 8003434:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	2400      	movs	r4, #0
 800343a:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800343c:	9d04      	ldr	r5, [sp, #16]
 800343e:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003440:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8003444:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003446:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 8003448:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344a:	4d1a      	ldr	r5, [pc, #104]	; (80034b4 <HAL_I2C_Mem_Read_IT+0xf0>)
 800344c:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800344e:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003450:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003452:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003454:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003456:	6802      	ldr	r2, [r0, #0]
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345e:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003460:	6802      	ldr	r2, [r0, #0]
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800346a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if (hi2c->XferSize > 0U)
 800346e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003470:	b123      	cbz	r3, 800347c <HAL_I2C_Mem_Read_IT+0xb8>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003472:	6802      	ldr	r2, [r0, #0]
 8003474:	6853      	ldr	r3, [r2, #4]
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347a:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 800347c:	2000      	movs	r0, #0
 800347e:	e00f      	b.n	80034a0 <HAL_I2C_Mem_Read_IT+0xdc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003480:	2300      	movs	r3, #0
 8003482:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	2220      	movs	r2, #32
 8003486:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003490:	f042 0220 	orr.w	r2, r2, #32
 8003494:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003496:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 800349a:	2001      	movs	r0, #1
 800349c:	e000      	b.n	80034a0 <HAL_I2C_Mem_Read_IT+0xdc>
    return HAL_BUSY;
 800349e:	2002      	movs	r0, #2
}
 80034a0:	b002      	add	sp, #8
 80034a2:	bc30      	pop	{r4, r5}
 80034a4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80034a6:	2002      	movs	r0, #2
 80034a8:	e7fa      	b.n	80034a0 <HAL_I2C_Mem_Read_IT+0xdc>
 80034aa:	bf00      	nop
 80034ac:	2000295c 	.word	0x2000295c
 80034b0:	14f8b589 	.word	0x14f8b589
 80034b4:	ffff0000 	.word	0xffff0000

080034b8 <HAL_I2C_MasterTxCpltCallback>:
}
 80034b8:	4770      	bx	lr

080034ba <HAL_I2C_MasterRxCpltCallback>:
}
 80034ba:	4770      	bx	lr

080034bc <HAL_I2C_SlaveTxCpltCallback>:
}
 80034bc:	4770      	bx	lr

080034be <I2C_SlaveTransmit_TXE>:
{
 80034be:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034c4:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80034c6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	b183      	cbz	r3, 80034ee <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80034ce:	6803      	ldr	r3, [r0, #0]
 80034d0:	7809      	ldrb	r1, [r1, #0]
 80034d2:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80034d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034d6:	3301      	adds	r3, #1
 80034d8:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80034da:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b90b      	cbnz	r3, 80034ee <I2C_SlaveTransmit_TXE+0x30>
 80034ea:	2a29      	cmp	r2, #41	; 0x29
 80034ec:	d000      	beq.n	80034f0 <I2C_SlaveTransmit_TXE+0x32>
}
 80034ee:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f0:	6802      	ldr	r2, [r0, #0]
 80034f2:	6853      	ldr	r3, [r2, #4]
 80034f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f8:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034fa:	2321      	movs	r3, #33	; 0x21
 80034fc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034fe:	2328      	movs	r3, #40	; 0x28
 8003500:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003504:	f7ff ffda 	bl	80034bc <HAL_I2C_SlaveTxCpltCallback>
}
 8003508:	e7f1      	b.n	80034ee <I2C_SlaveTransmit_TXE+0x30>

0800350a <HAL_I2C_SlaveRxCpltCallback>:
}
 800350a:	4770      	bx	lr

0800350c <I2C_SlaveReceive_RXNE>:
{
 800350c:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003512:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003514:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	b183      	cbz	r3, 800353c <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	6803      	ldr	r3, [r0, #0]
 800351c:	6919      	ldr	r1, [r3, #16]
 800351e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003520:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003522:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003524:	3301      	adds	r3, #1
 8003526:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003528:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29b      	uxth	r3, r3
 8003530:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003532:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	b90b      	cbnz	r3, 800353c <I2C_SlaveReceive_RXNE+0x30>
 8003538:	2a2a      	cmp	r2, #42	; 0x2a
 800353a:	d000      	beq.n	800353e <I2C_SlaveReceive_RXNE+0x32>
}
 800353c:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800353e:	6802      	ldr	r2, [r0, #0]
 8003540:	6853      	ldr	r3, [r2, #4]
 8003542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003546:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003548:	2322      	movs	r3, #34	; 0x22
 800354a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800354c:	2328      	movs	r3, #40	; 0x28
 800354e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003552:	f7ff ffda 	bl	800350a <HAL_I2C_SlaveRxCpltCallback>
}
 8003556:	e7f1      	b.n	800353c <I2C_SlaveReceive_RXNE+0x30>

08003558 <HAL_I2C_AddrCallback>:
}
 8003558:	4770      	bx	lr

0800355a <I2C_Slave_ADDR>:
{
 800355a:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800355c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003560:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003564:	2b28      	cmp	r3, #40	; 0x28
 8003566:	d007      	beq.n	8003578 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003568:	6803      	ldr	r3, [r0, #0]
 800356a:	f06f 0202 	mvn.w	r2, #2
 800356e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003570:	2300      	movs	r3, #0
 8003572:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003576:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003578:	6802      	ldr	r2, [r0, #0]
 800357a:	6853      	ldr	r3, [r2, #4]
 800357c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003580:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003582:	f011 0f04 	tst.w	r1, #4
 8003586:	d00b      	beq.n	80035a0 <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003588:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800358a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800358e:	d109      	bne.n	80035a4 <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003590:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8003592:	2100      	movs	r1, #0
 8003594:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003598:	4619      	mov	r1, r3
 800359a:	f7ff ffdd 	bl	8003558 <HAL_I2C_AddrCallback>
 800359e:	e7ea      	b.n	8003576 <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e7f2      	b.n	800358a <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035a4:	8b02      	ldrh	r2, [r0, #24]
 80035a6:	e7f4      	b.n	8003592 <I2C_Slave_ADDR+0x38>

080035a8 <HAL_I2C_ListenCpltCallback>:
}
 80035a8:	4770      	bx	lr
	...

080035ac <I2C_Slave_AF>:
{
 80035ac:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80035b6:	2a08      	cmp	r2, #8
 80035b8:	d001      	beq.n	80035be <I2C_Slave_AF+0x12>
 80035ba:	2a20      	cmp	r2, #32
 80035bc:	d101      	bne.n	80035c2 <I2C_Slave_AF+0x16>
 80035be:	2b28      	cmp	r3, #40	; 0x28
 80035c0:	d006      	beq.n	80035d0 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80035c2:	2b21      	cmp	r3, #33	; 0x21
 80035c4:	d01e      	beq.n	8003604 <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <I2C_Slave_AF+0x90>)
 80035d2:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035d4:	6802      	ldr	r2, [r0, #0]
 80035d6:	6853      	ldr	r3, [r2, #4]
 80035d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035dc:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035de:	6803      	ldr	r3, [r0, #0]
 80035e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e6:	6802      	ldr	r2, [r0, #0]
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ee:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f4:	2220      	movs	r2, #32
 80035f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80035fe:	f7ff ffd3 	bl	80035a8 <HAL_I2C_ListenCpltCallback>
 8003602:	e7e4      	b.n	80035ce <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <I2C_Slave_AF+0x90>)
 8003606:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003608:	2321      	movs	r3, #33	; 0x21
 800360a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800360c:	2320      	movs	r3, #32
 800360e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003612:	2300      	movs	r3, #0
 8003614:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003618:	6802      	ldr	r2, [r0, #0]
 800361a:	6853      	ldr	r3, [r2, #4]
 800361c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003620:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003622:	6803      	ldr	r3, [r0, #0]
 8003624:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003628:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	6802      	ldr	r2, [r0, #0]
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003632:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003634:	f7ff ff42 	bl	80034bc <HAL_I2C_SlaveTxCpltCallback>
 8003638:	e7c9      	b.n	80035ce <I2C_Slave_AF+0x22>
 800363a:	bf00      	nop
 800363c:	ffff0000 	.word	0xffff0000

08003640 <I2C_MasterTransmit_TXE>:
{
 8003640:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003642:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003648:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800364c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800364e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003650:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003652:	b909      	cbnz	r1, 8003658 <I2C_MasterTransmit_TXE+0x18>
 8003654:	2b21      	cmp	r3, #33	; 0x21
 8003656:	d004      	beq.n	8003662 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003658:	2b21      	cmp	r3, #33	; 0x21
 800365a:	d03b      	beq.n	80036d4 <I2C_MasterTransmit_TXE+0x94>
 800365c:	2a40      	cmp	r2, #64	; 0x40
 800365e:	d037      	beq.n	80036d0 <I2C_MasterTransmit_TXE+0x90>
}
 8003660:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003662:	2c08      	cmp	r4, #8
 8003664:	d004      	beq.n	8003670 <I2C_MasterTransmit_TXE+0x30>
 8003666:	2c20      	cmp	r4, #32
 8003668:	d002      	beq.n	8003670 <I2C_MasterTransmit_TXE+0x30>
 800366a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800366e:	d119      	bne.n	80036a4 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003670:	6802      	ldr	r2, [r0, #0]
 8003672:	6853      	ldr	r3, [r2, #4]
 8003674:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003678:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	6802      	ldr	r2, [r0, #0]
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	2300      	movs	r3, #0
 8003686:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003688:	2320      	movs	r3, #32
 800368a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d015      	beq.n	80036c4 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	2300      	movs	r3, #0
 800369a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800369e:	f7ff ff0b 	bl	80034b8 <HAL_I2C_MasterTxCpltCallback>
 80036a2:	e7dd      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a4:	6802      	ldr	r2, [r0, #0]
 80036a6:	6853      	ldr	r3, [r2, #4]
 80036a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036ac:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036ae:	2311      	movs	r3, #17
 80036b0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	2320      	movs	r3, #32
 80036ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036be:	f7ff fefb 	bl	80034b8 <HAL_I2C_MasterTxCpltCallback>
 80036c2:	e7cd      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036ca:	f00e fdfd 	bl	80122c8 <HAL_I2C_MemTxCpltCallback>
 80036ce:	e7c7      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036d0:	2b22      	cmp	r3, #34	; 0x22
 80036d2:	d1c5      	bne.n	8003660 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 80036d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b92b      	cbnz	r3, 80036e6 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036da:	6802      	ldr	r2, [r0, #0]
 80036dc:	6853      	ldr	r3, [r2, #4]
 80036de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e2:	6053      	str	r3, [r2, #4]
 80036e4:	e7bc      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036e6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d00c      	beq.n	800370a <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	7812      	ldrb	r2, [r2, #0]
 80036f6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036fa:	3301      	adds	r3, #1
 80036fc:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 80036fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003708:	e7aa      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
        if (hi2c->EventCount == 0U)
 800370a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800370c:	b99b      	cbnz	r3, 8003736 <I2C_MasterTransmit_TXE+0xf6>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800370e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d008      	beq.n	8003726 <I2C_MasterTransmit_TXE+0xe6>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003714:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003716:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800371a:	6802      	ldr	r2, [r0, #0]
 800371c:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 800371e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003720:	3301      	adds	r3, #1
 8003722:	6503      	str	r3, [r0, #80]	; 0x50
 8003724:	e79c      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003726:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003728:	6802      	ldr	r2, [r0, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2U;
 800372e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003730:	3302      	adds	r3, #2
 8003732:	6503      	str	r3, [r0, #80]	; 0x50
 8003734:	e794      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
        else if (hi2c->EventCount == 1U)
 8003736:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003738:	2b01      	cmp	r3, #1
 800373a:	d019      	beq.n	8003770 <I2C_MasterTransmit_TXE+0x130>
        else if (hi2c->EventCount == 2U)
 800373c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800373e:	2b02      	cmp	r3, #2
 8003740:	d18e      	bne.n	8003660 <I2C_MasterTransmit_TXE+0x20>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003742:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b22      	cmp	r3, #34	; 0x22
 800374a:	d019      	beq.n	8003780 <I2C_MasterTransmit_TXE+0x140>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800374c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b21      	cmp	r3, #33	; 0x21
 8003754:	d184      	bne.n	8003660 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003756:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003758:	6803      	ldr	r3, [r0, #0]
 800375a:	7812      	ldrb	r2, [r2, #0]
 800375c:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800375e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003760:	3301      	adds	r3, #1
 8003762:	6243      	str	r3, [r0, #36]	; 0x24
            hi2c->XferCount--;
 8003764:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29b      	uxth	r3, r3
 800376c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800376e:	e777      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003770:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003772:	6802      	ldr	r2, [r0, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8003778:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800377a:	3301      	adds	r3, #1
 800377c:	6503      	str	r3, [r0, #80]	; 0x50
 800377e:	e76f      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003780:	6802      	ldr	r2, [r0, #0]
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e769      	b.n	8003660 <I2C_MasterTransmit_TXE+0x20>

0800378c <I2C_MasterTransmit_BTF>:
{
 800378c:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800378e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003790:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b21      	cmp	r3, #33	; 0x21
 8003798:	d000      	beq.n	800379c <I2C_MasterTransmit_BTF+0x10>
}
 800379a:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 800379c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	b163      	cbz	r3, 80037bc <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80037a4:	6803      	ldr	r3, [r0, #0]
 80037a6:	7812      	ldrb	r2, [r2, #0]
 80037a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037ac:	3301      	adds	r3, #1
 80037ae:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80037b0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	8543      	strh	r3, [r0, #42]	; 0x2a
 80037ba:	e7ee      	b.n	800379a <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037bc:	2a08      	cmp	r2, #8
 80037be:	d004      	beq.n	80037ca <I2C_MasterTransmit_BTF+0x3e>
 80037c0:	2a20      	cmp	r2, #32
 80037c2:	d002      	beq.n	80037ca <I2C_MasterTransmit_BTF+0x3e>
 80037c4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80037c8:	d119      	bne.n	80037fe <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ca:	6802      	ldr	r2, [r0, #0]
 80037cc:	6853      	ldr	r3, [r2, #4]
 80037ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037d2:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	6802      	ldr	r2, [r0, #0]
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037dc:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	2300      	movs	r3, #0
 80037e0:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	2320      	movs	r3, #32
 80037e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d015      	beq.n	800381e <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f8:	f7ff fe5e 	bl	80034b8 <HAL_I2C_MasterTxCpltCallback>
}
 80037fc:	e7cd      	b.n	800379a <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fe:	6802      	ldr	r2, [r0, #0]
 8003800:	6853      	ldr	r3, [r2, #4]
 8003802:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003806:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003808:	2311      	movs	r3, #17
 800380a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	2300      	movs	r3, #0
 800380e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003812:	2320      	movs	r3, #32
 8003814:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003818:	f7ff fe4e 	bl	80034b8 <HAL_I2C_MasterTxCpltCallback>
 800381c:	e7bd      	b.n	800379a <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	2300      	movs	r3, #0
 8003820:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003824:	f00e fd50 	bl	80122c8 <HAL_I2C_MemTxCpltCallback>
 8003828:	e7b7      	b.n	800379a <I2C_MasterTransmit_BTF+0xe>

0800382a <I2C_MasterReceive_RXNE>:
{
 800382a:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800382c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b22      	cmp	r3, #34	; 0x22
 8003834:	d000      	beq.n	8003838 <I2C_MasterReceive_RXNE+0xe>
}
 8003836:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8003838:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800383c:	2b03      	cmp	r3, #3
 800383e:	d915      	bls.n	800386c <I2C_MasterReceive_RXNE+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	6803      	ldr	r3, [r0, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003846:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003848:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800384a:	3301      	adds	r3, #1
 800384c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800384e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003858:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d1ea      	bne.n	8003836 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003860:	6802      	ldr	r2, [r0, #0]
 8003862:	6853      	ldr	r3, [r2, #4]
 8003864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003868:	6053      	str	r3, [r2, #4]
 800386a:	e7e4      	b.n	8003836 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800386c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800386e:	2a02      	cmp	r2, #2
 8003870:	d0e1      	beq.n	8003836 <I2C_MasterReceive_RXNE+0xc>
 8003872:	2b01      	cmp	r3, #1
 8003874:	d8df      	bhi.n	8003836 <I2C_MasterReceive_RXNE+0xc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	6802      	ldr	r2, [r0, #0]
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003880:	6802      	ldr	r2, [r0, #0]
 8003882:	6853      	ldr	r3, [r2, #4]
 8003884:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003888:	6053      	str	r3, [r2, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	6803      	ldr	r3, [r0, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003890:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003892:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003894:	3301      	adds	r3, #1
 8003896:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003898:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	2320      	movs	r3, #32
 80038a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d007      	beq.n	80038c2 <I2C_MasterReceive_RXNE+0x98>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038b8:	2312      	movs	r3, #18
 80038ba:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80038bc:	f7ff fdfd 	bl	80034ba <HAL_I2C_MasterRxCpltCallback>
}
 80038c0:	e7b9      	b.n	8003836 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80038c8:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80038ca:	f00e fcb3 	bl	8012234 <HAL_I2C_MemRxCpltCallback>
 80038ce:	e7b2      	b.n	8003836 <I2C_MasterReceive_RXNE+0xc>

080038d0 <I2C_MasterReceive_BTF>:
{
 80038d0:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80038d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d014      	beq.n	8003906 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 80038dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d022      	beq.n	800392a <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 80038e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d039      	beq.n	8003960 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	6803      	ldr	r3, [r0, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038f6:	3301      	adds	r3, #1
 80038f8:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80038fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29b      	uxth	r3, r3
 8003902:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003904:	e010      	b.n	8003928 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003906:	6802      	ldr	r2, [r0, #0]
 8003908:	6853      	ldr	r3, [r2, #4]
 800390a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390e:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	6803      	ldr	r3, [r0, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003916:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003918:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800391a:	3301      	adds	r3, #1
 800391c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800391e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8003928:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800392a:	6801      	ldr	r1, [r0, #0]
 800392c:	684b      	ldr	r3, [r1, #4]
 800392e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003932:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003934:	2a04      	cmp	r2, #4
 8003936:	d006      	beq.n	8003946 <I2C_MasterReceive_BTF+0x76>
 8003938:	2a02      	cmp	r2, #2
 800393a:	d004      	beq.n	8003946 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	6802      	ldr	r2, [r0, #0]
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003944:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003946:	6803      	ldr	r3, [r0, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800394c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800394e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003950:	3301      	adds	r3, #1
 8003952:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003954:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29b      	uxth	r3, r3
 800395c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800395e:	e7e3      	b.n	8003928 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003960:	2a01      	cmp	r2, #1
 8003962:	d00b      	beq.n	800397c <I2C_MasterReceive_BTF+0xac>
 8003964:	2a10      	cmp	r2, #16
 8003966:	d009      	beq.n	800397c <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003968:	2a04      	cmp	r2, #4
 800396a:	d038      	beq.n	80039de <I2C_MasterReceive_BTF+0x10e>
 800396c:	2a02      	cmp	r2, #2
 800396e:	d036      	beq.n	80039de <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	6802      	ldr	r2, [r0, #0]
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e004      	b.n	8003986 <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397c:	6802      	ldr	r2, [r0, #0]
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003984:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	6803      	ldr	r3, [r0, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800398c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800398e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003990:	1c53      	adds	r3, r2, #1
 8003992:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003994:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29b      	uxth	r3, r3
 800399c:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	6803      	ldr	r3, [r0, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80039a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039a6:	3301      	adds	r3, #1
 80039a8:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80039aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039b4:	6802      	ldr	r2, [r0, #0]
 80039b6:	6853      	ldr	r3, [r2, #4]
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039be:	2320      	movs	r3, #32
 80039c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d00d      	beq.n	80039ea <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039d4:	2312      	movs	r3, #18
 80039d6:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d8:	f7ff fd6f 	bl	80034ba <HAL_I2C_MasterRxCpltCallback>
 80039dc:	e7a4      	b.n	8003928 <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	6802      	ldr	r2, [r0, #0]
 80039e0:	6813      	ldr	r3, [r2, #0]
 80039e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e7cd      	b.n	8003986 <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f0:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039f2:	f00e fc1f 	bl	8012234 <HAL_I2C_MemRxCpltCallback>
 80039f6:	e797      	b.n	8003928 <I2C_MasterReceive_BTF+0x58>

080039f8 <HAL_I2C_AbortCpltCallback>:
}
 80039f8:	4770      	bx	lr

080039fa <I2C_DMAAbort>:
{
 80039fa:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039fe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003a02:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003a04:	2300      	movs	r3, #0
 8003a06:	63cb      	str	r3, [r1, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003a08:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003a0a:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0c:	6804      	ldr	r4, [r0, #0]
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003a14:	6021      	str	r1, [r4, #0]
  hi2c->XferCount = 0U;
 8003a16:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003a18:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003a1a:	650b      	str	r3, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003a1c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003a1e:	650b      	str	r3, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8003a20:	6801      	ldr	r1, [r0, #0]
 8003a22:	680b      	ldr	r3, [r1, #0]
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b60      	cmp	r3, #96	; 0x60
 8003a32:	d00d      	beq.n	8003a50 <I2C_DMAAbort+0x56>
 8003a34:	b2d2      	uxtb	r2, r2
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a36:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003a3a:	2a28      	cmp	r2, #40	; 0x28
 8003a3c:	d012      	beq.n	8003a64 <I2C_DMAAbort+0x6a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	2320      	movs	r3, #32
 8003a40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a4a:	f00e fb71 	bl	8012130 <HAL_I2C_ErrorCallback>
}
 8003a4e:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a50:	2320      	movs	r3, #32
 8003a52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a5c:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a5e:	f7ff ffcb 	bl	80039f8 <HAL_I2C_AbortCpltCallback>
 8003a62:	e7f4      	b.n	8003a4e <I2C_DMAAbort+0x54>
      __HAL_I2C_ENABLE(hi2c);
 8003a64:	6802      	ldr	r2, [r0, #0]
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6e:	6802      	ldr	r2, [r0, #0]
 8003a70:	6813      	ldr	r3, [r2, #0]
 8003a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a76:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a7c:	2328      	movs	r3, #40	; 0x28
 8003a7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003a82:	e7e2      	b.n	8003a4a <I2C_DMAAbort+0x50>

08003a84 <I2C_ITError>:
{
 8003a84:	b510      	push	{r4, lr}
 8003a86:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a8e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	2a10      	cmp	r2, #16
 8003a96:	d033      	beq.n	8003b00 <I2C_ITError+0x7c>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a98:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8003a9c:	2a28      	cmp	r2, #40	; 0x28
 8003a9e:	d037      	beq.n	8003b10 <I2C_ITError+0x8c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	6852      	ldr	r2, [r2, #4]
 8003aa4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003aa8:	d104      	bne.n	8003ab4 <I2C_ITError+0x30>
 8003aaa:	2b60      	cmp	r3, #96	; 0x60
 8003aac:	d002      	beq.n	8003ab4 <I2C_ITError+0x30>
      hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003ac4:	d048      	beq.n	8003b58 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003acc:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ace:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ad0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d020      	beq.n	8003b1c <I2C_ITError+0x98>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <I2C_ITError+0x160>)
 8003adc:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ade:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003ae0:	f7fe f8f6 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d049      	beq.n	8003b7c <I2C_ITError+0xf8>
        __HAL_I2C_DISABLE(hi2c);
 8003ae8:	6822      	ldr	r2, [r4, #0]
 8003aea:	6813      	ldr	r3, [r2, #0]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	2320      	movs	r3, #32
 8003af4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003af8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003afa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003afc:	4798      	blx	r3
 8003afe:	e03d      	b.n	8003b7c <I2C_ITError+0xf8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b00:	2b22      	cmp	r3, #34	; 0x22
 8003b02:	d1c9      	bne.n	8003a98 <I2C_ITError+0x14>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b04:	6801      	ldr	r1, [r0, #0]
 8003b06:	680a      	ldr	r2, [r1, #0]
 8003b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0c:	600a      	str	r2, [r1, #0]
 8003b0e:	e7c3      	b.n	8003a98 <I2C_ITError+0x14>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b14:	2328      	movs	r3, #40	; 0x28
 8003b16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003b1a:	e7cf      	b.n	8003abc <I2C_ITError+0x38>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b1e:	4a31      	ldr	r2, [pc, #196]	; (8003be4 <I2C_ITError+0x160>)
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b24:	f7fe f8d4 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003b28:	b340      	cbz	r0, 8003b7c <I2C_ITError+0xf8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b32:	d005      	beq.n	8003b40 <I2C_ITError+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b38:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003b40:	6822      	ldr	r2, [r4, #0]
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b54:	4798      	blx	r3
 8003b56:	e011      	b.n	8003b7c <I2C_ITError+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b58:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	2a60      	cmp	r2, #96	; 0x60
 8003b60:	d016      	beq.n	8003b90 <I2C_ITError+0x10c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b68:	d005      	beq.n	8003b76 <I2C_ITError+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b6e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b72:	3301      	adds	r3, #1
 8003b74:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003b76:	4620      	mov	r0, r4
 8003b78:	f00e fada 	bl	8012130 <HAL_I2C_ErrorCallback>
  CurrentState = hi2c->State;
 8003b7c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b84:	f012 0f04 	tst.w	r2, #4
 8003b88:	d001      	beq.n	8003b8e <I2C_ITError+0x10a>
 8003b8a:	2b28      	cmp	r3, #40	; 0x28
 8003b8c:	d018      	beq.n	8003bc0 <I2C_ITError+0x13c>
}
 8003b8e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	2220      	movs	r2, #32
 8003b92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b96:	2200      	movs	r2, #0
 8003b98:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ba0:	d005      	beq.n	8003bae <I2C_ITError+0x12a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ba6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003baa:	3301      	adds	r3, #1
 8003bac:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7ff ff1d 	bl	80039f8 <HAL_I2C_AbortCpltCallback>
 8003bbe:	e7dd      	b.n	8003b7c <I2C_ITError+0xf8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc0:	6822      	ldr	r2, [r4, #0]
 8003bc2:	6853      	ldr	r3, [r2, #4]
 8003bc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bc8:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <I2C_ITError+0x164>)
 8003bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff fce3 	bl	80035a8 <HAL_I2C_ListenCpltCallback>
}
 8003be2:	e7d4      	b.n	8003b8e <I2C_ITError+0x10a>
 8003be4:	080039fb 	.word	0x080039fb
 8003be8:	ffff0000 	.word	0xffff0000

08003bec <I2C_Slave_STOPF>:
{
 8003bec:	b530      	push	{r4, r5, lr}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bf2:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8003bf6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bf8:	6802      	ldr	r2, [r0, #0]
 8003bfa:	6853      	ldr	r3, [r2, #4]
 8003bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c00:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	6803      	ldr	r3, [r0, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	9201      	str	r2, [sp, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	6802      	ldr	r2, [r0, #0]
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1e:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c20:	6803      	ldr	r3, [r0, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003c28:	d038      	beq.n	8003c9c <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c2a:	2d22      	cmp	r5, #34	; 0x22
 8003c2c:	d021      	beq.n	8003c72 <I2C_Slave_STOPF+0x86>
 8003c2e:	2d2a      	cmp	r5, #42	; 0x2a
 8003c30:	d01f      	beq.n	8003c72 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c32:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	6852      	ldr	r2, [r2, #4]
 8003c38:	b292      	uxth	r2, r2
 8003c3a:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003c3c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	b11a      	cbz	r2, 8003c4a <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c42:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c44:	f042 0204 	orr.w	r2, r2, #4
 8003c48:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c50:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c54:	f7fe f93e 	bl	8001ed4 <HAL_DMA_GetState>
 8003c58:	2801      	cmp	r0, #1
 8003c5a:	d01f      	beq.n	8003c9c <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c5e:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <I2C_Slave_STOPF+0x184>)
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c62:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c64:	f7fe f834 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003c68:	b1c0      	cbz	r0, 8003c9c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003c6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003c6e:	4798      	blx	r3
 8003c70:	e014      	b.n	8003c9c <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6852      	ldr	r2, [r2, #4]
 8003c78:	b292      	uxth	r2, r2
 8003c7a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003c7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	b11a      	cbz	r2, 8003c8a <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c84:	f042 0204 	orr.w	r2, r2, #4
 8003c88:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c90:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c94:	f7fe f91e 	bl	8001ed4 <HAL_DMA_GetState>
 8003c98:	2801      	cmp	r0, #1
 8003c9a:	d142      	bne.n	8003d22 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8003c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b333      	cbz	r3, 8003cf0 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	f012 0f04 	tst.w	r2, #4
 8003caa:	d00a      	beq.n	8003cc2 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003cca:	d00a      	beq.n	8003ce2 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8003ce2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b11b      	cbz	r3, 8003cf0 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf2:	bb13      	cbnz	r3, 8003d3a <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cf4:	2d2a      	cmp	r5, #42	; 0x2a
 8003cf6:	d025      	beq.n	8003d44 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cf8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b28      	cmp	r3, #40	; 0x28
 8003d00:	d029      	beq.n	8003d56 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d04:	2b22      	cmp	r3, #34	; 0x22
 8003d06:	d001      	beq.n	8003d0c <I2C_Slave_STOPF+0x120>
 8003d08:	2d22      	cmp	r5, #34	; 0x22
 8003d0a:	d119      	bne.n	8003d40 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	2220      	movs	r2, #32
 8003d12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7ff fbf5 	bl	800350a <HAL_I2C_SlaveRxCpltCallback>
}
 8003d20:	e00e      	b.n	8003d40 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <I2C_Slave_STOPF+0x184>)
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d2a:	f7fd ffd1 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d0b4      	beq.n	8003c9c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d34:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003d36:	4798      	blx	r3
 8003d38:	e7b0      	b.n	8003c9c <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fea2 	bl	8003a84 <I2C_ITError>
}
 8003d40:	b003      	add	sp, #12
 8003d42:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d48:	2328      	movs	r3, #40	; 0x28
 8003d4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff fbdb 	bl	800350a <HAL_I2C_SlaveRxCpltCallback>
 8003d54:	e7d0      	b.n	8003cf8 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <I2C_Slave_STOPF+0x188>)
 8003d58:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff fc1d 	bl	80035a8 <HAL_I2C_ListenCpltCallback>
 8003d6e:	e7e7      	b.n	8003d40 <I2C_Slave_STOPF+0x154>
 8003d70:	080039fb 	.word	0x080039fb
 8003d74:	ffff0000 	.word	0xffff0000

08003d78 <HAL_I2C_EV_IRQHandler>:
{
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d7c:	6802      	ldr	r2, [r0, #0]
 8003d7e:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d80:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d82:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d86:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d88:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d014      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x42>
 8003d90:	b2c8      	uxtb	r0, r1
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d011      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d071      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x108>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d9c:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8003d9e:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da0:	f013 0f02 	tst.w	r3, #2
 8003da4:	d06f      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x10e>
 8003da6:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003daa:	d06c      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x10e>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dae:	b103      	cbz	r3, 8003db2 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db0:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003db2:	4620      	mov	r0, r4
 8003db4:	f7ff fbd1 	bl	800355a <I2C_Slave_ADDR>
}
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dba:	6990      	ldr	r0, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dbc:	6953      	ldr	r3, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003dbe:	f013 0101 	ands.w	r1, r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x58>
 8003dc4:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003dc8:	d0f6      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
 8003dca:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003dce:	d0f3      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd0:	b111      	cbz	r1, 8003dd8 <HAL_I2C_EV_IRQHandler+0x60>
 8003dd2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003dd6:	d125      	bne.n	8003e24 <HAL_I2C_EV_IRQHandler+0xac>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd8:	f013 0f08 	tst.w	r3, #8
 8003ddc:	d002      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x6c>
 8003dde:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003de2:	d126      	bne.n	8003e32 <HAL_I2C_EV_IRQHandler+0xba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de4:	f013 0f02 	tst.w	r3, #2
 8003de8:	d002      	beq.n	8003df0 <HAL_I2C_EV_IRQHandler+0x78>
 8003dea:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003dee:	d124      	bne.n	8003e3a <HAL_I2C_EV_IRQHandler+0xc2>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003df0:	f010 0f04 	tst.w	r0, #4
 8003df4:	d029      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0xd2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003df6:	6852      	ldr	r2, [r2, #4]
 8003df8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003dfc:	d1dc      	bne.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dfe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e02:	d005      	beq.n	8003e10 <HAL_I2C_EV_IRQHandler+0x98>
 8003e04:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003e08:	d002      	beq.n	8003e10 <HAL_I2C_EV_IRQHandler+0x98>
 8003e0a:	f013 0f04 	tst.w	r3, #4
 8003e0e:	d018      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0xca>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e10:	f013 0f04 	tst.w	r3, #4
 8003e14:	d0d0      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
 8003e16:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003e1a:	d0cd      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_BTF(hi2c);
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fcb5 	bl	800378c <I2C_MasterTransmit_BTF>
 8003e22:	e7c9      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7ff f977 	bl	8003118 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7fe ffe3 	bl	8002df6 <I2C_Master_SB>
 8003e30:	e7c2      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff f836 	bl	8002ea4 <I2C_Master_ADD10>
 8003e38:	e7be      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7ff f849 	bl	8002ed2 <I2C_Master_ADDR>
 8003e40:	e7ba      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7ff fbfc 	bl	8003640 <I2C_MasterTransmit_TXE>
 8003e48:	e7b6      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e4a:	6852      	ldr	r2, [r2, #4]
 8003e4c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003e50:	d1b2      	bne.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e56:	d005      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0xec>
 8003e58:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003e5c:	d002      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0xec>
 8003e5e:	f013 0f04 	tst.w	r3, #4
 8003e62:	d009      	beq.n	8003e78 <HAL_I2C_EV_IRQHandler+0x100>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e64:	f013 0f04 	tst.w	r3, #4
 8003e68:	d0a6      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
 8003e6a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003e6e:	d0a3      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8003e70:	4620      	mov	r0, r4
 8003e72:	f7ff fd2d 	bl	80038d0 <I2C_MasterReceive_BTF>
 8003e76:	e79f      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f7ff fcd6 	bl	800382a <I2C_MasterReceive_RXNE>
 8003e7e:	e79b      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e80:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e82:	6953      	ldr	r3, [r2, #20]
 8003e84:	e78c      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e86:	f013 0f10 	tst.w	r3, #16
 8003e8a:	d002      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x11a>
 8003e8c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003e90:	d117      	bne.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x14a>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e92:	2821      	cmp	r0, #33	; 0x21
 8003e94:	d019      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x152>
 8003e96:	2829      	cmp	r0, #41	; 0x29
 8003e98:	d017      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x152>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e9e:	d005      	beq.n	8003eac <HAL_I2C_EV_IRQHandler+0x134>
 8003ea0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003ea4:	d002      	beq.n	8003eac <HAL_I2C_EV_IRQHandler+0x134>
 8003ea6:	f013 0f04 	tst.w	r3, #4
 8003eaa:	d027      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x184>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eac:	f013 0f04 	tst.w	r3, #4
 8003eb0:	d082      	beq.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
 8003eb2:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003eb6:	f43f af7f 	beq.w	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7ff f91c 	bl	80030f8 <I2C_SlaveReceive_BTF>
      }
 8003ec0:	e77a      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff fe92 	bl	8003bec <I2C_Slave_STOPF>
 8003ec8:	e776      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ece:	d005      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x164>
 8003ed0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003ed4:	d002      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x164>
 8003ed6:	f013 0f04 	tst.w	r3, #4
 8003eda:	d00b      	beq.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x17c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003edc:	f013 0f04 	tst.w	r3, #4
 8003ee0:	f43f af6a 	beq.w	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
 8003ee4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003ee8:	f43f af66 	beq.w	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8003eec:	4620      	mov	r0, r4
 8003eee:	f7ff f8f3 	bl	80030d8 <I2C_SlaveTransmit_BTF>
 8003ef2:	e761      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff fae2 	bl	80034be <I2C_SlaveTransmit_TXE>
 8003efa:	e75d      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7ff fb05 	bl	800350c <I2C_SlaveReceive_RXNE>
 8003f02:	e759      	b.n	8003db8 <HAL_I2C_EV_IRQHandler+0x40>

08003f04 <HAL_I2C_ER_IRQHandler>:
{
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f08:	6803      	ldr	r3, [r0, #0]
 8003f0a:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f0c:	685f      	ldr	r7, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f0e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003f12:	d007      	beq.n	8003f24 <HAL_I2C_ER_IRQHandler+0x20>
 8003f14:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f18:	d03b      	beq.n	8003f92 <HAL_I2C_ER_IRQHandler+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1e:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8003f20:	2601      	movs	r6, #1
 8003f22:	e000      	b.n	8003f26 <HAL_I2C_ER_IRQHandler+0x22>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f24:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f26:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003f2a:	d008      	beq.n	8003f3e <HAL_I2C_ER_IRQHandler+0x3a>
 8003f2c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f30:	d005      	beq.n	8003f3e <HAL_I2C_ER_IRQHandler+0x3a>
    error |= HAL_I2C_ERROR_ARLO;
 8003f32:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003f3c:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f3e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003f42:	d018      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0x72>
 8003f44:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f48:	d015      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0x72>
    tmp1 = hi2c->Mode;
 8003f4a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003f4e:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8003f50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f52:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 8003f54:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003f58:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8003f5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d01a      	beq.n	8003f96 <HAL_I2C_ER_IRQHandler+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f66:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8003f68:	f046 0604 	orr.w	r6, r6, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003f6c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d01d      	beq.n	8003fb2 <HAL_I2C_ER_IRQHandler+0xae>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f76:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8003f7a:	d008      	beq.n	8003f8e <HAL_I2C_ER_IRQHandler+0x8a>
 8003f7c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003f80:	d005      	beq.n	8003f8e <HAL_I2C_ER_IRQHandler+0x8a>
    error |= HAL_I2C_ERROR_OVR;
 8003f82:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f8c:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8003f8e:	b9b6      	cbnz	r6, 8003fbe <HAL_I2C_ER_IRQHandler+0xba>
}
 8003f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f92:	2600      	movs	r6, #0
 8003f94:	e7c7      	b.n	8003f26 <HAL_I2C_ER_IRQHandler+0x22>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f96:	2900      	cmp	r1, #0
 8003f98:	d1e2      	bne.n	8003f60 <HAL_I2C_ER_IRQHandler+0x5c>
 8003f9a:	2a21      	cmp	r2, #33	; 0x21
 8003f9c:	d005      	beq.n	8003faa <HAL_I2C_ER_IRQHandler+0xa6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f9e:	2a29      	cmp	r2, #41	; 0x29
 8003fa0:	d003      	beq.n	8003faa <HAL_I2C_ER_IRQHandler+0xa6>
 8003fa2:	2a28      	cmp	r2, #40	; 0x28
 8003fa4:	d1dc      	bne.n	8003f60 <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fa6:	2821      	cmp	r0, #33	; 0x21
 8003fa8:	d1da      	bne.n	8003f60 <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8003faa:	4620      	mov	r0, r4
 8003fac:	f7ff fafe 	bl	80035ac <I2C_Slave_AF>
 8003fb0:	e7e1      	b.n	8003f76 <HAL_I2C_ER_IRQHandler+0x72>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e7db      	b.n	8003f76 <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= error;
 8003fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc0:	431e      	orrs	r6, r3
 8003fc2:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f7ff fd5d 	bl	8003a84 <I2C_ITError>
}
 8003fca:	e7e1      	b.n	8003f90 <HAL_I2C_ER_IRQHandler+0x8c>

08003fcc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d001      	beq.n	8003fda <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2002      	movs	r0, #2
  }
}
 8003fd8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fda:	2324      	movs	r3, #36	; 0x24
 8003fdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003fea:	6802      	ldr	r2, [r0, #0]
 8003fec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ff4:	6802      	ldr	r2, [r0, #0]
 8003ff6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003ff8:	4319      	orrs	r1, r3
 8003ffa:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8003ffc:	6802      	ldr	r2, [r0, #0]
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004006:	2320      	movs	r3, #32
 8004008:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr

08004010 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004010:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	d001      	beq.n	800401e <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800401a:	2002      	movs	r0, #2
  }
}
 800401c:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 800401e:	2324      	movs	r3, #36	; 0x24
 8004020:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004024:	6802      	ldr	r2, [r0, #0]
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 800402e:	6802      	ldr	r2, [r0, #0]
 8004030:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004032:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8004034:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8004038:	4319      	orrs	r1, r3
 800403a:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 800403c:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 800403e:	6802      	ldr	r2, [r0, #0]
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004048:	2320      	movs	r3, #32
 800404a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 800404e:	2000      	movs	r0, #0
 8004050:	4770      	bx	lr

08004052 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004052:	b308      	cbz	r0, 8004098 <HAL_IWDG_Init+0x46>
{
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004058:	6803      	ldr	r3, [r0, #0]
 800405a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800405e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	f245 5255 	movw	r2, #21845	; 0x5555
 8004066:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004068:	6803      	ldr	r3, [r0, #0]
 800406a:	6842      	ldr	r2, [r0, #4]
 800406c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800406e:	6803      	ldr	r3, [r0, #0]
 8004070:	6882      	ldr	r2, [r0, #8]
 8004072:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004074:	f7fd f824 	bl	80010c0 <HAL_GetTick>
 8004078:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	b132      	cbz	r2, 800408e <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004080:	f7fd f81e 	bl	80010c0 <HAL_GetTick>
 8004084:	1b40      	subs	r0, r0, r5
 8004086:	2830      	cmp	r0, #48	; 0x30
 8004088:	d9f7      	bls.n	800407a <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 800408a:	2003      	movs	r0, #3
 800408c:	e003      	b.n	8004096 <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800408e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004092:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004094:	2000      	movs	r0, #0
}
 8004096:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004098:	2001      	movs	r0, #1
}
 800409a:	4770      	bx	lr

0800409c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800409c:	6803      	ldr	r3, [r0, #0]
 800409e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80040a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80040a4:	2000      	movs	r0, #0
 80040a6:	4770      	bx	lr

080040a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040a8:	b510      	push	{r4, lr}
 80040aa:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_PWREx_EnableOverDrive+0x70>)
 80040b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_PWREx_EnableOverDrive+0x74>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ca:	f7fc fff9 	bl	80010c0 <HAL_GetTick>
 80040ce:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_PWREx_EnableOverDrive+0x78>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80040d8:	d108      	bne.n	80040ec <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040da:	f7fc fff1 	bl	80010c0 <HAL_GetTick>
 80040de:	1b00      	subs	r0, r0, r4
 80040e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80040e4:	d9f4      	bls.n	80040d0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80040e8:	b002      	add	sp, #8
 80040ea:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_PWREx_EnableOverDrive+0x7c>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80040f2:	f7fc ffe5 	bl	80010c0 <HAL_GetTick>
 80040f6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_PWREx_EnableOverDrive+0x78>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004100:	d107      	bne.n	8004112 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004102:	f7fc ffdd 	bl	80010c0 <HAL_GetTick>
 8004106:	1b00      	subs	r0, r0, r4
 8004108:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800410c:	d9f4      	bls.n	80040f8 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800410e:	2003      	movs	r0, #3
 8004110:	e7ea      	b.n	80040e8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8004112:	2000      	movs	r0, #0
 8004114:	e7e8      	b.n	80040e8 <HAL_PWREx_EnableOverDrive+0x40>
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	420e0040 	.word	0x420e0040
 8004120:	40007000 	.word	0x40007000
 8004124:	420e0044 	.word	0x420e0044

08004128 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004128:	2800      	cmp	r0, #0
 800412a:	f000 81b9 	beq.w	80044a0 <HAL_RCC_OscConfig+0x378>
{
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004134:	6803      	ldr	r3, [r0, #0]
 8004136:	f013 0f01 	tst.w	r3, #1
 800413a:	d03b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800413c:	4ba6      	ldr	r3, [pc, #664]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b04      	cmp	r3, #4
 8004146:	d02c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004148:	4ba3      	ldr	r3, [pc, #652]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004150:	2b08      	cmp	r3, #8
 8004152:	d021      	beq.n	8004198 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d04f      	beq.n	80041fc <HAL_RCC_OscConfig+0xd4>
 800415c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004160:	d052      	beq.n	8004208 <HAL_RCC_OscConfig+0xe0>
 8004162:	4b9d      	ldr	r3, [pc, #628]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004172:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d050      	beq.n	800421c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fc ffa1 	bl	80010c0 <HAL_GetTick>
 800417e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004180:	4b95      	ldr	r3, [pc, #596]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004188:	d114      	bne.n	80041b4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418a:	f7fc ff99 	bl	80010c0 <HAL_GetTick>
 800418e:	1b40      	subs	r0, r0, r5
 8004190:	2864      	cmp	r0, #100	; 0x64
 8004192:	d9f5      	bls.n	8004180 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004194:	2003      	movs	r0, #3
 8004196:	e18a      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004198:	4b8f      	ldr	r3, [pc, #572]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80041a0:	d0d8      	beq.n	8004154 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a2:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80041aa:	d003      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8178 	beq.w	80044a4 <HAL_RCC_OscConfig+0x37c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	f013 0f02 	tst.w	r3, #2
 80041ba:	d054      	beq.n	8004266 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041bc:	4b86      	ldr	r3, [pc, #536]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f013 0f0c 	tst.w	r3, #12
 80041c4:	d03e      	beq.n	8004244 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b84      	ldr	r3, [pc, #528]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d033      	beq.n	800423a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d067      	beq.n	80042a8 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b80      	ldr	r3, [pc, #512]	; (80043dc <HAL_RCC_OscConfig+0x2b4>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fc ff6f 	bl	80010c0 <HAL_GetTick>
 80041e2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	4b7c      	ldr	r3, [pc, #496]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f013 0f02 	tst.w	r3, #2
 80041ec:	d153      	bne.n	8004296 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fc ff67 	bl	80010c0 <HAL_GetTick>
 80041f2:	1b40      	subs	r0, r0, r5
 80041f4:	2802      	cmp	r0, #2
 80041f6:	d9f5      	bls.n	80041e4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80041f8:	2003      	movs	r0, #3
 80041fa:	e158      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fc:	4a76      	ldr	r2, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e7b5      	b.n	8004174 <HAL_RCC_OscConfig+0x4c>
 8004208:	4b73      	ldr	r3, [pc, #460]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e7ab      	b.n	8004174 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800421c:	f7fc ff50 	bl	80010c0 <HAL_GetTick>
 8004220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	4b6d      	ldr	r3, [pc, #436]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800422a:	d0c3      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7fc ff48 	bl	80010c0 <HAL_GetTick>
 8004230:	1b40      	subs	r0, r0, r5
 8004232:	2864      	cmp	r0, #100	; 0x64
 8004234:	d9f5      	bls.n	8004222 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004236:	2003      	movs	r0, #3
 8004238:	e139      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004242:	d1c6      	bne.n	80041d2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f013 0f02 	tst.w	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_OscConfig+0x12e>
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 8129 	bne.w	80044a8 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	4a60      	ldr	r2, [pc, #384]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800425e:	6921      	ldr	r1, [r4, #16]
 8004260:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004264:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f013 0f08 	tst.w	r3, #8
 800426c:	d040      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426e:	6963      	ldr	r3, [r4, #20]
 8004270:	b363      	cbz	r3, 80042cc <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <HAL_RCC_OscConfig+0x2b8>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc ff22 	bl	80010c0 <HAL_GetTick>
 800427c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	f013 0f02 	tst.w	r3, #2
 8004286:	d133      	bne.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7fc ff1a 	bl	80010c0 <HAL_GetTick>
 800428c:	1b40      	subs	r0, r0, r5
 800428e:	2802      	cmp	r0, #2
 8004290:	d9f5      	bls.n	800427e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8004292:	2003      	movs	r0, #3
 8004294:	e10b      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004296:	4a50      	ldr	r2, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004298:	6813      	ldr	r3, [r2, #0]
 800429a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800429e:	6921      	ldr	r1, [r4, #16]
 80042a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e7de      	b.n	8004266 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <HAL_RCC_OscConfig+0x2b4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042ae:	f7fc ff07 	bl	80010c0 <HAL_GetTick>
 80042b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f013 0f02 	tst.w	r3, #2
 80042bc:	d0d3      	beq.n	8004266 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042be:	f7fc feff 	bl	80010c0 <HAL_GetTick>
 80042c2:	1b40      	subs	r0, r0, r5
 80042c4:	2802      	cmp	r0, #2
 80042c6:	d9f5      	bls.n	80042b4 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80042c8:	2003      	movs	r0, #3
 80042ca:	e0f0      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <HAL_RCC_OscConfig+0x2b8>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d2:	f7fc fef5 	bl	80010c0 <HAL_GetTick>
 80042d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	f013 0f02 	tst.w	r3, #2
 80042e0:	d006      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fc feed 	bl	80010c0 <HAL_GetTick>
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	2802      	cmp	r0, #2
 80042ea:	d9f5      	bls.n	80042d8 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80042ec:	2003      	movs	r0, #3
 80042ee:	e0de      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f013 0f04 	tst.w	r3, #4
 80042f6:	d078      	beq.n	80043ea <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004300:	d10d      	bne.n	800431e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800431a:	2501      	movs	r5, #1
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 800431e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCC_OscConfig+0x2bc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004328:	d021      	beq.n	800436e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d032      	beq.n	8004396 <HAL_RCC_OscConfig+0x26e>
 8004330:	2b05      	cmp	r3, #5
 8004332:	d036      	beq.n	80043a2 <HAL_RCC_OscConfig+0x27a>
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	671a      	str	r2, [r3, #112]	; 0x70
 800433e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004340:	f022 0204 	bic.w	r2, r2, #4
 8004344:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004346:	68a3      	ldr	r3, [r4, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d034      	beq.n	80043b6 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fc feb8 	bl	80010c0 <HAL_GetTick>
 8004350:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	f013 0f02 	tst.w	r3, #2
 800435a:	d145      	bne.n	80043e8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fc feb0 	bl	80010c0 <HAL_GetTick>
 8004360:	1b80      	subs	r0, r0, r6
 8004362:	f241 3388 	movw	r3, #5000	; 0x1388
 8004366:	4298      	cmp	r0, r3
 8004368:	d9f3      	bls.n	8004352 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800436a:	2003      	movs	r0, #3
 800436c:	e09f      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_RCC_OscConfig+0x2bc>)
 8004370:	6813      	ldr	r3, [r2, #0]
 8004372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004376:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004378:	f7fc fea2 	bl	80010c0 <HAL_GetTick>
 800437c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_OscConfig+0x2bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004386:	d1d0      	bne.n	800432a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fc fe9a 	bl	80010c0 <HAL_GetTick>
 800438c:	1b80      	subs	r0, r0, r6
 800438e:	2802      	cmp	r0, #2
 8004390:	d9f5      	bls.n	800437e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004392:	2003      	movs	r0, #3
 8004394:	e08b      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004396:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004398:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	e7d1      	b.n	8004346 <HAL_RCC_OscConfig+0x21e>
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80043a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a6:	f042 0204 	orr.w	r2, r2, #4
 80043aa:	671a      	str	r2, [r3, #112]	; 0x70
 80043ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	671a      	str	r2, [r3, #112]	; 0x70
 80043b4:	e7c7      	b.n	8004346 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7fc fe83 	bl	80010c0 <HAL_GetTick>
 80043ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f013 0f02 	tst.w	r3, #2
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fc fe7b 	bl	80010c0 <HAL_GetTick>
 80043ca:	1b80      	subs	r0, r0, r6
 80043cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80043d0:	4298      	cmp	r0, r3
 80043d2:	d9f3      	bls.n	80043bc <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80043d4:	2003      	movs	r0, #3
 80043d6:	e06a      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470000 	.word	0x42470000
 80043e0:	42470e80 	.word	0x42470e80
 80043e4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e8:	b9e5      	cbnz	r5, 8004424 <HAL_RCC_OscConfig+0x2fc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ea:	69a3      	ldr	r3, [r4, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05d      	beq.n	80044ac <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f0:	4a31      	ldr	r2, [pc, #196]	; (80044b8 <HAL_RCC_OscConfig+0x390>)
 80043f2:	6892      	ldr	r2, [r2, #8]
 80043f4:	f002 020c 	and.w	r2, r2, #12
 80043f8:	2a08      	cmp	r2, #8
 80043fa:	d05a      	beq.n	80044b2 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d017      	beq.n	8004430 <HAL_RCC_OscConfig+0x308>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <HAL_RCC_OscConfig+0x394>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fc fe5b 	bl	80010c0 <HAL_GetTick>
 800440a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCC_OscConfig+0x390>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004414:	d042      	beq.n	800449c <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fc fe53 	bl	80010c0 <HAL_GetTick>
 800441a:	1b00      	subs	r0, r0, r4
 800441c:	2802      	cmp	r0, #2
 800441e:	d9f5      	bls.n	800440c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8004420:	2003      	movs	r0, #3
 8004422:	e044      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004424:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <HAL_RCC_OscConfig+0x390>)
 8004426:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	e7dc      	b.n	80043ea <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b22      	ldr	r3, [pc, #136]	; (80044bc <HAL_RCC_OscConfig+0x394>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004436:	f7fc fe43 	bl	80010c0 <HAL_GetTick>
 800443a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443c:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCC_OscConfig+0x390>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004444:	d006      	beq.n	8004454 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7fc fe3b 	bl	80010c0 <HAL_GetTick>
 800444a:	1b40      	subs	r0, r0, r5
 800444c:	2802      	cmp	r0, #2
 800444e:	d9f5      	bls.n	800443c <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8004450:	2003      	movs	r0, #3
 8004452:	e02c      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004454:	69e3      	ldr	r3, [r4, #28]
 8004456:	6a22      	ldr	r2, [r4, #32]
 8004458:	4313      	orrs	r3, r2
 800445a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800445c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800446a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800446c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <HAL_RCC_OscConfig+0x390>)
 8004472:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_OscConfig+0x394>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800447a:	f7fc fe21 	bl	80010c0 <HAL_GetTick>
 800447e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <HAL_RCC_OscConfig+0x390>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004488:	d106      	bne.n	8004498 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448a:	f7fc fe19 	bl	80010c0 <HAL_GetTick>
 800448e:	1b00      	subs	r0, r0, r4
 8004490:	2802      	cmp	r0, #2
 8004492:	d9f5      	bls.n	8004480 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8004494:	2003      	movs	r0, #3
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004498:	2000      	movs	r0, #0
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
 800449c:	2000      	movs	r0, #0
 800449e:	e006      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 80044a0:	2001      	movs	r0, #1
}
 80044a2:	4770      	bx	lr
        return HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
 80044a6:	e002      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
        return HAL_ERROR;
 80044a8:	2001      	movs	r0, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80044ac:	2000      	movs	r0, #0
}
 80044ae:	b002      	add	sp, #8
 80044b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
 80044b4:	e7fb      	b.n	80044ae <HAL_RCC_OscConfig+0x386>
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	42470060 	.word	0x42470060

080044c0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80044c0:	4b01      	ldr	r3, [pc, #4]	; (80044c8 <HAL_RCC_EnableCSS+0x8>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	4770      	bx	lr
 80044c8:	4247004c 	.word	0x4247004c

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d03d      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x8a>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d13d      	bne.n	800455a <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80044ec:	d012      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80044f6:	2300      	movs	r3, #0
 80044f8:	481a      	ldr	r0, [pc, #104]	; (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 80044fa:	fba1 0100 	umull	r0, r1, r1, r0
 80044fe:	f7fc fbe3 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004502:	4b17      	ldr	r3, [pc, #92]	; (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800450e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004512:	e023      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004514:	4b12      	ldr	r3, [pc, #72]	; (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800451c:	015c      	lsls	r4, r3, #5
 800451e:	2500      	movs	r5, #0
 8004520:	1ae4      	subs	r4, r4, r3
 8004522:	f165 0500 	sbc.w	r5, r5, #0
 8004526:	01ae      	lsls	r6, r5, #6
 8004528:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 800452c:	01a7      	lsls	r7, r4, #6
 800452e:	1b38      	subs	r0, r7, r4
 8004530:	eb66 0105 	sbc.w	r1, r6, r5
 8004534:	00cc      	lsls	r4, r1, #3
 8004536:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800453a:	00c5      	lsls	r5, r0, #3
 800453c:	18e8      	adds	r0, r5, r3
 800453e:	f144 0100 	adc.w	r1, r4, #0
 8004542:	028b      	lsls	r3, r1, #10
 8004544:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004548:	0284      	lsls	r4, r0, #10
 800454a:	4620      	mov	r0, r4
 800454c:	4619      	mov	r1, r3
 800454e:	2300      	movs	r3, #0
 8004550:	f7fc fbba 	bl	8000cc8 <__aeabi_uldivmod>
 8004554:	e7d5      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8004556:	4803      	ldr	r0, [pc, #12]	; (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 8004558:	e000      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455a:	4803      	ldr	r0, [pc, #12]	; (8004568 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800455c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	017d7840 	.word	0x017d7840
 8004568:	00f42400 	.word	0x00f42400

0800456c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800456c:	2800      	cmp	r0, #0
 800456e:	f000 809a 	beq.w	80046a6 <HAL_RCC_ClockConfig+0x13a>
{
 8004572:	b570      	push	{r4, r5, r6, lr}
 8004574:	460d      	mov	r5, r1
 8004576:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <HAL_RCC_ClockConfig+0x14c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	428b      	cmp	r3, r1
 8004582:	d208      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004584:	b2cb      	uxtb	r3, r1
 8004586:	4a4c      	ldr	r2, [pc, #304]	; (80046b8 <HAL_RCC_ClockConfig+0x14c>)
 8004588:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	428b      	cmp	r3, r1
 8004592:	f040 808a 	bne.w	80046aa <HAL_RCC_ClockConfig+0x13e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f013 0f02 	tst.w	r3, #2
 800459c:	d017      	beq.n	80045ce <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459e:	f013 0f04 	tst.w	r3, #4
 80045a2:	d004      	beq.n	80045ae <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a4:	4a45      	ldr	r2, [pc, #276]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 80045a6:	6893      	ldr	r3, [r2, #8]
 80045a8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ac:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	f013 0f08 	tst.w	r3, #8
 80045b4:	d004      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b6:	4a41      	ldr	r2, [pc, #260]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 80045b8:	6893      	ldr	r3, [r2, #8]
 80045ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045be:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4a3e      	ldr	r2, [pc, #248]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 80045c2:	6893      	ldr	r3, [r2, #8]
 80045c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c8:	68a1      	ldr	r1, [r4, #8]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f013 0f01 	tst.w	r3, #1
 80045d4:	d032      	beq.n	800463c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d021      	beq.n	8004620 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045dc:	1e9a      	subs	r2, r3, #2
 80045de:	2a01      	cmp	r2, #1
 80045e0:	d925      	bls.n	800462e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e2:	4a36      	ldr	r2, [pc, #216]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	f012 0f02 	tst.w	r2, #2
 80045ea:	d060      	beq.n	80046ae <HAL_RCC_ClockConfig+0x142>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ec:	4933      	ldr	r1, [pc, #204]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 80045ee:	688a      	ldr	r2, [r1, #8]
 80045f0:	f022 0203 	bic.w	r2, r2, #3
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80045f8:	f7fc fd62 	bl	80010c0 <HAL_GetTick>
 80045fc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b2f      	ldr	r3, [pc, #188]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800460c:	d016      	beq.n	800463c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460e:	f7fc fd57 	bl	80010c0 <HAL_GetTick>
 8004612:	1b80      	subs	r0, r0, r6
 8004614:	f241 3388 	movw	r3, #5000	; 0x1388
 8004618:	4298      	cmp	r0, r3
 800461a:	d9f0      	bls.n	80045fe <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800461c:	2003      	movs	r0, #3
 800461e:	e041      	b.n	80046a4 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004620:	4a26      	ldr	r2, [pc, #152]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004628:	d1e0      	bne.n	80045ec <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800462a:	2001      	movs	r0, #1
 800462c:	e03a      	b.n	80046a4 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4a23      	ldr	r2, [pc, #140]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004636:	d1d9      	bne.n	80045ec <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004638:	2001      	movs	r0, #1
 800463a:	e033      	b.n	80046a4 <HAL_RCC_ClockConfig+0x138>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_ClockConfig+0x14c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	42ab      	cmp	r3, r5
 8004646:	d907      	bls.n	8004658 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004648:	b2ea      	uxtb	r2, r5
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCC_ClockConfig+0x14c>)
 800464c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	42ab      	cmp	r3, r5
 8004656:	d12c      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	f013 0f04 	tst.w	r3, #4
 800465e:	d006      	beq.n	800466e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 8004662:	6893      	ldr	r3, [r2, #8]
 8004664:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004668:	68e1      	ldr	r1, [r4, #12]
 800466a:	430b      	orrs	r3, r1
 800466c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f013 0f08 	tst.w	r3, #8
 8004674:	d007      	beq.n	8004686 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4a11      	ldr	r2, [pc, #68]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 8004678:	6893      	ldr	r3, [r2, #8]
 800467a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800467e:	6921      	ldr	r1, [r4, #16]
 8004680:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004684:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004686:	f7ff ff21 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCC_ClockConfig+0x150>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x154>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
 8004696:	40d8      	lsrs	r0, r3
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_RCC_ClockConfig+0x158>)
 800469a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800469c:	2000      	movs	r0, #0
 800469e:	f7fc fcc5 	bl	800102c <HAL_InitTick>
  return HAL_OK;
 80046a2:	2000      	movs	r0, #0
}
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80046a6:	2001      	movs	r0, #1
}
 80046a8:	4770      	bx	lr
      return HAL_ERROR;
 80046aa:	2001      	movs	r0, #1
 80046ac:	e7fa      	b.n	80046a4 <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7f8      	b.n	80046a4 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80046b2:	2001      	movs	r0, #1
 80046b4:	e7f6      	b.n	80046a4 <HAL_RCC_ClockConfig+0x138>
 80046b6:	bf00      	nop
 80046b8:	40023c00 	.word	0x40023c00
 80046bc:	40023800 	.word	0x40023800
 80046c0:	0801a32c 	.word	0x0801a32c
 80046c4:	2000295c 	.word	0x2000295c

080046c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	2000295c 	.word	0x2000295c

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046d6:	f7ff fff7 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046da:	4b04      	ldr	r3, [pc, #16]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80046e2:	4a03      	ldr	r2, [pc, #12]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
}
 80046e6:	40d8      	lsrs	r0, r3
 80046e8:	bd08      	pop	{r3, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	0801a33c 	.word	0x0801a33c

080046f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f4:	b530      	push	{r4, r5, lr}
 80046f6:	b083      	sub	sp, #12
 80046f8:	4604      	mov	r4, r0

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046fa:	6803      	ldr	r3, [r0, #0]
 80046fc:	f013 0f03 	tst.w	r3, #3
 8004700:	d114      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	f013 0f0c 	tst.w	r3, #12
 8004708:	d15a      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	f013 0f20 	tst.w	r3, #32
 8004710:	f040 80af 	bne.w	8004872 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f013 0f10 	tst.w	r3, #16
 800471a:	f000 8111 	beq.w	8004940 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800471e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8004722:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004724:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004726:	2000      	movs	r0, #0
}
 8004728:	b003      	add	sp, #12
 800472a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800472c:	4b86      	ldr	r3, [pc, #536]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004732:	f7fc fcc5 	bl	80010c0 <HAL_GetTick>
 8004736:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004738:	4b84      	ldr	r3, [pc, #528]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004740:	d006      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004742:	f7fc fcbd 	bl	80010c0 <HAL_GetTick>
 8004746:	1b43      	subs	r3, r0, r5
 8004748:	2b02      	cmp	r3, #2
 800474a:	d9f5      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 800474c:	2003      	movs	r0, #3
 800474e:	e7eb      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	f013 0f01 	tst.w	r3, #1
 8004756:	d007      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004758:	6862      	ldr	r2, [r4, #4]
 800475a:	68a3      	ldr	r3, [r4, #8]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004762:	4a7a      	ldr	r2, [pc, #488]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004764:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	f013 0f02 	tst.w	r3, #2
 800476e:	d015      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004770:	4a76      	ldr	r2, [pc, #472]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004772:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004776:	6860      	ldr	r0, [r4, #4]
 8004778:	68e3      	ldr	r3, [r4, #12]
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004780:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004784:	430b      	orrs	r3, r1
 8004786:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800478a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800478e:	f023 031f 	bic.w	r3, r3, #31
 8004792:	69e1      	ldr	r1, [r4, #28]
 8004794:	3901      	subs	r1, #1
 8004796:	430b      	orrs	r3, r1
 8004798:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80047a2:	f7fc fc8d 	bl	80010c0 <HAL_GetTick>
 80047a6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a8:	4b68      	ldr	r3, [pc, #416]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80047b0:	d1a7      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047b2:	f7fc fc85 	bl	80010c0 <HAL_GetTick>
 80047b6:	1b40      	subs	r0, r0, r5
 80047b8:	2802      	cmp	r0, #2
 80047ba:	d9f5      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        return HAL_TIMEOUT;
 80047bc:	2003      	movs	r0, #3
 80047be:	e7b3      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 80047c0:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80047c6:	f7fc fc7b 	bl	80010c0 <HAL_GetTick>
 80047ca:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047cc:	4b5f      	ldr	r3, [pc, #380]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80047d4:	d006      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80047d6:	f7fc fc73 	bl	80010c0 <HAL_GetTick>
 80047da:	1b43      	subs	r3, r0, r5
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d9f5      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
        return HAL_TIMEOUT;
 80047e0:	2003      	movs	r0, #3
 80047e2:	e7a1      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f013 0f04 	tst.w	r3, #4
 80047ea:	d016      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x126>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047ec:	4a57      	ldr	r2, [pc, #348]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047f2:	6920      	ldr	r0, [r4, #16]
 80047f4:	6963      	ldr	r3, [r4, #20]
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80047fc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004800:	430b      	orrs	r3, r1
 8004802:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004806:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800480a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800480e:	6a21      	ldr	r1, [r4, #32]
 8004810:	3901      	subs	r1, #1
 8004812:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f013 0f08 	tst.w	r3, #8
 8004820:	d014      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x158>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004822:	4a4a      	ldr	r2, [pc, #296]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004824:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004828:	6921      	ldr	r1, [r4, #16]
 800482a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800482e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004832:	69a1      	ldr	r1, [r4, #24]
 8004834:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800483c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004840:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004844:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004846:	430b      	orrs	r3, r1
 8004848:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004852:	f7fc fc35 	bl	80010c0 <HAL_GetTick>
 8004856:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004858:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004860:	f47f af53 	bne.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004864:	f7fc fc2c 	bl	80010c0 <HAL_GetTick>
 8004868:	1b40      	subs	r0, r0, r5
 800486a:	2802      	cmp	r0, #2
 800486c:	d9f4      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x164>
        return HAL_TIMEOUT;
 800486e:	2003      	movs	r0, #3
 8004870:	e75a      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	4b35      	ldr	r3, [pc, #212]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800488a:	4a32      	ldr	r2, [pc, #200]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004892:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004894:	f7fc fc14 	bl	80010c0 <HAL_GetTick>
 8004898:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048a2:	d106      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048a4:	f7fc fc0c 	bl	80010c0 <HAL_GetTick>
 80048a8:	1b40      	subs	r0, r0, r5
 80048aa:	2802      	cmp	r0, #2
 80048ac:	d9f5      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        return HAL_TIMEOUT;
 80048ae:	2003      	movs	r0, #3
 80048b0:	e73a      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80048ba:	d012      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80048bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048be:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00d      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048c6:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ce:	4922      	ldr	r1, [pc, #136]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d0:	2001      	movs	r0, #1
 80048d2:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d4:	2000      	movs	r0, #0
 80048d6:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80048d8:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	f013 0f01 	tst.w	r3, #1
 80048e0:	d112      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x214>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80048e8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80048ec:	d01d      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x236>
 80048ee:	4a17      	ldr	r2, [pc, #92]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048f0:	6893      	ldr	r3, [r2, #8]
 80048f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048f6:	6093      	str	r3, [r2, #8]
 80048f8:	4914      	ldr	r1, [pc, #80]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048fa:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80048fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048fe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004902:	4313      	orrs	r3, r2
 8004904:	670b      	str	r3, [r1, #112]	; 0x70
 8004906:	e705      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8004908:	f7fc fbda 	bl	80010c0 <HAL_GetTick>
 800490c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	f013 0f02 	tst.w	r3, #2
 8004916:	d1e4      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fc fbd2 	bl	80010c0 <HAL_GetTick>
 800491c:	1b40      	subs	r0, r0, r5
 800491e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004922:	4298      	cmp	r0, r3
 8004924:	d9f3      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x21a>
            return HAL_TIMEOUT;
 8004926:	2003      	movs	r0, #3
 8004928:	e6fe      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492a:	4908      	ldr	r1, [pc, #32]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800492c:	688a      	ldr	r2, [r1, #8]
 800492e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004932:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
 800493e:	e7db      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  return HAL_OK;
 8004940:	2000      	movs	r0, #0
 8004942:	e6f1      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004944:	424711e0 	.word	0x424711e0
 8004948:	42470068 	.word	0x42470068
 800494c:	40023800 	.word	0x40023800
 8004950:	42470070 	.word	0x42470070
 8004954:	40007000 	.word	0x40007000
 8004958:	42470e40 	.word	0x42470e40

0800495c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8004960:	6803      	ldr	r3, [r0, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004968:	d003      	beq.n	8004972 <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004970:	d10f      	bne.n	8004992 <HAL_RTC_AlarmIRQHandler+0x36>
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
    }
  }

  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	f412 7f00 	tst.w	r2, #512	; 0x200
 800497a:	d003      	beq.n	8004984 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004982:	d10f      	bne.n	80049a4 <HAL_RTC_AlarmIRQHandler+0x48>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8004986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800498a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800498c:	2301      	movs	r3, #1
 800498e:	7763      	strb	r3, [r4, #29]
}
 8004990:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004992:	f00d fe50 	bl	8012636 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	68d3      	ldr	r3, [r2, #12]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80049a0:	60d3      	str	r3, [r2, #12]
 80049a2:	e7e6      	b.n	8004972 <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80049a4:	4620      	mov	r0, r4
 80049a6:	f000 fa07 	bl	8004db8 <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	68d3      	ldr	r3, [r2, #12]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f463 7320 	orn	r3, r3, #640	; 0x280
 80049b4:	60d3      	str	r3, [r2, #12]
 80049b6:	e7e5      	b.n	8004984 <HAL_RTC_AlarmIRQHandler+0x28>
 80049b8:	40013c00 	.word	0x40013c00

080049bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80049c0:	6802      	ldr	r2, [r0, #0]
 80049c2:	68d3      	ldr	r3, [r2, #12]
 80049c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049c8:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049ca:	f7fc fb79 	bl	80010c0 <HAL_GetTick>
 80049ce:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f013 0f20 	tst.w	r3, #32
 80049d8:	d107      	bne.n	80049ea <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049da:	f7fc fb71 	bl	80010c0 <HAL_GetTick>
 80049de:	1b40      	subs	r0, r0, r5
 80049e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80049e4:	d9f4      	bls.n	80049d0 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
 80049e8:	e000      	b.n	80049ec <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80049ea:	2000      	movs	r0, #0
}
 80049ec:	bd38      	pop	{r3, r4, r5, pc}

080049ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80049ee:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049f0:	6803      	ldr	r3, [r0, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80049f8:	d001      	beq.n	80049fe <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80049fa:	2000      	movs	r0, #0
}
 80049fc:	bd38      	pop	{r3, r4, r5, pc}
 80049fe:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004a06:	f7fc fb5b 	bl	80010c0 <HAL_GetTick>
 8004a0a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a14:	d107      	bne.n	8004a26 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a16:	f7fc fb53 	bl	80010c0 <HAL_GetTick>
 8004a1a:	1b43      	subs	r3, r0, r5
 8004a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a20:	d9f4      	bls.n	8004a0c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004a22:	2003      	movs	r0, #3
 8004a24:	e7ea      	b.n	80049fc <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8004a26:	2000      	movs	r0, #0
 8004a28:	e7e8      	b.n	80049fc <RTC_EnterInitMode+0xe>

08004a2a <HAL_RTC_Init>:
{
 8004a2a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d05c      	beq.n	8004aea <HAL_RTC_Init+0xc0>
 8004a30:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a32:	7f43      	ldrb	r3, [r0, #29]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d041      	beq.n	8004abc <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	22ca      	movs	r2, #202	; 0xca
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	2253      	movs	r2, #83	; 0x53
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff ffd0 	bl	80049ee <RTC_EnterInitMode>
 8004a4e:	4605      	mov	r5, r0
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d137      	bne.n	8004ac4 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	6893      	ldr	r3, [r2, #8]
 8004a58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a60:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a62:	6821      	ldr	r1, [r4, #0]
 8004a64:	688a      	ldr	r2, [r1, #8]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	6920      	ldr	r0, [r4, #16]
 8004a6a:	4303      	orrs	r3, r0
 8004a6c:	6960      	ldr	r0, [r4, #20]
 8004a6e:	4303      	orrs	r3, r0
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	68e2      	ldr	r2, [r4, #12]
 8004a78:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	6913      	ldr	r3, [r2, #16]
 8004a7e:	68a1      	ldr	r1, [r4, #8]
 8004a80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004a84:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	68d3      	ldr	r3, [r2, #12]
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f013 0f20 	tst.w	r3, #32
 8004a98:	d01b      	beq.n	8004ad2 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004aa8:	69a1      	ldr	r1, [r4, #24]
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	7763      	strb	r3, [r4, #29]
}
 8004ab8:	4628      	mov	r0, r5
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004abc:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004abe:	f00c fac3 	bl	8011048 <HAL_RTC_MspInit>
 8004ac2:	e7b9      	b.n	8004a38 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	22ff      	movs	r2, #255	; 0xff
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004aca:	2304      	movs	r3, #4
 8004acc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8004ace:	2501      	movs	r5, #1
 8004ad0:	e7f2      	b.n	8004ab8 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff ff72 	bl	80049bc <HAL_RTC_WaitForSynchro>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d0de      	beq.n	8004a9a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	22ff      	movs	r2, #255	; 0xff
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8004ae6:	2501      	movs	r5, #1
 8004ae8:	e7e6      	b.n	8004ab8 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8004aea:	2501      	movs	r5, #1
 8004aec:	e7e4      	b.n	8004ab8 <HAL_RTC_Init+0x8e>

08004aee <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004aee:	2300      	movs	r3, #0

  while(Value >= 10U)
 8004af0:	2809      	cmp	r0, #9
 8004af2:	d903      	bls.n	8004afc <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004af4:	3301      	adds	r3, #1
    Value -= 10U;
 8004af6:	380a      	subs	r0, #10
 8004af8:	b2c0      	uxtb	r0, r0
 8004afa:	e7f9      	b.n	8004af0 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	b2db      	uxtb	r3, r3
}
 8004b00:	4318      	orrs	r0, r3
 8004b02:	4770      	bx	lr

08004b04 <HAL_RTC_SetTime>:
{
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004b06:	7f03      	ldrb	r3, [r0, #28]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d078      	beq.n	8004bfe <HAL_RTC_SetTime+0xfa>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	460e      	mov	r6, r1
 8004b10:	2301      	movs	r3, #1
 8004b12:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	d147      	bne.n	8004bac <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004b1c:	6803      	ldr	r3, [r0, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b24:	d101      	bne.n	8004b2a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b2a:	7830      	ldrb	r0, [r6, #0]
 8004b2c:	f7ff ffdf 	bl	8004aee <RTC_ByteToBcd2>
 8004b30:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004b32:	7870      	ldrb	r0, [r6, #1]
 8004b34:	f7ff ffdb 	bl	8004aee <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b38:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004b3c:	78b0      	ldrb	r0, [r6, #2]
 8004b3e:	f7ff ffd6 	bl	8004aee <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004b42:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004b44:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b46:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	22ca      	movs	r2, #202	; 0xca
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	2253      	movs	r2, #83	; 0x53
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7ff ff49 	bl	80049ee <RTC_EnterInitMode>
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d136      	bne.n	8004bd0 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8004b68:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8004b6c:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	6893      	ldr	r3, [r2, #8]
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b78:	6821      	ldr	r1, [r4, #0]
 8004b7a:	688b      	ldr	r3, [r1, #8]
 8004b7c:	68f2      	ldr	r2, [r6, #12]
 8004b7e:	6930      	ldr	r0, [r6, #16]
 8004b80:	4302      	orrs	r2, r0
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b86:	6822      	ldr	r2, [r4, #0]
 8004b88:	68d3      	ldr	r3, [r2, #12]
 8004b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f013 0f20 	tst.w	r3, #32
 8004b98:	d023      	beq.n	8004be2 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	22ff      	movs	r2, #255	; 0xff
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	7723      	strb	r3, [r4, #28]
}
 8004ba8:	4638      	mov	r0, r7
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004bac:	6803      	ldr	r3, [r0, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bb4:	d101      	bne.n	8004bba <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004bba:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004bbc:	7870      	ldrb	r0, [r6, #1]
 8004bbe:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004bc0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8004bc4:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004bc6:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004bc8:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004bca:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8004bce:	e7bc      	b.n	8004b4a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8004bde:	2701      	movs	r7, #1
 8004be0:	e7e2      	b.n	8004ba8 <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff feea 	bl	80049bc <HAL_RTC_WaitForSynchro>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0d6      	beq.n	8004b9a <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	22ff      	movs	r2, #255	; 0xff
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8004bfa:	2701      	movs	r7, #1
 8004bfc:	e7d4      	b.n	8004ba8 <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8004bfe:	2702      	movs	r7, #2
 8004c00:	e7d2      	b.n	8004ba8 <HAL_RTC_SetTime+0xa4>

08004c02 <HAL_RTC_SetDate>:
{
 8004c02:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8004c04:	7f03      	ldrb	r3, [r0, #28]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d066      	beq.n	8004cd8 <HAL_RTC_SetDate+0xd6>
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460e      	mov	r6, r1
 8004c0e:	2301      	movs	r3, #1
 8004c10:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c12:	2302      	movs	r3, #2
 8004c14:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c16:	b93a      	cbnz	r2, 8004c28 <HAL_RTC_SetDate+0x26>
 8004c18:	784b      	ldrb	r3, [r1, #1]
 8004c1a:	f013 0f10 	tst.w	r3, #16
 8004c1e:	d003      	beq.n	8004c28 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c20:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004c24:	330a      	adds	r3, #10
 8004c26:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d133      	bne.n	8004c94 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c2c:	78f0      	ldrb	r0, [r6, #3]
 8004c2e:	f7ff ff5e 	bl	8004aee <RTC_ByteToBcd2>
 8004c32:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004c34:	7870      	ldrb	r0, [r6, #1]
 8004c36:	f7ff ff5a 	bl	8004aee <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c3a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004c3e:	78b0      	ldrb	r0, [r6, #2]
 8004c40:	f7ff ff55 	bl	8004aee <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004c44:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 8004c46:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c48:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	22ca      	movs	r2, #202	; 0xca
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	2253      	movs	r2, #83	; 0x53
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7ff fec8 	bl	80049ee <RTC_EnterInitMode>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	bb18      	cbnz	r0, 8004caa <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004c68:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004c6c:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	68d3      	ldr	r3, [r2, #12]
 8004c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c76:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f013 0f20 	tst.w	r3, #32
 8004c80:	d01c      	beq.n	8004cbc <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	7723      	strb	r3, [r4, #28]
}
 8004c90:	4630      	mov	r0, r6
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c94:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c96:	7870      	ldrb	r0, [r6, #1]
 8004c98:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8004c9e:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ca0:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ca2:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ca4:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8004ca8:	e7d0      	b.n	8004c4c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8004cb8:	2601      	movs	r6, #1
 8004cba:	e7e9      	b.n	8004c90 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff fe7d 	bl	80049bc <HAL_RTC_WaitForSynchro>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0dd      	beq.n	8004c82 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ccc:	2304      	movs	r3, #4
 8004cce:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8004cd4:	2601      	movs	r6, #1
 8004cd6:	e7db      	b.n	8004c90 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8004cd8:	2602      	movs	r6, #2
 8004cda:	e7d9      	b.n	8004c90 <HAL_RTC_SetDate+0x8e>

08004cdc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004cdc:	0903      	lsrs	r3, r0, #4
 8004cde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004ce2:	f000 000f 	and.w	r0, r0, #15
 8004ce6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004cea:	b2c0      	uxtb	r0, r0
 8004cec:	4770      	bx	lr

08004cee <HAL_RTC_GetTime>:
{
 8004cee:	b570      	push	{r4, r5, r6, lr}
 8004cf0:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004cf2:	6803      	ldr	r3, [r0, #0]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004cf8:	6803      	ldr	r3, [r0, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004d00:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d02:	6803      	ldr	r3, [r0, #0]
 8004d04:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d06:	f3c5 4106 	ubfx	r1, r5, #16, #7
 8004d0a:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8004d0e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004d10:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8004d14:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004d16:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8004d1a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004d1c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8004d20:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8004d22:	b952      	cbnz	r2, 8004d3a <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d24:	f7ff ffda 	bl	8004cdc <RTC_Bcd2ToByte>
 8004d28:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ffd6 	bl	8004cdc <RTC_Bcd2ToByte>
 8004d30:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d32:	4628      	mov	r0, r5
 8004d34:	f7ff ffd2 	bl	8004cdc <RTC_Bcd2ToByte>
 8004d38:	70a0      	strb	r0, [r4, #2]
}
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}

08004d3e <HAL_RTC_GetDate>:
{
 8004d3e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d40:	6803      	ldr	r3, [r0, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004d44:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004d48:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004d4a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8004d4e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d50:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8004d54:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004d56:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004d5a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8004d5c:	b95a      	cbnz	r2, 8004d76 <HAL_RTC_GetDate+0x38>
 8004d5e:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d60:	f7ff ffbc 	bl	8004cdc <RTC_Bcd2ToByte>
 8004d64:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7ff ffb8 	bl	8004cdc <RTC_Bcd2ToByte>
 8004d6c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f7ff ffb4 	bl	8004cdc <RTC_Bcd2ToByte>
 8004d74:	70a0      	strb	r0, [r4, #2]
}
 8004d76:	2000      	movs	r0, #0
 8004d78:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d7c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 8004d80:	6803      	ldr	r3, [r0, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d88:	d003      	beq.n	8004d92 <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d90:	d106      	bne.n	8004da0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x24>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
    }
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8004d94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004d98:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	7763      	strb	r3, [r4, #29]
}
 8004d9e:	bd10      	pop	{r4, pc}
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004da0:	f00d fc48 	bl	8012634 <HAL_RTCEx_WakeUpTimerEventCallback>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	68d3      	ldr	r3, [r2, #12]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8004dae:	60d3      	str	r3, [r2, #12]
 8004db0:	e7ef      	b.n	8004d92 <HAL_RTCEx_WakeUpTimerIRQHandler+0x16>
 8004db2:	bf00      	nop
 8004db4:	40013c00 	.word	0x40013c00

08004db8 <HAL_RTCEx_AlarmBEventCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004db8:	4770      	bx	lr

08004dba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	4688      	mov	r8, r1
 8004dc2:	4617      	mov	r7, r2
 8004dc4:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc6:	6834      	ldr	r4, [r6, #0]
 8004dc8:	68a4      	ldr	r4, [r4, #8]
 8004dca:	ea38 0304 	bics.w	r3, r8, r4
 8004dce:	bf0c      	ite	eq
 8004dd0:	2401      	moveq	r4, #1
 8004dd2:	2400      	movne	r4, #0
 8004dd4:	42bc      	cmp	r4, r7
 8004dd6:	d037      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x8e>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ddc:	d0f3      	beq.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dde:	f7fc f96f 	bl	80010c0 <HAL_GetTick>
 8004de2:	9b06      	ldr	r3, [sp, #24]
 8004de4:	1ac0      	subs	r0, r0, r3
 8004de6:	42a8      	cmp	r0, r5
 8004de8:	d201      	bcs.n	8004dee <SPI_WaitFlagStateUntilTimeout+0x34>
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	d1eb      	bne.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dee:	6832      	ldr	r2, [r6, #0]
 8004df0:	6853      	ldr	r3, [r2, #4]
 8004df2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004df6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df8:	6873      	ldr	r3, [r6, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d00b      	beq.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x5e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e00:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	d014      	beq.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0x78>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e14:	2003      	movs	r0, #3
 8004e16:	e018      	b.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0x90>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e18:	68b3      	ldr	r3, [r6, #8]
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1e:	d002      	beq.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0x6c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d1ec      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x46>
          __HAL_SPI_DISABLE(hspi);
 8004e26:	6832      	ldr	r2, [r6, #0]
 8004e28:	6813      	ldr	r3, [r2, #0]
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e7e6      	b.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0x46>
          SPI_RESET_CRC(hspi);
 8004e32:	6832      	ldr	r2, [r6, #0]
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	6832      	ldr	r2, [r6, #0]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e7df      	b.n	8004e08 <SPI_WaitFlagStateUntilTimeout+0x4e>
      }
    }
  }

  return HAL_OK;
 8004e48:	2000      	movs	r0, #0
}
 8004e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b530      	push	{r4, r5, lr}
 8004e52:	b085      	sub	sp, #20
 8004e54:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <SPI_EndRxTxTransaction+0x60>)
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <SPI_EndRxTxTransaction+0x64>)
 8004e5c:	fba3 3000 	umull	r3, r0, r3, r0
 8004e60:	0d40      	lsrs	r0, r0, #21
 8004e62:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004e66:	fb05 f000 	mul.w	r0, r5, r0
 8004e6a:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e72:	d00b      	beq.n	8004e8c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	b1bb      	cbz	r3, 8004ea8 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e86:	d1f5      	bne.n	8004e74 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e00e      	b.n	8004eaa <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8c:	9200      	str	r2, [sp, #0]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	2200      	movs	r2, #0
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7ff ff90 	bl	8004dba <SPI_WaitFlagStateUntilTimeout>
 8004e9a:	b130      	cbz	r0, 8004eaa <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e9e:	f043 0320 	orr.w	r3, r3, #32
 8004ea2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ea4:	2003      	movs	r0, #3
 8004ea6:	e000      	b.n	8004eaa <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004ea8:	2000      	movs	r0, #0
}
 8004eaa:	b005      	add	sp, #20
 8004eac:	bd30      	pop	{r4, r5, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000295c 	.word	0x2000295c
 8004eb4:	165e9f81 	.word	0x165e9f81

08004eb8 <SPI_EndRxTransaction>:
{
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec0:	6841      	ldr	r1, [r0, #4]
 8004ec2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004ec6:	d014      	beq.n	8004ef2 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec8:	6861      	ldr	r1, [r4, #4]
 8004eca:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004ece:	d12a      	bne.n	8004f26 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ed0:	68a1      	ldr	r1, [r4, #8]
 8004ed2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ed6:	d019      	beq.n	8004f0c <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed8:	9200      	str	r2, [sp, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7ff ff6b 	bl	8004dba <SPI_WaitFlagStateUntilTimeout>
 8004ee4:	b330      	cbz	r0, 8004f34 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ee8:	f043 0320 	orr.w	r3, r3, #32
 8004eec:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004eee:	2003      	movs	r0, #3
 8004ef0:	e020      	b.n	8004f34 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef2:	6881      	ldr	r1, [r0, #8]
 8004ef4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004ef8:	d002      	beq.n	8004f00 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004efa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004efe:	d1e3      	bne.n	8004ec8 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	6801      	ldr	r1, [r0, #0]
 8004f04:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004f08:	6001      	str	r1, [r0, #0]
 8004f0a:	e7dd      	b.n	8004ec8 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0c:	9200      	str	r2, [sp, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2101      	movs	r1, #1
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff ff51 	bl	8004dba <SPI_WaitFlagStateUntilTimeout>
 8004f18:	b160      	cbz	r0, 8004f34 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f1c:	f043 0320 	orr.w	r3, r3, #32
 8004f20:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f22:	2003      	movs	r0, #3
 8004f24:	e006      	b.n	8004f34 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f26:	9200      	str	r2, [sp, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7ff ff44 	bl	8004dba <SPI_WaitFlagStateUntilTimeout>
 8004f32:	b908      	cbnz	r0, 8004f38 <SPI_EndRxTransaction+0x80>
}
 8004f34:	b002      	add	sp, #8
 8004f36:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f3a:	f043 0320 	orr.w	r3, r3, #32
 8004f3e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f40:	2003      	movs	r0, #3
 8004f42:	e7f7      	b.n	8004f34 <SPI_EndRxTransaction+0x7c>

08004f44 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d03b      	beq.n	8004fc0 <HAL_SPI_Init+0x7c>
{
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f50:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02e      	beq.n	8004fb6 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	6813      	ldr	r3, [r2, #0]
 8004f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f66:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	68a2      	ldr	r2, [r4, #8]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	68e2      	ldr	r2, [r4, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	6922      	ldr	r2, [r4, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	6962      	ldr	r2, [r4, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	69a2      	ldr	r2, [r4, #24]
 8004f7c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004f80:	4313      	orrs	r3, r2
 8004f82:	69e2      	ldr	r2, [r4, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	6a22      	ldr	r2, [r4, #32]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f92:	8b63      	ldrh	r3, [r4, #26]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	69d3      	ldr	r3, [r2, #28]
 8004fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004faa:	2000      	movs	r0, #0
 8004fac:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004fb4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004fb6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004fba:	f00c fccd 	bl	8011958 <HAL_SPI_MspInit>
 8004fbe:	e7cb      	b.n	8004f58 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004fc0:	2001      	movs	r0, #1
}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_SPI_Transmit_IT>:
{
 8004fc4:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8004fc6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8004fca:	2801      	cmp	r0, #1
 8004fcc:	d043      	beq.n	8005056 <HAL_SPI_Transmit_IT+0x92>
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  if ((pData == NULL) || (Size == 0U))
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d033      	beq.n	8005040 <HAL_SPI_Transmit_IT+0x7c>
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	d033      	beq.n	8005044 <HAL_SPI_Transmit_IT+0x80>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004fdc:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
 8004fe0:	b2c0      	uxtb	r0, r0
 8004fe2:	2801      	cmp	r0, #1
 8004fe4:	d133      	bne.n	800504e <HAL_SPI_Transmit_IT+0x8a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fe6:	2003      	movs	r0, #3
 8004fe8:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fec:	2000      	movs	r0, #0
 8004fee:	6558      	str	r0, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ff0:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ff6:	6398      	str	r0, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ff8:	8798      	strh	r0, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ffa:	87d8      	strh	r0, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ffc:	6418      	str	r0, [r3, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	b1aa      	cbz	r2, 800502e <HAL_SPI_Transmit_IT+0x6a>
    hspi->TxISR = SPI_TxISR_16BIT;
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <HAL_SPI_Transmit_IT+0x98>)
 8005004:	645a      	str	r2, [r3, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800500c:	d012      	beq.n	8005034 <HAL_SPI_Transmit_IT+0x70>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	684a      	ldr	r2, [r1, #4]
 8005012:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005016:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	6811      	ldr	r1, [r2, #0]
 800501c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005020:	d117      	bne.n	8005052 <HAL_SPI_Transmit_IT+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8005022:	6811      	ldr	r1, [r2, #0]
 8005024:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005028:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800502a:	2000      	movs	r0, #0
 800502c:	e00b      	b.n	8005046 <HAL_SPI_Transmit_IT+0x82>
    hspi->TxISR = SPI_TxISR_8BIT;
 800502e:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <HAL_SPI_Transmit_IT+0x9c>)
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
 8005032:	e7e8      	b.n	8005006 <HAL_SPI_Transmit_IT+0x42>
    SPI_1LINE_TX(hspi);
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	680a      	ldr	r2, [r1, #0]
 8005038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800503c:	600a      	str	r2, [r1, #0]
 800503e:	e7e6      	b.n	800500e <HAL_SPI_Transmit_IT+0x4a>
    errorcode = HAL_ERROR;
 8005040:	2001      	movs	r0, #1
 8005042:	e000      	b.n	8005046 <HAL_SPI_Transmit_IT+0x82>
 8005044:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800504c:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800504e:	2002      	movs	r0, #2
 8005050:	e7f9      	b.n	8005046 <HAL_SPI_Transmit_IT+0x82>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005052:	2000      	movs	r0, #0
 8005054:	e7f7      	b.n	8005046 <HAL_SPI_Transmit_IT+0x82>
  __HAL_LOCK(hspi);
 8005056:	2002      	movs	r0, #2
}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	080052a1 	.word	0x080052a1
 8005060:	08005279 	.word	0x08005279

08005064 <HAL_SPI_TransmitReceive_IT>:
{
 8005064:	b430      	push	{r4, r5}
 8005066:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005068:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800506c:	2801      	cmp	r0, #1
 800506e:	d053      	beq.n	8005118 <HAL_SPI_TransmitReceive_IT+0xb4>
 8005070:	2001      	movs	r0, #1
 8005072:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8005076:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800507a:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800507c:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800507e:	2801      	cmp	r0, #1
 8005080:	d007      	beq.n	8005092 <HAL_SPI_TransmitReceive_IT+0x2e>
 8005082:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8005086:	d135      	bne.n	80050f4 <HAL_SPI_TransmitReceive_IT+0x90>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005088:	68a5      	ldr	r5, [r4, #8]
 800508a:	2d00      	cmp	r5, #0
 800508c:	d138      	bne.n	8005100 <HAL_SPI_TransmitReceive_IT+0x9c>
 800508e:	2804      	cmp	r0, #4
 8005090:	d138      	bne.n	8005104 <HAL_SPI_TransmitReceive_IT+0xa0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005092:	2900      	cmp	r1, #0
 8005094:	d038      	beq.n	8005108 <HAL_SPI_TransmitReceive_IT+0xa4>
 8005096:	2a00      	cmp	r2, #0
 8005098:	d038      	beq.n	800510c <HAL_SPI_TransmitReceive_IT+0xa8>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d038      	beq.n	8005110 <HAL_SPI_TransmitReceive_IT+0xac>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800509e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80050a2:	b2c0      	uxtb	r0, r0
 80050a4:	2804      	cmp	r0, #4
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_TransmitReceive_IT+0x4a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050a8:	2005      	movs	r0, #5
 80050aa:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ae:	2000      	movs	r0, #0
 80050b0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050b2:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050b4:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050b6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050b8:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050ba:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050be:	68e3      	ldr	r3, [r4, #12]
 80050c0:	b19b      	cbz	r3, 80050ea <HAL_SPI_TransmitReceive_IT+0x86>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80050c2:	4b16      	ldr	r3, [pc, #88]	; (800511c <HAL_SPI_TransmitReceive_IT+0xb8>)
 80050c4:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <HAL_SPI_TransmitReceive_IT+0xbc>)
 80050c8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	6853      	ldr	r3, [r2, #4]
 80050ce:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80050d2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050dc:	d11a      	bne.n	8005114 <HAL_SPI_TransmitReceive_IT+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050e6:	2000      	movs	r0, #0
 80050e8:	e005      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80050ea:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <HAL_SPI_TransmitReceive_IT+0xc0>)
 80050ec:	6423      	str	r3, [r4, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80050ee:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <HAL_SPI_TransmitReceive_IT+0xc4>)
 80050f0:	6463      	str	r3, [r4, #68]	; 0x44
 80050f2:	e7ea      	b.n	80050ca <HAL_SPI_TransmitReceive_IT+0x66>
    errorcode = HAL_BUSY;
 80050f4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80050f6:	2300      	movs	r3, #0
 80050f8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80050fc:	bc30      	pop	{r4, r5}
 80050fe:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8005100:	2002      	movs	r0, #2
 8005102:	e7f8      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
 8005104:	2002      	movs	r0, #2
 8005106:	e7f6      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
    errorcode = HAL_ERROR;
 8005108:	2001      	movs	r0, #1
 800510a:	e7f4      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
 800510c:	2001      	movs	r0, #1
 800510e:	e7f2      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
 8005110:	2001      	movs	r0, #1
 8005112:	e7f0      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005114:	2000      	movs	r0, #0
 8005116:	e7ee      	b.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x92>
  __HAL_LOCK(hspi);
 8005118:	2002      	movs	r0, #2
 800511a:	e7ef      	b.n	80050fc <HAL_SPI_TransmitReceive_IT+0x98>
 800511c:	080054c9 	.word	0x080054c9
 8005120:	08005491 	.word	0x08005491
 8005124:	08005459 	.word	0x08005459
 8005128:	08005421 	.word	0x08005421

0800512c <HAL_SPI_Receive_IT>:
{
 800512c:	b510      	push	{r4, lr}
 800512e:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005130:	6883      	ldr	r3, [r0, #8]
 8005132:	b91b      	cbnz	r3, 800513c <HAL_SPI_Receive_IT+0x10>
 8005134:	6840      	ldr	r0, [r0, #4]
 8005136:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800513a:	d032      	beq.n	80051a2 <HAL_SPI_Receive_IT+0x76>
  __HAL_LOCK(hspi);
 800513c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8005140:	2801      	cmp	r0, #1
 8005142:	d047      	beq.n	80051d4 <HAL_SPI_Receive_IT+0xa8>
 8005144:	2001      	movs	r0, #1
 8005146:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 800514a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800514e:	b2c0      	uxtb	r0, r0
 8005150:	2801      	cmp	r0, #1
 8005152:	d138      	bne.n	80051c6 <HAL_SPI_Receive_IT+0x9a>
  if ((pData == NULL) || (Size == 0U))
 8005154:	2900      	cmp	r1, #0
 8005156:	d037      	beq.n	80051c8 <HAL_SPI_Receive_IT+0x9c>
 8005158:	2a00      	cmp	r2, #0
 800515a:	d035      	beq.n	80051c8 <HAL_SPI_Receive_IT+0x9c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800515c:	2004      	movs	r0, #4
 800515e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005162:	2000      	movs	r0, #0
 8005164:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005166:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005168:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800516a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800516c:	6320      	str	r0, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800516e:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005170:	86e0      	strh	r0, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8005172:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005174:	68e2      	ldr	r2, [r4, #12]
 8005176:	b1ea      	cbz	r2, 80051b4 <HAL_SPI_Receive_IT+0x88>
    hspi->RxISR = SPI_RxISR_16BIT;
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_SPI_Receive_IT+0xac>)
 800517a:	6422      	str	r2, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005180:	d01b      	beq.n	80051ba <HAL_SPI_Receive_IT+0x8e>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	6853      	ldr	r3, [r2, #4]
 8005186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800518a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005194:	d11c      	bne.n	80051d0 <HAL_SPI_Receive_IT+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800519e:	2000      	movs	r0, #0
 80051a0:	e012      	b.n	80051c8 <HAL_SPI_Receive_IT+0x9c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051a2:	2304      	movs	r3, #4
 80051a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80051a8:	4613      	mov	r3, r2
 80051aa:	460a      	mov	r2, r1
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7ff ff59 	bl	8005064 <HAL_SPI_TransmitReceive_IT>
 80051b2:	e00c      	b.n	80051ce <HAL_SPI_Receive_IT+0xa2>
    hspi->RxISR = SPI_RxISR_8BIT;
 80051b4:	4a09      	ldr	r2, [pc, #36]	; (80051dc <HAL_SPI_Receive_IT+0xb0>)
 80051b6:	6422      	str	r2, [r4, #64]	; 0x40
 80051b8:	e7e0      	b.n	800517c <HAL_SPI_Receive_IT+0x50>
    SPI_1LINE_RX(hspi);
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	6813      	ldr	r3, [r2, #0]
 80051be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e7dd      	b.n	8005182 <HAL_SPI_Receive_IT+0x56>
    errorcode = HAL_BUSY;
 80051c6:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80051c8:	2300      	movs	r3, #0
 80051ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80051ce:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051d0:	2000      	movs	r0, #0
 80051d2:	e7f9      	b.n	80051c8 <HAL_SPI_Receive_IT+0x9c>
  __HAL_LOCK(hspi);
 80051d4:	2002      	movs	r0, #2
 80051d6:	e7fa      	b.n	80051ce <HAL_SPI_Receive_IT+0xa2>
 80051d8:	08005347 	.word	0x08005347
 80051dc:	0800531f 	.word	0x0800531f

080051e0 <HAL_SPI_TxCpltCallback>:
}
 80051e0:	4770      	bx	lr

080051e2 <HAL_SPI_RxCpltCallback>:
}
 80051e2:	4770      	bx	lr

080051e4 <HAL_SPI_TxRxCpltCallback>:
}
 80051e4:	4770      	bx	lr

080051e6 <HAL_SPI_ErrorCallback>:
}
 80051e6:	4770      	bx	lr

080051e8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80051e8:	b510      	push	{r4, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	4604      	mov	r4, r0
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <SPI_CloseTx_ISR+0x88>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a20      	ldr	r2, [pc, #128]	; (8005274 <SPI_CloseTx_ISR+0x8c>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	0a5b      	lsrs	r3, r3, #9
 80051fa:	2264      	movs	r2, #100	; 0x64
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	9301      	str	r3, [sp, #4]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005202:	f7fb ff5d 	bl	80010c0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	b143      	cbz	r3, 800521e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
 800520c:	9b01      	ldr	r3, [sp, #4]
 800520e:	3b01      	subs	r3, #1
 8005210:	9301      	str	r3, [sp, #4]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f013 0f02 	tst.w	r3, #2
 800521a:	d0f5      	beq.n	8005208 <SPI_CloseTx_ISR+0x20>
 800521c:	e003      	b.n	8005226 <SPI_CloseTx_ISR+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800521e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005220:	f043 0320 	orr.w	r3, r3, #32
 8005224:	6563      	str	r3, [r4, #84]	; 0x54

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005226:	6821      	ldr	r1, [r4, #0]
 8005228:	684b      	ldr	r3, [r1, #4]
 800522a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800522e:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005230:	2164      	movs	r1, #100	; 0x64
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff fe0c 	bl	8004e50 <SPI_EndRxTxTransaction>
 8005238:	b118      	cbz	r0, 8005242 <SPI_CloseTx_ISR+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005242:	68a3      	ldr	r3, [r4, #8]
 8005244:	b933      	cbnz	r3, 8005254 <SPI_CloseTx_ISR+0x6c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	9200      	str	r2, [sp, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	9b00      	ldr	r3, [sp, #0]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005254:	2301      	movs	r3, #1
 8005256:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800525c:	b123      	cbz	r3, 8005268 <SPI_CloseTx_ISR+0x80>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff ffc1 	bl	80051e6 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005264:	b002      	add	sp, #8
 8005266:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8005268:	4620      	mov	r0, r4
 800526a:	f7ff ffb9 	bl	80051e0 <HAL_SPI_TxCpltCallback>
}
 800526e:	e7f9      	b.n	8005264 <SPI_CloseTx_ISR+0x7c>
 8005270:	2000295c 	.word	0x2000295c
 8005274:	057619f1 	.word	0x057619f1

08005278 <SPI_TxISR_8BIT>:
{
 8005278:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800527a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800527c:	6803      	ldr	r3, [r0, #0]
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8005282:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005284:	3301      	adds	r3, #1
 8005286:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8005288:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29b      	uxth	r3, r3
 8005290:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8005292:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005294:	b29b      	uxth	r3, r3
 8005296:	b103      	cbz	r3, 800529a <SPI_TxISR_8BIT+0x22>
}
 8005298:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800529a:	f7ff ffa5 	bl	80051e8 <SPI_CloseTx_ISR>
}
 800529e:	e7fb      	b.n	8005298 <SPI_TxISR_8BIT+0x20>

080052a0 <SPI_TxISR_16BIT>:
{
 80052a0:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80052a4:	6803      	ldr	r3, [r0, #0]
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80052aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80052ac:	3302      	adds	r3, #2
 80052ae:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80052b0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80052ba:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	b103      	cbz	r3, 80052c2 <SPI_TxISR_16BIT+0x22>
}
 80052c0:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80052c2:	f7ff ff91 	bl	80051e8 <SPI_CloseTx_ISR>
}
 80052c6:	e7fb      	b.n	80052c0 <SPI_TxISR_16BIT+0x20>

080052c8 <SPI_CloseRx_ISR>:
{
 80052c8:	b510      	push	{r4, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80052ce:	6802      	ldr	r2, [r0, #0]
 80052d0:	6853      	ldr	r3, [r2, #4]
 80052d2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80052d6:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80052d8:	f7fb fef2 	bl	80010c0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff fde9 	bl	8004eb8 <SPI_EndRxTransaction>
 80052e6:	b118      	cbz	r0, 80052f0 <SPI_CloseRx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052ea:	f043 0320 	orr.w	r3, r3, #32
 80052ee:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052f0:	68a3      	ldr	r3, [r4, #8]
 80052f2:	b933      	cbnz	r3, 8005302 <SPI_CloseRx_ISR+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	9201      	str	r2, [sp, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005302:	2301      	movs	r3, #1
 8005304:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005308:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800530a:	b923      	cbnz	r3, 8005316 <SPI_CloseRx_ISR+0x4e>
      HAL_SPI_RxCpltCallback(hspi);
 800530c:	4620      	mov	r0, r4
 800530e:	f7ff ff68 	bl	80051e2 <HAL_SPI_RxCpltCallback>
}
 8005312:	b002      	add	sp, #8
 8005314:	bd10      	pop	{r4, pc}
      HAL_SPI_ErrorCallback(hspi);
 8005316:	4620      	mov	r0, r4
 8005318:	f7ff ff65 	bl	80051e6 <HAL_SPI_ErrorCallback>
}
 800531c:	e7f9      	b.n	8005312 <SPI_CloseRx_ISR+0x4a>

0800531e <SPI_RxISR_8BIT>:
{
 800531e:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005320:	6802      	ldr	r2, [r0, #0]
 8005322:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005324:	7b12      	ldrb	r2, [r2, #12]
 8005326:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005328:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800532a:	3301      	adds	r3, #1
 800532c:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 800532e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8005338:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800533a:	b29b      	uxth	r3, r3
 800533c:	b103      	cbz	r3, 8005340 <SPI_RxISR_8BIT+0x22>
}
 800533e:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005340:	f7ff ffc2 	bl	80052c8 <SPI_CloseRx_ISR>
}
 8005344:	e7fb      	b.n	800533e <SPI_RxISR_8BIT+0x20>

08005346 <SPI_RxISR_16BIT>:
{
 8005346:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005348:	6803      	ldr	r3, [r0, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800534e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005350:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005352:	3302      	adds	r3, #2
 8005354:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005356:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29b      	uxth	r3, r3
 800535e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8005360:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	b103      	cbz	r3, 8005368 <SPI_RxISR_16BIT+0x22>
}
 8005366:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005368:	f7ff ffae 	bl	80052c8 <SPI_CloseRx_ISR>
}
 800536c:	e7fb      	b.n	8005366 <SPI_RxISR_16BIT+0x20>
	...

08005370 <SPI_CloseRxTx_ISR>:
{
 8005370:	b510      	push	{r4, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005376:	4b28      	ldr	r3, [pc, #160]	; (8005418 <SPI_CloseRxTx_ISR+0xa8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a28      	ldr	r2, [pc, #160]	; (800541c <SPI_CloseRxTx_ISR+0xac>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	0a5b      	lsrs	r3, r3, #9
 8005382:	2264      	movs	r2, #100	; 0x64
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	9301      	str	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800538a:	f7fb fe99 	bl	80010c0 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005390:	6821      	ldr	r1, [r4, #0]
 8005392:	684b      	ldr	r3, [r1, #4]
 8005394:	f023 0320 	bic.w	r3, r3, #32
 8005398:	604b      	str	r3, [r1, #4]
    if (count == 0U)
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	b143      	cbz	r3, 80053b0 <SPI_CloseRxTx_ISR+0x40>
    count--;
 800539e:	9b01      	ldr	r3, [sp, #4]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f013 0f02 	tst.w	r3, #2
 80053ac:	d0f5      	beq.n	800539a <SPI_CloseRxTx_ISR+0x2a>
 80053ae:	e003      	b.n	80053b8 <SPI_CloseRxTx_ISR+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053b2:	f043 0320 	orr.w	r3, r3, #32
 80053b6:	6563      	str	r3, [r4, #84]	; 0x54
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053b8:	2164      	movs	r1, #100	; 0x64
 80053ba:	4620      	mov	r0, r4
 80053bc:	f7ff fd48 	bl	8004e50 <SPI_EndRxTxTransaction>
 80053c0:	b118      	cbz	r0, 80053ca <SPI_CloseRxTx_ISR+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053c4:	f043 0320 	orr.w	r3, r3, #32
 80053c8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	b933      	cbnz	r3, 80053dc <SPI_CloseRxTx_ISR+0x6c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	9200      	str	r2, [sp, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	9b00      	ldr	r3, [sp, #0]
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80053dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053de:	b99b      	cbnz	r3, 8005408 <SPI_CloseRxTx_ISR+0x98>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80053e0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d007      	beq.n	80053fa <SPI_CloseRxTx_ISR+0x8a>
        hspi->State = HAL_SPI_STATE_READY;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff fef7 	bl	80051e4 <HAL_SPI_TxRxCpltCallback>
}
 80053f6:	b002      	add	sp, #8
 80053f8:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8005400:	4620      	mov	r0, r4
 8005402:	f7ff feee 	bl	80051e2 <HAL_SPI_RxCpltCallback>
 8005406:	e7f6      	b.n	80053f6 <SPI_CloseRxTx_ISR+0x86>
      hspi->State = HAL_SPI_STATE_READY;
 8005408:	2301      	movs	r3, #1
 800540a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fee9 	bl	80051e6 <HAL_SPI_ErrorCallback>
}
 8005414:	e7ef      	b.n	80053f6 <SPI_CloseRxTx_ISR+0x86>
 8005416:	bf00      	nop
 8005418:	2000295c 	.word	0x2000295c
 800541c:	057619f1 	.word	0x057619f1

08005420 <SPI_2linesTxISR_8BIT>:
{
 8005420:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005422:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005424:	6803      	ldr	r3, [r0, #0]
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 800542a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800542c:	3301      	adds	r3, #1
 800542e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8005430:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29b      	uxth	r3, r3
 8005438:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 800543a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	b93b      	cbnz	r3, 8005450 <SPI_2linesTxISR_8BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005440:	6802      	ldr	r2, [r0, #0]
 8005442:	6853      	ldr	r3, [r2, #4]
 8005444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005448:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800544a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800544c:	b29b      	uxth	r3, r3
 800544e:	b103      	cbz	r3, 8005452 <SPI_2linesTxISR_8BIT+0x32>
}
 8005450:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8005452:	f7ff ff8d 	bl	8005370 <SPI_CloseRxTx_ISR>
}
 8005456:	e7fb      	b.n	8005450 <SPI_2linesTxISR_8BIT+0x30>

08005458 <SPI_2linesRxISR_8BIT>:
{
 8005458:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800545a:	6802      	ldr	r2, [r0, #0]
 800545c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800545e:	7b12      	ldrb	r2, [r2, #12]
 8005460:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005462:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005464:	3301      	adds	r3, #1
 8005466:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005468:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29b      	uxth	r3, r3
 8005470:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8005472:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	b93b      	cbnz	r3, 8005488 <SPI_2linesRxISR_8BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005478:	6802      	ldr	r2, [r0, #0]
 800547a:	6853      	ldr	r3, [r2, #4]
 800547c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005480:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8005482:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005484:	b29b      	uxth	r3, r3
 8005486:	b103      	cbz	r3, 800548a <SPI_2linesRxISR_8BIT+0x32>
}
 8005488:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800548a:	f7ff ff71 	bl	8005370 <SPI_CloseRxTx_ISR>
}
 800548e:	e7fb      	b.n	8005488 <SPI_2linesRxISR_8BIT+0x30>

08005490 <SPI_2linesTxISR_16BIT>:
{
 8005490:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005492:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005494:	6803      	ldr	r3, [r0, #0]
 8005496:	8812      	ldrh	r2, [r2, #0]
 8005498:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800549a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800549c:	3302      	adds	r3, #2
 800549e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80054a0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80054aa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b93b      	cbnz	r3, 80054c0 <SPI_2linesTxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80054b0:	6802      	ldr	r2, [r0, #0]
 80054b2:	6853      	ldr	r3, [r2, #4]
 80054b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b8:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80054ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	b103      	cbz	r3, 80054c2 <SPI_2linesTxISR_16BIT+0x32>
}
 80054c0:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80054c2:	f7ff ff55 	bl	8005370 <SPI_CloseRxTx_ISR>
}
 80054c6:	e7fb      	b.n	80054c0 <SPI_2linesTxISR_16BIT+0x30>

080054c8 <SPI_2linesRxISR_16BIT>:
{
 80054c8:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80054ca:	6803      	ldr	r3, [r0, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054d0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80054d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054d4:	3302      	adds	r3, #2
 80054d6:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 80054d8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 80054e2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	b93b      	cbnz	r3, 80054f8 <SPI_2linesRxISR_16BIT+0x30>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80054e8:	6802      	ldr	r2, [r0, #0]
 80054ea:	6853      	ldr	r3, [r2, #4]
 80054ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80054f2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b103      	cbz	r3, 80054fa <SPI_2linesRxISR_16BIT+0x32>
}
 80054f8:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80054fa:	f7ff ff39 	bl	8005370 <SPI_CloseRxTx_ISR>
}
 80054fe:	e7fb      	b.n	80054f8 <SPI_2linesRxISR_16BIT+0x30>

08005500 <HAL_SPI_IRQHandler>:
{
 8005500:	b530      	push	{r4, r5, lr}
 8005502:	b085      	sub	sp, #20
 8005504:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005506:	6802      	ldr	r2, [r0, #0]
 8005508:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800550a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800550c:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8005510:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005514:	d105      	bne.n	8005522 <HAL_SPI_IRQHandler+0x22>
 8005516:	f013 0f01 	tst.w	r3, #1
 800551a:	d002      	beq.n	8005522 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800551c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005520:	d169      	bne.n	80055f6 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005522:	f013 0f02 	tst.w	r3, #2
 8005526:	d002      	beq.n	800552e <HAL_SPI_IRQHandler+0x2e>
 8005528:	f011 0f80 	tst.w	r1, #128	; 0x80
 800552c:	d167      	bne.n	80055fe <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800552e:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8005532:	f013 0f20 	tst.w	r3, #32
 8005536:	d103      	bne.n	8005540 <HAL_SPI_IRQHandler+0x40>
 8005538:	b910      	cbnz	r0, 8005540 <HAL_SPI_IRQHandler+0x40>
 800553a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800553e:	d061      	beq.n	8005604 <HAL_SPI_IRQHandler+0x104>
 8005540:	f011 0f20 	tst.w	r1, #32
 8005544:	d05e      	beq.n	8005604 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005546:	b178      	cbz	r0, 8005568 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005548:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800554c:	b2c0      	uxtb	r0, r0
 800554e:	2803      	cmp	r0, #3
 8005550:	d05a      	beq.n	8005608 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005554:	f040 0004 	orr.w	r0, r0, #4
 8005558:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800555a:	2000      	movs	r0, #0
 800555c:	9000      	str	r0, [sp, #0]
 800555e:	68d0      	ldr	r0, [r2, #12]
 8005560:	9000      	str	r0, [sp, #0]
 8005562:	6890      	ldr	r0, [r2, #8]
 8005564:	9000      	str	r0, [sp, #0]
 8005566:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005568:	b165      	cbz	r5, 8005584 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800556a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800556c:	f040 0001 	orr.w	r0, r0, #1
 8005570:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005572:	2000      	movs	r0, #0
 8005574:	9002      	str	r0, [sp, #8]
 8005576:	6890      	ldr	r0, [r2, #8]
 8005578:	9002      	str	r0, [sp, #8]
 800557a:	6810      	ldr	r0, [r2, #0]
 800557c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005580:	6010      	str	r0, [r2, #0]
 8005582:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005584:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005588:	d009      	beq.n	800559e <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800558a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800558c:	f043 0308 	orr.w	r3, r3, #8
 8005590:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005592:	2300      	movs	r3, #0
 8005594:	9303      	str	r3, [sp, #12]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	9303      	str	r3, [sp, #12]
 800559c:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800559e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02f      	beq.n	8005604 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	6853      	ldr	r3, [r2, #4]
 80055a8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80055ac:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055b4:	f011 0f03 	tst.w	r1, #3
 80055b8:	d02e      	beq.n	8005618 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	6853      	ldr	r3, [r2, #4]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80055c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055c6:	b14b      	cbz	r3, 80055dc <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <HAL_SPI_IRQHandler+0x120>)
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80055cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80055ce:	f7fc fb7f 	bl	8001cd0 <HAL_DMA_Abort_IT>
 80055d2:	b118      	cbz	r0, 80055dc <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055da:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80055dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055de:	b18b      	cbz	r3, 8005604 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055e0:	4a0f      	ldr	r2, [pc, #60]	; (8005620 <HAL_SPI_IRQHandler+0x120>)
 80055e2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80055e6:	f7fc fb73 	bl	8001cd0 <HAL_DMA_Abort_IT>
 80055ea:	b158      	cbz	r0, 8005604 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f2:	6563      	str	r3, [r4, #84]	; 0x54
 80055f4:	e006      	b.n	8005604 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 80055f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f8:	4620      	mov	r0, r4
 80055fa:	4798      	blx	r3
    return;
 80055fc:	e002      	b.n	8005604 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 80055fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005600:	4620      	mov	r0, r4
 8005602:	4798      	blx	r3
}
 8005604:	b005      	add	sp, #20
 8005606:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005608:	2300      	movs	r3, #0
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	68d3      	ldr	r3, [r2, #12]
 800560e:	9301      	str	r3, [sp, #4]
 8005610:	6893      	ldr	r3, [r2, #8]
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	9b01      	ldr	r3, [sp, #4]
        return;
 8005616:	e7f5      	b.n	8005604 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8005618:	4620      	mov	r0, r4
 800561a:	f7ff fde4 	bl	80051e6 <HAL_SPI_ErrorCallback>
    return;
 800561e:	e7f1      	b.n	8005604 <HAL_SPI_IRQHandler+0x104>
 8005620:	08005625 	.word	0x08005625

08005624 <SPI_DMAAbortOnError>:
{
 8005624:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005626:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800562c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800562e:	f7ff fdda 	bl	80051e6 <HAL_SPI_ErrorCallback>
}
 8005632:	bd08      	pop	{r3, pc}

08005634 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005634:	6802      	ldr	r2, [r0, #0]
 8005636:	68d3      	ldr	r3, [r2, #12]
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563e:	6802      	ldr	r2, [r0, #0]
 8005640:	6893      	ldr	r3, [r2, #8]
 8005642:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005646:	2b06      	cmp	r3, #6
 8005648:	d003      	beq.n	8005652 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8005652:	2000      	movs	r0, #0
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565a:	4770      	bx	lr

0800565c <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_IRQHandler>:
{
 800565e:	b510      	push	{r4, lr}
 8005660:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005662:	6803      	ldr	r3, [r0, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	f012 0f02 	tst.w	r2, #2
 800566a:	d011      	beq.n	8005690 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	f012 0f02 	tst.w	r2, #2
 8005672:	d00d      	beq.n	8005690 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005674:	f06f 0202 	mvn.w	r2, #2
 8005678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567a:	2301      	movs	r3, #1
 800567c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567e:	6803      	ldr	r3, [r0, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f013 0f03 	tst.w	r3, #3
 8005686:	d070      	beq.n	800576a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005688:	f7ff ffe6 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568c:	2300      	movs	r3, #0
 800568e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	f012 0f04 	tst.w	r2, #4
 8005698:	d012      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	f012 0f04 	tst.w	r2, #4
 80056a0:	d00e      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a2:	f06f 0204 	mvn.w	r2, #4
 80056a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a8:	2302      	movs	r3, #2
 80056aa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80056b4:	d05f      	beq.n	8005776 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff ffce 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056bc:	2300      	movs	r3, #0
 80056be:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	f012 0f08 	tst.w	r2, #8
 80056c8:	d012      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	f012 0f08 	tst.w	r2, #8
 80056d0:	d00e      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d2:	f06f 0208 	mvn.w	r2, #8
 80056d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056d8:	2304      	movs	r3, #4
 80056da:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f013 0f03 	tst.w	r3, #3
 80056e4:	d04e      	beq.n	8005784 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff ffb6 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	2300      	movs	r3, #0
 80056ee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	f012 0f10 	tst.w	r2, #16
 80056f8:	d012      	beq.n	8005720 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	f012 0f10 	tst.w	r2, #16
 8005700:	d00e      	beq.n	8005720 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005702:	f06f 0210 	mvn.w	r2, #16
 8005706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005708:	2308      	movs	r3, #8
 800570a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005714:	d03d      	beq.n	8005792 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff ff9e 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571c:	2300      	movs	r3, #0
 800571e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	f012 0f01 	tst.w	r2, #1
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	f012 0f01 	tst.w	r2, #1
 8005730:	d136      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	f012 0f80 	tst.w	r2, #128	; 0x80
 800573a:	d003      	beq.n	8005744 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005742:	d134      	bne.n	80057ae <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	f012 0f40 	tst.w	r2, #64	; 0x40
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005754:	d132      	bne.n	80057bc <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	f012 0f20 	tst.w	r2, #32
 800575e:	d003      	beq.n	8005768 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	f012 0f20 	tst.w	r2, #32
 8005766:	d130      	bne.n	80057ca <HAL_TIM_IRQHandler+0x16c>
}
 8005768:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	f7ff ff74 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576e:	4620      	mov	r0, r4
 8005770:	f7ff ff73 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 8005774:	e78a      	b.n	800568c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	4620      	mov	r0, r4
 8005778:	f7ff ff6d 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff ff6c 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 8005782:	e79b      	b.n	80056bc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005784:	4620      	mov	r0, r4
 8005786:	f7ff ff66 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff ff65 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 8005790:	e7ac      	b.n	80056ec <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	4620      	mov	r0, r4
 8005794:	f7ff ff5f 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff ff5e 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 800579e:	e7bd      	b.n	800571c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057a0:	f06f 0201 	mvn.w	r2, #1
 80057a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a6:	4620      	mov	r0, r4
 80057a8:	f00c ffde 	bl	8012768 <HAL_TIM_PeriodElapsedCallback>
 80057ac:	e7c1      	b.n	8005732 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f8b1 	bl	800591c <HAL_TIMEx_BreakCallback>
 80057ba:	e7c3      	b.n	8005744 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff ff4a 	bl	800565c <HAL_TIM_TriggerCallback>
 80057c8:	e7c5      	b.n	8005756 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ca:	f06f 0220 	mvn.w	r2, #32
 80057ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 f8a2 	bl	800591a <HAL_TIMEx_CommutCallback>
}
 80057d6:	e7c7      	b.n	8005768 <HAL_TIM_IRQHandler+0x10a>

080057d8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057da:	4a30      	ldr	r2, [pc, #192]	; (800589c <TIM_Base_SetConfig+0xc4>)
 80057dc:	4290      	cmp	r0, r2
 80057de:	d012      	beq.n	8005806 <TIM_Base_SetConfig+0x2e>
 80057e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80057e4:	d00f      	beq.n	8005806 <TIM_Base_SetConfig+0x2e>
 80057e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80057ea:	4290      	cmp	r0, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0x2e>
 80057ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057f2:	4290      	cmp	r0, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0x2e>
 80057f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057fa:	4290      	cmp	r0, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0x2e>
 80057fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005802:	4290      	cmp	r0, r2
 8005804:	d103      	bne.n	800580e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800580a:	684a      	ldr	r2, [r1, #4]
 800580c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <TIM_Base_SetConfig+0xc4>)
 8005810:	4290      	cmp	r0, r2
 8005812:	d02a      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 8005814:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005818:	d027      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 800581a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800581e:	4290      	cmp	r0, r2
 8005820:	d023      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 8005822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005826:	4290      	cmp	r0, r2
 8005828:	d01f      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 800582a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800582e:	4290      	cmp	r0, r2
 8005830:	d01b      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 8005832:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005836:	4290      	cmp	r0, r2
 8005838:	d017      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 800583a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800583e:	4290      	cmp	r0, r2
 8005840:	d013      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 8005842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005846:	4290      	cmp	r0, r2
 8005848:	d00f      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 800584a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800584e:	4290      	cmp	r0, r2
 8005850:	d00b      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 8005852:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005856:	4290      	cmp	r0, r2
 8005858:	d007      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 800585a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800585e:	4290      	cmp	r0, r2
 8005860:	d003      	beq.n	800586a <TIM_Base_SetConfig+0x92>
 8005862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005866:	4290      	cmp	r0, r2
 8005868:	d103      	bne.n	8005872 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586e:	68ca      	ldr	r2, [r1, #12]
 8005870:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005876:	694a      	ldr	r2, [r1, #20]
 8005878:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800587a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800587c:	688b      	ldr	r3, [r1, #8]
 800587e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005880:	680b      	ldr	r3, [r1, #0]
 8005882:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <TIM_Base_SetConfig+0xc4>)
 8005886:	4298      	cmp	r0, r3
 8005888:	d003      	beq.n	8005892 <TIM_Base_SetConfig+0xba>
 800588a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588e:	4298      	cmp	r0, r3
 8005890:	d101      	bne.n	8005896 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005892:	690b      	ldr	r3, [r1, #16]
 8005894:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005896:	2301      	movs	r3, #1
 8005898:	6143      	str	r3, [r0, #20]
}
 800589a:	4770      	bx	lr
 800589c:	40010000 	.word	0x40010000

080058a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80058a0:	b1b0      	cbz	r0, 80058d0 <HAL_TIM_Base_Init+0x30>
{
 80058a2:	b510      	push	{r4, lr}
 80058a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058aa:	b163      	cbz	r3, 80058c6 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	2302      	movs	r3, #2
 80058ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b2:	4621      	mov	r1, r4
 80058b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80058b8:	f7ff ff8e 	bl	80057d8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	2301      	movs	r3, #1
 80058be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80058c2:	2000      	movs	r0, #0
}
 80058c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80058c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058ca:	f00c fa0d 	bl	8011ce8 <HAL_TIM_Base_MspInit>
 80058ce:	e7ed      	b.n	80058ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80058d0:	2001      	movs	r0, #1
}
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d01c      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80058dc:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80058de:	2601      	movs	r6, #1
 80058e0:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	2302      	movs	r3, #2
 80058e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ea:	6802      	ldr	r2, [r0, #0]
 80058ec:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ee:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f0:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f4:	680c      	ldr	r4, [r1, #0]
 80058f6:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80058f8:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fc:	684b      	ldr	r3, [r1, #4]
 80058fe:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005900:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005902:	6802      	ldr	r2, [r0, #0]
 8005904:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005906:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590a:	2300      	movs	r3, #0
 800590c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005910:	4618      	mov	r0, r3
}
 8005912:	bc70      	pop	{r4, r5, r6}
 8005914:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005916:	2002      	movs	r0, #2
}
 8005918:	4770      	bx	lr

0800591a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800591c:	4770      	bx	lr

0800591e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800591e:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005920:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	fa94 f4a4 	rbit	r4, r4
 8005926:	fab4 f484 	clz	r4, r4

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800592a:	e02c      	b.n	8005986 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800592c:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800592e:	6882      	ldr	r2, [r0, #8]
 8005930:	fa93 f5a3 	rbit	r5, r3
 8005934:	fab5 f585 	clz	r5, r5
 8005938:	006d      	lsls	r5, r5, #1
 800593a:	fa07 f505 	lsl.w	r5, r7, r5
 800593e:	ea22 0205 	bic.w	r2, r2, r5
 8005942:	fa93 f5a3 	rbit	r5, r3
 8005946:	fab5 f585 	clz	r5, r5
 800594a:	006d      	lsls	r5, r5, #1
 800594c:	fa06 f505 	lsl.w	r5, r6, r5
 8005950:	432a      	orrs	r2, r5
 8005952:	6082      	str	r2, [r0, #8]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005954:	690e      	ldr	r6, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005956:	68c2      	ldr	r2, [r0, #12]
 8005958:	fa93 f5a3 	rbit	r5, r3
 800595c:	fab5 f585 	clz	r5, r5
 8005960:	006d      	lsls	r5, r5, #1
 8005962:	2703      	movs	r7, #3
 8005964:	fa07 f505 	lsl.w	r5, r7, r5
 8005968:	ea22 0205 	bic.w	r2, r2, r5
 800596c:	fa93 f5a3 	rbit	r5, r3
 8005970:	fab5 f585 	clz	r5, r5
 8005974:	006d      	lsls	r5, r5, #1
 8005976:	fa06 f505 	lsl.w	r5, r6, r5
 800597a:	432a      	orrs	r2, r5
 800597c:	60c2      	str	r2, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800597e:	684a      	ldr	r2, [r1, #4]
 8005980:	2a02      	cmp	r2, #2
 8005982:	d022      	beq.n	80059ca <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8005984:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005986:	680b      	ldr	r3, [r1, #0]
 8005988:	fa33 f204 	lsrs.w	r2, r3, r4
 800598c:	d050      	beq.n	8005a30 <LL_GPIO_Init+0x112>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800598e:	2201      	movs	r2, #1
 8005990:	40a2      	lsls	r2, r4
    if (currentpin)
 8005992:	4013      	ands	r3, r2
 8005994:	d0f6      	beq.n	8005984 <LL_GPIO_Init+0x66>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005996:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005998:	6802      	ldr	r2, [r0, #0]
 800599a:	fa93 f5a3 	rbit	r5, r3
 800599e:	fab5 f585 	clz	r5, r5
 80059a2:	006d      	lsls	r5, r5, #1
 80059a4:	2703      	movs	r7, #3
 80059a6:	fa07 f505 	lsl.w	r5, r7, r5
 80059aa:	ea22 0205 	bic.w	r2, r2, r5
 80059ae:	fa93 f5a3 	rbit	r5, r3
 80059b2:	fab5 f585 	clz	r5, r5
 80059b6:	006d      	lsls	r5, r5, #1
 80059b8:	fa06 f505 	lsl.w	r5, r6, r5
 80059bc:	432a      	orrs	r2, r5
 80059be:	6002      	str	r2, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80059c0:	684a      	ldr	r2, [r1, #4]
 80059c2:	3a01      	subs	r2, #1
 80059c4:	2a01      	cmp	r2, #1
 80059c6:	d8c5      	bhi.n	8005954 <LL_GPIO_Init+0x36>
 80059c8:	e7b0      	b.n	800592c <LL_GPIO_Init+0xe>
 80059ca:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80059ce:	fab2 f282 	clz	r2, r2
 80059d2:	2a07      	cmp	r2, #7
 80059d4:	d815      	bhi.n	8005a02 <LL_GPIO_Init+0xe4>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80059d6:	694d      	ldr	r5, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80059d8:	6a02      	ldr	r2, [r0, #32]
 80059da:	fa93 f6a3 	rbit	r6, r3
 80059de:	fab6 f686 	clz	r6, r6
 80059e2:	00b6      	lsls	r6, r6, #2
 80059e4:	270f      	movs	r7, #15
 80059e6:	fa07 f606 	lsl.w	r6, r7, r6
 80059ea:	ea22 0206 	bic.w	r2, r2, r6
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	fa05 f303 	lsl.w	r3, r5, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	6203      	str	r3, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005a00:	e7c0      	b.n	8005984 <LL_GPIO_Init+0x66>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005a02:	694a      	ldr	r2, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005a04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	fa93 f6a3 	rbit	r6, r3
 8005a0c:	fab6 f686 	clz	r6, r6
 8005a10:	00b6      	lsls	r6, r6, #2
 8005a12:	270f      	movs	r7, #15
 8005a14:	fa07 f606 	lsl.w	r6, r7, r6
 8005a18:	ea25 0506 	bic.w	r5, r5, r6
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	432b      	orrs	r3, r5
 8005a2c:	6243      	str	r3, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005a2e:	e7a9      	b.n	8005984 <LL_GPIO_Init+0x66>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a30:	684a      	ldr	r2, [r1, #4]
 8005a32:	3a01      	subs	r2, #1
 8005a34:	2a01      	cmp	r2, #1
 8005a36:	d902      	bls.n	8005a3e <LL_GPIO_Init+0x120>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bcf0      	pop	{r4, r5, r6, r7}
 8005a3c:	4770      	bx	lr
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005a3e:	68c9      	ldr	r1, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005a40:	6842      	ldr	r2, [r0, #4]
 8005a42:	ea22 0203 	bic.w	r2, r2, r3
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	6043      	str	r3, [r0, #4]
}
 8005a4e:	e7f3      	b.n	8005a38 <LL_GPIO_Init+0x11a>

08005a50 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <RCC_GetHCLKClockFreq+0x10>)
 8005a52:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005a54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a58:	4a02      	ldr	r2, [pc, #8]	; (8005a64 <RCC_GetHCLKClockFreq+0x14>)
 8005a5a:	5cd3      	ldrb	r3, [r2, r3]
}
 8005a5c:	40d8      	lsrs	r0, r3
 8005a5e:	4770      	bx	lr
 8005a60:	40023800 	.word	0x40023800
 8005a64:	0801a32c 	.word	0x0801a32c

08005a68 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <RCC_GetPCLK1ClockFreq+0x10>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005a6c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005a70:	4a02      	ldr	r2, [pc, #8]	; (8005a7c <RCC_GetPCLK1ClockFreq+0x14>)
 8005a72:	5cd3      	ldrb	r3, [r2, r3]
}
 8005a74:	40d8      	lsrs	r0, r3
 8005a76:	4770      	bx	lr
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	0801a33c 	.word	0x0801a33c

08005a80 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <RCC_GetPCLK2ClockFreq+0x10>)
 8005a82:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005a84:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005a88:	4a02      	ldr	r2, [pc, #8]	; (8005a94 <RCC_GetPCLK2ClockFreq+0x14>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
}
 8005a8c:	40d8      	lsrs	r0, r3
 8005a8e:	4770      	bx	lr
 8005a90:	40023800 	.word	0x40023800
 8005a94:	0801a33c 	.word	0x0801a33c

08005a98 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a98:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005aa0:	b923      	cbnz	r3, 8005aac <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005aa4:	2808      	cmp	r0, #8
 8005aa6:	d003      	beq.n	8005ab0 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005aa8:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8005aaa:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8005aae:	e7f9      	b.n	8005aa4 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ab0:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005ab2:	6850      	ldr	r0, [r2, #4]
 8005ab4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ab8:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005abc:	6850      	ldr	r0, [r2, #4]
 8005abe:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005ac2:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005ac6:	6853      	ldr	r3, [r2, #4]
 8005ac8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005acc:	3301      	adds	r3, #1
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	017d7840 	.word	0x017d7840

08005ae4 <RCC_GetSystemClockFreq>:
{
 8005ae4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <RCC_GetSystemClockFreq+0x24>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d005      	beq.n	8005afe <RCC_GetSystemClockFreq+0x1a>
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d105      	bne.n	8005b02 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005af6:	2008      	movs	r0, #8
 8005af8:	f7ff ffce 	bl	8005a98 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8005afc:	e002      	b.n	8005b04 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8005afe:	4803      	ldr	r0, [pc, #12]	; (8005b0c <RCC_GetSystemClockFreq+0x28>)
 8005b00:	e000      	b.n	8005b04 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8005b02:	4803      	ldr	r0, [pc, #12]	; (8005b10 <RCC_GetSystemClockFreq+0x2c>)
}
 8005b04:	bd08      	pop	{r3, pc}
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	017d7840 	.word	0x017d7840
 8005b10:	00f42400 	.word	0x00f42400

08005b14 <LL_RCC_GetSystemClocksFreq>:
{
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005b18:	f7ff ffe4 	bl	8005ae4 <RCC_GetSystemClockFreq>
 8005b1c:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005b1e:	f7ff ff97 	bl	8005a50 <RCC_GetHCLKClockFreq>
 8005b22:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b24:	f7ff ffa0 	bl	8005a68 <RCC_GetPCLK1ClockFreq>
 8005b28:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b2a:	6860      	ldr	r0, [r4, #4]
 8005b2c:	f7ff ffa8 	bl	8005a80 <RCC_GetPCLK2ClockFreq>
 8005b30:	60e0      	str	r0, [r4, #12]
}
 8005b32:	bd10      	pop	{r4, pc}

08005b34 <LL_USART_Init>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005b34:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005b36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005b3a:	d001      	beq.n	8005b40 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8005b3c:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005b3e:	4770      	bx	lr
{
 8005b40:	b530      	push	{r4, r5, lr}
 8005b42:	b085      	sub	sp, #20
 8005b44:	4604      	mov	r4, r0
 8005b46:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8005b48:	68c3      	ldr	r3, [r0, #12]
 8005b4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b4e:	f023 030c 	bic.w	r3, r3, #12
 8005b52:	684a      	ldr	r2, [r1, #4]
 8005b54:	68c9      	ldr	r1, [r1, #12]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	6929      	ldr	r1, [r5, #16]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	69a9      	ldr	r1, [r5, #24]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005b64:	68ab      	ldr	r3, [r5, #8]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005b66:	6902      	ldr	r2, [r0, #16]
 8005b68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005b70:	696b      	ldr	r3, [r5, #20]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005b72:	6942      	ldr	r2, [r0, #20]
 8005b74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005b7c:	4668      	mov	r0, sp
 8005b7e:	f7ff ffc9 	bl	8005b14 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005b82:	4b3c      	ldr	r3, [pc, #240]	; (8005c74 <LL_USART_Init+0x140>)
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d016      	beq.n	8005bb6 <LL_USART_Init+0x82>
    else if (USARTx == USART2)
 8005b88:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <LL_USART_Init+0x144>)
 8005b8a:	429c      	cmp	r4, r3
 8005b8c:	d01a      	beq.n	8005bc4 <LL_USART_Init+0x90>
    else if (USARTx == USART3)
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <LL_USART_Init+0x148>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d019      	beq.n	8005bc8 <LL_USART_Init+0x94>
    else if (USARTx == USART6)
 8005b94:	4b3a      	ldr	r3, [pc, #232]	; (8005c80 <LL_USART_Init+0x14c>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d018      	beq.n	8005bcc <LL_USART_Init+0x98>
    else if (USARTx == UART4)
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <LL_USART_Init+0x150>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	d017      	beq.n	8005bd0 <LL_USART_Init+0x9c>
    else if (USARTx == UART5)
 8005ba0:	4b39      	ldr	r3, [pc, #228]	; (8005c88 <LL_USART_Init+0x154>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d016      	beq.n	8005bd4 <LL_USART_Init+0xa0>
    else if (USARTx == UART7)
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <LL_USART_Init+0x158>)
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	d015      	beq.n	8005bd8 <LL_USART_Init+0xa4>
    else if (USARTx == UART8)
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <LL_USART_Init+0x15c>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d014      	beq.n	8005bdc <LL_USART_Init+0xa8>
  ErrorStatus status = ERROR;
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	e05b      	b.n	8005c6e <LL_USART_Init+0x13a>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005bb6:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d057      	beq.n	8005c6c <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8005bbc:	682a      	ldr	r2, [r5, #0]
 8005bbe:	b97a      	cbnz	r2, 8005be0 <LL_USART_Init+0xac>
  ErrorStatus status = ERROR;
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e054      	b.n	8005c6e <LL_USART_Init+0x13a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	e7f7      	b.n	8005bb8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	e7f5      	b.n	8005bb8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	e7f3      	b.n	8005bb8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005bd0:	9b02      	ldr	r3, [sp, #8]
 8005bd2:	e7f1      	b.n	8005bb8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005bd4:	9b02      	ldr	r3, [sp, #8]
 8005bd6:	e7ef      	b.n	8005bb8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	e7ed      	b.n	8005bb8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	e7eb      	b.n	8005bb8 <LL_USART_Init+0x84>
      LL_USART_SetBaudRate(USARTx,
 8005be0:	69a9      	ldr	r1, [r5, #24]
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005be2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005be6:	d020      	beq.n	8005c2a <LL_USART_Init+0xf6>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005be8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf6:	4827      	ldr	r0, [pc, #156]	; (8005c94 <LL_USART_Init+0x160>)
 8005bf8:	fba0 1203 	umull	r1, r2, r0, r3
 8005bfc:	0952      	lsrs	r2, r2, #5
 8005bfe:	0111      	lsls	r1, r2, #4
 8005c00:	b289      	uxth	r1, r1
 8005c02:	2564      	movs	r5, #100	; 0x64
 8005c04:	fb05 3312 	mls	r3, r5, r2, r3
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	3332      	adds	r3, #50	; 0x32
 8005c0c:	fba0 2303 	umull	r2, r3, r0, r3
 8005c10:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c18:	440a      	add	r2, r1
 8005c1a:	b292      	uxth	r2, r2
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	4413      	add	r3, r2
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8005c26:	2000      	movs	r0, #0
  }
}
 8005c28:	e021      	b.n	8005c6e <LL_USART_Init+0x13a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005c2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c32:	0052      	lsls	r2, r2, #1
 8005c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c38:	4816      	ldr	r0, [pc, #88]	; (8005c94 <LL_USART_Init+0x160>)
 8005c3a:	fba0 1203 	umull	r1, r2, r0, r3
 8005c3e:	0952      	lsrs	r2, r2, #5
 8005c40:	0111      	lsls	r1, r2, #4
 8005c42:	b289      	uxth	r1, r1
 8005c44:	2564      	movs	r5, #100	; 0x64
 8005c46:	fb05 3312 	mls	r3, r5, r2, r3
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	3332      	adds	r3, #50	; 0x32
 8005c4e:	fba0 2303 	umull	r2, r3, r0, r3
 8005c52:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005c56:	005a      	lsls	r2, r3, #1
 8005c58:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005c5c:	440a      	add	r2, r1
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4413      	add	r3, r2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	60a3      	str	r3, [r4, #8]
 8005c6a:	e7dc      	b.n	8005c26 <LL_USART_Init+0xf2>
  ErrorStatus status = ERROR;
 8005c6c:	2001      	movs	r0, #1
}
 8005c6e:	b005      	add	sp, #20
 8005c70:	bd30      	pop	{r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	40011000 	.word	0x40011000
 8005c78:	40004400 	.word	0x40004400
 8005c7c:	40004800 	.word	0x40004800
 8005c80:	40011400 	.word	0x40011400
 8005c84:	40004c00 	.word	0x40004c00
 8005c88:	40005000 	.word	0x40005000
 8005c8c:	40007800 	.word	0x40007800
 8005c90:	40007c00 	.word	0x40007c00
 8005c94:	51eb851f 	.word	0x51eb851f

08005c98 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005c98:	ba40      	rev16	r0, r0
}
 8005c9a:	b280      	uxth	r0, r0
 8005c9c:	4770      	bx	lr

08005c9e <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 8005c9e:	0203      	lsls	r3, r0, #8
 8005ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ca4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005ca8:	0a02      	lsrs	r2, r0, #8
 8005caa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005cae:	4313      	orrs	r3, r2
}
 8005cb0:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8005cb4:	4770      	bx	lr

08005cb6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005cb6:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005cb8:	f000 f878 	bl	8005dac <mem_init>
  memp_init();
 8005cbc:	f000 fa44 	bl	8006148 <memp_init>
  pbuf_init();
  netif_init();
 8005cc0:	f000 fa97 	bl	80061f2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005cc4:	f004 fb7c 	bl	800a3c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005cc8:	f001 f830 	bl	8006d2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8005ccc:	f004 fafc 	bl	800a2c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005cd0:	bd08      	pop	{r3, pc}
	...

08005cd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	; (8005d90 <plug_holes+0xbc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4283      	cmp	r3, r0
 8005cde:	d831      	bhi.n	8005d44 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	; (8005d90 <plug_holes+0xbc>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	d935      	bls.n	8005d54 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005ce8:	7923      	ldrb	r3, [r4, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d13a      	bne.n	8005d64 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005cee:	8823      	ldrh	r3, [r4, #0]
 8005cf0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cf4:	d83e      	bhi.n	8005d74 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <plug_holes+0xbc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	8821      	ldrh	r1, [r4, #0]
 8005cfc:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005cfe:	4294      	cmp	r4, r2
 8005d00:	d00f      	beq.n	8005d22 <plug_holes+0x4e>
 8005d02:	7910      	ldrb	r0, [r2, #4]
 8005d04:	b968      	cbnz	r0, 8005d22 <plug_holes+0x4e>
 8005d06:	4822      	ldr	r0, [pc, #136]	; (8005d90 <plug_holes+0xbc>)
 8005d08:	6840      	ldr	r0, [r0, #4]
 8005d0a:	4290      	cmp	r0, r2
 8005d0c:	d009      	beq.n	8005d22 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005d0e:	4820      	ldr	r0, [pc, #128]	; (8005d90 <plug_holes+0xbc>)
 8005d10:	6880      	ldr	r0, [r0, #8]
 8005d12:	4290      	cmp	r0, r2
 8005d14:	d036      	beq.n	8005d84 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8005d16:	5a5a      	ldrh	r2, [r3, r1]
 8005d18:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005d1a:	1ae0      	subs	r0, r4, r3
 8005d1c:	5a5a      	ldrh	r2, [r3, r1]
 8005d1e:	441a      	add	r2, r3
 8005d20:	8050      	strh	r0, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005d22:	8861      	ldrh	r1, [r4, #2]
 8005d24:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8005d26:	4294      	cmp	r4, r2
 8005d28:	d00b      	beq.n	8005d42 <plug_holes+0x6e>
 8005d2a:	7910      	ldrb	r0, [r2, #4]
 8005d2c:	b948      	cbnz	r0, 8005d42 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005d2e:	4818      	ldr	r0, [pc, #96]	; (8005d90 <plug_holes+0xbc>)
 8005d30:	6880      	ldr	r0, [r0, #8]
 8005d32:	42a0      	cmp	r0, r4
 8005d34:	d029      	beq.n	8005d8a <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8005d36:	8820      	ldrh	r0, [r4, #0]
 8005d38:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	8821      	ldrh	r1, [r4, #0]
 8005d3e:	440b      	add	r3, r1
 8005d40:	805a      	strh	r2, [r3, #2]
  }
}
 8005d42:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005d44:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <plug_holes+0xc0>)
 8005d46:	f240 125d 	movw	r2, #349	; 0x15d
 8005d4a:	4913      	ldr	r1, [pc, #76]	; (8005d98 <plug_holes+0xc4>)
 8005d4c:	4813      	ldr	r0, [pc, #76]	; (8005d9c <plug_holes+0xc8>)
 8005d4e:	f00d f8db 	bl	8012f08 <printf>
 8005d52:	e7c5      	b.n	8005ce0 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <plug_holes+0xc0>)
 8005d56:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005d5a:	4911      	ldr	r1, [pc, #68]	; (8005da0 <plug_holes+0xcc>)
 8005d5c:	480f      	ldr	r0, [pc, #60]	; (8005d9c <plug_holes+0xc8>)
 8005d5e:	f00d f8d3 	bl	8012f08 <printf>
 8005d62:	e7c1      	b.n	8005ce8 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <plug_holes+0xc0>)
 8005d66:	f240 125f 	movw	r2, #351	; 0x15f
 8005d6a:	490e      	ldr	r1, [pc, #56]	; (8005da4 <plug_holes+0xd0>)
 8005d6c:	480b      	ldr	r0, [pc, #44]	; (8005d9c <plug_holes+0xc8>)
 8005d6e:	f00d f8cb 	bl	8012f08 <printf>
 8005d72:	e7bc      	b.n	8005cee <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <plug_holes+0xc0>)
 8005d76:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005d7a:	490b      	ldr	r1, [pc, #44]	; (8005da8 <plug_holes+0xd4>)
 8005d7c:	4807      	ldr	r0, [pc, #28]	; (8005d9c <plug_holes+0xc8>)
 8005d7e:	f00d f8c3 	bl	8012f08 <printf>
 8005d82:	e7b8      	b.n	8005cf6 <plug_holes+0x22>
      lfree = mem;
 8005d84:	4a02      	ldr	r2, [pc, #8]	; (8005d90 <plug_holes+0xbc>)
 8005d86:	6094      	str	r4, [r2, #8]
 8005d88:	e7c5      	b.n	8005d16 <plug_holes+0x42>
      lfree = pmem;
 8005d8a:	4801      	ldr	r0, [pc, #4]	; (8005d90 <plug_holes+0xbc>)
 8005d8c:	6082      	str	r2, [r0, #8]
 8005d8e:	e7d2      	b.n	8005d36 <plug_holes+0x62>
 8005d90:	20003390 	.word	0x20003390
 8005d94:	0801a344 	.word	0x0801a344
 8005d98:	0801a374 	.word	0x0801a374
 8005d9c:	0801a38c 	.word	0x0801a38c
 8005da0:	0801a3b4 	.word	0x0801a3b4
 8005da4:	0801a3d0 	.word	0x0801a3d0
 8005da8:	0801a3ec 	.word	0x0801a3ec

08005dac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005dac:	b410      	push	{r4}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <mem_init+0x30>)
 8005db0:	f023 0303 	bic.w	r3, r3, #3
 8005db4:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <mem_init+0x34>)
 8005db6:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8005db8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005dbc:	8018      	strh	r0, [r3, #0]
  mem->prev = 0;
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
 8005dc2:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005dc4:	1819      	adds	r1, r3, r0
 8005dc6:	6051      	str	r1, [r2, #4]
  ram_end->used = 1;
 8005dc8:	2401      	movs	r4, #1
 8005dca:	710c      	strb	r4, [r1, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005dcc:	f8a3 0640 	strh.w	r0, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005dd0:	8048      	strh	r0, [r1, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005dd2:	6093      	str	r3, [r2, #8]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	200044eb 	.word	0x200044eb
 8005de0:	20003390 	.word	0x20003390

08005de4 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d03d      	beq.n	8005e64 <mem_free+0x80>
{
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005dec:	f010 0f03 	tst.w	r0, #3
 8005df0:	d128      	bne.n	8005e44 <mem_free+0x60>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005df2:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <mem_free+0x84>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	d803      	bhi.n	8005e02 <mem_free+0x1e>
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <mem_free+0x84>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	42a3      	cmp	r3, r4
 8005e00:	d806      	bhi.n	8005e10 <mem_free+0x2c>
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <mem_free+0x88>)
 8005e04:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8005e08:	4919      	ldr	r1, [pc, #100]	; (8005e70 <mem_free+0x8c>)
 8005e0a:	481a      	ldr	r0, [pc, #104]	; (8005e74 <mem_free+0x90>)
 8005e0c:	f00d f87c 	bl	8012f08 <printf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005e10:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <mem_free+0x84>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d814      	bhi.n	8005e42 <mem_free+0x5e>
 8005e18:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <mem_free+0x84>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	d910      	bls.n	8005e42 <mem_free+0x5e>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005e20:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005e24:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005e28:	b1a3      	cbz	r3, 8005e54 <mem_free+0x70>
  /* ... and is now unused. */
  mem->used = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <mem_free+0x84>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	d901      	bls.n	8005e3c <mem_free+0x58>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <mem_free+0x84>)
 8005e3a:	609d      	str	r5, [r3, #8]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f7ff ff49 	bl	8005cd4 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <mem_free+0x88>)
 8005e46:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005e4a:	490b      	ldr	r1, [pc, #44]	; (8005e78 <mem_free+0x94>)
 8005e4c:	4809      	ldr	r0, [pc, #36]	; (8005e74 <mem_free+0x90>)
 8005e4e:	f00d f85b 	bl	8012f08 <printf>
 8005e52:	e7ce      	b.n	8005df2 <mem_free+0xe>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <mem_free+0x88>)
 8005e56:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005e5a:	4908      	ldr	r1, [pc, #32]	; (8005e7c <mem_free+0x98>)
 8005e5c:	4805      	ldr	r0, [pc, #20]	; (8005e74 <mem_free+0x90>)
 8005e5e:	f00d f853 	bl	8012f08 <printf>
 8005e62:	e7e2      	b.n	8005e2a <mem_free+0x46>
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20003390 	.word	0x20003390
 8005e6c:	0801a344 	.word	0x0801a344
 8005e70:	0801a43c 	.word	0x0801a43c
 8005e74:	0801a38c 	.word	0x0801a38c
 8005e78:	0801a418 	.word	0x0801a418
 8005e7c:	0801a454 	.word	0x0801a454

08005e80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005e84:	1ccc      	adds	r4, r1, #3
 8005e86:	b2a4      	uxth	r4, r4
 8005e88:	f024 0403 	bic.w	r4, r4, #3
 8005e8c:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8005e8e:	2c0b      	cmp	r4, #11
 8005e90:	d905      	bls.n	8005e9e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005e92:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8005e96:	d903      	bls.n	8005ea0 <mem_trim+0x20>
    return NULL;
 8005e98:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    newsize = MIN_SIZE_ALIGNED;
 8005e9e:	240c      	movs	r4, #12
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005ea0:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <mem_trim+0x100>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	d803      	bhi.n	8005eb0 <mem_trim+0x30>
 8005ea8:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <mem_trim+0x100>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	d806      	bhi.n	8005ebe <mem_trim+0x3e>
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <mem_trim+0x104>)
 8005eb2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005eb6:	4934      	ldr	r1, [pc, #208]	; (8005f88 <mem_trim+0x108>)
 8005eb8:	4834      	ldr	r0, [pc, #208]	; (8005f8c <mem_trim+0x10c>)
 8005eba:	f00d f825 	bl	8012f08 <printf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005ebe:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <mem_trim+0x100>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	42ab      	cmp	r3, r5
 8005ec4:	d8e9      	bhi.n	8005e9a <mem_trim+0x1a>
 8005ec6:	4a2e      	ldr	r2, [pc, #184]	; (8005f80 <mem_trim+0x100>)
 8005ec8:	6852      	ldr	r2, [r2, #4]
 8005eca:	42aa      	cmp	r2, r5
 8005ecc:	d9e5      	bls.n	8005e9a <mem_trim+0x1a>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005ece:	f1a5 0708 	sub.w	r7, r5, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005ed2:	1aff      	subs	r7, r7, r3
 8005ed4:	b2bf      	uxth	r7, r7
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005ed6:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8005eda:	1bf6      	subs	r6, r6, r7
 8005edc:	b2b6      	uxth	r6, r6
 8005ede:	3e08      	subs	r6, #8
 8005ee0:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005ee2:	42b4      	cmp	r4, r6
 8005ee4:	d820      	bhi.n	8005f28 <mem_trim+0xa8>
  if (newsize > size) {
 8005ee6:	42b4      	cmp	r4, r6
 8005ee8:	d848      	bhi.n	8005f7c <mem_trim+0xfc>
  if (newsize == size) {
 8005eea:	d0d6      	beq.n	8005e9a <mem_trim+0x1a>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8005eec:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <mem_trim+0x100>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8005ef4:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8005ef6:	7908      	ldrb	r0, [r1, #4]
 8005ef8:	bb10      	cbnz	r0, 8005f40 <mem_trim+0xc0>
    next = mem2->next;
 8005efa:	5ad0      	ldrh	r0, [r2, r3]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005efc:	19e3      	adds	r3, r4, r7
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3308      	adds	r3, #8
 8005f02:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8005f04:	4c1e      	ldr	r4, [pc, #120]	; (8005f80 <mem_trim+0x100>)
 8005f06:	68a4      	ldr	r4, [r4, #8]
 8005f08:	428c      	cmp	r4, r1
 8005f0a:	d015      	beq.n	8005f38 <mem_trim+0xb8>
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005f0c:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8005f0e:	2400      	movs	r4, #0
 8005f10:	710c      	strb	r4, [r1, #4]
    mem2->next = next;
 8005f12:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8005f14:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8005f16:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f1a:	5ad1      	ldrh	r1, [r2, r3]
 8005f1c:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8005f20:	d0bb      	beq.n	8005e9a <mem_trim+0x1a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005f22:	440a      	add	r2, r1
 8005f24:	8053      	strh	r3, [r2, #2]
 8005f26:	e7b8      	b.n	8005e9a <mem_trim+0x1a>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f28:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <mem_trim+0x104>)
 8005f2a:	f240 2206 	movw	r2, #518	; 0x206
 8005f2e:	4918      	ldr	r1, [pc, #96]	; (8005f90 <mem_trim+0x110>)
 8005f30:	4816      	ldr	r0, [pc, #88]	; (8005f8c <mem_trim+0x10c>)
 8005f32:	f00c ffe9 	bl	8012f08 <printf>
 8005f36:	e7d6      	b.n	8005ee6 <mem_trim+0x66>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005f38:	18d1      	adds	r1, r2, r3
 8005f3a:	4c11      	ldr	r4, [pc, #68]	; (8005f80 <mem_trim+0x100>)
 8005f3c:	60a1      	str	r1, [r4, #8]
 8005f3e:	e7e5      	b.n	8005f0c <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005f40:	f104 0314 	add.w	r3, r4, #20
 8005f44:	42b3      	cmp	r3, r6
 8005f46:	d8a8      	bhi.n	8005e9a <mem_trim+0x1a>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005f48:	19e3      	adds	r3, r4, r7
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005f50:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8005f52:	480b      	ldr	r0, [pc, #44]	; (8005f80 <mem_trim+0x100>)
 8005f54:	6880      	ldr	r0, [r0, #8]
 8005f56:	4288      	cmp	r0, r1
 8005f58:	d901      	bls.n	8005f5e <mem_trim+0xde>
      lfree = mem2;
 8005f5a:	4809      	ldr	r0, [pc, #36]	; (8005f80 <mem_trim+0x100>)
 8005f5c:	6081      	str	r1, [r0, #8]
    mem2->used = 0;
 8005f5e:	2000      	movs	r0, #0
 8005f60:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8005f62:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8005f66:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8005f68:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8005f6a:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f6e:	5ad1      	ldrh	r1, [r2, r3]
 8005f70:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8005f74:	d091      	beq.n	8005e9a <mem_trim+0x1a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005f76:	440a      	add	r2, r1
 8005f78:	8053      	strh	r3, [r2, #2]
 8005f7a:	e78e      	b.n	8005e9a <mem_trim+0x1a>
    return NULL;
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	e78c      	b.n	8005e9a <mem_trim+0x1a>
 8005f80:	20003390 	.word	0x20003390
 8005f84:	0801a344 	.word	0x0801a344
 8005f88:	0801a468 	.word	0x0801a468
 8005f8c:	0801a38c 	.word	0x0801a38c
 8005f90:	0801a480 	.word	0x0801a480

08005f94 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d07e      	beq.n	8006096 <mem_malloc+0x102>
{
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005f9a:	1cc2      	adds	r2, r0, #3
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	f022 0203 	bic.w	r2, r2, #3
 8005fa2:	b292      	uxth	r2, r2

  if (size < MIN_SIZE_ALIGNED) {
 8005fa4:	2a0b      	cmp	r2, #11
 8005fa6:	d904      	bls.n	8005fb2 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005fa8:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8005fac:	d902      	bls.n	8005fb4 <mem_malloc+0x20>
    return NULL;
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e070      	b.n	8006094 <mem_malloc+0x100>
    size = MIN_SIZE_ALIGNED;
 8005fb2:	220c      	movs	r2, #12
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005fb4:	4b39      	ldr	r3, [pc, #228]	; (800609c <mem_malloc+0x108>)
 8005fb6:	689f      	ldr	r7, [r3, #8]
 8005fb8:	681e      	ldr	r6, [r3, #0]
 8005fba:	1bbb      	subs	r3, r7, r6
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	e040      	b.n	8006042 <mem_malloc+0xae>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005fc4:	42a7      	cmp	r7, r4
 8005fc6:	d00e      	beq.n	8005fe6 <mem_malloc+0x52>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005fc8:	4425      	add	r5, r4
 8005fca:	3508      	adds	r5, #8
 8005fcc:	4b33      	ldr	r3, [pc, #204]	; (800609c <mem_malloc+0x108>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	429d      	cmp	r5, r3
 8005fd2:	d81d      	bhi.n	8006010 <mem_malloc+0x7c>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005fd4:	f014 0503 	ands.w	r5, r4, #3
 8005fd8:	d122      	bne.n	8006020 <mem_malloc+0x8c>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005fda:	bb4d      	cbnz	r5, 8006030 <mem_malloc+0x9c>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005fdc:	f104 0008 	add.w	r0, r4, #8
 8005fe0:	e058      	b.n	8006094 <mem_malloc+0x100>
            cur = (struct mem *)(void *)&ram[cur->next];
 8005fe2:	883f      	ldrh	r7, [r7, #0]
 8005fe4:	4437      	add	r7, r6
          while (cur->used && cur != ram_end) {
 8005fe6:	793b      	ldrb	r3, [r7, #4]
 8005fe8:	b11b      	cbz	r3, 8005ff2 <mem_malloc+0x5e>
 8005fea:	4a2c      	ldr	r2, [pc, #176]	; (800609c <mem_malloc+0x108>)
 8005fec:	6852      	ldr	r2, [r2, #4]
 8005fee:	42ba      	cmp	r2, r7
 8005ff0:	d1f7      	bne.n	8005fe2 <mem_malloc+0x4e>
          lfree = cur;
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	; (800609c <mem_malloc+0x108>)
 8005ff4:	6097      	str	r7, [r2, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005ff6:	6852      	ldr	r2, [r2, #4]
 8005ff8:	42ba      	cmp	r2, r7
 8005ffa:	d0e5      	beq.n	8005fc8 <mem_malloc+0x34>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0e3      	beq.n	8005fc8 <mem_malloc+0x34>
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <mem_malloc+0x10c>)
 8006002:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006006:	4927      	ldr	r1, [pc, #156]	; (80060a4 <mem_malloc+0x110>)
 8006008:	4827      	ldr	r0, [pc, #156]	; (80060a8 <mem_malloc+0x114>)
 800600a:	f00c ff7d 	bl	8012f08 <printf>
 800600e:	e7db      	b.n	8005fc8 <mem_malloc+0x34>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006010:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <mem_malloc+0x10c>)
 8006012:	f240 22d3 	movw	r2, #723	; 0x2d3
 8006016:	4925      	ldr	r1, [pc, #148]	; (80060ac <mem_malloc+0x118>)
 8006018:	4823      	ldr	r0, [pc, #140]	; (80060a8 <mem_malloc+0x114>)
 800601a:	f00c ff75 	bl	8012f08 <printf>
 800601e:	e7d9      	b.n	8005fd4 <mem_malloc+0x40>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006020:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <mem_malloc+0x10c>)
 8006022:	f240 22d5 	movw	r2, #725	; 0x2d5
 8006026:	4922      	ldr	r1, [pc, #136]	; (80060b0 <mem_malloc+0x11c>)
 8006028:	481f      	ldr	r0, [pc, #124]	; (80060a8 <mem_malloc+0x114>)
 800602a:	f00c ff6d 	bl	8012f08 <printf>
 800602e:	e7d4      	b.n	8005fda <mem_malloc+0x46>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <mem_malloc+0x10c>)
 8006032:	f240 22d7 	movw	r2, #727	; 0x2d7
 8006036:	491f      	ldr	r1, [pc, #124]	; (80060b4 <mem_malloc+0x120>)
 8006038:	481b      	ldr	r0, [pc, #108]	; (80060a8 <mem_malloc+0x114>)
 800603a:	f00c ff65 	bl	8012f08 <printf>
 800603e:	e7cd      	b.n	8005fdc <mem_malloc+0x48>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006040:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006042:	469c      	mov	ip, r3
 8006044:	4615      	mov	r5, r2
 8006046:	f5c2 60c8 	rsb	r0, r2, #1600	; 0x640
 800604a:	4283      	cmp	r3, r0
 800604c:	d221      	bcs.n	8006092 <mem_malloc+0xfe>
      mem = (struct mem *)(void *)&ram[ptr];
 800604e:	18f4      	adds	r4, r6, r3
      if ((!mem->used) &&
 8006050:	7920      	ldrb	r0, [r4, #4]
 8006052:	2800      	cmp	r0, #0
 8006054:	d1f4      	bne.n	8006040 <mem_malloc+0xac>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006056:	5af1      	ldrh	r1, [r6, r3]
 8006058:	eba1 010c 	sub.w	r1, r1, ip
 800605c:	3908      	subs	r1, #8
      if ((!mem->used) &&
 800605e:	42a9      	cmp	r1, r5
 8006060:	d3ee      	bcc.n	8006040 <mem_malloc+0xac>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006062:	f105 0014 	add.w	r0, r5, #20
 8006066:	4281      	cmp	r1, r0
 8006068:	d3aa      	bcc.n	8005fc0 <mem_malloc+0x2c>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800606a:	441a      	add	r2, r3
 800606c:	b292      	uxth	r2, r2
 800606e:	3208      	adds	r2, #8
 8006070:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006072:	18b1      	adds	r1, r6, r2
          mem2->used = 0;
 8006074:	2000      	movs	r0, #0
 8006076:	7108      	strb	r0, [r1, #4]
          mem2->next = mem->next;
 8006078:	8820      	ldrh	r0, [r4, #0]
 800607a:	52b0      	strh	r0, [r6, r2]
          mem2->prev = ptr;
 800607c:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 800607e:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8006080:	2301      	movs	r3, #1
 8006082:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006084:	5ab3      	ldrh	r3, [r6, r2]
 8006086:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800608a:	d09b      	beq.n	8005fc4 <mem_malloc+0x30>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800608c:	4433      	add	r3, r6
 800608e:	805a      	strh	r2, [r3, #2]
 8006090:	e798      	b.n	8005fc4 <mem_malloc+0x30>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8006092:	2000      	movs	r0, #0
}
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8006096:	2000      	movs	r0, #0
}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20003390 	.word	0x20003390
 80060a0:	0801a344 	.word	0x0801a344
 80060a4:	0801a4a0 	.word	0x0801a4a0
 80060a8:	0801a38c 	.word	0x0801a38c
 80060ac:	0801a4bc 	.word	0x0801a4bc
 80060b0:	0801a4ec 	.word	0x0801a4ec
 80060b4:	0801a51c 	.word	0x0801a51c

080060b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80060b8:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80060ba:	6883      	ldr	r3, [r0, #8]
 80060bc:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80060be:	b124      	cbz	r4, 80060ca <do_memp_malloc_pool+0x12>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80060c4:	f014 0f03 	tst.w	r4, #3
 80060c8:	d101      	bne.n	80060ce <do_memp_malloc_pool+0x16>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 80060ca:	4620      	mov	r0, r4
 80060cc:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <do_memp_malloc_pool+0x28>)
 80060d0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80060d4:	4903      	ldr	r1, [pc, #12]	; (80060e4 <do_memp_malloc_pool+0x2c>)
 80060d6:	4804      	ldr	r0, [pc, #16]	; (80060e8 <do_memp_malloc_pool+0x30>)
 80060d8:	f00c ff16 	bl	8012f08 <printf>
    return ((u8_t*)memp + MEMP_SIZE);
 80060dc:	e7f5      	b.n	80060ca <do_memp_malloc_pool+0x12>
 80060de:	bf00      	nop
 80060e0:	0801a540 	.word	0x0801a540
 80060e4:	0801a570 	.word	0x0801a570
 80060e8:	0801a38c 	.word	0x0801a38c

080060ec <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4605      	mov	r5, r0
 80060f0:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80060f2:	f011 0f03 	tst.w	r1, #3
 80060f6:	d105      	bne.n	8006104 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80060f8:	68ab      	ldr	r3, [r5, #8]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80060fe:	68ab      	ldr	r3, [r5, #8]
 8006100:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006102:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <do_memp_free_pool+0x28>)
 8006106:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800610a:	4903      	ldr	r1, [pc, #12]	; (8006118 <do_memp_free_pool+0x2c>)
 800610c:	4803      	ldr	r0, [pc, #12]	; (800611c <do_memp_free_pool+0x30>)
 800610e:	f00c fefb 	bl	8012f08 <printf>
 8006112:	e7f1      	b.n	80060f8 <do_memp_free_pool+0xc>
 8006114:	0801a540 	.word	0x0801a540
 8006118:	0801a594 	.word	0x0801a594
 800611c:	0801a38c 	.word	0x0801a38c

08006120 <memp_init_pool>:
  *desc->tab = NULL;
 8006120:	6883      	ldr	r3, [r0, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006126:	6843      	ldr	r3, [r0, #4]
 8006128:	3303      	adds	r3, #3
 800612a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800612e:	8841      	ldrh	r1, [r0, #2]
 8006130:	4291      	cmp	r1, r2
 8006132:	dd08      	ble.n	8006146 <memp_init_pool+0x26>
    memp->next = *desc->tab;
 8006134:	6881      	ldr	r1, [r0, #8]
 8006136:	6809      	ldr	r1, [r1, #0]
 8006138:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 800613a:	6881      	ldr	r1, [r0, #8]
 800613c:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800613e:	8801      	ldrh	r1, [r0, #0]
 8006140:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8006142:	3201      	adds	r2, #1
 8006144:	e7f3      	b.n	800612e <memp_init_pool+0xe>
}
 8006146:	4770      	bx	lr

08006148 <memp_init>:
{
 8006148:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800614a:	2400      	movs	r4, #0
 800614c:	e006      	b.n	800615c <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <memp_init+0x1c>)
 8006150:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006154:	f7ff ffe4 	bl	8006120 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006158:	3401      	adds	r4, #1
 800615a:	b2a4      	uxth	r4, r4
 800615c:	2c08      	cmp	r4, #8
 800615e:	d9f6      	bls.n	800614e <memp_init+0x6>
}
 8006160:	bd10      	pop	{r4, pc}
 8006162:	bf00      	nop
 8006164:	0801a218 	.word	0x0801a218

08006168 <memp_malloc>:
{
 8006168:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800616a:	2808      	cmp	r0, #8
 800616c:	d805      	bhi.n	800617a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800616e:	4b07      	ldr	r3, [pc, #28]	; (800618c <memp_malloc+0x24>)
 8006170:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006174:	f7ff ffa0 	bl	80060b8 <do_memp_malloc_pool>
}
 8006178:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <memp_malloc+0x28>)
 800617c:	f240 1287 	movw	r2, #391	; 0x187
 8006180:	4904      	ldr	r1, [pc, #16]	; (8006194 <memp_malloc+0x2c>)
 8006182:	4805      	ldr	r0, [pc, #20]	; (8006198 <memp_malloc+0x30>)
 8006184:	f00c fec0 	bl	8012f08 <printf>
 8006188:	2000      	movs	r0, #0
 800618a:	e7f5      	b.n	8006178 <memp_malloc+0x10>
 800618c:	0801a218 	.word	0x0801a218
 8006190:	0801a540 	.word	0x0801a540
 8006194:	0801a5c8 	.word	0x0801a5c8
 8006198:	0801a38c 	.word	0x0801a38c

0800619c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800619c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800619e:	2808      	cmp	r0, #8
 80061a0:	d806      	bhi.n	80061b0 <memp_free+0x14>

  if (mem == NULL) {
 80061a2:	b121      	cbz	r1, 80061ae <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <memp_free+0x24>)
 80061a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80061aa:	f7ff ff9f 	bl	80060ec <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80061ae:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <memp_free+0x28>)
 80061b2:	f240 12db 	movw	r2, #475	; 0x1db
 80061b6:	4904      	ldr	r1, [pc, #16]	; (80061c8 <memp_free+0x2c>)
 80061b8:	4804      	ldr	r0, [pc, #16]	; (80061cc <memp_free+0x30>)
 80061ba:	f00c fea5 	bl	8012f08 <printf>
 80061be:	e7f6      	b.n	80061ae <memp_free+0x12>
 80061c0:	0801a218 	.word	0x0801a218
 80061c4:	0801a540 	.word	0x0801a540
 80061c8:	0801a5e8 	.word	0x0801a5e8
 80061cc:	0801a38c 	.word	0x0801a38c

080061d0 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80061d0:	f011 0f01 	tst.w	r1, #1
 80061d4:	d00c      	beq.n	80061f0 <netif_issue_reports+0x20>
{
 80061d6:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80061d8:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80061da:	b123      	cbz	r3, 80061e6 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80061dc:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80061e0:	f013 0f08 	tst.w	r3, #8
 80061e4:	d100      	bne.n	80061e8 <netif_issue_reports+0x18>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80061e6:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 80061e8:	1d01      	adds	r1, r0, #4
 80061ea:	f004 fbed 	bl	800a9c8 <etharp_request>
}
 80061ee:	e7fa      	b.n	80061e6 <netif_issue_reports+0x16>
 80061f0:	4770      	bx	lr

080061f2 <netif_init>:
}
 80061f2:	4770      	bx	lr

080061f4 <netif_set_ipaddr>:
{
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80061fa:	460d      	mov	r5, r1
 80061fc:	b139      	cbz	r1, 800620e <netif_set_ipaddr+0x1a>
 80061fe:	680b      	ldr	r3, [r1, #0]
 8006200:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	9a01      	ldr	r2, [sp, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d105      	bne.n	8006216 <netif_set_ipaddr+0x22>
}
 800620a:	b002      	add	sp, #8
 800620c:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <netif_set_ipaddr+0x48>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	e7f5      	b.n	8006202 <netif_set_ipaddr+0xe>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006216:	1d26      	adds	r6, r4, #4
 8006218:	a901      	add	r1, sp, #4
 800621a:	4630      	mov	r0, r6
 800621c:	f001 fc68 	bl	8007af0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006220:	a901      	add	r1, sp, #4
 8006222:	4630      	mov	r0, r6
 8006224:	f004 f96a 	bl	800a4fc <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006228:	b135      	cbz	r5, 8006238 <netif_set_ipaddr+0x44>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800622e:	2101      	movs	r1, #1
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff ffcd 	bl	80061d0 <netif_issue_reports>
}
 8006236:	e7e8      	b.n	800620a <netif_set_ipaddr+0x16>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006238:	2300      	movs	r3, #0
 800623a:	e7f7      	b.n	800622c <netif_set_ipaddr+0x38>
 800623c:	0801a318 	.word	0x0801a318

08006240 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006240:	b111      	cbz	r1, 8006248 <netif_set_gw+0x8>
 8006242:	680b      	ldr	r3, [r1, #0]
 8006244:	60c3      	str	r3, [r0, #12]
}
 8006246:	4770      	bx	lr
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006248:	2300      	movs	r3, #0
 800624a:	e7fb      	b.n	8006244 <netif_set_gw+0x4>

0800624c <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800624c:	b111      	cbz	r1, 8006254 <netif_set_netmask+0x8>
 800624e:	680b      	ldr	r3, [r1, #0]
 8006250:	6083      	str	r3, [r0, #8]
}
 8006252:	4770      	bx	lr
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006254:	2300      	movs	r3, #0
 8006256:	e7fb      	b.n	8006250 <netif_set_netmask+0x4>

08006258 <netif_set_addr>:
{
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	4604      	mov	r4, r0
 800625c:	4616      	mov	r6, r2
 800625e:	461d      	mov	r5, r3
  if (ip4_addr_isany(ipaddr)) {
 8006260:	460f      	mov	r7, r1
 8006262:	b109      	cbz	r1, 8006268 <netif_set_addr+0x10>
 8006264:	680b      	ldr	r3, [r1, #0]
 8006266:	b963      	cbnz	r3, 8006282 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8006268:	4639      	mov	r1, r7
 800626a:	4620      	mov	r0, r4
 800626c:	f7ff ffc2 	bl	80061f4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006270:	4631      	mov	r1, r6
 8006272:	4620      	mov	r0, r4
 8006274:	f7ff ffea 	bl	800624c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006278:	4629      	mov	r1, r5
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff ffe0 	bl	8006240 <netif_set_gw>
}
 8006280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8006282:	4611      	mov	r1, r2
 8006284:	f7ff ffe2 	bl	800624c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006288:	4629      	mov	r1, r5
 800628a:	4620      	mov	r0, r4
 800628c:	f7ff ffd8 	bl	8006240 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8006290:	4639      	mov	r1, r7
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff ffae 	bl	80061f4 <netif_set_ipaddr>
}
 8006298:	e7f2      	b.n	8006280 <netif_set_addr+0x28>
	...

0800629c <netif_add>:
{
 800629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	4616      	mov	r6, r2
 80062a6:	461f      	mov	r7, r3
 80062a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 80062ac:	f1b8 0f00 	cmp.w	r8, #0
 80062b0:	d022      	beq.n	80062f8 <netif_add+0x5c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80062b2:	2000      	movs	r0, #0
 80062b4:	6060      	str	r0, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80062b6:	60a0      	str	r0, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80062b8:	60e0      	str	r0, [r4, #12]
  netif->flags = 0;
 80062ba:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80062be:	2303      	movs	r3, #3
 80062c0:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80062c8:	4a10      	ldr	r2, [pc, #64]	; (800630c <netif_add+0x70>)
 80062ca:	7813      	ldrb	r3, [r2, #0]
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	7011      	strb	r1, [r2, #0]
 80062d0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80062d4:	9b08      	ldr	r3, [sp, #32]
 80062d6:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80062d8:	463b      	mov	r3, r7
 80062da:	4632      	mov	r2, r6
 80062dc:	4629      	mov	r1, r5
 80062de:	4620      	mov	r0, r4
 80062e0:	f7ff ffba 	bl	8006258 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80062e4:	4620      	mov	r0, r4
 80062e6:	47c0      	blx	r8
 80062e8:	b968      	cbnz	r0, 8006306 <netif_add+0x6a>
  netif->next = netif_list;
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <netif_add+0x74>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80062f0:	601c      	str	r4, [r3, #0]
  return netif;
 80062f2:	4620      	mov	r0, r4
}
 80062f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <netif_add+0x78>)
 80062fa:	22fb      	movs	r2, #251	; 0xfb
 80062fc:	4906      	ldr	r1, [pc, #24]	; (8006318 <netif_add+0x7c>)
 80062fe:	4807      	ldr	r0, [pc, #28]	; (800631c <netif_add+0x80>)
 8006300:	f00c fe02 	bl	8012f08 <printf>
 8006304:	e7d5      	b.n	80062b2 <netif_add+0x16>
    return NULL;
 8006306:	2000      	movs	r0, #0
 8006308:	e7f4      	b.n	80062f4 <netif_add+0x58>
 800630a:	bf00      	nop
 800630c:	200033c0 	.word	0x200033c0
 8006310:	200079f0 	.word	0x200079f0
 8006314:	0801a604 	.word	0x0801a604
 8006318:	0801a638 	.word	0x0801a638
 800631c:	0801a38c 	.word	0x0801a38c

08006320 <netif_set_default>:
  netif_default = netif;
 8006320:	4b01      	ldr	r3, [pc, #4]	; (8006328 <netif_set_default+0x8>)
 8006322:	6018      	str	r0, [r3, #0]
}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	200079f4 	.word	0x200079f4

0800632c <netif_set_up>:
{
 800632c:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800632e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006332:	f013 0f01 	tst.w	r3, #1
 8006336:	d106      	bne.n	8006346 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006340:	f013 0f04 	tst.w	r3, #4
 8006344:	d100      	bne.n	8006348 <netif_set_up+0x1c>
}
 8006346:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8006348:	2103      	movs	r1, #3
 800634a:	f7ff ff41 	bl	80061d0 <netif_issue_reports>
}
 800634e:	e7fa      	b.n	8006346 <netif_set_up+0x1a>

08006350 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006350:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8006352:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8006356:	f013 0f01 	tst.w	r3, #1
 800635a:	d006      	beq.n	800636a <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 800635c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006360:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006364:	f013 0f08 	tst.w	r3, #8
 8006368:	d100      	bne.n	800636c <netif_set_down+0x1c>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800636a:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 800636c:	f004 fab2 	bl	800a8d4 <etharp_cleanup_netif>
}
 8006370:	e7fb      	b.n	800636a <netif_set_down+0x1a>
	...

08006374 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006374:	4b01      	ldr	r3, [pc, #4]	; (800637c <pbuf_pool_is_empty+0x8>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800637a:	4770      	bx	lr
 800637c:	200079f8 	.word	0x200079f8

08006380 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	460c      	mov	r4, r1
 8006384:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006386:	4605      	mov	r5, r0
 8006388:	b1c0      	cbz	r0, 80063bc <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 800638a:	2c00      	cmp	r4, #0
 800638c:	d04e      	beq.n	800642c <pbuf_header_impl+0xac>
 800638e:	2d00      	cmp	r5, #0
 8006390:	d04e      	beq.n	8006430 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 8006392:	2c00      	cmp	r4, #0
 8006394:	db1a      	blt.n	80063cc <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8006396:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006398:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800639a:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800639c:	b32b      	cbz	r3, 80063ea <pbuf_header_impl+0x6a>
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d023      	beq.n	80063ea <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d837      	bhi.n	800641a <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80063aa:	2c00      	cmp	r4, #0
 80063ac:	db2f      	blt.n	800640e <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 80063ae:	2c00      	cmp	r4, #0
 80063b0:	dd40      	ble.n	8006434 <pbuf_header_impl+0xb4>
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	d040      	beq.n	8006438 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80063b6:	1b09      	subs	r1, r1, r4
 80063b8:	6069      	str	r1, [r5, #4]
 80063ba:	e01c      	b.n	80063f6 <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 80063bc:	4b1f      	ldr	r3, [pc, #124]	; (800643c <pbuf_header_impl+0xbc>)
 80063be:	f240 223f 	movw	r2, #575	; 0x23f
 80063c2:	491f      	ldr	r1, [pc, #124]	; (8006440 <pbuf_header_impl+0xc0>)
 80063c4:	481f      	ldr	r0, [pc, #124]	; (8006444 <pbuf_header_impl+0xc4>)
 80063c6:	f00c fd9f 	bl	8012f08 <printf>
 80063ca:	e7de      	b.n	800638a <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80063cc:	b2a2      	uxth	r2, r4
 80063ce:	4252      	negs	r2, r2
 80063d0:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80063d2:	896b      	ldrh	r3, [r5, #10]
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d2df      	bcs.n	8006398 <pbuf_header_impl+0x18>
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <pbuf_header_impl+0xbc>)
 80063da:	f240 2247 	movw	r2, #583	; 0x247
 80063de:	491a      	ldr	r1, [pc, #104]	; (8006448 <pbuf_header_impl+0xc8>)
 80063e0:	4818      	ldr	r0, [pc, #96]	; (8006444 <pbuf_header_impl+0xc4>)
 80063e2:	f00c fd91 	bl	8012f08 <printf>
 80063e6:	2001      	movs	r0, #1
 80063e8:	e021      	b.n	800642e <pbuf_header_impl+0xae>
    p->payload = (u8_t *)p->payload - header_size_increment;
 80063ea:	1b0b      	subs	r3, r1, r4
 80063ec:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80063ee:	f105 0210 	add.w	r2, r5, #16
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d308      	bcc.n	8006408 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80063f6:	b2a4      	uxth	r4, r4
 80063f8:	896b      	ldrh	r3, [r5, #10]
 80063fa:	4423      	add	r3, r4
 80063fc:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80063fe:	8929      	ldrh	r1, [r5, #8]
 8006400:	440c      	add	r4, r1
 8006402:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006404:	2000      	movs	r0, #0
 8006406:	e012      	b.n	800642e <pbuf_header_impl+0xae>
      p->payload = payload;
 8006408:	6069      	str	r1, [r5, #4]
      return 1;
 800640a:	2001      	movs	r0, #1
 800640c:	e00f      	b.n	800642e <pbuf_header_impl+0xae>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800640e:	896b      	ldrh	r3, [r5, #10]
 8006410:	4293      	cmp	r3, r2
 8006412:	d3cc      	bcc.n	80063ae <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006414:	1b09      	subs	r1, r1, r4
 8006416:	6069      	str	r1, [r5, #4]
 8006418:	e7ed      	b.n	80063f6 <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <pbuf_header_impl+0xbc>)
 800641c:	f240 2277 	movw	r2, #631	; 0x277
 8006420:	490a      	ldr	r1, [pc, #40]	; (800644c <pbuf_header_impl+0xcc>)
 8006422:	4808      	ldr	r0, [pc, #32]	; (8006444 <pbuf_header_impl+0xc4>)
 8006424:	f00c fd70 	bl	8012f08 <printf>
    return 1;
 8006428:	2001      	movs	r0, #1
 800642a:	e000      	b.n	800642e <pbuf_header_impl+0xae>
    return 0;
 800642c:	2000      	movs	r0, #0
}
 800642e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8006430:	2000      	movs	r0, #0
 8006432:	e7fc      	b.n	800642e <pbuf_header_impl+0xae>
      return 1;
 8006434:	2001      	movs	r0, #1
 8006436:	e7fa      	b.n	800642e <pbuf_header_impl+0xae>
 8006438:	2001      	movs	r0, #1
 800643a:	e7f8      	b.n	800642e <pbuf_header_impl+0xae>
 800643c:	0801a650 	.word	0x0801a650
 8006440:	0801a680 	.word	0x0801a680
 8006444:	0801a38c 	.word	0x0801a38c
 8006448:	0801a68c 	.word	0x0801a68c
 800644c:	0801a6ac 	.word	0x0801a6ac

08006450 <pbuf_free_ooseq>:
{
 8006450:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <pbuf_free_ooseq+0x20>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <pbuf_free_ooseq+0x24>)
 800645a:	681c      	ldr	r4, [r3, #0]
 800645c:	b13c      	cbz	r4, 800646e <pbuf_free_ooseq+0x1e>
    if (NULL != pcb->ooseq) {
 800645e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006460:	b908      	cbnz	r0, 8006466 <pbuf_free_ooseq+0x16>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006462:	68e4      	ldr	r4, [r4, #12]
 8006464:	e7fa      	b.n	800645c <pbuf_free_ooseq+0xc>
      tcp_segs_free(pcb->ooseq);
 8006466:	f000 fce0 	bl	8006e2a <tcp_segs_free>
      pcb->ooseq = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	6723      	str	r3, [r4, #112]	; 0x70
}
 800646e:	bd10      	pop	{r4, pc}
 8006470:	200079f8 	.word	0x200079f8
 8006474:	20007a00 	.word	0x20007a00

08006478 <pbuf_alloced_custom>:
{
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 800647c:	2804      	cmp	r0, #4
 800647e:	d80a      	bhi.n	8006496 <pbuf_alloced_custom+0x1e>
 8006480:	e8df f000 	tbb	[pc, r0]
 8006484:	05032912 	.word	0x05032912
 8006488:	07          	.byte	0x07
 8006489:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800648a:	200e      	movs	r0, #14
    break;
 800648c:	e00d      	b.n	80064aa <pbuf_alloced_custom+0x32>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800648e:	2000      	movs	r0, #0
    break;
 8006490:	e00b      	b.n	80064aa <pbuf_alloced_custom+0x32>
    offset = 0;
 8006492:	2000      	movs	r0, #0
    break;
 8006494:	e009      	b.n	80064aa <pbuf_alloced_custom+0x32>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <pbuf_alloced_custom+0x6c>)
 8006498:	f240 12c5 	movw	r2, #453	; 0x1c5
 800649c:	4912      	ldr	r1, [pc, #72]	; (80064e8 <pbuf_alloced_custom+0x70>)
 800649e:	4813      	ldr	r0, [pc, #76]	; (80064ec <pbuf_alloced_custom+0x74>)
 80064a0:	f00c fd32 	bl	8012f08 <printf>
    return NULL;
 80064a4:	2000      	movs	r0, #0
 80064a6:	e015      	b.n	80064d4 <pbuf_alloced_custom+0x5c>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80064a8:	2036      	movs	r0, #54	; 0x36
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80064aa:	3003      	adds	r0, #3
 80064ac:	f020 0003 	bic.w	r0, r0, #3
 80064b0:	180e      	adds	r6, r1, r0
 80064b2:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80064b6:	42ae      	cmp	r6, r5
 80064b8:	d812      	bhi.n	80064e0 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 80064ba:	2500      	movs	r5, #0
 80064bc:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 80064be:	b164      	cbz	r4, 80064da <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80064c0:	4420      	add	r0, r4
 80064c2:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80064c4:	2002      	movs	r0, #2
 80064c6:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80064c8:	8119      	strh	r1, [r3, #8]
 80064ca:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 80064cc:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80064ce:	2201      	movs	r2, #1
 80064d0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80064d2:	4618      	mov	r0, r3
}
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80064d6:	2022      	movs	r0, #34	; 0x22
 80064d8:	e7e7      	b.n	80064aa <pbuf_alloced_custom+0x32>
    p->pbuf.payload = NULL;
 80064da:	2000      	movs	r0, #0
 80064dc:	6058      	str	r0, [r3, #4]
 80064de:	e7f1      	b.n	80064c4 <pbuf_alloced_custom+0x4c>
    return NULL;
 80064e0:	2000      	movs	r0, #0
 80064e2:	e7f7      	b.n	80064d4 <pbuf_alloced_custom+0x5c>
 80064e4:	0801a650 	.word	0x0801a650
 80064e8:	0801a6bc 	.word	0x0801a6bc
 80064ec:	0801a38c 	.word	0x0801a38c

080064f0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80064f0:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 80064f2:	2200      	movs	r2, #0
 80064f4:	f7ff ff44 	bl	8006380 <pbuf_header_impl>
}
 80064f8:	bd08      	pop	{r3, pc}

080064fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80064fa:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 80064fc:	2201      	movs	r2, #1
 80064fe:	f7ff ff3f 	bl	8006380 <pbuf_header_impl>
}
 8006502:	bd08      	pop	{r3, pc}

08006504 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006504:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006506:	b128      	cbz	r0, 8006514 <pbuf_free+0x10>
 8006508:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800650a:	7b03      	ldrb	r3, [r0, #12]
 800650c:	2b03      	cmp	r3, #3
 800650e:	d80b      	bhi.n	8006528 <pbuf_free+0x24>
{
 8006510:	2500      	movs	r5, #0
 8006512:	e01f      	b.n	8006554 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006514:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <pbuf_free+0xb0>)
 8006516:	f240 22d2 	movw	r2, #722	; 0x2d2
 800651a:	4927      	ldr	r1, [pc, #156]	; (80065b8 <pbuf_free+0xb4>)
 800651c:	4827      	ldr	r0, [pc, #156]	; (80065bc <pbuf_free+0xb8>)
 800651e:	f00c fcf3 	bl	8012f08 <printf>
    return 0;
 8006522:	2500      	movs	r5, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006524:	4628      	mov	r0, r5
 8006526:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006528:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <pbuf_free+0xb0>)
 800652a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800652e:	4924      	ldr	r1, [pc, #144]	; (80065c0 <pbuf_free+0xbc>)
 8006530:	4822      	ldr	r0, [pc, #136]	; (80065bc <pbuf_free+0xb8>)
 8006532:	f00c fce9 	bl	8012f08 <printf>
 8006536:	e7eb      	b.n	8006510 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006538:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <pbuf_free+0xb0>)
 800653a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800653e:	4921      	ldr	r1, [pc, #132]	; (80065c4 <pbuf_free+0xc0>)
 8006540:	481e      	ldr	r0, [pc, #120]	; (80065bc <pbuf_free+0xb8>)
 8006542:	f00c fce1 	bl	8012f08 <printf>
 8006546:	e00a      	b.n	800655e <pbuf_free+0x5a>
        pc->custom_free_function(p);
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	4620      	mov	r0, r4
 800654c:	4798      	blx	r3
      count++;
 800654e:	3501      	adds	r5, #1
 8006550:	b2ed      	uxtb	r5, r5
      p = q;
 8006552:	4634      	mov	r4, r6
  while (p != NULL) {
 8006554:	2c00      	cmp	r4, #0
 8006556:	d0e5      	beq.n	8006524 <pbuf_free+0x20>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006558:	89e3      	ldrh	r3, [r4, #14]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ec      	beq.n	8006538 <pbuf_free+0x34>
    ref = --(p->ref);
 800655e:	89e3      	ldrh	r3, [r4, #14]
 8006560:	3b01      	subs	r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1dc      	bne.n	8006524 <pbuf_free+0x20>
      q = p->next;
 800656a:	6826      	ldr	r6, [r4, #0]
      type = p->type;
 800656c:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800656e:	7b62      	ldrb	r2, [r4, #13]
 8006570:	f012 0f02 	tst.w	r2, #2
 8006574:	d00a      	beq.n	800658c <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <pbuf_free+0x44>
 800657c:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <pbuf_free+0xb0>)
 800657e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006582:	4911      	ldr	r1, [pc, #68]	; (80065c8 <pbuf_free+0xc4>)
 8006584:	480d      	ldr	r0, [pc, #52]	; (80065bc <pbuf_free+0xb8>)
 8006586:	f00c fcbf 	bl	8012f08 <printf>
 800658a:	e7dd      	b.n	8006548 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 800658c:	2b03      	cmp	r3, #3
 800658e:	d007      	beq.n	80065a0 <pbuf_free+0x9c>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006590:	3b01      	subs	r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d908      	bls.n	80065aa <pbuf_free+0xa6>
          mem_free(p);
 8006598:	4620      	mov	r0, r4
 800659a:	f7ff fc23 	bl	8005de4 <mem_free>
 800659e:	e7d6      	b.n	800654e <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80065a0:	4621      	mov	r1, r4
 80065a2:	2008      	movs	r0, #8
 80065a4:	f7ff fdfa 	bl	800619c <memp_free>
 80065a8:	e7d1      	b.n	800654e <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80065aa:	4621      	mov	r1, r4
 80065ac:	2007      	movs	r0, #7
 80065ae:	f7ff fdf5 	bl	800619c <memp_free>
 80065b2:	e7cc      	b.n	800654e <pbuf_free+0x4a>
 80065b4:	0801a650 	.word	0x0801a650
 80065b8:	0801a680 	.word	0x0801a680
 80065bc:	0801a38c 	.word	0x0801a38c
 80065c0:	0801a6e0 	.word	0x0801a6e0
 80065c4:	0801a6f8 	.word	0x0801a6f8
 80065c8:	0801a710 	.word	0x0801a710

080065cc <pbuf_alloc>:
{
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	460d      	mov	r5, r1
 80065d2:	4617      	mov	r7, r2
  switch (layer) {
 80065d4:	2804      	cmp	r0, #4
 80065d6:	d80a      	bhi.n	80065ee <pbuf_alloc+0x22>
 80065d8:	e8df f000 	tbb	[pc, r0]
 80065dc:	05033f12 	.word	0x05033f12
 80065e0:	07          	.byte	0x07
 80065e1:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80065e2:	240e      	movs	r4, #14
    break;
 80065e4:	e00d      	b.n	8006602 <pbuf_alloc+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80065e6:	2400      	movs	r4, #0
    break;
 80065e8:	e00b      	b.n	8006602 <pbuf_alloc+0x36>
    offset = 0;
 80065ea:	2400      	movs	r4, #0
    break;
 80065ec:	e009      	b.n	8006602 <pbuf_alloc+0x36>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80065ee:	4b68      	ldr	r3, [pc, #416]	; (8006790 <pbuf_alloc+0x1c4>)
 80065f0:	f44f 728b 	mov.w	r2, #278	; 0x116
 80065f4:	4967      	ldr	r1, [pc, #412]	; (8006794 <pbuf_alloc+0x1c8>)
 80065f6:	4868      	ldr	r0, [pc, #416]	; (8006798 <pbuf_alloc+0x1cc>)
 80065f8:	f00c fc86 	bl	8012f08 <printf>
    return NULL;
 80065fc:	2600      	movs	r6, #0
 80065fe:	e0b9      	b.n	8006774 <pbuf_alloc+0x1a8>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006600:	2436      	movs	r4, #54	; 0x36
  switch (type) {
 8006602:	2f02      	cmp	r7, #2
 8006604:	d82b      	bhi.n	800665e <pbuf_alloc+0x92>
 8006606:	b27b      	sxtb	r3, r7
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 80a4 	bne.w	8006756 <pbuf_alloc+0x18a>
 800660e:	2f00      	cmp	r7, #0
 8006610:	f040 80b3 	bne.w	800677a <pbuf_alloc+0x1ae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006614:	f104 0013 	add.w	r0, r4, #19
 8006618:	f020 0003 	bic.w	r0, r0, #3
 800661c:	b283      	uxth	r3, r0
 800661e:	1cea      	adds	r2, r5, #3
 8006620:	b290      	uxth	r0, r2
 8006622:	f020 0003 	bic.w	r0, r0, #3
 8006626:	4418      	add	r0, r3
 8006628:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800662a:	f022 0203 	bic.w	r2, r2, #3
 800662e:	4290      	cmp	r0, r2
 8006630:	f0c0 80ac 	bcc.w	800678c <pbuf_alloc+0x1c0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006634:	f7ff fcae 	bl	8005f94 <mem_malloc>
    if (p == NULL) {
 8006638:	4606      	mov	r6, r0
 800663a:	2800      	cmp	r0, #0
 800663c:	f000 809a 	beq.w	8006774 <pbuf_alloc+0x1a8>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006640:	f104 0310 	add.w	r3, r4, #16
 8006644:	4403      	add	r3, r0
 8006646:	3303      	adds	r3, #3
 8006648:	f023 0303 	bic.w	r3, r3, #3
 800664c:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 800664e:	8105      	strh	r5, [r0, #8]
 8006650:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006656:	7307      	strb	r7, [r0, #12]
    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006658:	e088      	b.n	800676c <pbuf_alloc+0x1a0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800665a:	2422      	movs	r4, #34	; 0x22
 800665c:	e7d1      	b.n	8006602 <pbuf_alloc+0x36>
  switch (type) {
 800665e:	2f03      	cmp	r7, #3
 8006660:	f040 808b 	bne.w	800677a <pbuf_alloc+0x1ae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006664:	2008      	movs	r0, #8
 8006666:	f7ff fd7f 	bl	8006168 <memp_malloc>
    if (p == NULL) {
 800666a:	4606      	mov	r6, r0
 800666c:	b1f8      	cbz	r0, 80066ae <pbuf_alloc+0xe2>
    p->type = type;
 800666e:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006674:	f104 0310 	add.w	r3, r4, #16
 8006678:	4403      	add	r3, r0
 800667a:	3303      	adds	r3, #3
 800667c:	f023 0303 	bic.w	r3, r3, #3
 8006680:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8006682:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006684:	1ce2      	adds	r2, r4, #3
 8006686:	f022 0203 	bic.w	r2, r2, #3
 800668a:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 800668e:	42aa      	cmp	r2, r5
 8006690:	bf28      	it	cs
 8006692:	462a      	movcs	r2, r5
 8006694:	b292      	uxth	r2, r2
 8006696:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006698:	4413      	add	r3, r2
 800669a:	f500 7818 	add.w	r8, r0, #608	; 0x260
 800669e:	4543      	cmp	r3, r8
 80066a0:	d808      	bhi.n	80066b4 <pbuf_alloc+0xe8>
    p->ref = 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 80066a6:	8971      	ldrh	r1, [r6, #10]
 80066a8:	1a6d      	subs	r5, r5, r1
    r = p;
 80066aa:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 80066ac:	e02d      	b.n	800670a <pbuf_alloc+0x13e>
      PBUF_POOL_IS_EMPTY();
 80066ae:	f7ff fe61 	bl	8006374 <pbuf_pool_is_empty>
      return NULL;
 80066b2:	e05f      	b.n	8006774 <pbuf_alloc+0x1a8>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80066b4:	4b36      	ldr	r3, [pc, #216]	; (8006790 <pbuf_alloc+0x1c4>)
 80066b6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80066ba:	4938      	ldr	r1, [pc, #224]	; (800679c <pbuf_alloc+0x1d0>)
 80066bc:	4836      	ldr	r0, [pc, #216]	; (8006798 <pbuf_alloc+0x1cc>)
 80066be:	f00c fc23 	bl	8012f08 <printf>
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80066c2:	e7ee      	b.n	80066a2 <pbuf_alloc+0xd6>
        PBUF_POOL_IS_EMPTY();
 80066c4:	f7ff fe56 	bl	8006374 <pbuf_pool_is_empty>
        pbuf_free(p);
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff ff1b 	bl	8006504 <pbuf_free>
        return NULL;
 80066ce:	4626      	mov	r6, r4
 80066d0:	e050      	b.n	8006774 <pbuf_alloc+0x1a8>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80066d2:	4b2f      	ldr	r3, [pc, #188]	; (8006790 <pbuf_alloc+0x1c4>)
 80066d4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80066d8:	4931      	ldr	r1, [pc, #196]	; (80067a0 <pbuf_alloc+0x1d4>)
 80066da:	482f      	ldr	r0, [pc, #188]	; (8006798 <pbuf_alloc+0x1cc>)
 80066dc:	f00c fc14 	bl	8012f08 <printf>
 80066e0:	e025      	b.n	800672e <pbuf_alloc+0x162>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80066e2:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <pbuf_alloc+0x1c4>)
 80066e4:	f240 1251 	movw	r2, #337	; 0x151
 80066e8:	492e      	ldr	r1, [pc, #184]	; (80067a4 <pbuf_alloc+0x1d8>)
 80066ea:	482b      	ldr	r0, [pc, #172]	; (8006798 <pbuf_alloc+0x1cc>)
 80066ec:	f00c fc0c 	bl	8012f08 <printf>
 80066f0:	e02b      	b.n	800674a <pbuf_alloc+0x17e>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <pbuf_alloc+0x1c4>)
 80066f4:	f240 1253 	movw	r2, #339	; 0x153
 80066f8:	4928      	ldr	r1, [pc, #160]	; (800679c <pbuf_alloc+0x1d0>)
 80066fa:	4827      	ldr	r0, [pc, #156]	; (8006798 <pbuf_alloc+0x1cc>)
 80066fc:	f00c fc04 	bl	8012f08 <printf>
      q->ref = 1;
 8006700:	2301      	movs	r3, #1
 8006702:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 8006704:	8963      	ldrh	r3, [r4, #10]
 8006706:	1aed      	subs	r5, r5, r3
      r = q;
 8006708:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 800670a:	2d00      	cmp	r5, #0
 800670c:	dd2e      	ble.n	800676c <pbuf_alloc+0x1a0>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800670e:	2008      	movs	r0, #8
 8006710:	f7ff fd2a 	bl	8006168 <memp_malloc>
      if (q == NULL) {
 8006714:	4604      	mov	r4, r0
 8006716:	2800      	cmp	r0, #0
 8006718:	d0d4      	beq.n	80066c4 <pbuf_alloc+0xf8>
      q->type = type;
 800671a:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8006720:	6003      	str	r3, [r0, #0]
      r->next = q;
 8006722:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006726:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800672a:	429d      	cmp	r5, r3
 800672c:	dcd1      	bgt.n	80066d2 <pbuf_alloc+0x106>
      q->tot_len = (u16_t)rem_len;
 800672e:	b2ab      	uxth	r3, r5
 8006730:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006732:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006736:	bf28      	it	cs
 8006738:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800673c:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800673e:	f104 0310 	add.w	r3, r4, #16
 8006742:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006744:	f013 0f03 	tst.w	r3, #3
 8006748:	d1cb      	bne.n	80066e2 <pbuf_alloc+0x116>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800674a:	6873      	ldr	r3, [r6, #4]
 800674c:	8972      	ldrh	r2, [r6, #10]
 800674e:	4413      	add	r3, r2
 8006750:	4598      	cmp	r8, r3
 8006752:	d2d5      	bcs.n	8006700 <pbuf_alloc+0x134>
 8006754:	e7cd      	b.n	80066f2 <pbuf_alloc+0x126>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006756:	2007      	movs	r0, #7
 8006758:	f7ff fd06 	bl	8006168 <memp_malloc>
    if (p == NULL) {
 800675c:	4606      	mov	r6, r0
 800675e:	b148      	cbz	r0, 8006774 <pbuf_alloc+0x1a8>
    p->payload = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006764:	8105      	strh	r5, [r0, #8]
 8006766:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8006768:	6003      	str	r3, [r0, #0]
    p->type = type;
 800676a:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 800676c:	2301      	movs	r3, #1
 800676e:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	7373      	strb	r3, [r6, #13]
}
 8006774:	4630      	mov	r0, r6
 8006776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <pbuf_alloc+0x1c4>)
 800677c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006780:	4909      	ldr	r1, [pc, #36]	; (80067a8 <pbuf_alloc+0x1dc>)
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <pbuf_alloc+0x1cc>)
 8006784:	f00c fbc0 	bl	8012f08 <printf>
    return NULL;
 8006788:	2600      	movs	r6, #0
 800678a:	e7f3      	b.n	8006774 <pbuf_alloc+0x1a8>
        return NULL;
 800678c:	2600      	movs	r6, #0
 800678e:	e7f1      	b.n	8006774 <pbuf_alloc+0x1a8>
 8006790:	0801a650 	.word	0x0801a650
 8006794:	0801a734 	.word	0x0801a734
 8006798:	0801a38c 	.word	0x0801a38c
 800679c:	0801a750 	.word	0x0801a750
 80067a0:	0801a7b8 	.word	0x0801a7b8
 80067a4:	0801a7cc 	.word	0x0801a7cc
 80067a8:	0801a7fc 	.word	0x0801a7fc

080067ac <pbuf_realloc>:
{
 80067ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80067b2:	4604      	mov	r4, r0
 80067b4:	b170      	cbz	r0, 80067d4 <pbuf_realloc+0x28>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80067b6:	7b23      	ldrb	r3, [r4, #12]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d004      	beq.n	80067c6 <pbuf_realloc+0x1a>
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d002      	beq.n	80067c6 <pbuf_realloc+0x1a>
 80067c0:	b10b      	cbz	r3, 80067c6 <pbuf_realloc+0x1a>
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d10e      	bne.n	80067e4 <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 80067c6:	8927      	ldrh	r7, [r4, #8]
 80067c8:	42b7      	cmp	r7, r6
 80067ca:	d943      	bls.n	8006854 <pbuf_realloc+0xa8>
  grow = new_len - p->tot_len;
 80067cc:	eba6 0807 	sub.w	r8, r6, r7
  rem_len = new_len;
 80067d0:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 80067d2:	e01d      	b.n	8006810 <pbuf_realloc+0x64>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80067d4:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <pbuf_realloc+0xd4>)
 80067d6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80067da:	492a      	ldr	r1, [pc, #168]	; (8006884 <pbuf_realloc+0xd8>)
 80067dc:	482a      	ldr	r0, [pc, #168]	; (8006888 <pbuf_realloc+0xdc>)
 80067de:	f00c fb93 	bl	8012f08 <printf>
 80067e2:	e7e8      	b.n	80067b6 <pbuf_realloc+0xa>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80067e4:	4b26      	ldr	r3, [pc, #152]	; (8006880 <pbuf_realloc+0xd4>)
 80067e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067ea:	4928      	ldr	r1, [pc, #160]	; (800688c <pbuf_realloc+0xe0>)
 80067ec:	4826      	ldr	r0, [pc, #152]	; (8006888 <pbuf_realloc+0xdc>)
 80067ee:	f00c fb8b 	bl	8012f08 <printf>
 80067f2:	e7e8      	b.n	80067c6 <pbuf_realloc+0x1a>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80067f4:	4b22      	ldr	r3, [pc, #136]	; (8006880 <pbuf_realloc+0xd4>)
 80067f6:	f240 220b 	movw	r2, #523	; 0x20b
 80067fa:	4925      	ldr	r1, [pc, #148]	; (8006890 <pbuf_realloc+0xe4>)
 80067fc:	4822      	ldr	r0, [pc, #136]	; (8006888 <pbuf_realloc+0xdc>)
 80067fe:	f00c fb83 	bl	8012f08 <printf>
    q->tot_len += (u16_t)grow;
 8006802:	1bf3      	subs	r3, r6, r7
 8006804:	8922      	ldrh	r2, [r4, #8]
 8006806:	fa12 f383 	uxtah	r3, r2, r3
 800680a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800680c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800680e:	b14c      	cbz	r4, 8006824 <pbuf_realloc+0x78>
  while (rem_len > q->len) {
 8006810:	8963      	ldrh	r3, [r4, #10]
 8006812:	42ab      	cmp	r3, r5
 8006814:	d20e      	bcs.n	8006834 <pbuf_realloc+0x88>
    rem_len -= q->len;
 8006816:	1aed      	subs	r5, r5, r3
 8006818:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800681a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800681e:	4598      	cmp	r8, r3
 8006820:	ddef      	ble.n	8006802 <pbuf_realloc+0x56>
 8006822:	e7e7      	b.n	80067f4 <pbuf_realloc+0x48>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006824:	4b16      	ldr	r3, [pc, #88]	; (8006880 <pbuf_realloc+0xd4>)
 8006826:	f240 220f 	movw	r2, #527	; 0x20f
 800682a:	491a      	ldr	r1, [pc, #104]	; (8006894 <pbuf_realloc+0xe8>)
 800682c:	4816      	ldr	r0, [pc, #88]	; (8006888 <pbuf_realloc+0xdc>)
 800682e:	f00c fb6b 	bl	8012f08 <printf>
 8006832:	e7ed      	b.n	8006810 <pbuf_realloc+0x64>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006834:	7b22      	ldrb	r2, [r4, #12]
 8006836:	b92a      	cbnz	r2, 8006844 <pbuf_realloc+0x98>
 8006838:	42ab      	cmp	r3, r5
 800683a:	d003      	beq.n	8006844 <pbuf_realloc+0x98>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800683c:	7b63      	ldrb	r3, [r4, #13]
 800683e:	f013 0f02 	tst.w	r3, #2
 8006842:	d009      	beq.n	8006858 <pbuf_realloc+0xac>
  q->len = rem_len;
 8006844:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006846:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	b108      	cbz	r0, 8006850 <pbuf_realloc+0xa4>
    pbuf_free(q->next);
 800684c:	f7ff fe5a 	bl	8006504 <pbuf_free>
  q->next = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	6023      	str	r3, [r4, #0]
}
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	1b1b      	subs	r3, r3, r4
 800685c:	fa15 f183 	uxtah	r1, r5, r3
 8006860:	b289      	uxth	r1, r1
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff fb0c 	bl	8005e80 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006868:	4604      	mov	r4, r0
 800686a:	2800      	cmp	r0, #0
 800686c:	d1ea      	bne.n	8006844 <pbuf_realloc+0x98>
 800686e:	4b04      	ldr	r3, [pc, #16]	; (8006880 <pbuf_realloc+0xd4>)
 8006870:	f240 221d 	movw	r2, #541	; 0x21d
 8006874:	4908      	ldr	r1, [pc, #32]	; (8006898 <pbuf_realloc+0xec>)
 8006876:	4804      	ldr	r0, [pc, #16]	; (8006888 <pbuf_realloc+0xdc>)
 8006878:	f00c fb46 	bl	8012f08 <printf>
 800687c:	e7e2      	b.n	8006844 <pbuf_realloc+0x98>
 800687e:	bf00      	nop
 8006880:	0801a650 	.word	0x0801a650
 8006884:	0801a818 	.word	0x0801a818
 8006888:	0801a38c 	.word	0x0801a38c
 800688c:	0801a830 	.word	0x0801a830
 8006890:	0801a84c 	.word	0x0801a84c
 8006894:	0801a860 	.word	0x0801a860
 8006898:	0801a878 	.word	0x0801a878

0800689c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800689c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
 800689e:	2000      	movs	r0, #0
  while (p != NULL) {
 80068a0:	b11b      	cbz	r3, 80068aa <pbuf_clen+0xe>
    ++len;
 80068a2:	3001      	adds	r0, #1
 80068a4:	b280      	uxth	r0, r0
    p = p->next;
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	e7fa      	b.n	80068a0 <pbuf_clen+0x4>
  }
  return len;
}
 80068aa:	4770      	bx	lr

080068ac <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80068ac:	b170      	cbz	r0, 80068cc <pbuf_ref+0x20>
{
 80068ae:	b508      	push	{r3, lr}
    SYS_ARCH_INC(p->ref, 1);
 80068b0:	89c3      	ldrh	r3, [r0, #14]
 80068b2:	3301      	adds	r3, #1
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80068b8:	b103      	cbz	r3, 80068bc <pbuf_ref+0x10>
  }
}
 80068ba:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <pbuf_ref+0x24>)
 80068be:	f240 3239 	movw	r2, #825	; 0x339
 80068c2:	4904      	ldr	r1, [pc, #16]	; (80068d4 <pbuf_ref+0x28>)
 80068c4:	4804      	ldr	r0, [pc, #16]	; (80068d8 <pbuf_ref+0x2c>)
 80068c6:	f00c fb1f 	bl	8012f08 <printf>
}
 80068ca:	e7f6      	b.n	80068ba <pbuf_ref+0xe>
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	0801a650 	.word	0x0801a650
 80068d4:	0801a894 	.word	0x0801a894
 80068d8:	0801a38c 	.word	0x0801a38c

080068dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80068dc:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80068de:	b110      	cbz	r0, 80068e6 <pbuf_cat+0xa>
 80068e0:	460d      	mov	r5, r1
 80068e2:	4604      	mov	r4, r0
 80068e4:	b961      	cbnz	r1, 8006900 <pbuf_cat+0x24>
 80068e6:	4b15      	ldr	r3, [pc, #84]	; (800693c <pbuf_cat+0x60>)
 80068e8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80068ec:	4914      	ldr	r1, [pc, #80]	; (8006940 <pbuf_cat+0x64>)
 80068ee:	4815      	ldr	r0, [pc, #84]	; (8006944 <pbuf_cat+0x68>)
 80068f0:	f00c fb0a 	bl	8012f08 <printf>
 80068f4:	e019      	b.n	800692a <pbuf_cat+0x4e>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80068f6:	892b      	ldrh	r3, [r5, #8]
 80068f8:	8920      	ldrh	r0, [r4, #8]
 80068fa:	4403      	add	r3, r0
 80068fc:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80068fe:	4614      	mov	r4, r2
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	2a00      	cmp	r2, #0
 8006904:	d1f7      	bne.n	80068f6 <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006906:	8922      	ldrh	r2, [r4, #8]
 8006908:	8963      	ldrh	r3, [r4, #10]
 800690a:	429a      	cmp	r2, r3
 800690c:	d10e      	bne.n	800692c <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	b133      	cbz	r3, 8006920 <pbuf_cat+0x44>
 8006912:	4b0a      	ldr	r3, [pc, #40]	; (800693c <pbuf_cat+0x60>)
 8006914:	f240 3256 	movw	r2, #854	; 0x356
 8006918:	490b      	ldr	r1, [pc, #44]	; (8006948 <pbuf_cat+0x6c>)
 800691a:	480a      	ldr	r0, [pc, #40]	; (8006944 <pbuf_cat+0x68>)
 800691c:	f00c faf4 	bl	8012f08 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8006920:	892b      	ldrh	r3, [r5, #8]
 8006922:	8922      	ldrh	r2, [r4, #8]
 8006924:	4413      	add	r3, r2
 8006926:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006928:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800692a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <pbuf_cat+0x60>)
 800692e:	f240 3255 	movw	r2, #853	; 0x355
 8006932:	4906      	ldr	r1, [pc, #24]	; (800694c <pbuf_cat+0x70>)
 8006934:	4803      	ldr	r0, [pc, #12]	; (8006944 <pbuf_cat+0x68>)
 8006936:	f00c fae7 	bl	8012f08 <printf>
 800693a:	e7e8      	b.n	800690e <pbuf_cat+0x32>
 800693c:	0801a650 	.word	0x0801a650
 8006940:	0801a8a8 	.word	0x0801a8a8
 8006944:	0801a38c 	.word	0x0801a38c
 8006948:	0801a910 	.word	0x0801a910
 800694c:	0801a8e0 	.word	0x0801a8e0

08006950 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006954:	b150      	cbz	r0, 800696c <pbuf_copy+0x1c>
 8006956:	460d      	mov	r5, r1
 8006958:	4607      	mov	r7, r0
 800695a:	b139      	cbz	r1, 800696c <pbuf_copy+0x1c>
 800695c:	8902      	ldrh	r2, [r0, #8]
 800695e:	890b      	ldrh	r3, [r1, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d303      	bcc.n	800696c <pbuf_copy+0x1c>
  u16_t offset_to=0, offset_from=0, len;
 8006964:	f04f 0800 	mov.w	r8, #0
 8006968:	4646      	mov	r6, r8
 800696a:	e03c      	b.n	80069e6 <pbuf_copy+0x96>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800696c:	4b3d      	ldr	r3, [pc, #244]	; (8006a64 <pbuf_copy+0x114>)
 800696e:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8006972:	493d      	ldr	r1, [pc, #244]	; (8006a68 <pbuf_copy+0x118>)
 8006974:	483d      	ldr	r0, [pc, #244]	; (8006a6c <pbuf_copy+0x11c>)
 8006976:	f00c fac7 	bl	8012f08 <printf>
 800697a:	f06f 000f 	mvn.w	r0, #15
 800697e:	e06e      	b.n	8006a5e <pbuf_copy+0x10e>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006980:	1b9b      	subs	r3, r3, r6
 8006982:	b29c      	uxth	r4, r3
 8006984:	e037      	b.n	80069f6 <pbuf_copy+0xa6>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006986:	4b37      	ldr	r3, [pc, #220]	; (8006a64 <pbuf_copy+0x114>)
 8006988:	f240 32cd 	movw	r2, #973	; 0x3cd
 800698c:	4938      	ldr	r1, [pc, #224]	; (8006a70 <pbuf_copy+0x120>)
 800698e:	4837      	ldr	r0, [pc, #220]	; (8006a6c <pbuf_copy+0x11c>)
 8006990:	f00c faba 	bl	8012f08 <printf>
 8006994:	e03e      	b.n	8006a14 <pbuf_copy+0xc4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006996:	4b33      	ldr	r3, [pc, #204]	; (8006a64 <pbuf_copy+0x114>)
 8006998:	f240 32ce 	movw	r2, #974	; 0x3ce
 800699c:	4935      	ldr	r1, [pc, #212]	; (8006a74 <pbuf_copy+0x124>)
 800699e:	4833      	ldr	r0, [pc, #204]	; (8006a6c <pbuf_copy+0x11c>)
 80069a0:	f00c fab2 	bl	8012f08 <printf>
 80069a4:	e039      	b.n	8006a1a <pbuf_copy+0xca>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 80069a6:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80069a8:	b10f      	cbz	r7, 80069ae <pbuf_copy+0x5e>
      offset_to = 0;
 80069aa:	2600      	movs	r6, #0
 80069ac:	e03e      	b.n	8006a2c <pbuf_copy+0xdc>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80069ae:	b90d      	cbnz	r5, 80069b4 <pbuf_copy+0x64>
      offset_to = 0;
 80069b0:	2600      	movs	r6, #0
 80069b2:	e03b      	b.n	8006a2c <pbuf_copy+0xdc>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80069b4:	4b2b      	ldr	r3, [pc, #172]	; (8006a64 <pbuf_copy+0x114>)
 80069b6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80069ba:	492f      	ldr	r1, [pc, #188]	; (8006a78 <pbuf_copy+0x128>)
 80069bc:	482b      	ldr	r0, [pc, #172]	; (8006a6c <pbuf_copy+0x11c>)
 80069be:	f00c faa3 	bl	8012f08 <printf>
 80069c2:	f06f 000f 	mvn.w	r0, #15
 80069c6:	e04a      	b.n	8006a5e <pbuf_copy+0x10e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d033      	beq.n	8006a36 <pbuf_copy+0xe6>
 80069ce:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <pbuf_copy+0x114>)
 80069d0:	f240 32dd 	movw	r2, #989	; 0x3dd
 80069d4:	4929      	ldr	r1, [pc, #164]	; (8006a7c <pbuf_copy+0x12c>)
 80069d6:	4825      	ldr	r0, [pc, #148]	; (8006a6c <pbuf_copy+0x11c>)
 80069d8:	f00c fa96 	bl	8012f08 <printf>
 80069dc:	f06f 0005 	mvn.w	r0, #5
 80069e0:	e03d      	b.n	8006a5e <pbuf_copy+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80069e2:	2d00      	cmp	r5, #0
 80069e4:	d03a      	beq.n	8006a5c <pbuf_copy+0x10c>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	1b99      	subs	r1, r3, r6
 80069ea:	896c      	ldrh	r4, [r5, #10]
 80069ec:	eba4 0208 	sub.w	r2, r4, r8
 80069f0:	4291      	cmp	r1, r2
 80069f2:	dbc5      	blt.n	8006980 <pbuf_copy+0x30>
      len = p_from->len - offset_from;
 80069f4:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	6869      	ldr	r1, [r5, #4]
 80069fa:	4622      	mov	r2, r4
 80069fc:	4441      	add	r1, r8
 80069fe:	4430      	add	r0, r6
 8006a00:	f00c fa60 	bl	8012ec4 <memcpy>
    offset_to += len;
 8006a04:	4426      	add	r6, r4
 8006a06:	b2b6      	uxth	r6, r6
    offset_from += len;
 8006a08:	4444      	add	r4, r8
 8006a0a:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006a0e:	897b      	ldrh	r3, [r7, #10]
 8006a10:	42b3      	cmp	r3, r6
 8006a12:	d3b8      	bcc.n	8006986 <pbuf_copy+0x36>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006a14:	896b      	ldrh	r3, [r5, #10]
 8006a16:	4543      	cmp	r3, r8
 8006a18:	d3bd      	bcc.n	8006996 <pbuf_copy+0x46>
    if (offset_from >= p_from->len) {
 8006a1a:	896b      	ldrh	r3, [r5, #10]
 8006a1c:	4543      	cmp	r3, r8
 8006a1e:	d802      	bhi.n	8006a26 <pbuf_copy+0xd6>
      p_from = p_from->next;
 8006a20:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8006a22:	f04f 0800 	mov.w	r8, #0
    if (offset_to == p_to->len) {
 8006a26:	897b      	ldrh	r3, [r7, #10]
 8006a28:	42b3      	cmp	r3, r6
 8006a2a:	d0bc      	beq.n	80069a6 <pbuf_copy+0x56>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006a2c:	b11d      	cbz	r5, 8006a36 <pbuf_copy+0xe6>
 8006a2e:	896a      	ldrh	r2, [r5, #10]
 8006a30:	892b      	ldrh	r3, [r5, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d0c8      	beq.n	80069c8 <pbuf_copy+0x78>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006a36:	2f00      	cmp	r7, #0
 8006a38:	d0d3      	beq.n	80069e2 <pbuf_copy+0x92>
 8006a3a:	897a      	ldrh	r2, [r7, #10]
 8006a3c:	893b      	ldrh	r3, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d1cf      	bne.n	80069e2 <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0cc      	beq.n	80069e2 <pbuf_copy+0x92>
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <pbuf_copy+0x114>)
 8006a4a:	f240 32e2 	movw	r2, #994	; 0x3e2
 8006a4e:	490b      	ldr	r1, [pc, #44]	; (8006a7c <pbuf_copy+0x12c>)
 8006a50:	4806      	ldr	r0, [pc, #24]	; (8006a6c <pbuf_copy+0x11c>)
 8006a52:	f00c fa59 	bl	8012f08 <printf>
 8006a56:	f06f 0005 	mvn.w	r0, #5
 8006a5a:	e000      	b.n	8006a5e <pbuf_copy+0x10e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006a5c:	2000      	movs	r0, #0
}
 8006a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a62:	bf00      	nop
 8006a64:	0801a650 	.word	0x0801a650
 8006a68:	0801a95c 	.word	0x0801a95c
 8006a6c:	0801a38c 	.word	0x0801a38c
 8006a70:	0801a98c 	.word	0x0801a98c
 8006a74:	0801a9a4 	.word	0x0801a9a4
 8006a78:	0801a9c0 	.word	0x0801a9c0
 8006a7c:	0801a9d0 	.word	0x0801a9d0

08006a80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006a84:	b130      	cbz	r0, 8006a94 <pbuf_copy_partial+0x14>
 8006a86:	4688      	mov	r8, r1
 8006a88:	4691      	mov	r9, r2
 8006a8a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006a8c:	b169      	cbz	r1, 8006aaa <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8006a8e:	2700      	movs	r7, #0

  left = 0;
 8006a90:	463e      	mov	r6, r7
 8006a92:	e02a      	b.n	8006aea <pbuf_copy_partial+0x6a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <pbuf_copy_partial+0x84>)
 8006a96:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006a9a:	491b      	ldr	r1, [pc, #108]	; (8006b08 <pbuf_copy_partial+0x88>)
 8006a9c:	481b      	ldr	r0, [pc, #108]	; (8006b0c <pbuf_copy_partial+0x8c>)
 8006a9e:	f00c fa33 	bl	8012f08 <printf>
 8006aa2:	2700      	movs	r7, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <pbuf_copy_partial+0x84>)
 8006aac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006ab0:	4917      	ldr	r1, [pc, #92]	; (8006b10 <pbuf_copy_partial+0x90>)
 8006ab2:	4816      	ldr	r0, [pc, #88]	; (8006b0c <pbuf_copy_partial+0x8c>)
 8006ab4:	f00c fa28 	bl	8012f08 <printf>
 8006ab8:	2700      	movs	r7, #0
 8006aba:	e7f3      	b.n	8006aa4 <pbuf_copy_partial+0x24>
      buf_copy_len = p->len - offset;
 8006abc:	896c      	ldrh	r4, [r5, #10]
 8006abe:	1ae4      	subs	r4, r4, r3
 8006ac0:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8006ac2:	45a1      	cmp	r9, r4
 8006ac4:	d200      	bcs.n	8006ac8 <pbuf_copy_partial+0x48>
        buf_copy_len = len;
 8006ac6:	464c      	mov	r4, r9
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006ac8:	6869      	ldr	r1, [r5, #4]
 8006aca:	4622      	mov	r2, r4
 8006acc:	4419      	add	r1, r3
 8006ace:	eb08 0006 	add.w	r0, r8, r6
 8006ad2:	f00c f9f7 	bl	8012ec4 <memcpy>
      copied_total += buf_copy_len;
 8006ad6:	4427      	add	r7, r4
 8006ad8:	b2bf      	uxth	r7, r7
      left += buf_copy_len;
 8006ada:	4426      	add	r6, r4
 8006adc:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8006ade:	eba9 0404 	sub.w	r4, r9, r4
 8006ae2:	fa1f f984 	uxth.w	r9, r4
      offset = 0;
 8006ae6:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ae8:	682d      	ldr	r5, [r5, #0]
 8006aea:	f1b9 0f00 	cmp.w	r9, #0
 8006aee:	d0d9      	beq.n	8006aa4 <pbuf_copy_partial+0x24>
 8006af0:	2d00      	cmp	r5, #0
 8006af2:	d0d7      	beq.n	8006aa4 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0e1      	beq.n	8006abc <pbuf_copy_partial+0x3c>
 8006af8:	8969      	ldrh	r1, [r5, #10]
 8006afa:	4299      	cmp	r1, r3
 8006afc:	d8de      	bhi.n	8006abc <pbuf_copy_partial+0x3c>
      offset -= p->len;
 8006afe:	1a5b      	subs	r3, r3, r1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	e7f1      	b.n	8006ae8 <pbuf_copy_partial+0x68>
 8006b04:	0801a650 	.word	0x0801a650
 8006b08:	0801a9fc 	.word	0x0801a9fc
 8006b0c:	0801a38c 	.word	0x0801a38c
 8006b10:	0801aa1c 	.word	0x0801aa1c

08006b14 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006b18:	b148      	cbz	r0, 8006b2e <pbuf_take+0x1a>
 8006b1a:	4688      	mov	r8, r1
 8006b1c:	4691      	mov	r9, r2
 8006b1e:	4606      	mov	r6, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b20:	b179      	cbz	r1, 8006b42 <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006b22:	8903      	ldrh	r3, [r0, #8]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d316      	bcc.n	8006b56 <pbuf_take+0x42>
  u16_t total_copy_len = len;
 8006b28:	4614      	mov	r4, r2
  u16_t copied_total = 0;
 8006b2a:	2700      	movs	r7, #0
 8006b2c:	e030      	b.n	8006b90 <pbuf_take+0x7c>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006b2e:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <pbuf_take+0xa8>)
 8006b30:	f240 4284 	movw	r2, #1156	; 0x484
 8006b34:	4922      	ldr	r1, [pc, #136]	; (8006bc0 <pbuf_take+0xac>)
 8006b36:	4823      	ldr	r0, [pc, #140]	; (8006bc4 <pbuf_take+0xb0>)
 8006b38:	f00c f9e6 	bl	8012f08 <printf>
 8006b3c:	f06f 000f 	mvn.w	r0, #15
 8006b40:	e031      	b.n	8006ba6 <pbuf_take+0x92>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006b42:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <pbuf_take+0xa8>)
 8006b44:	f240 4285 	movw	r2, #1157	; 0x485
 8006b48:	491f      	ldr	r1, [pc, #124]	; (8006bc8 <pbuf_take+0xb4>)
 8006b4a:	481e      	ldr	r0, [pc, #120]	; (8006bc4 <pbuf_take+0xb0>)
 8006b4c:	f00c f9dc 	bl	8012f08 <printf>
 8006b50:	f06f 000f 	mvn.w	r0, #15
 8006b54:	e027      	b.n	8006ba6 <pbuf_take+0x92>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <pbuf_take+0xa8>)
 8006b58:	f240 4286 	movw	r2, #1158	; 0x486
 8006b5c:	491b      	ldr	r1, [pc, #108]	; (8006bcc <pbuf_take+0xb8>)
 8006b5e:	4819      	ldr	r0, [pc, #100]	; (8006bc4 <pbuf_take+0xb0>)
 8006b60:	f00c f9d2 	bl	8012f08 <printf>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	e01d      	b.n	8006ba6 <pbuf_take+0x92>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <pbuf_take+0xa8>)
 8006b6c:	f240 428e 	movw	r2, #1166	; 0x48e
 8006b70:	4917      	ldr	r1, [pc, #92]	; (8006bd0 <pbuf_take+0xbc>)
 8006b72:	4814      	ldr	r0, [pc, #80]	; (8006bc4 <pbuf_take+0xb0>)
 8006b74:	f00c f9c8 	bl	8012f08 <printf>
 8006b78:	e00d      	b.n	8006b96 <pbuf_take+0x82>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8006b7a:	462a      	mov	r2, r5
 8006b7c:	eb08 0107 	add.w	r1, r8, r7
 8006b80:	6870      	ldr	r0, [r6, #4]
 8006b82:	f00c f99f 	bl	8012ec4 <memcpy>
    total_copy_len -= buf_copy_len;
 8006b86:	1b64      	subs	r4, r4, r5
 8006b88:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 8006b8a:	442f      	add	r7, r5
 8006b8c:	b2bf      	uxth	r7, r7
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006b8e:	6836      	ldr	r6, [r6, #0]
 8006b90:	b134      	cbz	r4, 8006ba0 <pbuf_take+0x8c>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006b92:	2e00      	cmp	r6, #0
 8006b94:	d0e9      	beq.n	8006b6a <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 8006b96:	8975      	ldrh	r5, [r6, #10]
 8006b98:	42a5      	cmp	r5, r4
 8006b9a:	d3ee      	bcc.n	8006b7a <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 8006b9c:	4625      	mov	r5, r4
 8006b9e:	e7ec      	b.n	8006b7a <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006ba0:	454f      	cmp	r7, r9
 8006ba2:	d102      	bne.n	8006baa <pbuf_take+0x96>
  return ERR_OK;
 8006ba4:	2000      	movs	r0, #0
}
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006baa:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <pbuf_take+0xa8>)
 8006bac:	f240 4299 	movw	r2, #1177	; 0x499
 8006bb0:	4908      	ldr	r1, [pc, #32]	; (8006bd4 <pbuf_take+0xc0>)
 8006bb2:	4804      	ldr	r0, [pc, #16]	; (8006bc4 <pbuf_take+0xb0>)
 8006bb4:	f00c f9a8 	bl	8012f08 <printf>
  return ERR_OK;
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e7f4      	b.n	8006ba6 <pbuf_take+0x92>
 8006bbc:	0801a650 	.word	0x0801a650
 8006bc0:	0801aa40 	.word	0x0801aa40
 8006bc4:	0801a38c 	.word	0x0801a38c
 8006bc8:	0801aa58 	.word	0x0801aa58
 8006bcc:	0801aa74 	.word	0x0801aa74
 8006bd0:	0801aa94 	.word	0x0801aa94
 8006bd4:	0801aaac 	.word	0x0801aaac

08006bd8 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006bd8:	e002      	b.n	8006be0 <tcp_remove_listener+0x8>
      if (pcb->listener == lpcb) {
         pcb->listener = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6783      	str	r3, [r0, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006bde:	68c0      	ldr	r0, [r0, #12]
 8006be0:	b118      	cbz	r0, 8006bea <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8006be2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006be4:	428b      	cmp	r3, r1
 8006be6:	d1fa      	bne.n	8006bde <tcp_remove_listener+0x6>
 8006be8:	e7f7      	b.n	8006bda <tcp_remove_listener+0x2>
      }
   }
}
 8006bea:	4770      	bx	lr

08006bec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006bec:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8006bee:	2400      	movs	r4, #0
 8006bf0:	e009      	b.n	8006c06 <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <tcp_new_port+0x5c>)
 8006bf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e00c      	b.n	8006c16 <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006bfc:	3401      	adds	r4, #1
 8006bfe:	b2a4      	uxth	r4, r4
 8006c00:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8006c04:	d21e      	bcs.n	8006c44 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <tcp_new_port+0x5c>)
 8006c08:	8813      	ldrh	r3, [r2, #0]
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	8011      	strh	r1, [r2, #0]
 8006c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d0ed      	beq.n	8006bf2 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006c16:	2000      	movs	r0, #0
 8006c18:	2803      	cmp	r0, #3
 8006c1a:	d80e      	bhi.n	8006c3a <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <tcp_new_port+0x60>)
 8006c1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	b133      	cbz	r3, 8006c34 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8006c26:	8ad9      	ldrh	r1, [r3, #22]
 8006c28:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <tcp_new_port+0x5c>)
 8006c2a:	8812      	ldrh	r2, [r2, #0]
 8006c2c:	4291      	cmp	r1, r2
 8006c2e:	d0e5      	beq.n	8006bfc <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	e7f7      	b.n	8006c24 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006c34:	3001      	adds	r0, #1
 8006c36:	b2c0      	uxtb	r0, r0
 8006c38:	e7ee      	b.n	8006c18 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006c3a:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <tcp_new_port+0x5c>)
 8006c3c:	8818      	ldrh	r0, [r3, #0]
}
 8006c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c42:	4770      	bx	lr
          return 0;
 8006c44:	2000      	movs	r0, #0
 8006c46:	e7fa      	b.n	8006c3e <tcp_new_port+0x52>
 8006c48:	20000008 	.word	0x20000008
 8006c4c:	0801a2a8 	.word	0x0801a2a8

08006c50 <tcp_listen_closed>:
{
 8006c50:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c52:	4605      	mov	r5, r0
 8006c54:	b120      	cbz	r0, 8006c60 <tcp_listen_closed+0x10>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006c56:	7d2b      	ldrb	r3, [r5, #20]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d108      	bne.n	8006c6e <tcp_listen_closed+0x1e>
{
 8006c5c:	2401      	movs	r4, #1
 8006c5e:	e015      	b.n	8006c8c <tcp_listen_closed+0x3c>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <tcp_listen_closed+0x44>)
 8006c62:	22c0      	movs	r2, #192	; 0xc0
 8006c64:	490c      	ldr	r1, [pc, #48]	; (8006c98 <tcp_listen_closed+0x48>)
 8006c66:	480d      	ldr	r0, [pc, #52]	; (8006c9c <tcp_listen_closed+0x4c>)
 8006c68:	f00c f94e 	bl	8012f08 <printf>
 8006c6c:	e7f3      	b.n	8006c56 <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <tcp_listen_closed+0x44>)
 8006c70:	22c1      	movs	r2, #193	; 0xc1
 8006c72:	490b      	ldr	r1, [pc, #44]	; (8006ca0 <tcp_listen_closed+0x50>)
 8006c74:	4809      	ldr	r0, [pc, #36]	; (8006c9c <tcp_listen_closed+0x4c>)
 8006c76:	f00c f947 	bl	8012f08 <printf>
 8006c7a:	e7ef      	b.n	8006c5c <tcp_listen_closed+0xc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <tcp_listen_closed+0x54>)
 8006c7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c82:	4629      	mov	r1, r5
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	f7ff ffa7 	bl	8006bd8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006c8a:	3401      	adds	r4, #1
 8006c8c:	2c03      	cmp	r4, #3
 8006c8e:	d9f5      	bls.n	8006c7c <tcp_listen_closed+0x2c>
}
 8006c90:	bd38      	pop	{r3, r4, r5, pc}
 8006c92:	bf00      	nop
 8006c94:	0801aad8 	.word	0x0801aad8
 8006c98:	0801ab08 	.word	0x0801ab08
 8006c9c:	0801a38c 	.word	0x0801a38c
 8006ca0:	0801ab14 	.word	0x0801ab14
 8006ca4:	0801a2a8 	.word	0x0801a2a8

08006ca8 <tcp_close_shutdown_fin>:
{
 8006ca8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006caa:	4605      	mov	r5, r0
 8006cac:	b148      	cbz	r0, 8006cc2 <tcp_close_shutdown_fin+0x1a>
  switch (pcb->state) {
 8006cae:	7d2b      	ldrb	r3, [r5, #20]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d01f      	beq.n	8006cf4 <tcp_close_shutdown_fin+0x4c>
 8006cb4:	2b07      	cmp	r3, #7
 8006cb6:	d026      	beq.n	8006d06 <tcp_close_shutdown_fin+0x5e>
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d00a      	beq.n	8006cd2 <tcp_close_shutdown_fin+0x2a>
 8006cbc:	2400      	movs	r4, #0
}
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <tcp_close_shutdown_fin+0x78>)
 8006cc4:	f240 124d 	movw	r2, #333	; 0x14d
 8006cc8:	4916      	ldr	r1, [pc, #88]	; (8006d24 <tcp_close_shutdown_fin+0x7c>)
 8006cca:	4817      	ldr	r0, [pc, #92]	; (8006d28 <tcp_close_shutdown_fin+0x80>)
 8006ccc:	f00c f91c 	bl	8012f08 <printf>
 8006cd0:	e7ed      	b.n	8006cae <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f002 ff6a 	bl	8009bac <tcp_send_fin>
    if (err == ERR_OK) {
 8006cd8:	4604      	mov	r4, r0
 8006cda:	b908      	cbnz	r0, 8006ce0 <tcp_close_shutdown_fin+0x38>
      pcb->state = FIN_WAIT_1;
 8006cdc:	2305      	movs	r3, #5
 8006cde:	752b      	strb	r3, [r5, #20]
  if (err == ERR_OK) {
 8006ce0:	b1d4      	cbz	r4, 8006d18 <tcp_close_shutdown_fin+0x70>
  } else if (err == ERR_MEM) {
 8006ce2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006ce6:	d1ea      	bne.n	8006cbe <tcp_close_shutdown_fin+0x16>
    pcb->flags |= TF_CLOSEPEND;
 8006ce8:	7eab      	ldrb	r3, [r5, #26]
 8006cea:	f043 0308 	orr.w	r3, r3, #8
 8006cee:	76ab      	strb	r3, [r5, #26]
    return ERR_OK;
 8006cf0:	2400      	movs	r4, #0
 8006cf2:	e7e4      	b.n	8006cbe <tcp_close_shutdown_fin+0x16>
    err = tcp_send_fin(pcb);
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f002 ff59 	bl	8009bac <tcp_send_fin>
    if (err == ERR_OK) {
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d1ef      	bne.n	8006ce0 <tcp_close_shutdown_fin+0x38>
      pcb->state = FIN_WAIT_1;
 8006d00:	2305      	movs	r3, #5
 8006d02:	752b      	strb	r3, [r5, #20]
 8006d04:	e7ec      	b.n	8006ce0 <tcp_close_shutdown_fin+0x38>
    err = tcp_send_fin(pcb);
 8006d06:	4628      	mov	r0, r5
 8006d08:	f002 ff50 	bl	8009bac <tcp_send_fin>
    if (err == ERR_OK) {
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1e6      	bne.n	8006ce0 <tcp_close_shutdown_fin+0x38>
      pcb->state = LAST_ACK;
 8006d12:	2309      	movs	r3, #9
 8006d14:	752b      	strb	r3, [r5, #20]
 8006d16:	e7e3      	b.n	8006ce0 <tcp_close_shutdown_fin+0x38>
    tcp_output(pcb);
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f002 ffa3 	bl	8009c64 <tcp_output>
 8006d1e:	e7ce      	b.n	8006cbe <tcp_close_shutdown_fin+0x16>
 8006d20:	0801aad8 	.word	0x0801aad8
 8006d24:	0801ab08 	.word	0x0801ab08
 8006d28:	0801a38c 	.word	0x0801a38c

08006d2c <tcp_init>:
}
 8006d2c:	4770      	bx	lr
	...

08006d30 <tcp_update_rcv_ann_wnd>:
{
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006d34:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d36:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8006d38:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006d3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d3c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006d3e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006d42:	bf94      	ite	ls
 8006d44:	18d3      	addls	r3, r2, r3
 8006d46:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 8006d4a:	1ac3      	subs	r3, r0, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	db02      	blt.n	8006d56 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006d50:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006d52:	1a80      	subs	r0, r0, r2
}
 8006d54:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006d56:	1aab      	subs	r3, r5, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dd03      	ble.n	8006d64 <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	8563      	strh	r3, [r4, #42]	; 0x2a
    return 0;
 8006d60:	2000      	movs	r0, #0
 8006d62:	e7f7      	b.n	8006d54 <tcp_update_rcv_ann_wnd+0x24>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006d64:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006d66:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006d6a:	d201      	bcs.n	8006d70 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006d6c:	8565      	strh	r5, [r4, #42]	; 0x2a
 8006d6e:	e7f7      	b.n	8006d60 <tcp_update_rcv_ann_wnd+0x30>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <tcp_update_rcv_ann_wnd+0x50>)
 8006d72:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006d76:	4903      	ldr	r1, [pc, #12]	; (8006d84 <tcp_update_rcv_ann_wnd+0x54>)
 8006d78:	4803      	ldr	r0, [pc, #12]	; (8006d88 <tcp_update_rcv_ann_wnd+0x58>)
 8006d7a:	f00c f8c5 	bl	8012f08 <printf>
 8006d7e:	e7f5      	b.n	8006d6c <tcp_update_rcv_ann_wnd+0x3c>
 8006d80:	0801aad8 	.word	0x0801aad8
 8006d84:	0801ab78 	.word	0x0801ab78
 8006d88:	0801a38c 	.word	0x0801a38c

08006d8c <tcp_recved>:
{
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4605      	mov	r5, r0
 8006d90:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006d92:	7d03      	ldrb	r3, [r0, #20]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d010      	beq.n	8006dba <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8006d98:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8006d9a:	4421      	add	r1, r4
 8006d9c:	b289      	uxth	r1, r1
 8006d9e:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006da0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8006da4:	d911      	bls.n	8006dca <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006da6:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8006daa:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006dac:	4628      	mov	r0, r5
 8006dae:	f7ff ffbf 	bl	8006d30 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006db2:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8006db6:	da1b      	bge.n	8006df0 <tcp_recved+0x64>
}
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <tcp_recved+0x74>)
 8006dbc:	f240 321f 	movw	r2, #799	; 0x31f
 8006dc0:	4910      	ldr	r1, [pc, #64]	; (8006e04 <tcp_recved+0x78>)
 8006dc2:	4811      	ldr	r0, [pc, #68]	; (8006e08 <tcp_recved+0x7c>)
 8006dc4:	f00c f8a0 	bl	8012f08 <printf>
 8006dc8:	e7e6      	b.n	8006d98 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d1ee      	bne.n	8006dac <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006dce:	7d2b      	ldrb	r3, [r5, #20]
 8006dd0:	2b07      	cmp	r3, #7
 8006dd2:	d001      	beq.n	8006dd8 <tcp_recved+0x4c>
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d103      	bne.n	8006de0 <tcp_recved+0x54>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006dd8:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8006ddc:	852b      	strh	r3, [r5, #40]	; 0x28
 8006dde:	e7e5      	b.n	8006dac <tcp_recved+0x20>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <tcp_recved+0x74>)
 8006de2:	f240 322d 	movw	r2, #813	; 0x32d
 8006de6:	4909      	ldr	r1, [pc, #36]	; (8006e0c <tcp_recved+0x80>)
 8006de8:	4807      	ldr	r0, [pc, #28]	; (8006e08 <tcp_recved+0x7c>)
 8006dea:	f00c f88d 	bl	8012f08 <printf>
 8006dee:	e7dd      	b.n	8006dac <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8006df0:	7eab      	ldrb	r3, [r5, #26]
 8006df2:	f043 0302 	orr.w	r3, r3, #2
 8006df6:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f002 ff33 	bl	8009c64 <tcp_output>
}
 8006dfe:	e7db      	b.n	8006db8 <tcp_recved+0x2c>
 8006e00:	0801aad8 	.word	0x0801aad8
 8006e04:	0801ab94 	.word	0x0801ab94
 8006e08:	0801a38c 	.word	0x0801a38c
 8006e0c:	0801abbc 	.word	0x0801abbc

08006e10 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8006e10:	b150      	cbz	r0, 8006e28 <tcp_seg_free+0x18>
{
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8006e16:	6840      	ldr	r0, [r0, #4]
 8006e18:	b108      	cbz	r0, 8006e1e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006e1a:	f7ff fb73 	bl	8006504 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006e1e:	4621      	mov	r1, r4
 8006e20:	2003      	movs	r0, #3
 8006e22:	f7ff f9bb 	bl	800619c <memp_free>
  }
}
 8006e26:	bd10      	pop	{r4, pc}
 8006e28:	4770      	bx	lr

08006e2a <tcp_segs_free>:
  while (seg != NULL) {
 8006e2a:	b138      	cbz	r0, 8006e3c <tcp_segs_free+0x12>
{
 8006e2c:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8006e2e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8006e30:	f7ff ffee 	bl	8006e10 <tcp_seg_free>
    seg = next;
 8006e34:	4620      	mov	r0, r4
  while (seg != NULL) {
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d1f9      	bne.n	8006e2e <tcp_segs_free+0x4>
}
 8006e3a:	bd10      	pop	{r4, pc}
 8006e3c:	4770      	bx	lr

08006e3e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006e3e:	b538      	push	{r3, r4, r5, lr}
 8006e40:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006e42:	2003      	movs	r0, #3
 8006e44:	f7ff f990 	bl	8006168 <memp_malloc>
  if (cseg == NULL) {
 8006e48:	4605      	mov	r5, r0
 8006e4a:	b150      	cbz	r0, 8006e62 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006e4c:	6820      	ldr	r0, [r4, #0]
 8006e4e:	6861      	ldr	r1, [r4, #4]
 8006e50:	68a2      	ldr	r2, [r4, #8]
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	6028      	str	r0, [r5, #0]
 8006e56:	6069      	str	r1, [r5, #4]
 8006e58:	60aa      	str	r2, [r5, #8]
 8006e5a:	60eb      	str	r3, [r5, #12]
  pbuf_ref(cseg->p);
 8006e5c:	6868      	ldr	r0, [r5, #4]
 8006e5e:	f7ff fd25 	bl	80068ac <pbuf_ref>
  return cseg;
}
 8006e62:	4628      	mov	r0, r5
 8006e64:	bd38      	pop	{r3, r4, r5, pc}

08006e66 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006e66:	b100      	cbz	r0, 8006e6a <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8006e68:	6101      	str	r1, [r0, #16]
  }
}
 8006e6a:	4770      	bx	lr

08006e6c <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8006e6c:	b180      	cbz	r0, 8006e90 <tcp_recv+0x24>
{
 8006e6e:	b538      	push	{r3, r4, r5, lr}
 8006e70:	460c      	mov	r4, r1
 8006e72:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006e74:	7d03      	ldrb	r3, [r0, #20]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d002      	beq.n	8006e80 <tcp_recv+0x14>
    pcb->recv = recv;
 8006e7a:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <tcp_recv+0x28>)
 8006e82:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8006e86:	4904      	ldr	r1, [pc, #16]	; (8006e98 <tcp_recv+0x2c>)
 8006e88:	4804      	ldr	r0, [pc, #16]	; (8006e9c <tcp_recv+0x30>)
 8006e8a:	f00c f83d 	bl	8012f08 <printf>
 8006e8e:	e7f4      	b.n	8006e7a <tcp_recv+0xe>
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	0801aad8 	.word	0x0801aad8
 8006e98:	0801abe0 	.word	0x0801abe0
 8006e9c:	0801a38c 	.word	0x0801a38c

08006ea0 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8006ea0:	b178      	cbz	r0, 8006ec2 <tcp_sent+0x22>
{
 8006ea2:	b538      	push	{r3, r4, r5, lr}
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006ea8:	7d03      	ldrb	r3, [r0, #20]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d001      	beq.n	8006eb2 <tcp_sent+0x12>
    pcb->sent = sent;
 8006eae:	67ec      	str	r4, [r5, #124]	; 0x7c
  }
}
 8006eb0:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <tcp_sent+0x24>)
 8006eb4:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8006eb8:	4903      	ldr	r1, [pc, #12]	; (8006ec8 <tcp_sent+0x28>)
 8006eba:	4804      	ldr	r0, [pc, #16]	; (8006ecc <tcp_sent+0x2c>)
 8006ebc:	f00c f824 	bl	8012f08 <printf>
 8006ec0:	e7f5      	b.n	8006eae <tcp_sent+0xe>
 8006ec2:	4770      	bx	lr
 8006ec4:	0801aad8 	.word	0x0801aad8
 8006ec8:	0801ac08 	.word	0x0801ac08
 8006ecc:	0801a38c 	.word	0x0801a38c

08006ed0 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8006ed0:	b180      	cbz	r0, 8006ef4 <tcp_err+0x24>
{
 8006ed2:	b538      	push	{r3, r4, r5, lr}
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006ed8:	7d03      	ldrb	r3, [r0, #20]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d002      	beq.n	8006ee4 <tcp_err+0x14>
    pcb->errf = err;
 8006ede:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
  }
}
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006ee4:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <tcp_err+0x28>)
 8006ee6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006eea:	4904      	ldr	r1, [pc, #16]	; (8006efc <tcp_err+0x2c>)
 8006eec:	4804      	ldr	r0, [pc, #16]	; (8006f00 <tcp_err+0x30>)
 8006eee:	f00c f80b 	bl	8012f08 <printf>
 8006ef2:	e7f4      	b.n	8006ede <tcp_err+0xe>
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	0801aad8 	.word	0x0801aad8
 8006efc:	0801ac30 	.word	0x0801ac30
 8006f00:	0801a38c 	.word	0x0801a38c

08006f04 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	460e      	mov	r6, r1
 8006f0a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006f0c:	7d03      	ldrb	r3, [r0, #20]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d003      	beq.n	8006f1a <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006f12:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006f16:	7725      	strb	r5, [r4, #28]
}
 8006f18:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006f1a:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <tcp_poll+0x28>)
 8006f1c:	f240 7203 	movw	r2, #1795	; 0x703
 8006f20:	4903      	ldr	r1, [pc, #12]	; (8006f30 <tcp_poll+0x2c>)
 8006f22:	4804      	ldr	r0, [pc, #16]	; (8006f34 <tcp_poll+0x30>)
 8006f24:	f00b fff0 	bl	8012f08 <printf>
 8006f28:	e7f3      	b.n	8006f12 <tcp_poll+0xe>
 8006f2a:	bf00      	nop
 8006f2c:	0801aad8 	.word	0x0801aad8
 8006f30:	0801ac58 	.word	0x0801ac58
 8006f34:	0801a38c 	.word	0x0801a38c

08006f38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006f38:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8006f3a:	7d03      	ldrb	r3, [r0, #20]
 8006f3c:	b1e3      	cbz	r3, 8006f78 <tcp_pcb_purge+0x40>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	2b0a      	cmp	r3, #10
 8006f42:	d019      	beq.n	8006f78 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d017      	beq.n	8006f78 <tcp_pcb_purge+0x40>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006f48:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006f4a:	b118      	cbz	r0, 8006f54 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006f4c:	f7ff fada 	bl	8006504 <pbuf_free>
      pcb->refused_data = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006f54:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006f56:	f7ff ff68 	bl	8006e2a <tcp_segs_free>
    pcb->ooseq = NULL;
 8006f5a:	2500      	movs	r5, #0
 8006f5c:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f62:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006f64:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006f66:	f7ff ff60 	bl	8006e2a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006f6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006f6c:	f7ff ff5d 	bl	8006e2a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006f70:	66a5      	str	r5, [r4, #104]	; 0x68
 8006f72:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006f74:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
	...

08006f7c <tcp_slowtmr>:
{
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	b082      	sub	sp, #8
  ++tcp_ticks;
 8006f82:	4aae      	ldr	r2, [pc, #696]	; (800723c <tcp_slowtmr+0x2c0>)
 8006f84:	6813      	ldr	r3, [r2, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006f8a:	4aad      	ldr	r2, [pc, #692]	; (8007240 <tcp_slowtmr+0x2c4>)
 8006f8c:	7813      	ldrb	r3, [r2, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8006f92:	4bac      	ldr	r3, [pc, #688]	; (8007244 <tcp_slowtmr+0x2c8>)
 8006f94:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8006f96:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8006f98:	e16e      	b.n	8007278 <tcp_slowtmr+0x2fc>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006f9a:	4bab      	ldr	r3, [pc, #684]	; (8007248 <tcp_slowtmr+0x2cc>)
 8006f9c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006fa0:	49aa      	ldr	r1, [pc, #680]	; (800724c <tcp_slowtmr+0x2d0>)
 8006fa2:	48ab      	ldr	r0, [pc, #684]	; (8007250 <tcp_slowtmr+0x2d4>)
 8006fa4:	f00b ffb0 	bl	8012f08 <printf>
 8006fa8:	e16b      	b.n	8007282 <tcp_slowtmr+0x306>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006faa:	4ba7      	ldr	r3, [pc, #668]	; (8007248 <tcp_slowtmr+0x2cc>)
 8006fac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006fb0:	49a8      	ldr	r1, [pc, #672]	; (8007254 <tcp_slowtmr+0x2d8>)
 8006fb2:	48a7      	ldr	r0, [pc, #668]	; (8007250 <tcp_slowtmr+0x2d4>)
 8006fb4:	f00b ffa8 	bl	8012f08 <printf>
 8006fb8:	e167      	b.n	800728a <tcp_slowtmr+0x30e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006fba:	4ba3      	ldr	r3, [pc, #652]	; (8007248 <tcp_slowtmr+0x2cc>)
 8006fbc:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006fc0:	49a5      	ldr	r1, [pc, #660]	; (8007258 <tcp_slowtmr+0x2dc>)
 8006fc2:	48a3      	ldr	r0, [pc, #652]	; (8007250 <tcp_slowtmr+0x2d4>)
 8006fc4:	f00b ffa0 	bl	8012f08 <printf>
 8006fc8:	e163      	b.n	8007292 <tcp_slowtmr+0x316>
      pcb = pcb->next;
 8006fca:	68e4      	ldr	r4, [r4, #12]
      continue;
 8006fcc:	e154      	b.n	8007278 <tcp_slowtmr+0x2fc>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006fce:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006fd2:	2a05      	cmp	r2, #5
 8006fd4:	f240 8168 	bls.w	80072a8 <tcp_slowtmr+0x32c>
      ++pcb_remove;
 8006fd8:	2501      	movs	r5, #1
 8006fda:	e04c      	b.n	8007076 <tcp_slowtmr+0xfa>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f003 f879 	bl	800a0d4 <tcp_zero_window_probe>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	f040 8087 	bne.w	80070f6 <tcp_slowtmr+0x17a>
            pcb->persist_cnt = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006fee:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8006ff2:	2b06      	cmp	r3, #6
 8006ff4:	f200 8081 	bhi.w	80070fa <tcp_slowtmr+0x17e>
              pcb->persist_backoff++;
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8006ffe:	2500      	movs	r5, #0
 8007000:	e039      	b.n	8007076 <tcp_slowtmr+0xfa>
        if (pcb->rtime >= 0) {
 8007002:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8007006:	2900      	cmp	r1, #0
 8007008:	db01      	blt.n	800700e <tcp_slowtmr+0x92>
          ++pcb->rtime;
 800700a:	3101      	adds	r1, #1
 800700c:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800700e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007010:	b389      	cbz	r1, 8007076 <tcp_slowtmr+0xfa>
 8007012:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8007016:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800701a:	4288      	cmp	r0, r1
 800701c:	db2b      	blt.n	8007076 <tcp_slowtmr+0xfa>
          if (pcb->state != SYN_SENT) {
 800701e:	2b02      	cmp	r3, #2
 8007020:	d00f      	beq.n	8007042 <tcp_slowtmr+0xc6>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007022:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8007026:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800702a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800702e:	498b      	ldr	r1, [pc, #556]	; (800725c <tcp_slowtmr+0x2e0>)
 8007030:	2a0c      	cmp	r2, #12
 8007032:	bf94      	ite	ls
 8007034:	188a      	addls	r2, r1, r2
 8007036:	f101 020c 	addhi.w	r2, r1, #12
 800703a:	7e12      	ldrb	r2, [r2, #24]
 800703c:	4093      	lsls	r3, r2
 800703e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007046:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800704a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800704e:	4293      	cmp	r3, r2
 8007050:	bf28      	it	cs
 8007052:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800705a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800705c:	004a      	lsls	r2, r1, #1
 800705e:	b292      	uxth	r2, r2
 8007060:	4293      	cmp	r3, r2
 8007062:	d201      	bcs.n	8007068 <tcp_slowtmr+0xec>
            pcb->ssthresh = (pcb->mss << 1);
 8007064:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8007068:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 800706c:	4620      	mov	r0, r4
 800706e:	f002 ff97 	bl	8009fa0 <tcp_rexmit_rto>
 8007072:	e000      	b.n	8007076 <tcp_slowtmr+0xfa>
      ++pcb_remove;
 8007074:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8007076:	7d22      	ldrb	r2, [r4, #20]
 8007078:	2a06      	cmp	r2, #6
 800707a:	d040      	beq.n	80070fe <tcp_slowtmr+0x182>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800707c:	7a23      	ldrb	r3, [r4, #8]
 800707e:	f013 0708 	ands.w	r7, r3, #8
 8007082:	d004      	beq.n	800708e <tcp_slowtmr+0x112>
 8007084:	2a04      	cmp	r2, #4
 8007086:	d047      	beq.n	8007118 <tcp_slowtmr+0x19c>
       ((pcb->state == ESTABLISHED) ||
 8007088:	2a07      	cmp	r2, #7
 800708a:	d045      	beq.n	8007118 <tcp_slowtmr+0x19c>
    pcb_reset = 0;
 800708c:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 800708e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007090:	b150      	cbz	r0, 80070a8 <tcp_slowtmr+0x12c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007092:	4b6a      	ldr	r3, [pc, #424]	; (800723c <tcp_slowtmr+0x2c0>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	6a23      	ldr	r3, [r4, #32]
 8007098:	1ad2      	subs	r2, r2, r3
 800709a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800709e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80070a2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80070a6:	d265      	bcs.n	8007174 <tcp_slowtmr+0x1f8>
    if (pcb->state == SYN_RCVD) {
 80070a8:	7d23      	ldrb	r3, [r4, #20]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d067      	beq.n	800717e <tcp_slowtmr+0x202>
    if (pcb->state == LAST_ACK) {
 80070ae:	2b09      	cmp	r3, #9
 80070b0:	d06e      	beq.n	8007190 <tcp_slowtmr+0x214>
    if (pcb_remove) {
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	d175      	bne.n	80071a2 <tcp_slowtmr+0x226>
      pcb = pcb->next;
 80070b6:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80070b8:	7ee3      	ldrb	r3, [r4, #27]
 80070ba:	3301      	adds	r3, #1
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80070c0:	7f22      	ldrb	r2, [r4, #28]
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f0c0 80d6 	bcc.w	8007274 <tcp_slowtmr+0x2f8>
        prev->polltmr = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80070cc:	4a64      	ldr	r2, [pc, #400]	; (8007260 <tcp_slowtmr+0x2e4>)
 80070ce:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80070d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80a9 	beq.w	800722c <tcp_slowtmr+0x2b0>
 80070da:	4621      	mov	r1, r4
 80070dc:	6920      	ldr	r0, [r4, #16]
 80070de:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80070e0:	4b5f      	ldr	r3, [pc, #380]	; (8007260 <tcp_slowtmr+0x2e4>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f47f af54 	bne.w	8006f92 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f000 80a0 	beq.w	8007230 <tcp_slowtmr+0x2b4>
      prev = pcb;
 80070f0:	4626      	mov	r6, r4
      pcb = pcb->next;
 80070f2:	462c      	mov	r4, r5
 80070f4:	e0c0      	b.n	8007278 <tcp_slowtmr+0x2fc>
    pcb_remove = 0;
 80070f6:	2500      	movs	r5, #0
 80070f8:	e7bd      	b.n	8007076 <tcp_slowtmr+0xfa>
 80070fa:	2500      	movs	r5, #0
 80070fc:	e7bb      	b.n	8007076 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 80070fe:	7ea3      	ldrb	r3, [r4, #26]
 8007100:	f013 0f10 	tst.w	r3, #16
 8007104:	d0ba      	beq.n	800707c <tcp_slowtmr+0x100>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007106:	6a21      	ldr	r1, [r4, #32]
 8007108:	4b4c      	ldr	r3, [pc, #304]	; (800723c <tcp_slowtmr+0x2c0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	1a5b      	subs	r3, r3, r1
 800710e:	2b28      	cmp	r3, #40	; 0x28
 8007110:	d9b4      	bls.n	800707c <tcp_slowtmr+0x100>
          ++pcb_remove;
 8007112:	3501      	adds	r5, #1
 8007114:	b2ed      	uxtb	r5, r5
 8007116:	e7b1      	b.n	800707c <tcp_slowtmr+0x100>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007118:	4b48      	ldr	r3, [pc, #288]	; (800723c <tcp_slowtmr+0x2c0>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	6a23      	ldr	r3, [r4, #32]
 800711e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007120:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007124:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8007128:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800712c:	484d      	ldr	r0, [pc, #308]	; (8007264 <tcp_slowtmr+0x2e8>)
 800712e:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007132:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8007136:	d903      	bls.n	8007140 <tcp_slowtmr+0x1c4>
        ++pcb_remove;
 8007138:	3501      	adds	r5, #1
 800713a:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 800713c:	2701      	movs	r7, #1
 800713e:	e7a6      	b.n	800708e <tcp_slowtmr+0x112>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007140:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007144:	4848      	ldr	r0, [pc, #288]	; (8007268 <tcp_slowtmr+0x2ec>)
 8007146:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 800714a:	4946      	ldr	r1, [pc, #280]	; (8007264 <tcp_slowtmr+0x2e8>)
 800714c:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007150:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8007154:	d801      	bhi.n	800715a <tcp_slowtmr+0x1de>
    pcb_reset = 0;
 8007156:	2700      	movs	r7, #0
 8007158:	e799      	b.n	800708e <tcp_slowtmr+0x112>
        err = tcp_keepalive(pcb);
 800715a:	4620      	mov	r0, r4
 800715c:	f002 ff8e 	bl	800a07c <tcp_keepalive>
        if (err == ERR_OK) {
 8007160:	b930      	cbnz	r0, 8007170 <tcp_slowtmr+0x1f4>
          pcb->keep_cnt_sent++;
 8007162:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007166:	3301      	adds	r3, #1
 8007168:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 800716c:	2700      	movs	r7, #0
 800716e:	e78e      	b.n	800708e <tcp_slowtmr+0x112>
 8007170:	2700      	movs	r7, #0
 8007172:	e78c      	b.n	800708e <tcp_slowtmr+0x112>
      tcp_segs_free(pcb->ooseq);
 8007174:	f7ff fe59 	bl	8006e2a <tcp_segs_free>
      pcb->ooseq = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	6723      	str	r3, [r4, #112]	; 0x70
 800717c:	e794      	b.n	80070a8 <tcp_slowtmr+0x12c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800717e:	6a21      	ldr	r1, [r4, #32]
 8007180:	4a2e      	ldr	r2, [pc, #184]	; (800723c <tcp_slowtmr+0x2c0>)
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	1a52      	subs	r2, r2, r1
 8007186:	2a28      	cmp	r2, #40	; 0x28
 8007188:	d991      	bls.n	80070ae <tcp_slowtmr+0x132>
        ++pcb_remove;
 800718a:	3501      	adds	r5, #1
 800718c:	b2ed      	uxtb	r5, r5
 800718e:	e78e      	b.n	80070ae <tcp_slowtmr+0x132>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007190:	6a22      	ldr	r2, [r4, #32]
 8007192:	4b2a      	ldr	r3, [pc, #168]	; (800723c <tcp_slowtmr+0x2c0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	2bf0      	cmp	r3, #240	; 0xf0
 800719a:	d98a      	bls.n	80070b2 <tcp_slowtmr+0x136>
        ++pcb_remove;
 800719c:	3501      	adds	r5, #1
 800719e:	b2ed      	uxtb	r5, r5
 80071a0:	e787      	b.n	80070b2 <tcp_slowtmr+0x136>
      tcp_err_fn err_fn = pcb->errf;
 80071a2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7ff fec6 	bl	8006f38 <tcp_pcb_purge>
      if (prev != NULL) {
 80071ac:	b326      	cbz	r6, 80071f8 <tcp_slowtmr+0x27c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80071ae:	4b25      	ldr	r3, [pc, #148]	; (8007244 <tcp_slowtmr+0x2c8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	d018      	beq.n	80071e8 <tcp_slowtmr+0x26c>
        prev->next = pcb->next;
 80071b6:	68e3      	ldr	r3, [r4, #12]
 80071b8:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 80071ba:	bb67      	cbnz	r7, 8007216 <tcp_slowtmr+0x29a>
      err_arg = pcb->callback_arg;
 80071bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 80071c0:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80071c2:	4621      	mov	r1, r4
 80071c4:	2001      	movs	r0, #1
 80071c6:	f7fe ffe9 	bl	800619c <memp_free>
      tcp_active_pcbs_changed = 0;
 80071ca:	4b25      	ldr	r3, [pc, #148]	; (8007260 <tcp_slowtmr+0x2e4>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80071d0:	b11d      	cbz	r5, 80071da <tcp_slowtmr+0x25e>
 80071d2:	f06f 010c 	mvn.w	r1, #12
 80071d6:	4640      	mov	r0, r8
 80071d8:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 80071da:	4b21      	ldr	r3, [pc, #132]	; (8007260 <tcp_slowtmr+0x2e4>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f47f aed7 	bne.w	8006f92 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 80071e4:	463c      	mov	r4, r7
 80071e6:	e047      	b.n	8007278 <tcp_slowtmr+0x2fc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80071e8:	4b17      	ldr	r3, [pc, #92]	; (8007248 <tcp_slowtmr+0x2cc>)
 80071ea:	f240 4289 	movw	r2, #1161	; 0x489
 80071ee:	491f      	ldr	r1, [pc, #124]	; (800726c <tcp_slowtmr+0x2f0>)
 80071f0:	4817      	ldr	r0, [pc, #92]	; (8007250 <tcp_slowtmr+0x2d4>)
 80071f2:	f00b fe89 	bl	8012f08 <printf>
 80071f6:	e7de      	b.n	80071b6 <tcp_slowtmr+0x23a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80071f8:	4b12      	ldr	r3, [pc, #72]	; (8007244 <tcp_slowtmr+0x2c8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d006      	beq.n	800720e <tcp_slowtmr+0x292>
 8007200:	4b11      	ldr	r3, [pc, #68]	; (8007248 <tcp_slowtmr+0x2cc>)
 8007202:	f240 428d 	movw	r2, #1165	; 0x48d
 8007206:	491a      	ldr	r1, [pc, #104]	; (8007270 <tcp_slowtmr+0x2f4>)
 8007208:	4811      	ldr	r0, [pc, #68]	; (8007250 <tcp_slowtmr+0x2d4>)
 800720a:	f00b fe7d 	bl	8012f08 <printf>
        tcp_active_pcbs = pcb->next;
 800720e:	68e2      	ldr	r2, [r4, #12]
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <tcp_slowtmr+0x2c8>)
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e7d1      	b.n	80071ba <tcp_slowtmr+0x23e>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007216:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007218:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800721a:	8b23      	ldrh	r3, [r4, #24]
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	8ae3      	ldrh	r3, [r4, #22]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	1d23      	adds	r3, r4, #4
 8007224:	4622      	mov	r2, r4
 8007226:	f002 fe65 	bl	8009ef4 <tcp_rst>
 800722a:	e7c7      	b.n	80071bc <tcp_slowtmr+0x240>
        TCP_EVENT_POLL(prev, err);
 800722c:	2000      	movs	r0, #0
 800722e:	e757      	b.n	80070e0 <tcp_slowtmr+0x164>
          tcp_output(prev);
 8007230:	4620      	mov	r0, r4
 8007232:	f002 fd17 	bl	8009c64 <tcp_output>
      prev = pcb;
 8007236:	4626      	mov	r6, r4
      pcb = pcb->next;
 8007238:	462c      	mov	r4, r5
 800723a:	e01d      	b.n	8007278 <tcp_slowtmr+0x2fc>
 800723c:	20007a04 	.word	0x20007a04
 8007240:	200033c1 	.word	0x200033c1
 8007244:	20007a00 	.word	0x20007a00
 8007248:	0801aad8 	.word	0x0801aad8
 800724c:	0801ac78 	.word	0x0801ac78
 8007250:	0801a38c 	.word	0x0801a38c
 8007254:	0801aca4 	.word	0x0801aca4
 8007258:	0801acd0 	.word	0x0801acd0
 800725c:	0801a2a8 	.word	0x0801a2a8
 8007260:	200079fc 	.word	0x200079fc
 8007264:	10624dd3 	.word	0x10624dd3
 8007268:	000124f8 	.word	0x000124f8
 800726c:	0801ad00 	.word	0x0801ad00
 8007270:	0801ad2c 	.word	0x0801ad2c
      prev = pcb;
 8007274:	4626      	mov	r6, r4
      pcb = pcb->next;
 8007276:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8007278:	b394      	cbz	r4, 80072e0 <tcp_slowtmr+0x364>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800727a:	7d23      	ldrb	r3, [r4, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f43f ae8c 	beq.w	8006f9a <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007282:	7d23      	ldrb	r3, [r4, #20]
 8007284:	2b01      	cmp	r3, #1
 8007286:	f43f ae90 	beq.w	8006faa <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800728a:	7d23      	ldrb	r3, [r4, #20]
 800728c:	2b0a      	cmp	r3, #10
 800728e:	f43f ae94 	beq.w	8006fba <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007292:	7f62      	ldrb	r2, [r4, #29]
 8007294:	4b33      	ldr	r3, [pc, #204]	; (8007364 <tcp_slowtmr+0x3e8>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	f43f ae96 	beq.w	8006fca <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 800729e:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80072a0:	7d23      	ldrb	r3, [r4, #20]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	f43f ae93 	beq.w	8006fce <tcp_slowtmr+0x52>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80072a8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80072ac:	2a0b      	cmp	r2, #11
 80072ae:	f63f aee1 	bhi.w	8007074 <tcp_slowtmr+0xf8>
      if (pcb->persist_backoff > 0) {
 80072b2:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	f43f aea3 	beq.w	8007002 <tcp_slowtmr+0x86>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80072bc:	3d01      	subs	r5, #1
 80072be:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <tcp_slowtmr+0x3ec>)
 80072c0:	441d      	add	r5, r3
 80072c2:	7c2a      	ldrb	r2, [r5, #16]
        if (pcb->persist_cnt < backoff_cnt) {
 80072c4:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d202      	bcs.n	80072d2 <tcp_slowtmr+0x356>
          pcb->persist_cnt++;
 80072cc:	3301      	adds	r3, #1
 80072ce:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80072d2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80072d6:	4293      	cmp	r3, r2
 80072d8:	f4bf ae80 	bcs.w	8006fdc <tcp_slowtmr+0x60>
    pcb_remove = 0;
 80072dc:	2500      	movs	r5, #0
 80072de:	e6ca      	b.n	8007076 <tcp_slowtmr+0xfa>
  pcb = tcp_tw_pcbs;
 80072e0:	4b22      	ldr	r3, [pc, #136]	; (800736c <tcp_slowtmr+0x3f0>)
 80072e2:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80072e4:	e00e      	b.n	8007304 <tcp_slowtmr+0x388>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80072e6:	4b22      	ldr	r3, [pc, #136]	; (8007370 <tcp_slowtmr+0x3f4>)
 80072e8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80072ec:	4921      	ldr	r1, [pc, #132]	; (8007374 <tcp_slowtmr+0x3f8>)
 80072ee:	4822      	ldr	r0, [pc, #136]	; (8007378 <tcp_slowtmr+0x3fc>)
 80072f0:	f00b fe0a 	bl	8012f08 <printf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80072f4:	6a2a      	ldr	r2, [r5, #32]
 80072f6:	4b21      	ldr	r3, [pc, #132]	; (800737c <tcp_slowtmr+0x400>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	2bf0      	cmp	r3, #240	; 0xf0
 80072fe:	d806      	bhi.n	800730e <tcp_slowtmr+0x392>
      prev = pcb;
 8007300:	462c      	mov	r4, r5
      pcb = pcb->next;
 8007302:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 8007304:	b35d      	cbz	r5, 800735e <tcp_slowtmr+0x3e2>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007306:	7d2b      	ldrb	r3, [r5, #20]
 8007308:	2b0a      	cmp	r3, #10
 800730a:	d0f3      	beq.n	80072f4 <tcp_slowtmr+0x378>
 800730c:	e7eb      	b.n	80072e6 <tcp_slowtmr+0x36a>
      tcp_pcb_purge(pcb);
 800730e:	4628      	mov	r0, r5
 8007310:	f7ff fe12 	bl	8006f38 <tcp_pcb_purge>
      if (prev != NULL) {
 8007314:	b1a4      	cbz	r4, 8007340 <tcp_slowtmr+0x3c4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007316:	4b15      	ldr	r3, [pc, #84]	; (800736c <tcp_slowtmr+0x3f0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	42ab      	cmp	r3, r5
 800731c:	d008      	beq.n	8007330 <tcp_slowtmr+0x3b4>
        prev->next = pcb->next;
 800731e:	68eb      	ldr	r3, [r5, #12]
 8007320:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8007322:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007324:	4629      	mov	r1, r5
 8007326:	2001      	movs	r0, #1
 8007328:	f7fe ff38 	bl	800619c <memp_free>
      pcb = pcb->next;
 800732c:	4635      	mov	r5, r6
 800732e:	e7e9      	b.n	8007304 <tcp_slowtmr+0x388>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007330:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <tcp_slowtmr+0x3f4>)
 8007332:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007336:	4912      	ldr	r1, [pc, #72]	; (8007380 <tcp_slowtmr+0x404>)
 8007338:	480f      	ldr	r0, [pc, #60]	; (8007378 <tcp_slowtmr+0x3fc>)
 800733a:	f00b fde5 	bl	8012f08 <printf>
 800733e:	e7ee      	b.n	800731e <tcp_slowtmr+0x3a2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <tcp_slowtmr+0x3f0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	42ab      	cmp	r3, r5
 8007346:	d006      	beq.n	8007356 <tcp_slowtmr+0x3da>
 8007348:	4b09      	ldr	r3, [pc, #36]	; (8007370 <tcp_slowtmr+0x3f4>)
 800734a:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800734e:	490d      	ldr	r1, [pc, #52]	; (8007384 <tcp_slowtmr+0x408>)
 8007350:	4809      	ldr	r0, [pc, #36]	; (8007378 <tcp_slowtmr+0x3fc>)
 8007352:	f00b fdd9 	bl	8012f08 <printf>
        tcp_tw_pcbs = pcb->next;
 8007356:	68ea      	ldr	r2, [r5, #12]
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <tcp_slowtmr+0x3f0>)
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	e7e1      	b.n	8007322 <tcp_slowtmr+0x3a6>
}
 800735e:	b002      	add	sp, #8
 8007360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007364:	200033c1 	.word	0x200033c1
 8007368:	0801a2a8 	.word	0x0801a2a8
 800736c:	20007a10 	.word	0x20007a10
 8007370:	0801aad8 	.word	0x0801aad8
 8007374:	0801ad58 	.word	0x0801ad58
 8007378:	0801a38c 	.word	0x0801a38c
 800737c:	20007a04 	.word	0x20007a04
 8007380:	0801ad88 	.word	0x0801ad88
 8007384:	0801adb0 	.word	0x0801adb0

08007388 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800738c:	6803      	ldr	r3, [r0, #0]
 800738e:	428b      	cmp	r3, r1
 8007390:	d005      	beq.n	800739e <tcp_pcb_remove+0x16>
 8007392:	b14b      	cbz	r3, 80073a8 <tcp_pcb_remove+0x20>
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	42a2      	cmp	r2, r4
 8007398:	d004      	beq.n	80073a4 <tcp_pcb_remove+0x1c>
 800739a:	4613      	mov	r3, r2
 800739c:	e7f9      	b.n	8007392 <tcp_pcb_remove+0xa>
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	6003      	str	r3, [r0, #0]
 80073a2:	e001      	b.n	80073a8 <tcp_pcb_remove+0x20>
 80073a4:	68e2      	ldr	r2, [r4, #12]
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	2300      	movs	r3, #0
 80073aa:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7ff fdc3 	bl	8006f38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80073b2:	7d23      	ldrb	r3, [r4, #20]
 80073b4:	2b0a      	cmp	r3, #10
 80073b6:	d005      	beq.n	80073c4 <tcp_pcb_remove+0x3c>
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d003      	beq.n	80073c4 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80073bc:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80073be:	f013 0f01 	tst.w	r3, #1
 80073c2:	d121      	bne.n	8007408 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80073c4:	7d23      	ldrb	r3, [r4, #20]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d01a      	beq.n	8007400 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80073ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80073cc:	b133      	cbz	r3, 80073dc <tcp_pcb_remove+0x54>
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <tcp_pcb_remove+0x90>)
 80073d0:	f240 7253 	movw	r2, #1875	; 0x753
 80073d4:	4911      	ldr	r1, [pc, #68]	; (800741c <tcp_pcb_remove+0x94>)
 80073d6:	4812      	ldr	r0, [pc, #72]	; (8007420 <tcp_pcb_remove+0x98>)
 80073d8:	f00b fd96 	bl	8012f08 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80073dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80073de:	b133      	cbz	r3, 80073ee <tcp_pcb_remove+0x66>
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <tcp_pcb_remove+0x90>)
 80073e2:	f240 7254 	movw	r2, #1876	; 0x754
 80073e6:	490f      	ldr	r1, [pc, #60]	; (8007424 <tcp_pcb_remove+0x9c>)
 80073e8:	480d      	ldr	r0, [pc, #52]	; (8007420 <tcp_pcb_remove+0x98>)
 80073ea:	f00b fd8d 	bl	8012f08 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80073ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80073f0:	b133      	cbz	r3, 8007400 <tcp_pcb_remove+0x78>
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <tcp_pcb_remove+0x90>)
 80073f4:	f240 7256 	movw	r2, #1878	; 0x756
 80073f8:	490b      	ldr	r1, [pc, #44]	; (8007428 <tcp_pcb_remove+0xa0>)
 80073fa:	4809      	ldr	r0, [pc, #36]	; (8007420 <tcp_pcb_remove+0x98>)
 80073fc:	f00b fd84 	bl	8012f08 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007400:	2300      	movs	r3, #0
 8007402:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007404:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007406:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8007408:	f043 0302 	orr.w	r3, r3, #2
 800740c:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800740e:	4620      	mov	r0, r4
 8007410:	f002 fc28 	bl	8009c64 <tcp_output>
 8007414:	e7d6      	b.n	80073c4 <tcp_pcb_remove+0x3c>
 8007416:	bf00      	nop
 8007418:	0801aad8 	.word	0x0801aad8
 800741c:	0801add8 	.word	0x0801add8
 8007420:	0801a38c 	.word	0x0801a38c
 8007424:	0801adf0 	.word	0x0801adf0
 8007428:	0801ae0c 	.word	0x0801ae0c

0800742c <tcp_close_shutdown>:
{
 800742c:	b510      	push	{r4, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007432:	b121      	cbz	r1, 800743e <tcp_close_shutdown+0x12>
 8007434:	7d03      	ldrb	r3, [r0, #20]
 8007436:	2b04      	cmp	r3, #4
 8007438:	d00c      	beq.n	8007454 <tcp_close_shutdown+0x28>
 800743a:	2b07      	cmp	r3, #7
 800743c:	d00a      	beq.n	8007454 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 800743e:	7d23      	ldrb	r3, [r4, #20]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d070      	beq.n	8007526 <tcp_close_shutdown+0xfa>
 8007444:	2b02      	cmp	r3, #2
 8007446:	d07b      	beq.n	8007540 <tcp_close_shutdown+0x114>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d052      	beq.n	80074f2 <tcp_close_shutdown+0xc6>
    return tcp_close_shutdown_fin(pcb);
 800744c:	4620      	mov	r0, r4
 800744e:	f7ff fc2b 	bl	8006ca8 <tcp_close_shutdown_fin>
 8007452:	e040      	b.n	80074d6 <tcp_close_shutdown+0xaa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007454:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007456:	b1d3      	cbz	r3, 800748e <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007458:	7ea3      	ldrb	r3, [r4, #26]
 800745a:	f013 0f10 	tst.w	r3, #16
 800745e:	d01b      	beq.n	8007498 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007460:	8b23      	ldrh	r3, [r4, #24]
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	8ae3      	ldrh	r3, [r4, #22]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	1d23      	adds	r3, r4, #4
 800746a:	4622      	mov	r2, r4
 800746c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800746e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007470:	f002 fd40 	bl	8009ef4 <tcp_rst>
      tcp_pcb_purge(pcb);
 8007474:	4620      	mov	r0, r4
 8007476:	f7ff fd5f 	bl	8006f38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800747a:	4b37      	ldr	r3, [pc, #220]	; (8007558 <tcp_close_shutdown+0x12c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	42a3      	cmp	r3, r4
 8007480:	d012      	beq.n	80074a8 <tcp_close_shutdown+0x7c>
 8007482:	b1bb      	cbz	r3, 80074b4 <tcp_close_shutdown+0x88>
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	42a2      	cmp	r2, r4
 8007488:	d012      	beq.n	80074b0 <tcp_close_shutdown+0x84>
 800748a:	4613      	mov	r3, r2
 800748c:	e7f9      	b.n	8007482 <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800748e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007490:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007494:	d0d3      	beq.n	800743e <tcp_close_shutdown+0x12>
 8007496:	e7df      	b.n	8007458 <tcp_close_shutdown+0x2c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007498:	4b30      	ldr	r3, [pc, #192]	; (800755c <tcp_close_shutdown+0x130>)
 800749a:	f240 120f 	movw	r2, #271	; 0x10f
 800749e:	4930      	ldr	r1, [pc, #192]	; (8007560 <tcp_close_shutdown+0x134>)
 80074a0:	4830      	ldr	r0, [pc, #192]	; (8007564 <tcp_close_shutdown+0x138>)
 80074a2:	f00b fd31 	bl	8012f08 <printf>
 80074a6:	e7db      	b.n	8007460 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	4b2b      	ldr	r3, [pc, #172]	; (8007558 <tcp_close_shutdown+0x12c>)
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e001      	b.n	80074b4 <tcp_close_shutdown+0x88>
 80074b0:	68e2      	ldr	r2, [r4, #12]
 80074b2:	60da      	str	r2, [r3, #12]
 80074b4:	2300      	movs	r3, #0
 80074b6:	60e3      	str	r3, [r4, #12]
 80074b8:	4b2b      	ldr	r3, [pc, #172]	; (8007568 <tcp_close_shutdown+0x13c>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80074be:	7d23      	ldrb	r3, [r4, #20]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d00a      	beq.n	80074da <tcp_close_shutdown+0xae>
        if (tcp_input_pcb == pcb) {
 80074c4:	4b29      	ldr	r3, [pc, #164]	; (800756c <tcp_close_shutdown+0x140>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d00f      	beq.n	80074ec <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 80074cc:	4621      	mov	r1, r4
 80074ce:	2001      	movs	r0, #1
 80074d0:	f7fe fe64 	bl	800619c <memp_free>
      return ERR_OK;
 80074d4:	2000      	movs	r0, #0
}
 80074d6:	b002      	add	sp, #8
 80074d8:	bd10      	pop	{r4, pc}
        pcb->state = TIME_WAIT;
 80074da:	230a      	movs	r3, #10
 80074dc:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <tcp_close_shutdown+0x144>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	60e2      	str	r2, [r4, #12]
 80074e4:	601c      	str	r4, [r3, #0]
 80074e6:	f002 feb5 	bl	800a254 <tcp_timer_needed>
 80074ea:	e7f3      	b.n	80074d4 <tcp_close_shutdown+0xa8>
          tcp_trigger_input_pcb_close();
 80074ec:	f001 fe64 	bl	80091b8 <tcp_trigger_input_pcb_close>
 80074f0:	e7f0      	b.n	80074d4 <tcp_close_shutdown+0xa8>
    if (pcb->local_port != 0) {
 80074f2:	8ae3      	ldrh	r3, [r4, #22]
 80074f4:	b18b      	cbz	r3, 800751a <tcp_close_shutdown+0xee>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80074f6:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <tcp_close_shutdown+0x148>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	42a3      	cmp	r3, r4
 80074fc:	d005      	beq.n	800750a <tcp_close_shutdown+0xde>
 80074fe:	b153      	cbz	r3, 8007516 <tcp_close_shutdown+0xea>
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	42a2      	cmp	r2, r4
 8007504:	d005      	beq.n	8007512 <tcp_close_shutdown+0xe6>
 8007506:	4613      	mov	r3, r2
 8007508:	e7f9      	b.n	80074fe <tcp_close_shutdown+0xd2>
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	4b19      	ldr	r3, [pc, #100]	; (8007574 <tcp_close_shutdown+0x148>)
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e001      	b.n	8007516 <tcp_close_shutdown+0xea>
 8007512:	68e2      	ldr	r2, [r4, #12]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	2300      	movs	r3, #0
 8007518:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 800751a:	4621      	mov	r1, r4
 800751c:	2001      	movs	r0, #1
 800751e:	f7fe fe3d 	bl	800619c <memp_free>
  return ERR_OK;
 8007522:	2000      	movs	r0, #0
    break;
 8007524:	e7d7      	b.n	80074d6 <tcp_close_shutdown+0xaa>
    tcp_listen_closed(pcb);
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff fb92 	bl	8006c50 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800752c:	4621      	mov	r1, r4
 800752e:	4812      	ldr	r0, [pc, #72]	; (8007578 <tcp_close_shutdown+0x14c>)
 8007530:	f7ff ff2a 	bl	8007388 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007534:	4621      	mov	r1, r4
 8007536:	2002      	movs	r0, #2
 8007538:	f7fe fe30 	bl	800619c <memp_free>
  return ERR_OK;
 800753c:	2000      	movs	r0, #0
    break;
 800753e:	e7ca      	b.n	80074d6 <tcp_close_shutdown+0xaa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007540:	4621      	mov	r1, r4
 8007542:	4805      	ldr	r0, [pc, #20]	; (8007558 <tcp_close_shutdown+0x12c>)
 8007544:	f7ff ff20 	bl	8007388 <tcp_pcb_remove>
 8007548:	2001      	movs	r0, #1
 800754a:	4b07      	ldr	r3, [pc, #28]	; (8007568 <tcp_close_shutdown+0x13c>)
 800754c:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800754e:	4621      	mov	r1, r4
 8007550:	f7fe fe24 	bl	800619c <memp_free>
  return ERR_OK;
 8007554:	2000      	movs	r0, #0
    break;
 8007556:	e7be      	b.n	80074d6 <tcp_close_shutdown+0xaa>
 8007558:	20007a00 	.word	0x20007a00
 800755c:	0801aad8 	.word	0x0801aad8
 8007560:	0801ae24 	.word	0x0801ae24
 8007564:	0801a38c 	.word	0x0801a38c
 8007568:	200079fc 	.word	0x200079fc
 800756c:	20007a14 	.word	0x20007a14
 8007570:	20007a10 	.word	0x20007a10
 8007574:	20007a0c 	.word	0x20007a0c
 8007578:	20007a08 	.word	0x20007a08

0800757c <tcp_close>:
{
 800757c:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 800757e:	7d03      	ldrb	r3, [r0, #20]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d003      	beq.n	800758c <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8007584:	7e83      	ldrb	r3, [r0, #26]
 8007586:	f043 0310 	orr.w	r3, r3, #16
 800758a:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800758c:	2101      	movs	r1, #1
 800758e:	f7ff ff4d 	bl	800742c <tcp_close_shutdown>
}
 8007592:	bd08      	pop	{r3, pc}

08007594 <tcp_recv_null>:
{
 8007594:	b510      	push	{r4, lr}
 8007596:	4608      	mov	r0, r1
  if (p != NULL) {
 8007598:	b142      	cbz	r2, 80075ac <tcp_recv_null+0x18>
 800759a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 800759c:	8911      	ldrh	r1, [r2, #8]
 800759e:	f7ff fbf5 	bl	8006d8c <tcp_recved>
    pbuf_free(p);
 80075a2:	4620      	mov	r0, r4
 80075a4:	f7fe ffae 	bl	8006504 <pbuf_free>
  return ERR_OK;
 80075a8:	2000      	movs	r0, #0
}
 80075aa:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80075ac:	b10b      	cbz	r3, 80075b2 <tcp_recv_null+0x1e>
  return ERR_OK;
 80075ae:	2000      	movs	r0, #0
 80075b0:	e7fb      	b.n	80075aa <tcp_recv_null+0x16>
    return tcp_close(pcb);
 80075b2:	f7ff ffe3 	bl	800757c <tcp_close>
 80075b6:	e7f8      	b.n	80075aa <tcp_recv_null+0x16>

080075b8 <tcp_process_refused_data>:
{
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80075bc:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80075be:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80075c4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80075c8:	b1dd      	cbz	r5, 8007602 <tcp_process_refused_data+0x4a>
 80075ca:	4632      	mov	r2, r6
 80075cc:	4601      	mov	r1, r0
 80075ce:	6900      	ldr	r0, [r0, #16]
 80075d0:	47a8      	blx	r5
 80075d2:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80075d4:	b9ed      	cbnz	r5, 8007612 <tcp_process_refused_data+0x5a>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80075d6:	f017 0f20 	tst.w	r7, #32
 80075da:	d020      	beq.n	800761e <tcp_process_refused_data+0x66>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80075dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80075de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80075e2:	d001      	beq.n	80075e8 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80075e4:	3301      	adds	r3, #1
 80075e6:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80075e8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80075ec:	b1be      	cbz	r6, 800761e <tcp_process_refused_data+0x66>
 80075ee:	2300      	movs	r3, #0
 80075f0:	461a      	mov	r2, r3
 80075f2:	4621      	mov	r1, r4
 80075f4:	6920      	ldr	r0, [r4, #16]
 80075f6:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80075f8:	f110 0f0d 	cmn.w	r0, #13
 80075fc:	d10f      	bne.n	800761e <tcp_process_refused_data+0x66>
          return ERR_ABRT;
 80075fe:	4605      	mov	r5, r0
 8007600:	e00d      	b.n	800761e <tcp_process_refused_data+0x66>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007602:	2300      	movs	r3, #0
 8007604:	4632      	mov	r2, r6
 8007606:	4601      	mov	r1, r0
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff ffc3 	bl	8007594 <tcp_recv_null>
 800760e:	4605      	mov	r5, r0
 8007610:	e7e0      	b.n	80075d4 <tcp_process_refused_data+0x1c>
    } else if (err == ERR_ABRT) {
 8007612:	f115 0f0d 	cmn.w	r5, #13
 8007616:	d002      	beq.n	800761e <tcp_process_refused_data+0x66>
      pcb->refused_data = refused_data;
 8007618:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800761a:	f06f 0504 	mvn.w	r5, #4
}
 800761e:	4628      	mov	r0, r5
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007624 <tcp_fasttmr>:
{
 8007624:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8007626:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <tcp_fasttmr+0x74>)
 8007628:	7813      	ldrb	r3, [r2, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800762e:	4b1b      	ldr	r3, [pc, #108]	; (800769c <tcp_fasttmr+0x78>)
 8007630:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8007632:	e013      	b.n	800765c <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8007634:	f043 0302 	orr.w	r3, r3, #2
 8007638:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800763a:	4620      	mov	r0, r4
 800763c:	f002 fb12 	bl	8009c64 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007640:	7ea3      	ldrb	r3, [r4, #26]
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	76a3      	strb	r3, [r4, #26]
 8007648:	e013      	b.n	8007672 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 800764a:	f023 0308 	bic.w	r3, r3, #8
 800764e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff fb29 	bl	8006ca8 <tcp_close_shutdown_fin>
 8007656:	e010      	b.n	800767a <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8007658:	68e5      	ldr	r5, [r4, #12]
{
 800765a:	462c      	mov	r4, r5
  while (pcb != NULL) {
 800765c:	b1dc      	cbz	r4, 8007696 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 800765e:	7f62      	ldrb	r2, [r4, #29]
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <tcp_fasttmr+0x74>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d0f7      	beq.n	8007658 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8007668:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800766a:	7ea3      	ldrb	r3, [r4, #26]
 800766c:	f013 0f01 	tst.w	r3, #1
 8007670:	d1e0      	bne.n	8007634 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8007672:	7ea3      	ldrb	r3, [r4, #26]
 8007674:	f013 0f08 	tst.w	r3, #8
 8007678:	d1e7      	bne.n	800764a <tcp_fasttmr+0x26>
      next = pcb->next;
 800767a:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 800767c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0eb      	beq.n	800765a <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8007682:	4e07      	ldr	r6, [pc, #28]	; (80076a0 <tcp_fasttmr+0x7c>)
 8007684:	2300      	movs	r3, #0
 8007686:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8007688:	4620      	mov	r0, r4
 800768a:	f7ff ff95 	bl	80075b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800768e:	7833      	ldrb	r3, [r6, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0e2      	beq.n	800765a <tcp_fasttmr+0x36>
 8007694:	e7cb      	b.n	800762e <tcp_fasttmr+0xa>
}
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	200033c1 	.word	0x200033c1
 800769c:	20007a00 	.word	0x20007a00
 80076a0:	200079fc 	.word	0x200079fc

080076a4 <tcp_tmr>:
{
 80076a4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80076a6:	f7ff ffbd 	bl	8007624 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80076aa:	4a06      	ldr	r2, [pc, #24]	; (80076c4 <tcp_tmr+0x20>)
 80076ac:	7853      	ldrb	r3, [r2, #1]
 80076ae:	3301      	adds	r3, #1
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	7053      	strb	r3, [r2, #1]
 80076b4:	f013 0f01 	tst.w	r3, #1
 80076b8:	d100      	bne.n	80076bc <tcp_tmr+0x18>
}
 80076ba:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80076bc:	f7ff fc5e 	bl	8006f7c <tcp_slowtmr>
}
 80076c0:	e7fb      	b.n	80076ba <tcp_tmr+0x16>
 80076c2:	bf00      	nop
 80076c4:	200033c1 	.word	0x200033c1

080076c8 <tcp_abandon>:
{
 80076c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	4604      	mov	r4, r0
 80076d0:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80076d2:	7d03      	ldrb	r3, [r0, #20]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d01a      	beq.n	800770e <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 80076d8:	7d23      	ldrb	r3, [r4, #20]
 80076da:	2b0a      	cmp	r3, #10
 80076dc:	d01f      	beq.n	800771e <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 80076de:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80076e2:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 80076e6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80076ea:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d141      	bne.n	8007774 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 80076f0:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 80076f4:	f1ba 0f00 	cmp.w	sl, #0
 80076f8:	d046      	beq.n	8007788 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80076fa:	4b2a      	ldr	r3, [pc, #168]	; (80077a4 <tcp_abandon+0xdc>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	42a3      	cmp	r3, r4
 8007700:	d016      	beq.n	8007730 <tcp_abandon+0x68>
 8007702:	b1db      	cbz	r3, 800773c <tcp_abandon+0x74>
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	42a2      	cmp	r2, r4
 8007708:	d016      	beq.n	8007738 <tcp_abandon+0x70>
 800770a:	4613      	mov	r3, r2
 800770c:	e7f9      	b.n	8007702 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800770e:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <tcp_abandon+0xe0>)
 8007710:	f240 12df 	movw	r2, #479	; 0x1df
 8007714:	4925      	ldr	r1, [pc, #148]	; (80077ac <tcp_abandon+0xe4>)
 8007716:	4826      	ldr	r0, [pc, #152]	; (80077b0 <tcp_abandon+0xe8>)
 8007718:	f00b fbf6 	bl	8012f08 <printf>
 800771c:	e7dc      	b.n	80076d8 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800771e:	4621      	mov	r1, r4
 8007720:	4824      	ldr	r0, [pc, #144]	; (80077b4 <tcp_abandon+0xec>)
 8007722:	f7ff fe31 	bl	8007388 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007726:	4621      	mov	r1, r4
 8007728:	2001      	movs	r0, #1
 800772a:	f7fe fd37 	bl	800619c <memp_free>
 800772e:	e01e      	b.n	800776e <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <tcp_abandon+0xdc>)
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	e001      	b.n	800773c <tcp_abandon+0x74>
 8007738:	68e2      	ldr	r2, [r4, #12]
 800773a:	60da      	str	r2, [r3, #12]
 800773c:	2500      	movs	r5, #0
 800773e:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8007740:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8007742:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007744:	b108      	cbz	r0, 800774a <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 8007746:	f7ff fb70 	bl	8006e2a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800774a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800774c:	b108      	cbz	r0, 8007752 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 800774e:	f7ff fb6c 	bl	8006e2a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007752:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007754:	b108      	cbz	r0, 800775a <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 8007756:	f7ff fb68 	bl	8006e2a <tcp_segs_free>
    if (send_rst) {
 800775a:	b9bd      	cbnz	r5, 800778c <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 800775c:	4621      	mov	r1, r4
 800775e:	2001      	movs	r0, #1
 8007760:	f7fe fd1c 	bl	800619c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007764:	b11e      	cbz	r6, 800776e <tcp_abandon+0xa6>
 8007766:	f06f 010c 	mvn.w	r1, #12
 800776a:	4638      	mov	r0, r7
 800776c:	47b0      	blx	r6
}
 800776e:	b002      	add	sp, #8
 8007770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8007774:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007778:	4621      	mov	r1, r4
 800777a:	480f      	ldr	r0, [pc, #60]	; (80077b8 <tcp_abandon+0xf0>)
 800777c:	f7ff fe04 	bl	8007388 <tcp_pcb_remove>
 8007780:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <tcp_abandon+0xf4>)
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e7dc      	b.n	8007742 <tcp_abandon+0x7a>
    int send_rst = 0;
 8007788:	2500      	movs	r5, #0
 800778a:	e7da      	b.n	8007742 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800778c:	8b23      	ldrh	r3, [r4, #24]
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f8cd a000 	str.w	sl, [sp]
 8007794:	1d23      	adds	r3, r4, #4
 8007796:	4622      	mov	r2, r4
 8007798:	4649      	mov	r1, r9
 800779a:	4640      	mov	r0, r8
 800779c:	f002 fbaa 	bl	8009ef4 <tcp_rst>
 80077a0:	e7dc      	b.n	800775c <tcp_abandon+0x94>
 80077a2:	bf00      	nop
 80077a4:	20007a0c 	.word	0x20007a0c
 80077a8:	0801aad8 	.word	0x0801aad8
 80077ac:	0801ae40 	.word	0x0801ae40
 80077b0:	0801a38c 	.word	0x0801a38c
 80077b4:	20007a10 	.word	0x20007a10
 80077b8:	20007a00 	.word	0x20007a00
 80077bc:	200079fc 	.word	0x200079fc

080077c0 <tcp_abort>:
{
 80077c0:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80077c2:	2101      	movs	r1, #1
 80077c4:	f7ff ff80 	bl	80076c8 <tcp_abandon>
}
 80077c8:	bd08      	pop	{r3, pc}
	...

080077cc <tcp_kill_timewait>:
{
 80077cc:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <tcp_kill_timewait+0x2c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80077d2:	2400      	movs	r4, #0
  inactive = NULL;
 80077d4:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077d6:	e000      	b.n	80077da <tcp_kill_timewait+0xe>
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	b143      	cbz	r3, 80077ee <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80077dc:	6a19      	ldr	r1, [r3, #32]
 80077de:	4a07      	ldr	r2, [pc, #28]	; (80077fc <tcp_kill_timewait+0x30>)
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	1a52      	subs	r2, r2, r1
 80077e4:	42a2      	cmp	r2, r4
 80077e6:	d3f7      	bcc.n	80077d8 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 80077e8:	4614      	mov	r4, r2
      inactive = pcb;
 80077ea:	4618      	mov	r0, r3
 80077ec:	e7f4      	b.n	80077d8 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 80077ee:	b108      	cbz	r0, 80077f4 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 80077f0:	f7ff ffe6 	bl	80077c0 <tcp_abort>
}
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	bf00      	nop
 80077f8:	20007a10 	.word	0x20007a10
 80077fc:	20007a04 	.word	0x20007a04

08007800 <tcp_kill_prio>:
{
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	4604      	mov	r4, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007804:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007808:	d104      	bne.n	8007814 <tcp_kill_prio+0x14>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <tcp_kill_prio+0x40>)
 800780c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800780e:	2600      	movs	r6, #0
  inactive = NULL;
 8007810:	4630      	mov	r0, r6
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007812:	e002      	b.n	800781a <tcp_kill_prio+0x1a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007814:	247f      	movs	r4, #127	; 0x7f
 8007816:	e7f8      	b.n	800780a <tcp_kill_prio+0xa>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	b163      	cbz	r3, 8007836 <tcp_kill_prio+0x36>
    if (pcb->prio <= mprio &&
 800781c:	7d59      	ldrb	r1, [r3, #21]
 800781e:	42a1      	cmp	r1, r4
 8007820:	d8fa      	bhi.n	8007818 <tcp_kill_prio+0x18>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007822:	6a1d      	ldr	r5, [r3, #32]
 8007824:	4a07      	ldr	r2, [pc, #28]	; (8007844 <tcp_kill_prio+0x44>)
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	1b52      	subs	r2, r2, r5
    if (pcb->prio <= mprio &&
 800782a:	42b2      	cmp	r2, r6
 800782c:	d3f4      	bcc.n	8007818 <tcp_kill_prio+0x18>
      mprio = pcb->prio;
 800782e:	460c      	mov	r4, r1
      inactivity = tcp_ticks - pcb->tmr;
 8007830:	4616      	mov	r6, r2
      inactive = pcb;
 8007832:	4618      	mov	r0, r3
 8007834:	e7f0      	b.n	8007818 <tcp_kill_prio+0x18>
  if (inactive != NULL) {
 8007836:	b108      	cbz	r0, 800783c <tcp_kill_prio+0x3c>
    tcp_abort(inactive);
 8007838:	f7ff ffc2 	bl	80077c0 <tcp_abort>
}
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	bf00      	nop
 8007840:	20007a00 	.word	0x20007a00
 8007844:	20007a04 	.word	0x20007a04

08007848 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800784e:	e003      	b.n	8007858 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007850:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007852:	f7ff ffb5 	bl	80077c0 <tcp_abort>
      pcb = next;
 8007856:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8007858:	b128      	cbz	r0, 8007866 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800785a:	6802      	ldr	r2, [r0, #0]
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d0f6      	beq.n	8007850 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8007862:	68c0      	ldr	r0, [r0, #12]
 8007864:	e7f8      	b.n	8007858 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007866:	bd38      	pop	{r3, r4, r5, pc}

08007868 <tcp_kill_state>:
{
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800786c:	f1a0 0308 	sub.w	r3, r0, #8
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b01      	cmp	r3, #1
 8007874:	d804      	bhi.n	8007880 <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007876:	4b10      	ldr	r3, [pc, #64]	; (80078b8 <tcp_kill_state+0x50>)
 8007878:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800787a:	2100      	movs	r1, #0
  inactive = NULL;
 800787c:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800787e:	e008      	b.n	8007892 <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007880:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <tcp_kill_state+0x54>)
 8007882:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007886:	490e      	ldr	r1, [pc, #56]	; (80078c0 <tcp_kill_state+0x58>)
 8007888:	480e      	ldr	r0, [pc, #56]	; (80078c4 <tcp_kill_state+0x5c>)
 800788a:	f00b fb3d 	bl	8012f08 <printf>
 800788e:	e7f2      	b.n	8007876 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	b15b      	cbz	r3, 80078ac <tcp_kill_state+0x44>
    if (pcb->state == state) {
 8007894:	7d1a      	ldrb	r2, [r3, #20]
 8007896:	42a2      	cmp	r2, r4
 8007898:	d1fa      	bne.n	8007890 <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800789a:	6a1d      	ldr	r5, [r3, #32]
 800789c:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <tcp_kill_state+0x60>)
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	1b52      	subs	r2, r2, r5
 80078a2:	428a      	cmp	r2, r1
 80078a4:	d3f4      	bcc.n	8007890 <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 80078a6:	4611      	mov	r1, r2
        inactive = pcb;
 80078a8:	4618      	mov	r0, r3
 80078aa:	e7f1      	b.n	8007890 <tcp_kill_state+0x28>
  if (inactive != NULL) {
 80078ac:	b110      	cbz	r0, 80078b4 <tcp_kill_state+0x4c>
    tcp_abandon(inactive, 0);
 80078ae:	2100      	movs	r1, #0
 80078b0:	f7ff ff0a 	bl	80076c8 <tcp_abandon>
}
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20007a00 	.word	0x20007a00
 80078bc:	0801aad8 	.word	0x0801aad8
 80078c0:	0801ae74 	.word	0x0801ae74
 80078c4:	0801a38c 	.word	0x0801a38c
 80078c8:	20007a04 	.word	0x20007a04

080078cc <tcp_alloc>:
{
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078d0:	2001      	movs	r0, #1
 80078d2:	f7fe fc49 	bl	8006168 <memp_malloc>
  if (pcb == NULL) {
 80078d6:	4604      	mov	r4, r0
 80078d8:	b368      	cbz	r0, 8007936 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 80078da:	b354      	cbz	r4, 8007932 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80078dc:	2298      	movs	r2, #152	; 0x98
 80078de:	2100      	movs	r1, #0
 80078e0:	4620      	mov	r0, r4
 80078e2:	f00b fafd 	bl	8012ee0 <memset>
    pcb->prio = prio;
 80078e6:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80078e8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80078ec:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80078f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80078f4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80078f6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80078f8:	22ff      	movs	r2, #255	; 0xff
 80078fa:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80078fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007900:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007902:	2206      	movs	r2, #6
 8007904:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007908:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800790a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800790e:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007910:	2201      	movs	r2, #1
 8007912:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007916:	4a19      	ldr	r2, [pc, #100]	; (800797c <tcp_alloc+0xb0>)
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800791c:	4a18      	ldr	r2, [pc, #96]	; (8007980 <tcp_alloc+0xb4>)
 800791e:	7812      	ldrb	r2, [r2, #0]
 8007920:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8007922:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8007926:	4b17      	ldr	r3, [pc, #92]	; (8007984 <tcp_alloc+0xb8>)
 8007928:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800792c:	4b16      	ldr	r3, [pc, #88]	; (8007988 <tcp_alloc+0xbc>)
 800792e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8007932:	4620      	mov	r0, r4
 8007934:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8007936:	f7ff ff49 	bl	80077cc <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800793a:	2001      	movs	r0, #1
 800793c:	f7fe fc14 	bl	8006168 <memp_malloc>
    if (pcb == NULL) {
 8007940:	4604      	mov	r4, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d1c9      	bne.n	80078da <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8007946:	2009      	movs	r0, #9
 8007948:	f7ff ff8e 	bl	8007868 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800794c:	2001      	movs	r0, #1
 800794e:	f7fe fc0b 	bl	8006168 <memp_malloc>
      if (pcb == NULL) {
 8007952:	4604      	mov	r4, r0
 8007954:	2800      	cmp	r0, #0
 8007956:	d1c0      	bne.n	80078da <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8007958:	2008      	movs	r0, #8
 800795a:	f7ff ff85 	bl	8007868 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800795e:	2001      	movs	r0, #1
 8007960:	f7fe fc02 	bl	8006168 <memp_malloc>
        if (pcb == NULL) {
 8007964:	4604      	mov	r4, r0
 8007966:	2800      	cmp	r0, #0
 8007968:	d1b7      	bne.n	80078da <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800796a:	4628      	mov	r0, r5
 800796c:	f7ff ff48 	bl	8007800 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007970:	2001      	movs	r0, #1
 8007972:	f7fe fbf9 	bl	8006168 <memp_malloc>
 8007976:	4604      	mov	r4, r0
          if (pcb != NULL) {
 8007978:	e7af      	b.n	80078da <tcp_alloc+0xe>
 800797a:	bf00      	nop
 800797c:	20007a04 	.word	0x20007a04
 8007980:	200033c1 	.word	0x200033c1
 8007984:	08007595 	.word	0x08007595
 8007988:	006ddd00 	.word	0x006ddd00

0800798c <tcp_new>:
{
 800798c:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
 800798e:	2040      	movs	r0, #64	; 0x40
 8007990:	f7ff ff9c 	bl	80078cc <tcp_alloc>
}
 8007994:	bd08      	pop	{r3, pc}
	...

08007998 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007998:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <tcp_next_iss+0x10>)
 800799a:	6858      	ldr	r0, [r3, #4]
 800799c:	4a03      	ldr	r2, [pc, #12]	; (80079ac <tcp_next_iss+0x14>)
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	4410      	add	r0, r2
 80079a2:	6058      	str	r0, [r3, #4]
}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000008 	.word	0x20000008
 80079ac:	20007a04 	.word	0x20007a04

080079b0 <tcp_eff_send_mss_impl>:
{
 80079b0:	b510      	push	{r4, lr}
 80079b2:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 80079b4:	4608      	mov	r0, r1
 80079b6:	f003 fb51 	bl	800b05c <ip4_route>
    if (outif == NULL) {
 80079ba:	b130      	cbz	r0, 80079ca <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 80079bc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 80079be:	b123      	cbz	r3, 80079ca <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80079c0:	3b28      	subs	r3, #40	; 0x28
 80079c2:	b29b      	uxth	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 80079c4:	429c      	cmp	r4, r3
 80079c6:	bf28      	it	cs
 80079c8:	461c      	movcs	r4, r3
}
 80079ca:	4620      	mov	r0, r4
 80079cc:	bd10      	pop	{r4, pc}
	...

080079d0 <tcp_connect>:
{
 80079d0:	b570      	push	{r4, r5, r6, lr}
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d070      	beq.n	8007ab8 <tcp_connect+0xe8>
 80079d6:	461d      	mov	r5, r3
 80079d8:	4604      	mov	r4, r0
 80079da:	2900      	cmp	r1, #0
 80079dc:	d06f      	beq.n	8007abe <tcp_connect+0xee>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80079de:	7d03      	ldrb	r3, [r0, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d149      	bne.n	8007a78 <tcp_connect+0xa8>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80079e4:	680b      	ldr	r3, [r1, #0]
 80079e6:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 80079e8:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 80079ea:	b108      	cbz	r0, 80079f0 <tcp_connect+0x20>
 80079ec:	6803      	ldr	r3, [r0, #0]
 80079ee:	b963      	cbnz	r3, 8007a0a <tcp_connect+0x3a>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 80079f0:	1d20      	adds	r0, r4, #4
 80079f2:	f003 fb33 	bl	800b05c <ip4_route>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d047      	beq.n	8007a8c <tcp_connect+0xbc>
 80079fc:	1d02      	adds	r2, r0, #4
    if ((netif == NULL) || (local_ip == NULL)) {
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d060      	beq.n	8007ac4 <tcp_connect+0xf4>
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d061      	beq.n	8007aca <tcp_connect+0xfa>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007a06:	6813      	ldr	r3, [r2, #0]
 8007a08:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8007a0a:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8007a0c:	b926      	cbnz	r6, 8007a18 <tcp_connect+0x48>
    pcb->local_port = tcp_new_port();
 8007a0e:	f7ff f8ed 	bl	8006bec <tcp_new_port>
 8007a12:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d05b      	beq.n	8007ad0 <tcp_connect+0x100>
  iss = tcp_next_iss(pcb);
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f7ff ffbd 	bl	8007998 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->snd_nxt = iss;
 8007a22:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->lastack = iss - 1;
 8007a24:	3801      	subs	r0, #1
 8007a26:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8007a28:	6560      	str	r0, [r4, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 8007a2a:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007a2c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007a30:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007a32:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007a34:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007a36:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = INITIAL_MSS;
 8007a3a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8007a3e:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007a40:	1d21      	adds	r1, r4, #4
 8007a42:	f7ff ffb5 	bl	80079b0 <tcp_eff_send_mss_impl>
 8007a46:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->cwnd = 1;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 8007a4e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007a52:	2102      	movs	r1, #2
 8007a54:	4620      	mov	r0, r4
 8007a56:	f001 fff7 	bl	8009a48 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	bb50      	cbnz	r0, 8007ab4 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8007a62:	b1de      	cbz	r6, 8007a9c <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a64:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <tcp_connect+0x108>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	d011      	beq.n	8007a90 <tcp_connect+0xc0>
 8007a6c:	b1b3      	cbz	r3, 8007a9c <tcp_connect+0xcc>
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	42a2      	cmp	r2, r4
 8007a72:	d011      	beq.n	8007a98 <tcp_connect+0xc8>
 8007a74:	4613      	mov	r3, r2
 8007a76:	e7f9      	b.n	8007a6c <tcp_connect+0x9c>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007a78:	4b18      	ldr	r3, [pc, #96]	; (8007adc <tcp_connect+0x10c>)
 8007a7a:	f44f 725e 	mov.w	r2, #888	; 0x378
 8007a7e:	4918      	ldr	r1, [pc, #96]	; (8007ae0 <tcp_connect+0x110>)
 8007a80:	4818      	ldr	r0, [pc, #96]	; (8007ae4 <tcp_connect+0x114>)
 8007a82:	f00b fa41 	bl	8012f08 <printf>
 8007a86:	f06f 0509 	mvn.w	r5, #9
 8007a8a:	e013      	b.n	8007ab4 <tcp_connect+0xe4>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	e7b6      	b.n	80079fe <tcp_connect+0x2e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <tcp_connect+0x108>)
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e001      	b.n	8007a9c <tcp_connect+0xcc>
 8007a98:	68e2      	ldr	r2, [r4, #12]
 8007a9a:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8007a9c:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <tcp_connect+0x118>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	60e2      	str	r2, [r4, #12]
 8007aa2:	601c      	str	r4, [r3, #0]
 8007aa4:	f002 fbd6 	bl	800a254 <tcp_timer_needed>
 8007aa8:	4b10      	ldr	r3, [pc, #64]	; (8007aec <tcp_connect+0x11c>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f002 f8d8 	bl	8009c64 <tcp_output>
}
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8007ab8:	f06f 0505 	mvn.w	r5, #5
 8007abc:	e7fa      	b.n	8007ab4 <tcp_connect+0xe4>
 8007abe:	f06f 0505 	mvn.w	r5, #5
 8007ac2:	e7f7      	b.n	8007ab4 <tcp_connect+0xe4>
      return ERR_RTE;
 8007ac4:	f06f 0503 	mvn.w	r5, #3
 8007ac8:	e7f4      	b.n	8007ab4 <tcp_connect+0xe4>
 8007aca:	f06f 0503 	mvn.w	r5, #3
 8007ace:	e7f1      	b.n	8007ab4 <tcp_connect+0xe4>
      return ERR_BUF;
 8007ad0:	f06f 0501 	mvn.w	r5, #1
 8007ad4:	e7ee      	b.n	8007ab4 <tcp_connect+0xe4>
 8007ad6:	bf00      	nop
 8007ad8:	20007a0c 	.word	0x20007a0c
 8007adc:	0801aad8 	.word	0x0801aad8
 8007ae0:	0801ae84 	.word	0x0801ae84
 8007ae4:	0801a38c 	.word	0x0801a38c
 8007ae8:	20007a00 	.word	0x20007a00
 8007aec:	200079fc 	.word	0x200079fc

08007af0 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007af0:	b308      	cbz	r0, 8007b36 <tcp_netif_ip_addr_changed+0x46>
{
 8007af2:	b538      	push	{r3, r4, r5, lr}
 8007af4:	460d      	mov	r5, r1
 8007af6:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8007af8:	6803      	ldr	r3, [r0, #0]
 8007afa:	b903      	cbnz	r3, 8007afe <tcp_netif_ip_addr_changed+0xe>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8007afc:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <tcp_netif_ip_addr_changed+0x48>)
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	f7ff fea1 	bl	8007848 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007b06:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <tcp_netif_ip_addr_changed+0x4c>)
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f7ff fe9c 	bl	8007848 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	d0f3      	beq.n	8007afc <tcp_netif_ip_addr_changed+0xc>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0f0      	beq.n	8007afc <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <tcp_netif_ip_addr_changed+0x50>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	e000      	b.n	8007b22 <tcp_netif_ip_addr_changed+0x32>
{
 8007b20:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0ea      	beq.n	8007afc <tcp_netif_ip_addr_changed+0xc>
        next = lpcb->next;
 8007b26:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	6821      	ldr	r1, [r4, #0]
 8007b2c:	4288      	cmp	r0, r1
 8007b2e:	d1f7      	bne.n	8007b20 <tcp_netif_ip_addr_changed+0x30>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007b30:	6829      	ldr	r1, [r5, #0]
 8007b32:	6019      	str	r1, [r3, #0]
 8007b34:	e7f4      	b.n	8007b20 <tcp_netif_ip_addr_changed+0x30>
 8007b36:	4770      	bx	lr
 8007b38:	20007a00 	.word	0x20007a00
 8007b3c:	20007a0c 	.word	0x20007a0c
 8007b40:	20007a08 	.word	0x20007a08

08007b44 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007b44:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <tcp_getoptbyte+0x38>)
 8007b46:	6819      	ldr	r1, [r3, #0]
 8007b48:	b121      	cbz	r1, 8007b54 <tcp_getoptbyte+0x10>
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	889b      	ldrh	r3, [r3, #4]
 8007b4e:	88d2      	ldrh	r2, [r2, #6]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d207      	bcs.n	8007b64 <tcp_getoptbyte+0x20>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007b54:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <tcp_getoptbyte+0x38>)
 8007b56:	6893      	ldr	r3, [r2, #8]
    return opts[tcp_optidx++];
 8007b58:	8891      	ldrh	r1, [r2, #4]
 8007b5a:	1c48      	adds	r0, r1, #1
 8007b5c:	8090      	strh	r0, [r2, #4]
 8007b5e:	440b      	add	r3, r1
 8007b60:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 8007b62:	4770      	bx	lr
{
 8007b64:	b410      	push	{r4}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007b66:	1c5c      	adds	r4, r3, #1
 8007b68:	4804      	ldr	r0, [pc, #16]	; (8007b7c <tcp_getoptbyte+0x38>)
 8007b6a:	8084      	strh	r4, [r0, #4]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8007b74:	5cc8      	ldrb	r0, [r1, r3]
}
 8007b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	200033c4 	.word	0x200033c4

08007b80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007b80:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007b82:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <tcp_parseopt+0x7c>)
 8007b84:	899b      	ldrh	r3, [r3, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d036      	beq.n	8007bf8 <tcp_parseopt+0x78>
 8007b8a:	4604      	mov	r4, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <tcp_parseopt+0x7c>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	809a      	strh	r2, [r3, #4]
 8007b92:	4b1a      	ldr	r3, [pc, #104]	; (8007bfc <tcp_parseopt+0x7c>)
 8007b94:	889a      	ldrh	r2, [r3, #4]
 8007b96:	899b      	ldrh	r3, [r3, #12]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d22d      	bcs.n	8007bf8 <tcp_parseopt+0x78>
      u8_t opt = tcp_getoptbyte();
 8007b9c:	f7ff ffd2 	bl	8007b44 <tcp_getoptbyte>
      switch (opt) {
 8007ba0:	2801      	cmp	r0, #1
 8007ba2:	d0f6      	beq.n	8007b92 <tcp_parseopt+0x12>
 8007ba4:	2802      	cmp	r0, #2
 8007ba6:	d00b      	beq.n	8007bc0 <tcp_parseopt+0x40>
 8007ba8:	b330      	cbz	r0, 8007bf8 <tcp_parseopt+0x78>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007baa:	f7ff ffcb 	bl	8007b44 <tcp_getoptbyte>
 8007bae:	4603      	mov	r3, r0
        if (data < 2) {
 8007bb0:	2801      	cmp	r0, #1
 8007bb2:	d921      	bls.n	8007bf8 <tcp_parseopt+0x78>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007bb4:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <tcp_parseopt+0x7c>)
 8007bb6:	8890      	ldrh	r0, [r2, #4]
 8007bb8:	4403      	add	r3, r0
 8007bba:	3b02      	subs	r3, #2
 8007bbc:	8093      	strh	r3, [r2, #4]
 8007bbe:	e7e8      	b.n	8007b92 <tcp_parseopt+0x12>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007bc0:	f7ff ffc0 	bl	8007b44 <tcp_getoptbyte>
 8007bc4:	2804      	cmp	r0, #4
 8007bc6:	d117      	bne.n	8007bf8 <tcp_parseopt+0x78>
 8007bc8:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <tcp_parseopt+0x7c>)
 8007bca:	8893      	ldrh	r3, [r2, #4]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	8992      	ldrh	r2, [r2, #12]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	da11      	bge.n	8007bf8 <tcp_parseopt+0x78>
        mss = (tcp_getoptbyte() << 8);
 8007bd4:	f7ff ffb6 	bl	8007b44 <tcp_getoptbyte>
 8007bd8:	b285      	uxth	r5, r0
 8007bda:	022d      	lsls	r5, r5, #8
 8007bdc:	b2ad      	uxth	r5, r5
        mss |= tcp_getoptbyte();
 8007bde:	f7ff ffb1 	bl	8007b44 <tcp_getoptbyte>
 8007be2:	b280      	uxth	r0, r0
 8007be4:	4305      	orrs	r5, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007be6:	1e6b      	subs	r3, r5, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007bee:	d301      	bcc.n	8007bf4 <tcp_parseopt+0x74>
 8007bf0:	f44f 7506 	mov.w	r5, #536	; 0x218
 8007bf4:	8665      	strh	r5, [r4, #50]	; 0x32
        break;
 8007bf6:	e7cc      	b.n	8007b92 <tcp_parseopt+0x12>
      }
    }
  }
}
 8007bf8:	bd38      	pop	{r3, r4, r5, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200033c4 	.word	0x200033c4

08007c00 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <tcp_input_delayed_close+0x3c>)
 8007c02:	7b9b      	ldrb	r3, [r3, #14]
 8007c04:	f013 0f10 	tst.w	r3, #16
 8007c08:	d101      	bne.n	8007c0e <tcp_input_delayed_close+0xe>
  return 0;
 8007c0a:	2000      	movs	r0, #0
}
 8007c0c:	4770      	bx	lr
{
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007c12:	7e83      	ldrb	r3, [r0, #26]
 8007c14:	f013 0f10 	tst.w	r3, #16
 8007c18:	d106      	bne.n	8007c28 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007c1a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007c1e:	b11b      	cbz	r3, 8007c28 <tcp_input_delayed_close+0x28>
 8007c20:	f06f 010e 	mvn.w	r1, #14
 8007c24:	6900      	ldr	r0, [r0, #16]
 8007c26:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4805      	ldr	r0, [pc, #20]	; (8007c40 <tcp_input_delayed_close+0x40>)
 8007c2c:	f7ff fbac 	bl	8007388 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007c30:	4621      	mov	r1, r4
 8007c32:	2001      	movs	r0, #1
 8007c34:	f7fe fab2 	bl	800619c <memp_free>
    return 1;
 8007c38:	2001      	movs	r0, #1
}
 8007c3a:	bd10      	pop	{r4, pc}
 8007c3c:	200033c4 	.word	0x200033c4
 8007c40:	20007a00 	.word	0x20007a00

08007c44 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <tcp_timewait_input+0x70>)
 8007c46:	7bdb      	ldrb	r3, [r3, #15]
 8007c48:	f013 0f04 	tst.w	r3, #4
 8007c4c:	d130      	bne.n	8007cb0 <tcp_timewait_input+0x6c>
{
 8007c4e:	b530      	push	{r4, r5, lr}
 8007c50:	b083      	sub	sp, #12
  if (flags & TCP_SYN) {
 8007c52:	f013 0f02 	tst.w	r3, #2
 8007c56:	d01d      	beq.n	8007c94 <tcp_timewait_input+0x50>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007c58:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <tcp_timewait_input+0x70>)
 8007c5a:	6919      	ldr	r1, [r3, #16]
 8007c5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c5e:	1aca      	subs	r2, r1, r3
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	db04      	blt.n	8007c6e <tcp_timewait_input+0x2a>
 8007c64:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8007c66:	4413      	add	r3, r2
 8007c68:	1acb      	subs	r3, r1, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	dd04      	ble.n	8007c78 <tcp_timewait_input+0x34>
  if ((tcplen > 0)) {
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <tcp_timewait_input+0x70>)
 8007c70:	8a9b      	ldrh	r3, [r3, #20]
 8007c72:	b9b3      	cbnz	r3, 8007ca2 <tcp_timewait_input+0x5e>
}
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c78:	480e      	ldr	r0, [pc, #56]	; (8007cb4 <tcp_timewait_input+0x70>)
 8007c7a:	6882      	ldr	r2, [r0, #8]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <tcp_timewait_input+0x74>)
 8007c7e:	8a84      	ldrh	r4, [r0, #20]
 8007c80:	8815      	ldrh	r5, [r2, #0]
 8007c82:	9501      	str	r5, [sp, #4]
 8007c84:	8852      	ldrh	r2, [r2, #2]
 8007c86:	9200      	str	r2, [sp, #0]
 8007c88:	1d1a      	adds	r2, r3, #4
 8007c8a:	4421      	add	r1, r4
 8007c8c:	6980      	ldr	r0, [r0, #24]
 8007c8e:	f002 f931 	bl	8009ef4 <tcp_rst>
      return;
 8007c92:	e7ef      	b.n	8007c74 <tcp_timewait_input+0x30>
  } else if (flags & TCP_FIN) {
 8007c94:	f013 0f01 	tst.w	r3, #1
 8007c98:	d0e9      	beq.n	8007c6e <tcp_timewait_input+0x2a>
    pcb->tmr = tcp_ticks;
 8007c9a:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <tcp_timewait_input+0x78>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6203      	str	r3, [r0, #32]
 8007ca0:	e7e5      	b.n	8007c6e <tcp_timewait_input+0x2a>
    pcb->flags |= TF_ACK_NOW;
 8007ca2:	7e83      	ldrb	r3, [r0, #26]
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8007caa:	f001 ffdb 	bl	8009c64 <tcp_output>
 8007cae:	e7e1      	b.n	8007c74 <tcp_timewait_input+0x30>
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	200033c4 	.word	0x200033c4
 8007cb8:	200044e0 	.word	0x200044e0
 8007cbc:	20007a04 	.word	0x20007a04

08007cc0 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	; (8007dac <tcp_listen_input+0xec>)
 8007cc2:	7bdb      	ldrb	r3, [r3, #15]
 8007cc4:	f013 0f04 	tst.w	r3, #4
 8007cc8:	d16e      	bne.n	8007da8 <tcp_listen_input+0xe8>
{
 8007cca:	b570      	push	{r4, r5, r6, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8007cd0:	f013 0f10 	tst.w	r3, #16
 8007cd4:	d104      	bne.n	8007ce0 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8007cd6:	f013 0f02 	tst.w	r3, #2
 8007cda:	d110      	bne.n	8007cfe <tcp_listen_input+0x3e>
}
 8007cdc:	b002      	add	sp, #8
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ce0:	4832      	ldr	r0, [pc, #200]	; (8007dac <tcp_listen_input+0xec>)
 8007ce2:	6882      	ldr	r2, [r0, #8]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ce4:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <tcp_listen_input+0xf0>)
 8007ce6:	8a84      	ldrh	r4, [r0, #20]
 8007ce8:	6901      	ldr	r1, [r0, #16]
 8007cea:	8815      	ldrh	r5, [r2, #0]
 8007cec:	9501      	str	r5, [sp, #4]
 8007cee:	8852      	ldrh	r2, [r2, #2]
 8007cf0:	9200      	str	r2, [sp, #0]
 8007cf2:	1d1a      	adds	r2, r3, #4
 8007cf4:	4421      	add	r1, r4
 8007cf6:	6980      	ldr	r0, [r0, #24]
 8007cf8:	f002 f8fc 	bl	8009ef4 <tcp_rst>
 8007cfc:	e7ee      	b.n	8007cdc <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8007cfe:	7d40      	ldrb	r0, [r0, #21]
 8007d00:	f7ff fde4 	bl	80078cc <tcp_alloc>
    if (npcb == NULL) {
 8007d04:	4604      	mov	r4, r0
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d040      	beq.n	8007d8c <tcp_listen_input+0xcc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007d0a:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <tcp_listen_input+0xf4>)
 8007d0c:	695a      	ldr	r2, [r3, #20]
 8007d0e:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007d14:	8aeb      	ldrh	r3, [r5, #22]
 8007d16:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8007d18:	4e24      	ldr	r6, [pc, #144]	; (8007dac <tcp_listen_input+0xec>)
 8007d1a:	68b3      	ldr	r3, [r6, #8]
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8007d20:	2303      	movs	r3, #3
 8007d22:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8007d24:	6933      	ldr	r3, [r6, #16]
 8007d26:	3301      	adds	r3, #1
 8007d28:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007d2a:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007d2c:	f7ff fe34 	bl	8007998 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8007d30:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8007d32:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8007d34:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007d36:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007d38:	6933      	ldr	r3, [r6, #16]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007d3e:	692b      	ldr	r3, [r5, #16]
 8007d40:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8007d42:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007d44:	7a2b      	ldrb	r3, [r5, #8]
 8007d46:	f003 030c 	and.w	r3, r3, #12
 8007d4a:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <tcp_listen_input+0xf8>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	60e2      	str	r2, [r4, #12]
 8007d52:	601c      	str	r4, [r3, #0]
 8007d54:	f002 fa7e 	bl	800a254 <tcp_timer_needed>
 8007d58:	4b18      	ldr	r3, [pc, #96]	; (8007dbc <tcp_listen_input+0xfc>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff ff0e 	bl	8007b80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d64:	68b3      	ldr	r3, [r6, #8]
 8007d66:	89db      	ldrh	r3, [r3, #14]
 8007d68:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d6c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d70:	1d21      	adds	r1, r4, #4
 8007d72:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8007d74:	f7ff fe1c 	bl	80079b0 <tcp_eff_send_mss_impl>
 8007d78:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d7a:	2112      	movs	r1, #18
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f001 fe63 	bl	8009a48 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007d82:	b960      	cbnz	r0, 8007d9e <tcp_listen_input+0xde>
    tcp_output(npcb);
 8007d84:	4620      	mov	r0, r4
 8007d86:	f001 ff6d 	bl	8009c64 <tcp_output>
 8007d8a:	e7a7      	b.n	8007cdc <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007d8c:	69ab      	ldr	r3, [r5, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0a4      	beq.n	8007cdc <tcp_listen_input+0x1c>
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	2100      	movs	r1, #0
 8007d98:	6928      	ldr	r0, [r5, #16]
 8007d9a:	4798      	blx	r3
      return;
 8007d9c:	e79e      	b.n	8007cdc <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7ff fc91 	bl	80076c8 <tcp_abandon>
      return;
 8007da6:	e799      	b.n	8007cdc <tcp_listen_input+0x1c>
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200033c4 	.word	0x200033c4
 8007db0:	200044e0 	.word	0x200044e0
 8007db4:	200044d0 	.word	0x200044d0
 8007db8:	20007a00 	.word	0x20007a00
 8007dbc:	200079fc 	.word	0x200079fc

08007dc0 <tcp_oos_insert_segment>:
{
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007dc6:	68c3      	ldr	r3, [r0, #12]
 8007dc8:	8998      	ldrh	r0, [r3, #12]
 8007dca:	f7fd ff65 	bl	8005c98 <lwip_htons>
 8007dce:	f010 0f01 	tst.w	r0, #1
 8007dd2:	d012      	beq.n	8007dfa <tcp_oos_insert_segment+0x3a>
    tcp_segs_free(next);
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff f828 	bl	8006e2a <tcp_segs_free>
    next = NULL;
 8007dda:	2400      	movs	r4, #0
  cseg->next = next;
 8007ddc:	602c      	str	r4, [r5, #0]
}
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007de0:	68eb      	ldr	r3, [r5, #12]
 8007de2:	899e      	ldrh	r6, [r3, #12]
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7fd ff57 	bl	8005c98 <lwip_htons>
 8007dea:	68eb      	ldr	r3, [r5, #12]
 8007dec:	4306      	orrs	r6, r0
 8007dee:	819e      	strh	r6, [r3, #12]
      next = next->next;
 8007df0:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7ff f80c 	bl	8006e10 <tcp_seg_free>
      next = next->next;
 8007df8:	4634      	mov	r4, r6
    while (next &&
 8007dfa:	b18c      	cbz	r4, 8007e20 <tcp_oos_insert_segment+0x60>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007dfc:	892b      	ldrh	r3, [r5, #8]
 8007dfe:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <tcp_oos_insert_segment+0x84>)
 8007e00:	6912      	ldr	r2, [r2, #16]
 8007e02:	4413      	add	r3, r2
 8007e04:	68e1      	ldr	r1, [r4, #12]
 8007e06:	684a      	ldr	r2, [r1, #4]
 8007e08:	8920      	ldrh	r0, [r4, #8]
 8007e0a:	4402      	add	r2, r0
 8007e0c:	1a9b      	subs	r3, r3, r2
    while (next &&
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	db06      	blt.n	8007e20 <tcp_oos_insert_segment+0x60>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e12:	8988      	ldrh	r0, [r1, #12]
 8007e14:	f7fd ff40 	bl	8005c98 <lwip_htons>
 8007e18:	f010 0f01 	tst.w	r0, #1
 8007e1c:	d0e8      	beq.n	8007df0 <tcp_oos_insert_segment+0x30>
 8007e1e:	e7df      	b.n	8007de0 <tcp_oos_insert_segment+0x20>
    if (next &&
 8007e20:	2c00      	cmp	r4, #0
 8007e22:	d0db      	beq.n	8007ddc <tcp_oos_insert_segment+0x1c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007e24:	892b      	ldrh	r3, [r5, #8]
 8007e26:	4a07      	ldr	r2, [pc, #28]	; (8007e44 <tcp_oos_insert_segment+0x84>)
 8007e28:	6911      	ldr	r1, [r2, #16]
 8007e2a:	440b      	add	r3, r1
 8007e2c:	68e2      	ldr	r2, [r4, #12]
 8007e2e:	6852      	ldr	r2, [r2, #4]
 8007e30:	1a9b      	subs	r3, r3, r2
    if (next &&
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	ddd2      	ble.n	8007ddc <tcp_oos_insert_segment+0x1c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007e36:	1a52      	subs	r2, r2, r1
 8007e38:	b291      	uxth	r1, r2
 8007e3a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007e3c:	6868      	ldr	r0, [r5, #4]
 8007e3e:	f7fe fcb5 	bl	80067ac <pbuf_realloc>
 8007e42:	e7cb      	b.n	8007ddc <tcp_oos_insert_segment+0x1c>
 8007e44:	200033c4 	.word	0x200033c4

08007e48 <tcp_receive>:
{
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007e4c:	7d03      	ldrb	r3, [r0, #20]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d979      	bls.n	8007f46 <tcp_receive+0xfe>
  if (flags & TCP_ACK) {
 8007e52:	4bb3      	ldr	r3, [pc, #716]	; (8008120 <tcp_receive+0x2d8>)
 8007e54:	7bdb      	ldrb	r3, [r3, #15]
 8007e56:	f013 0f10 	tst.w	r3, #16
 8007e5a:	f000 8194 	beq.w	8008186 <tcp_receive+0x33e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007e5e:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8007e62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007e64:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007e66:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007e68:	4bad      	ldr	r3, [pc, #692]	; (8008120 <tcp_receive+0x2d8>)
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	1acd      	subs	r5, r1, r3
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	db7c      	blt.n	8007f6c <tcp_receive+0x124>
 8007e72:	4299      	cmp	r1, r3
 8007e74:	d06f      	beq.n	8007f56 <tcp_receive+0x10e>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007e76:	49aa      	ldr	r1, [pc, #680]	; (8008120 <tcp_receive+0x2d8>)
 8007e78:	6989      	ldr	r1, [r1, #24]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007e7a:	428a      	cmp	r2, r1
 8007e7c:	d071      	beq.n	8007f62 <tcp_receive+0x11a>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007e7e:	4ba8      	ldr	r3, [pc, #672]	; (8008120 <tcp_receive+0x2d8>)
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e84:	1a5a      	subs	r2, r3, r1
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	f340 8095 	ble.w	8007fb6 <tcp_receive+0x16e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007e8c:	2a01      	cmp	r2, #1
 8007e8e:	d404      	bmi.n	8007e9a <tcp_receive+0x52>
 8007e90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007e92:	1a9a      	subs	r2, r3, r2
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	f340 80be 	ble.w	8008016 <tcp_receive+0x1ce>
      tcp_send_empty_ack(pcb);
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f001 fea8 	bl	8009bf0 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8007ea0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8160 	beq.w	8008168 <tcp_receive+0x320>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007ea8:	4a9d      	ldr	r2, [pc, #628]	; (8008120 <tcp_receive+0x2d8>)
 8007eaa:	6996      	ldr	r6, [r2, #24]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	6858      	ldr	r0, [r3, #4]
 8007eb0:	f7fd fef5 	bl	8005c9e <lwip_htonl>
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007eb8:	891f      	ldrh	r7, [r3, #8]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	8998      	ldrh	r0, [r3, #12]
 8007ebe:	f7fd feeb 	bl	8005c98 <lwip_htons>
 8007ec2:	f010 0f03 	tst.w	r0, #3
 8007ec6:	f000 814d 	beq.w	8008164 <tcp_receive+0x31c>
 8007eca:	2001      	movs	r0, #1
 8007ecc:	4407      	add	r7, r0
 8007ece:	443d      	add	r5, r7
 8007ed0:	1b75      	subs	r5, r6, r5
    while (pcb->unsent != NULL &&
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	f2c0 8148 	blt.w	8008168 <tcp_receive+0x320>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007ed8:	4b91      	ldr	r3, [pc, #580]	; (8008120 <tcp_receive+0x2d8>)
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ede:	1a9b      	subs	r3, r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f300 8141 	bgt.w	8008168 <tcp_receive+0x320>
      next = pcb->unsent;
 8007ee6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 812e 	beq.w	800814e <tcp_receive+0x306>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007ef2:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8007ef6:	6868      	ldr	r0, [r5, #4]
 8007ef8:	f7fe fcd0 	bl	800689c <pbuf_clen>
 8007efc:	4286      	cmp	r6, r0
 8007efe:	f0c0 8129 	bcc.w	8008154 <tcp_receive+0x30c>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007f02:	6868      	ldr	r0, [r5, #4]
 8007f04:	f7fe fcca 	bl	800689c <pbuf_clen>
 8007f08:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007f0c:	1a1b      	subs	r3, r3, r0
 8007f0e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8007f12:	892b      	ldrh	r3, [r5, #8]
 8007f14:	4a82      	ldr	r2, [pc, #520]	; (8008120 <tcp_receive+0x2d8>)
 8007f16:	8b91      	ldrh	r1, [r2, #28]
 8007f18:	440b      	add	r3, r1
 8007f1a:	8393      	strh	r3, [r2, #28]
      tcp_seg_free(next);
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f7fe ff77 	bl	8006e10 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8007f22:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ba      	beq.n	8007ea0 <tcp_receive+0x58>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007f2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1b7      	bne.n	8007ea0 <tcp_receive+0x58>
 8007f30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1b4      	bne.n	8007ea0 <tcp_receive+0x58>
 8007f36:	4b7b      	ldr	r3, [pc, #492]	; (8008124 <tcp_receive+0x2dc>)
 8007f38:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8007f3c:	497a      	ldr	r1, [pc, #488]	; (8008128 <tcp_receive+0x2e0>)
 8007f3e:	487b      	ldr	r0, [pc, #492]	; (800812c <tcp_receive+0x2e4>)
 8007f40:	f00a ffe2 	bl	8012f08 <printf>
 8007f44:	e7ac      	b.n	8007ea0 <tcp_receive+0x58>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f46:	4b77      	ldr	r3, [pc, #476]	; (8008124 <tcp_receive+0x2dc>)
 8007f48:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007f4c:	4978      	ldr	r1, [pc, #480]	; (8008130 <tcp_receive+0x2e8>)
 8007f4e:	4877      	ldr	r0, [pc, #476]	; (800812c <tcp_receive+0x2e4>)
 8007f50:	f00a ffda 	bl	8012f08 <printf>
 8007f54:	e77d      	b.n	8007e52 <tcp_receive+0xa>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f56:	4972      	ldr	r1, [pc, #456]	; (8008120 <tcp_receive+0x2d8>)
 8007f58:	6989      	ldr	r1, [r1, #24]
 8007f5a:	1a51      	subs	r1, r2, r1
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	da8a      	bge.n	8007e76 <tcp_receive+0x2e>
 8007f60:	e004      	b.n	8007f6c <tcp_receive+0x124>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f62:	4a6f      	ldr	r2, [pc, #444]	; (8008120 <tcp_receive+0x2d8>)
 8007f64:	6892      	ldr	r2, [r2, #8]
 8007f66:	89d2      	ldrh	r2, [r2, #14]
 8007f68:	4290      	cmp	r0, r2
 8007f6a:	d288      	bcs.n	8007e7e <tcp_receive+0x36>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007f6c:	4a6c      	ldr	r2, [pc, #432]	; (8008120 <tcp_receive+0x2d8>)
 8007f6e:	6892      	ldr	r2, [r2, #8]
 8007f70:	89d2      	ldrh	r2, [r2, #14]
 8007f72:	b291      	uxth	r1, r2
 8007f74:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007f78:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8007f7c:	4281      	cmp	r1, r0
 8007f7e:	d901      	bls.n	8007f84 <tcp_receive+0x13c>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007f80:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8007f84:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007f86:	4b66      	ldr	r3, [pc, #408]	; (8008120 <tcp_receive+0x2d8>)
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007f8c:	b951      	cbnz	r1, 8007fa4 <tcp_receive+0x15c>
        if (pcb->persist_backoff == 0) {
 8007f8e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f47f af73 	bne.w	8007e7e <tcp_receive+0x36>
          pcb->persist_cnt = 0;
 8007f98:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8007fa2:	e76c      	b.n	8007e7e <tcp_receive+0x36>
      } else if (pcb->persist_backoff > 0) {
 8007fa4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f43f af68 	beq.w	8007e7e <tcp_receive+0x36>
          pcb->persist_backoff = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8007fb4:	e763      	b.n	8007e7e <tcp_receive+0x36>
      if (tcplen == 0) {
 8007fb6:	4a5a      	ldr	r2, [pc, #360]	; (8008120 <tcp_receive+0x2d8>)
 8007fb8:	8a92      	ldrh	r2, [r2, #20]
 8007fba:	b92a      	cbnz	r2, 8007fc8 <tcp_receive+0x180>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007fbc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007fbe:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8007fc2:	4402      	add	r2, r0
 8007fc4:	42b2      	cmp	r2, r6
 8007fc6:	d003      	beq.n	8007fd0 <tcp_receive+0x188>
        pcb->dupacks = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fce:	e767      	b.n	8007ea0 <tcp_receive+0x58>
          if (pcb->rtime >= 0) {
 8007fd0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	dbf7      	blt.n	8007fc8 <tcp_receive+0x180>
            if (pcb->lastack == ackno) {
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	d1f5      	bne.n	8007fc8 <tcp_receive+0x180>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007fdc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fe0:	2bff      	cmp	r3, #255	; 0xff
 8007fe2:	d002      	beq.n	8007fea <tcp_receive+0x1a2>
                ++pcb->dupacks;
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8007fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d90a      	bls.n	8008008 <tcp_receive+0x1c0>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007ff2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007ff6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007ff8:	4413      	add	r3, r2
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	f4bf af4f 	bcs.w	8007ea0 <tcp_receive+0x58>
                  pcb->cwnd += pcb->mss;
 8008002:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (!found_dupack) {
 8008006:	e74b      	b.n	8007ea0 <tcp_receive+0x58>
              } else if (pcb->dupacks == 3) {
 8008008:	2b03      	cmp	r3, #3
 800800a:	f47f af49 	bne.w	8007ea0 <tcp_receive+0x58>
                tcp_rexmit_fast(pcb);
 800800e:	4620      	mov	r0, r4
 8008010:	f002 f809 	bl	800a026 <tcp_rexmit_fast>
      if (!found_dupack) {
 8008014:	e744      	b.n	8007ea0 <tcp_receive+0x58>
      if (pcb->flags & TF_INFR) {
 8008016:	7ea2      	ldrb	r2, [r4, #26]
 8008018:	f012 0f04 	tst.w	r2, #4
 800801c:	d006      	beq.n	800802c <tcp_receive+0x1e4>
        pcb->flags &= ~TF_INFR;
 800801e:	f022 0204 	bic.w	r2, r2, #4
 8008022:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008024:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008028:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 800802c:	2100      	movs	r1, #0
 800802e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008032:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8008036:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008038:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 800803c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8008040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8008044:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8008046:	7d23      	ldrb	r3, [r4, #20]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d90c      	bls.n	8008066 <tcp_receive+0x21e>
        if (pcb->cwnd < pcb->ssthresh) {
 800804c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008050:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008054:	429a      	cmp	r2, r3
 8008056:	d24b      	bcs.n	80080f0 <tcp_receive+0x2a8>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008058:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800805a:	4413      	add	r3, r2
 800805c:	b29b      	uxth	r3, r3
 800805e:	429a      	cmp	r2, r3
 8008060:	d201      	bcs.n	8008066 <tcp_receive+0x21e>
            pcb->cwnd += pcb->mss;
 8008062:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8008066:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d065      	beq.n	8008138 <tcp_receive+0x2f0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	6858      	ldr	r0, [r3, #4]
 8008070:	f7fd fe15 	bl	8005c9e <lwip_htonl>
 8008074:	4605      	mov	r5, r0
 8008076:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008078:	891e      	ldrh	r6, [r3, #8]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	8998      	ldrh	r0, [r3, #12]
 800807e:	f7fd fe0b 	bl	8005c98 <lwip_htons>
 8008082:	f010 0f03 	tst.w	r0, #3
 8008086:	d048      	beq.n	800811a <tcp_receive+0x2d2>
 8008088:	2301      	movs	r3, #1
 800808a:	441e      	add	r6, r3
 800808c:	4435      	add	r5, r6
 800808e:	4b24      	ldr	r3, [pc, #144]	; (8008120 <tcp_receive+0x2d8>)
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8008094:	2d00      	cmp	r5, #0
 8008096:	dc4f      	bgt.n	8008138 <tcp_receive+0x2f0>
        next = pcb->unacked;
 8008098:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800809e:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 80080a2:	6868      	ldr	r0, [r5, #4]
 80080a4:	f7fe fbfa 	bl	800689c <pbuf_clen>
 80080a8:	4286      	cmp	r6, r0
 80080aa:	d32e      	bcc.n	800810a <tcp_receive+0x2c2>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80080ac:	6868      	ldr	r0, [r5, #4]
 80080ae:	f7fe fbf5 	bl	800689c <pbuf_clen>
 80080b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80080b6:	1a1b      	subs	r3, r3, r0
 80080b8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80080bc:	892b      	ldrh	r3, [r5, #8]
 80080be:	4a18      	ldr	r2, [pc, #96]	; (8008120 <tcp_receive+0x2d8>)
 80080c0:	8b91      	ldrh	r1, [r2, #28]
 80080c2:	440b      	add	r3, r1
 80080c4:	8393      	strh	r3, [r2, #28]
        tcp_seg_free(next);
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7fe fea2 	bl	8006e10 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80080cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0c8      	beq.n	8008066 <tcp_receive+0x21e>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80080d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1c5      	bne.n	8008066 <tcp_receive+0x21e>
 80080da:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1c2      	bne.n	8008066 <tcp_receive+0x21e>
 80080e0:	4b10      	ldr	r3, [pc, #64]	; (8008124 <tcp_receive+0x2dc>)
 80080e2:	f240 42a6 	movw	r2, #1190	; 0x4a6
 80080e6:	4910      	ldr	r1, [pc, #64]	; (8008128 <tcp_receive+0x2e0>)
 80080e8:	4810      	ldr	r0, [pc, #64]	; (800812c <tcp_receive+0x2e4>)
 80080ea:	f00a ff0d 	bl	8012f08 <printf>
 80080ee:	e7ba      	b.n	8008066 <tcp_receive+0x21e>
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80080f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80080f2:	fb03 f303 	mul.w	r3, r3, r3
 80080f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080fa:	fa12 f383 	uxtah	r3, r2, r3
 80080fe:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8008100:	429a      	cmp	r2, r3
 8008102:	d2b0      	bcs.n	8008066 <tcp_receive+0x21e>
            pcb->cwnd = new_cwnd;
 8008104:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8008108:	e7ad      	b.n	8008066 <tcp_receive+0x21e>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <tcp_receive+0x2dc>)
 800810c:	f240 429e 	movw	r2, #1182	; 0x49e
 8008110:	4908      	ldr	r1, [pc, #32]	; (8008134 <tcp_receive+0x2ec>)
 8008112:	4806      	ldr	r0, [pc, #24]	; (800812c <tcp_receive+0x2e4>)
 8008114:	f00a fef8 	bl	8012f08 <printf>
 8008118:	e7c8      	b.n	80080ac <tcp_receive+0x264>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800811a:	2300      	movs	r3, #0
 800811c:	e7b5      	b.n	800808a <tcp_receive+0x242>
 800811e:	bf00      	nop
 8008120:	200033c4 	.word	0x200033c4
 8008124:	0801af1c 	.word	0x0801af1c
 8008128:	0801af94 	.word	0x0801af94
 800812c:	0801a38c 	.word	0x0801a38c
 8008130:	0801af50 	.word	0x0801af50
 8008134:	0801af6c 	.word	0x0801af6c
      if (pcb->unacked == NULL) {
 8008138:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800813a:	b123      	cbz	r3, 8008146 <tcp_receive+0x2fe>
        pcb->rtime = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	76e3      	strb	r3, [r4, #27]
 8008144:	e6ac      	b.n	8007ea0 <tcp_receive+0x58>
        pcb->rtime = -1;
 8008146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800814a:	8623      	strh	r3, [r4, #48]	; 0x30
 800814c:	e7f8      	b.n	8008140 <tcp_receive+0x2f8>
        pcb->unsent_oversize = 0;
 800814e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8008152:	e6ce      	b.n	8007ef2 <tcp_receive+0xaa>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008154:	4b9c      	ldr	r3, [pc, #624]	; (80083c8 <tcp_receive+0x580>)
 8008156:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800815a:	499c      	ldr	r1, [pc, #624]	; (80083cc <tcp_receive+0x584>)
 800815c:	489c      	ldr	r0, [pc, #624]	; (80083d0 <tcp_receive+0x588>)
 800815e:	f00a fed3 	bl	8012f08 <printf>
 8008162:	e6ce      	b.n	8007f02 <tcp_receive+0xba>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008164:	2000      	movs	r0, #0
 8008166:	e6b1      	b.n	8007ecc <tcp_receive+0x84>
    pcb->snd_buf += recv_acked;
 8008168:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800816c:	4a99      	ldr	r2, [pc, #612]	; (80083d4 <tcp_receive+0x58c>)
 800816e:	8b92      	ldrh	r2, [r2, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008178:	b12b      	cbz	r3, 8008186 <tcp_receive+0x33e>
 800817a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800817c:	4995      	ldr	r1, [pc, #596]	; (80083d4 <tcp_receive+0x58c>)
 800817e:	6989      	ldr	r1, [r1, #24]
 8008180:	1a52      	subs	r2, r2, r1
 8008182:	2a00      	cmp	r2, #0
 8008184:	db28      	blt.n	80081d8 <tcp_receive+0x390>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008186:	4b93      	ldr	r3, [pc, #588]	; (80083d4 <tcp_receive+0x58c>)
 8008188:	8a9b      	ldrh	r3, [r3, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8325 	beq.w	80087da <tcp_receive+0x992>
 8008190:	7d22      	ldrb	r2, [r4, #20]
 8008192:	2a06      	cmp	r2, #6
 8008194:	f200 8321 	bhi.w	80087da <tcp_receive+0x992>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008198:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800819a:	4a8e      	ldr	r2, [pc, #568]	; (80083d4 <tcp_receive+0x58c>)
 800819c:	6912      	ldr	r2, [r2, #16]
 800819e:	1a8e      	subs	r6, r1, r2
 80081a0:	2e01      	cmp	r6, #1
 80081a2:	d404      	bmi.n	80081ae <tcp_receive+0x366>
 80081a4:	4413      	add	r3, r2
 80081a6:	1acb      	subs	r3, r1, r3
 80081a8:	3301      	adds	r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd38      	ble.n	8008220 <tcp_receive+0x3d8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80081ae:	1a52      	subs	r2, r2, r1
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	f2c0 8094 	blt.w	80082de <tcp_receive+0x496>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80081b6:	4b87      	ldr	r3, [pc, #540]	; (80083d4 <tcp_receive+0x58c>)
 80081b8:	6919      	ldr	r1, [r3, #16]
 80081ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80081bc:	1a8b      	subs	r3, r1, r2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	db06      	blt.n	80081d0 <tcp_receive+0x388>
 80081c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80081c4:	4413      	add	r3, r2
 80081c6:	1acb      	subs	r3, r1, r3
 80081c8:	3301      	adds	r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f340 808c 	ble.w	80082e8 <tcp_receive+0x4a0>
      tcp_send_empty_ack(pcb);
 80081d0:	4620      	mov	r0, r4
 80081d2:	f001 fd0d 	bl	8009bf0 <tcp_send_empty_ack>
 80081d6:	e310      	b.n	80087fa <tcp_receive+0x9b2>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80081d8:	4a7f      	ldr	r2, [pc, #508]	; (80083d8 <tcp_receive+0x590>)
 80081da:	8816      	ldrh	r6, [r2, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	1af1      	subs	r1, r6, r3
 80081e0:	b289      	uxth	r1, r1
      m = m - (pcb->sa >> 3);
 80081e2:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 80081e6:	f3c5 00cf 	ubfx	r0, r5, #3, #16
 80081ea:	1a09      	subs	r1, r1, r0
 80081ec:	b20a      	sxth	r2, r1
      pcb->sa += m;
 80081ee:	fa15 f181 	uxtah	r1, r5, r1
 80081f2:	b209      	sxth	r1, r1
 80081f4:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	db0e      	blt.n	8008218 <tcp_receive+0x3d0>
      m = m - (pcb->sv >> 2);
 80081fa:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
 80081fe:	eba2 03a0 	sub.w	r3, r2, r0, asr #2
      pcb->sv += m;
 8008202:	fa10 f383 	uxtah	r3, r0, r3
 8008206:	b29b      	uxth	r3, r3
 8008208:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800820a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800820e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	; 0x34
 8008216:	e7b6      	b.n	8008186 <tcp_receive+0x33e>
        m = -m;
 8008218:	1b9b      	subs	r3, r3, r6
 800821a:	4403      	add	r3, r0
 800821c:	b21a      	sxth	r2, r3
 800821e:	e7ec      	b.n	80081fa <tcp_receive+0x3b2>
      struct pbuf *p = inseg.p;
 8008220:	4b6c      	ldr	r3, [pc, #432]	; (80083d4 <tcp_receive+0x58c>)
 8008222:	6a5d      	ldr	r5, [r3, #36]	; 0x24
      off = pcb->rcv_nxt - seqno;
 8008224:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008226:	b195      	cbz	r5, 800824e <tcp_receive+0x406>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008228:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800822c:	429e      	cmp	r6, r3
 800822e:	dc16      	bgt.n	800825e <tcp_receive+0x416>
      if (inseg.p->len < off) {
 8008230:	4b68      	ldr	r3, [pc, #416]	; (80083d4 <tcp_receive+0x58c>)
 8008232:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008234:	8943      	ldrh	r3, [r0, #10]
 8008236:	42b3      	cmp	r3, r6
 8008238:	da43      	bge.n	80082c2 <tcp_receive+0x47a>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800823a:	8903      	ldrh	r3, [r0, #8]
 800823c:	42b3      	cmp	r3, r6
 800823e:	db16      	blt.n	800826e <tcp_receive+0x426>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008240:	4b64      	ldr	r3, [pc, #400]	; (80083d4 <tcp_receive+0x58c>)
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	891a      	ldrh	r2, [r3, #8]
 8008246:	b2b6      	uxth	r6, r6
 8008248:	1b92      	subs	r2, r2, r6
 800824a:	b292      	uxth	r2, r2
        while (p->len < off) {
 800824c:	e01c      	b.n	8008288 <tcp_receive+0x440>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800824e:	4b5e      	ldr	r3, [pc, #376]	; (80083c8 <tcp_receive+0x580>)
 8008250:	f240 523c 	movw	r2, #1340	; 0x53c
 8008254:	4961      	ldr	r1, [pc, #388]	; (80083dc <tcp_receive+0x594>)
 8008256:	485e      	ldr	r0, [pc, #376]	; (80083d0 <tcp_receive+0x588>)
 8008258:	f00a fe56 	bl	8012f08 <printf>
 800825c:	e7e4      	b.n	8008228 <tcp_receive+0x3e0>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800825e:	4b5a      	ldr	r3, [pc, #360]	; (80083c8 <tcp_receive+0x580>)
 8008260:	f240 523d 	movw	r2, #1341	; 0x53d
 8008264:	495e      	ldr	r1, [pc, #376]	; (80083e0 <tcp_receive+0x598>)
 8008266:	485a      	ldr	r0, [pc, #360]	; (80083d0 <tcp_receive+0x588>)
 8008268:	f00a fe4e 	bl	8012f08 <printf>
 800826c:	e7e0      	b.n	8008230 <tcp_receive+0x3e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800826e:	4b56      	ldr	r3, [pc, #344]	; (80083c8 <tcp_receive+0x580>)
 8008270:	f240 523f 	movw	r2, #1343	; 0x53f
 8008274:	495b      	ldr	r1, [pc, #364]	; (80083e4 <tcp_receive+0x59c>)
 8008276:	4856      	ldr	r0, [pc, #344]	; (80083d0 <tcp_receive+0x588>)
 8008278:	f00a fe46 	bl	8012f08 <printf>
 800827c:	e7e0      	b.n	8008240 <tcp_receive+0x3f8>
          off -= p->len;
 800827e:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 8008280:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	816b      	strh	r3, [r5, #10]
          p = p->next;
 8008286:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 8008288:	896b      	ldrh	r3, [r5, #10]
 800828a:	42bb      	cmp	r3, r7
 800828c:	dbf7      	blt.n	800827e <tcp_receive+0x436>
        if (pbuf_header(p, (s16_t)-off)) {
 800828e:	4279      	negs	r1, r7
 8008290:	b209      	sxth	r1, r1
 8008292:	4628      	mov	r0, r5
 8008294:	f7fe f92c 	bl	80064f0 <pbuf_header>
 8008298:	b958      	cbnz	r0, 80082b2 <tcp_receive+0x46a>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800829a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800829c:	4b4d      	ldr	r3, [pc, #308]	; (80083d4 <tcp_receive+0x58c>)
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	1a52      	subs	r2, r2, r1
 80082a2:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80082a4:	fa10 f282 	uxtah	r2, r0, r2
 80082a8:	851a      	strh	r2, [r3, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80082aa:	6119      	str	r1, [r3, #16]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	6059      	str	r1, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80082b0:	e781      	b.n	80081b6 <tcp_receive+0x36e>
          LWIP_ASSERT("pbuf_header failed", 0);
 80082b2:	4b45      	ldr	r3, [pc, #276]	; (80083c8 <tcp_receive+0x580>)
 80082b4:	f240 524c 	movw	r2, #1356	; 0x54c
 80082b8:	494b      	ldr	r1, [pc, #300]	; (80083e8 <tcp_receive+0x5a0>)
 80082ba:	4845      	ldr	r0, [pc, #276]	; (80083d0 <tcp_receive+0x588>)
 80082bc:	f00a fe24 	bl	8012f08 <printf>
 80082c0:	e7eb      	b.n	800829a <tcp_receive+0x452>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80082c2:	4271      	negs	r1, r6
 80082c4:	b209      	sxth	r1, r1
 80082c6:	f7fe f913 	bl	80064f0 <pbuf_header>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d0e5      	beq.n	800829a <tcp_receive+0x452>
          LWIP_ASSERT("pbuf_header failed", 0);
 80082ce:	4b3e      	ldr	r3, [pc, #248]	; (80083c8 <tcp_receive+0x580>)
 80082d0:	f240 5251 	movw	r2, #1361	; 0x551
 80082d4:	4944      	ldr	r1, [pc, #272]	; (80083e8 <tcp_receive+0x5a0>)
 80082d6:	483e      	ldr	r0, [pc, #248]	; (80083d0 <tcp_receive+0x588>)
 80082d8:	f00a fe16 	bl	8012f08 <printf>
 80082dc:	e7dd      	b.n	800829a <tcp_receive+0x452>
        tcp_ack_now(pcb);
 80082de:	7ea3      	ldrb	r3, [r4, #26]
 80082e0:	f043 0302 	orr.w	r3, r3, #2
 80082e4:	76a3      	strb	r3, [r4, #26]
 80082e6:	e766      	b.n	80081b6 <tcp_receive+0x36e>
      if (pcb->rcv_nxt == seqno) {
 80082e8:	4291      	cmp	r1, r2
 80082ea:	d008      	beq.n	80082fe <tcp_receive+0x4b6>
        tcp_send_empty_ack(pcb);
 80082ec:	4620      	mov	r0, r4
 80082ee:	f001 fc7f 	bl	8009bf0 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80082f2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	f000 8194 	beq.w	8008622 <tcp_receive+0x7da>
          prev = NULL;
 80082fa:	2600      	movs	r6, #0
 80082fc:	e1c2      	b.n	8008684 <tcp_receive+0x83c>
        tcplen = TCP_TCPLEN(&inseg);
 80082fe:	4b35      	ldr	r3, [pc, #212]	; (80083d4 <tcp_receive+0x58c>)
 8008300:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	8998      	ldrh	r0, [r3, #12]
 8008306:	f7fd fcc7 	bl	8005c98 <lwip_htons>
 800830a:	f010 0303 	ands.w	r3, r0, #3
 800830e:	d000      	beq.n	8008312 <tcp_receive+0x4ca>
 8008310:	2301      	movs	r3, #1
 8008312:	442b      	add	r3, r5
 8008314:	b29b      	uxth	r3, r3
 8008316:	4a2f      	ldr	r2, [pc, #188]	; (80083d4 <tcp_receive+0x58c>)
 8008318:	8293      	strh	r3, [r2, #20]
        if (tcplen > pcb->rcv_wnd) {
 800831a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800831c:	4293      	cmp	r3, r2
 800831e:	d80c      	bhi.n	800833a <tcp_receive+0x4f2>
        if (pcb->ooseq != NULL) {
 8008320:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008322:	2b00      	cmp	r3, #0
 8008324:	d06b      	beq.n	80083fe <tcp_receive+0x5b6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <tcp_receive+0x58c>)
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	8998      	ldrh	r0, [r3, #12]
 800832c:	f7fd fcb4 	bl	8005c98 <lwip_htons>
 8008330:	f010 0f01 	tst.w	r0, #1
 8008334:	d160      	bne.n	80083f8 <tcp_receive+0x5b0>
            next = pcb->ooseq;
 8008336:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 8008338:	e08f      	b.n	800845a <tcp_receive+0x612>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800833a:	4b26      	ldr	r3, [pc, #152]	; (80083d4 <tcp_receive+0x58c>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	8998      	ldrh	r0, [r3, #12]
 8008340:	f7fd fcaa 	bl	8005c98 <lwip_htons>
 8008344:	f010 0f01 	tst.w	r0, #1
 8008348:	d12e      	bne.n	80083a8 <tcp_receive+0x560>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800834a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800834c:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <tcp_receive+0x58c>)
 800834e:	851a      	strh	r2, [r3, #40]	; 0x28
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	8998      	ldrh	r0, [r3, #12]
 8008354:	f7fd fca0 	bl	8005c98 <lwip_htons>
 8008358:	f010 0f02 	tst.w	r0, #2
 800835c:	d003      	beq.n	8008366 <tcp_receive+0x51e>
            inseg.len -= 1;
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <tcp_receive+0x58c>)
 8008360:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 8008362:	3b01      	subs	r3, #1
 8008364:	8513      	strh	r3, [r2, #40]	; 0x28
          pbuf_realloc(inseg.p, inseg.len);
 8008366:	4e1b      	ldr	r6, [pc, #108]	; (80083d4 <tcp_receive+0x58c>)
 8008368:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800836a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800836c:	f7fe fa1e 	bl	80067ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008370:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 8008372:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008374:	8998      	ldrh	r0, [r3, #12]
 8008376:	f7fd fc8f 	bl	8005c98 <lwip_htons>
 800837a:	f010 0303 	ands.w	r3, r0, #3
 800837e:	d000      	beq.n	8008382 <tcp_receive+0x53a>
 8008380:	2301      	movs	r3, #1
 8008382:	442b      	add	r3, r5
 8008384:	b29b      	uxth	r3, r3
 8008386:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <tcp_receive+0x58c>)
 8008388:	8293      	strh	r3, [r2, #20]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800838a:	6912      	ldr	r2, [r2, #16]
 800838c:	4413      	add	r3, r2
 800838e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008390:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008392:	440a      	add	r2, r1
 8008394:	4293      	cmp	r3, r2
 8008396:	d0c3      	beq.n	8008320 <tcp_receive+0x4d8>
 8008398:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <tcp_receive+0x580>)
 800839a:	f240 527e 	movw	r2, #1406	; 0x57e
 800839e:	4913      	ldr	r1, [pc, #76]	; (80083ec <tcp_receive+0x5a4>)
 80083a0:	480b      	ldr	r0, [pc, #44]	; (80083d0 <tcp_receive+0x588>)
 80083a2:	f00a fdb1 	bl	8012f08 <printf>
 80083a6:	e7bb      	b.n	8008320 <tcp_receive+0x4d8>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80083a8:	4e0a      	ldr	r6, [pc, #40]	; (80083d4 <tcp_receive+0x58c>)
 80083aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80083ac:	8998      	ldrh	r0, [r3, #12]
 80083ae:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 80083b2:	b2ad      	uxth	r5, r5
 80083b4:	f7fd fc70 	bl	8005c98 <lwip_htons>
 80083b8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80083bc:	f7fd fc6c 	bl	8005c98 <lwip_htons>
 80083c0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80083c2:	4305      	orrs	r5, r0
 80083c4:	819d      	strh	r5, [r3, #12]
 80083c6:	e7c0      	b.n	800834a <tcp_receive+0x502>
 80083c8:	0801af1c 	.word	0x0801af1c
 80083cc:	0801af6c 	.word	0x0801af6c
 80083d0:	0801a38c 	.word	0x0801a38c
 80083d4:	200033c4 	.word	0x200033c4
 80083d8:	20007a04 	.word	0x20007a04
 80083dc:	0801afb4 	.word	0x0801afb4
 80083e0:	0801afc4 	.word	0x0801afc4
 80083e4:	0801afd4 	.word	0x0801afd4
 80083e8:	0801afe4 	.word	0x0801afe4
 80083ec:	0801aff8 	.word	0x0801aff8
              pcb->ooseq = pcb->ooseq->next;
 80083f0:	6803      	ldr	r3, [r0, #0]
 80083f2:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80083f4:	f7fe fd0c 	bl	8006e10 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80083f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d1f8      	bne.n	80083f0 <tcp_receive+0x5a8>
        pcb->rcv_nxt = seqno + tcplen;
 80083fe:	4b96      	ldr	r3, [pc, #600]	; (8008658 <tcp_receive+0x810>)
 8008400:	8a9a      	ldrh	r2, [r3, #20]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	4413      	add	r3, r2
 8008406:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008408:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800840a:	429a      	cmp	r2, r3
 800840c:	f200 808c 	bhi.w	8008528 <tcp_receive+0x6e0>
        pcb->rcv_wnd -= tcplen;
 8008410:	4d91      	ldr	r5, [pc, #580]	; (8008658 <tcp_receive+0x810>)
 8008412:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008414:	8aaa      	ldrh	r2, [r5, #20]
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800841a:	4620      	mov	r0, r4
 800841c:	f7fe fc88 	bl	8006d30 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8008420:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008422:	891a      	ldrh	r2, [r3, #8]
 8008424:	b112      	cbz	r2, 800842c <tcp_receive+0x5e4>
          recv_data = inseg.p;
 8008426:	632b      	str	r3, [r5, #48]	; 0x30
          inseg.p = NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	626b      	str	r3, [r5, #36]	; 0x24
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800842c:	4b8a      	ldr	r3, [pc, #552]	; (8008658 <tcp_receive+0x810>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	8998      	ldrh	r0, [r3, #12]
 8008432:	f7fd fc31 	bl	8005c98 <lwip_htons>
 8008436:	f010 0f01 	tst.w	r0, #1
 800843a:	f000 80a3 	beq.w	8008584 <tcp_receive+0x73c>
          recv_flags |= TF_GOT_FIN;
 800843e:	4a86      	ldr	r2, [pc, #536]	; (8008658 <tcp_receive+0x810>)
 8008440:	7b93      	ldrb	r3, [r2, #14]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	7393      	strb	r3, [r2, #14]
 8008448:	e09c      	b.n	8008584 <tcp_receive+0x73c>
                tcplen = TCP_TCPLEN(&inseg);
 800844a:	443b      	add	r3, r7
 800844c:	4a82      	ldr	r2, [pc, #520]	; (8008658 <tcp_receive+0x810>)
 800844e:	8293      	strh	r3, [r2, #20]
              next = next->next;
 8008450:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 8008452:	4628      	mov	r0, r5
 8008454:	f7fe fcdc 	bl	8006e10 <tcp_seg_free>
              next = next->next;
 8008458:	4635      	mov	r5, r6
            while (next &&
 800845a:	b35d      	cbz	r5, 80084b4 <tcp_receive+0x66c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800845c:	4a7e      	ldr	r2, [pc, #504]	; (8008658 <tcp_receive+0x810>)
 800845e:	8a93      	ldrh	r3, [r2, #20]
 8008460:	6912      	ldr	r2, [r2, #16]
 8008462:	4413      	add	r3, r2
 8008464:	68e9      	ldr	r1, [r5, #12]
 8008466:	684a      	ldr	r2, [r1, #4]
 8008468:	8928      	ldrh	r0, [r5, #8]
 800846a:	4402      	add	r2, r0
 800846c:	1a9b      	subs	r3, r3, r2
            while (next &&
 800846e:	2b00      	cmp	r3, #0
 8008470:	db20      	blt.n	80084b4 <tcp_receive+0x66c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008472:	8988      	ldrh	r0, [r1, #12]
 8008474:	f7fd fc10 	bl	8005c98 <lwip_htons>
 8008478:	f010 0f01 	tst.w	r0, #1
 800847c:	d0e8      	beq.n	8008450 <tcp_receive+0x608>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800847e:	4b76      	ldr	r3, [pc, #472]	; (8008658 <tcp_receive+0x810>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	8998      	ldrh	r0, [r3, #12]
 8008484:	f7fd fc08 	bl	8005c98 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008488:	f010 0f02 	tst.w	r0, #2
 800848c:	d1e0      	bne.n	8008450 <tcp_receive+0x608>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800848e:	4e72      	ldr	r6, [pc, #456]	; (8008658 <tcp_receive+0x810>)
 8008490:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008492:	899f      	ldrh	r7, [r3, #12]
 8008494:	2001      	movs	r0, #1
 8008496:	f7fd fbff 	bl	8005c98 <lwip_htons>
 800849a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800849c:	4307      	orrs	r7, r0
 800849e:	819f      	strh	r7, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80084a0:	8d37      	ldrh	r7, [r6, #40]	; 0x28
 80084a2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80084a4:	8998      	ldrh	r0, [r3, #12]
 80084a6:	f7fd fbf7 	bl	8005c98 <lwip_htons>
 80084aa:	f010 0303 	ands.w	r3, r0, #3
 80084ae:	d0cc      	beq.n	800844a <tcp_receive+0x602>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7ca      	b.n	800844a <tcp_receive+0x602>
            if (next &&
 80084b4:	b145      	cbz	r5, 80084c8 <tcp_receive+0x680>
                TCP_SEQ_GT(seqno + tcplen,
 80084b6:	4b68      	ldr	r3, [pc, #416]	; (8008658 <tcp_receive+0x810>)
 80084b8:	6919      	ldr	r1, [r3, #16]
 80084ba:	8a9b      	ldrh	r3, [r3, #20]
 80084bc:	440b      	add	r3, r1
 80084be:	68ea      	ldr	r2, [r5, #12]
 80084c0:	6852      	ldr	r2, [r2, #4]
 80084c2:	1a9b      	subs	r3, r3, r2
            if (next &&
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dc01      	bgt.n	80084cc <tcp_receive+0x684>
            pcb->ooseq = next;
 80084c8:	6725      	str	r5, [r4, #112]	; 0x70
 80084ca:	e798      	b.n	80083fe <tcp_receive+0x5b6>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80084cc:	1a52      	subs	r2, r2, r1
 80084ce:	4b62      	ldr	r3, [pc, #392]	; (8008658 <tcp_receive+0x810>)
 80084d0:	851a      	strh	r2, [r3, #40]	; 0x28
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	8998      	ldrh	r0, [r3, #12]
 80084d6:	f7fd fbdf 	bl	8005c98 <lwip_htons>
 80084da:	f010 0f02 	tst.w	r0, #2
 80084de:	d003      	beq.n	80084e8 <tcp_receive+0x6a0>
                inseg.len -= 1;
 80084e0:	4a5d      	ldr	r2, [pc, #372]	; (8008658 <tcp_receive+0x810>)
 80084e2:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 80084e4:	3b01      	subs	r3, #1
 80084e6:	8513      	strh	r3, [r2, #40]	; 0x28
              pbuf_realloc(inseg.p, inseg.len);
 80084e8:	4f5b      	ldr	r7, [pc, #364]	; (8008658 <tcp_receive+0x810>)
 80084ea:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80084ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ee:	f7fe f95d 	bl	80067ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80084f2:	8d3e      	ldrh	r6, [r7, #40]	; 0x28
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	8998      	ldrh	r0, [r3, #12]
 80084f8:	f7fd fbce 	bl	8005c98 <lwip_htons>
 80084fc:	f010 0303 	ands.w	r3, r0, #3
 8008500:	d000      	beq.n	8008504 <tcp_receive+0x6bc>
 8008502:	2301      	movs	r3, #1
 8008504:	4433      	add	r3, r6
 8008506:	b29b      	uxth	r3, r3
 8008508:	4a53      	ldr	r2, [pc, #332]	; (8008658 <tcp_receive+0x810>)
 800850a:	8293      	strh	r3, [r2, #20]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800850c:	6912      	ldr	r2, [r2, #16]
 800850e:	4413      	add	r3, r2
 8008510:	68ea      	ldr	r2, [r5, #12]
 8008512:	6852      	ldr	r2, [r2, #4]
 8008514:	4293      	cmp	r3, r2
 8008516:	d0d7      	beq.n	80084c8 <tcp_receive+0x680>
 8008518:	4b50      	ldr	r3, [pc, #320]	; (800865c <tcp_receive+0x814>)
 800851a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800851e:	4950      	ldr	r1, [pc, #320]	; (8008660 <tcp_receive+0x818>)
 8008520:	4850      	ldr	r0, [pc, #320]	; (8008664 <tcp_receive+0x81c>)
 8008522:	f00a fcf1 	bl	8012f08 <printf>
 8008526:	e7cf      	b.n	80084c8 <tcp_receive+0x680>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008528:	4b4c      	ldr	r3, [pc, #304]	; (800865c <tcp_receive+0x814>)
 800852a:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800852e:	494e      	ldr	r1, [pc, #312]	; (8008668 <tcp_receive+0x820>)
 8008530:	484c      	ldr	r0, [pc, #304]	; (8008664 <tcp_receive+0x81c>)
 8008532:	f00a fce9 	bl	8012f08 <printf>
 8008536:	e76b      	b.n	8008410 <tcp_receive+0x5c8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008538:	2300      	movs	r3, #0
 800853a:	e035      	b.n	80085a8 <tcp_receive+0x760>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800853c:	2300      	movs	r3, #0
 800853e:	e041      	b.n	80085c4 <tcp_receive+0x77c>
 8008540:	4b46      	ldr	r3, [pc, #280]	; (800865c <tcp_receive+0x814>)
 8008542:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8008546:	4949      	ldr	r1, [pc, #292]	; (800866c <tcp_receive+0x824>)
 8008548:	4846      	ldr	r0, [pc, #280]	; (8008664 <tcp_receive+0x81c>)
 800854a:	f00a fcdd 	bl	8012f08 <printf>
 800854e:	e03c      	b.n	80085ca <tcp_receive+0x782>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008550:	2300      	movs	r3, #0
 8008552:	e043      	b.n	80085dc <tcp_receive+0x794>
              recv_data = cseg->p;
 8008554:	4b40      	ldr	r3, [pc, #256]	; (8008658 <tcp_receive+0x810>)
 8008556:	6319      	str	r1, [r3, #48]	; 0x30
            cseg->p = NULL;
 8008558:	2300      	movs	r3, #0
 800855a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800855c:	68eb      	ldr	r3, [r5, #12]
 800855e:	8998      	ldrh	r0, [r3, #12]
 8008560:	f7fd fb9a 	bl	8005c98 <lwip_htons>
 8008564:	f010 0f01 	tst.w	r0, #1
 8008568:	d007      	beq.n	800857a <tcp_receive+0x732>
            recv_flags |= TF_GOT_FIN;
 800856a:	4a3b      	ldr	r2, [pc, #236]	; (8008658 <tcp_receive+0x810>)
 800856c:	7b93      	ldrb	r3, [r2, #14]
 800856e:	f043 0320 	orr.w	r3, r3, #32
 8008572:	7393      	strb	r3, [r2, #14]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008574:	7d23      	ldrb	r3, [r4, #20]
 8008576:	2b04      	cmp	r3, #4
 8008578:	d042      	beq.n	8008600 <tcp_receive+0x7b8>
          pcb->ooseq = cseg->next;
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800857e:	4628      	mov	r0, r5
 8008580:	f7fe fc46 	bl	8006e10 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008584:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008586:	2d00      	cmp	r5, #0
 8008588:	d03d      	beq.n	8008606 <tcp_receive+0x7be>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800858a:	68ea      	ldr	r2, [r5, #12]
 800858c:	6853      	ldr	r3, [r2, #4]
 800858e:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008590:	428b      	cmp	r3, r1
 8008592:	d138      	bne.n	8008606 <tcp_receive+0x7be>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008594:	4930      	ldr	r1, [pc, #192]	; (8008658 <tcp_receive+0x810>)
 8008596:	610b      	str	r3, [r1, #16]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008598:	892e      	ldrh	r6, [r5, #8]
 800859a:	8990      	ldrh	r0, [r2, #12]
 800859c:	f7fd fb7c 	bl	8005c98 <lwip_htons>
 80085a0:	f010 0f03 	tst.w	r0, #3
 80085a4:	d0c8      	beq.n	8008538 <tcp_receive+0x6f0>
 80085a6:	2301      	movs	r3, #1
 80085a8:	441e      	add	r6, r3
 80085aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ac:	4433      	add	r3, r6
 80085ae:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80085b0:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 80085b2:	892e      	ldrh	r6, [r5, #8]
 80085b4:	68eb      	ldr	r3, [r5, #12]
 80085b6:	8998      	ldrh	r0, [r3, #12]
 80085b8:	f7fd fb6e 	bl	8005c98 <lwip_htons>
 80085bc:	f010 0f03 	tst.w	r0, #3
 80085c0:	d0bc      	beq.n	800853c <tcp_receive+0x6f4>
 80085c2:	2301      	movs	r3, #1
 80085c4:	441e      	add	r6, r3
 80085c6:	42b7      	cmp	r7, r6
 80085c8:	d3ba      	bcc.n	8008540 <tcp_receive+0x6f8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80085ca:	892e      	ldrh	r6, [r5, #8]
 80085cc:	68eb      	ldr	r3, [r5, #12]
 80085ce:	8998      	ldrh	r0, [r3, #12]
 80085d0:	f7fd fb62 	bl	8005c98 <lwip_htons>
 80085d4:	f010 0f03 	tst.w	r0, #3
 80085d8:	d0ba      	beq.n	8008550 <tcp_receive+0x708>
 80085da:	2301      	movs	r3, #1
 80085dc:	441e      	add	r6, r3
 80085de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80085e0:	1b9b      	subs	r3, r3, r6
 80085e2:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7fe fba3 	bl	8006d30 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80085ea:	6869      	ldr	r1, [r5, #4]
 80085ec:	890b      	ldrh	r3, [r1, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0b4      	beq.n	800855c <tcp_receive+0x714>
            if (recv_data) {
 80085f2:	4b19      	ldr	r3, [pc, #100]	; (8008658 <tcp_receive+0x810>)
 80085f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d0ac      	beq.n	8008554 <tcp_receive+0x70c>
              pbuf_cat(recv_data, cseg->p);
 80085fa:	f7fe f96f 	bl	80068dc <pbuf_cat>
 80085fe:	e7ab      	b.n	8008558 <tcp_receive+0x710>
              pcb->state = CLOSE_WAIT;
 8008600:	2307      	movs	r3, #7
 8008602:	7523      	strb	r3, [r4, #20]
 8008604:	e7b9      	b.n	800857a <tcp_receive+0x732>
        tcp_ack(pcb);
 8008606:	7ea3      	ldrb	r3, [r4, #26]
 8008608:	f013 0f01 	tst.w	r3, #1
 800860c:	d005      	beq.n	800861a <tcp_receive+0x7d2>
 800860e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008612:	f043 0302 	orr.w	r3, r3, #2
 8008616:	76a3      	strb	r3, [r4, #26]
 8008618:	e0ef      	b.n	80087fa <tcp_receive+0x9b2>
 800861a:	f043 0301 	orr.w	r3, r3, #1
 800861e:	76a3      	strb	r3, [r4, #26]
 8008620:	e0eb      	b.n	80087fa <tcp_receive+0x9b2>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008622:	4813      	ldr	r0, [pc, #76]	; (8008670 <tcp_receive+0x828>)
 8008624:	f7fe fc0b 	bl	8006e3e <tcp_seg_copy>
 8008628:	6720      	str	r0, [r4, #112]	; 0x70
 800862a:	e0e6      	b.n	80087fa <tcp_receive+0x9b2>
              if (inseg.len > next->len) {
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <tcp_receive+0x810>)
 800862e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008630:	892b      	ldrh	r3, [r5, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	f240 80e1 	bls.w	80087fa <tcp_receive+0x9b2>
                cseg = tcp_seg_copy(&inseg);
 8008638:	480d      	ldr	r0, [pc, #52]	; (8008670 <tcp_receive+0x828>)
 800863a:	f7fe fc00 	bl	8006e3e <tcp_seg_copy>
                if (cseg != NULL) {
 800863e:	4603      	mov	r3, r0
 8008640:	2800      	cmp	r0, #0
 8008642:	f000 80da 	beq.w	80087fa <tcp_receive+0x9b2>
                  if (prev != NULL) {
 8008646:	b12e      	cbz	r6, 8008654 <tcp_receive+0x80c>
                    prev->next = cseg;
 8008648:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800864a:	4629      	mov	r1, r5
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fbb7 	bl	8007dc0 <tcp_oos_insert_segment>
 8008652:	e0d2      	b.n	80087fa <tcp_receive+0x9b2>
                    pcb->ooseq = cseg;
 8008654:	6720      	str	r0, [r4, #112]	; 0x70
 8008656:	e7f8      	b.n	800864a <tcp_receive+0x802>
 8008658:	200033c4 	.word	0x200033c4
 800865c:	0801af1c 	.word	0x0801af1c
 8008660:	0801b030 	.word	0x0801b030
 8008664:	0801a38c 	.word	0x0801a38c
 8008668:	0801b06c 	.word	0x0801b06c
 800866c:	0801b08c 	.word	0x0801b08c
 8008670:	200033e4 	.word	0x200033e4
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008674:	1a99      	subs	r1, r3, r2
 8008676:	2900      	cmp	r1, #0
 8008678:	db2e      	blt.n	80086d8 <tcp_receive+0x890>
              if (next->next == NULL &&
 800867a:	6829      	ldr	r1, [r5, #0]
 800867c:	462e      	mov	r6, r5
 800867e:	2900      	cmp	r1, #0
 8008680:	d03c      	beq.n	80086fc <tcp_receive+0x8b4>
 8008682:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008684:	2d00      	cmp	r5, #0
 8008686:	f000 80b8 	beq.w	80087fa <tcp_receive+0x9b2>
            if (seqno == next->tcphdr->seqno) {
 800868a:	68e8      	ldr	r0, [r5, #12]
 800868c:	6842      	ldr	r2, [r0, #4]
 800868e:	4b5b      	ldr	r3, [pc, #364]	; (80087fc <tcp_receive+0x9b4>)
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	429a      	cmp	r2, r3
 8008694:	d0ca      	beq.n	800862c <tcp_receive+0x7e4>
              if (prev == NULL) {
 8008696:	2e00      	cmp	r6, #0
 8008698:	d0ec      	beq.n	8008674 <tcp_receive+0x82c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800869a:	68f1      	ldr	r1, [r6, #12]
 800869c:	6849      	ldr	r1, [r1, #4]
 800869e:	1a59      	subs	r1, r3, r1
 80086a0:	2901      	cmp	r1, #1
 80086a2:	d4ea      	bmi.n	800867a <tcp_receive+0x832>
 80086a4:	1a99      	subs	r1, r3, r2
 80086a6:	3101      	adds	r1, #1
 80086a8:	2900      	cmp	r1, #0
 80086aa:	dce6      	bgt.n	800867a <tcp_receive+0x832>
                  cseg = tcp_seg_copy(&inseg);
 80086ac:	4854      	ldr	r0, [pc, #336]	; (8008800 <tcp_receive+0x9b8>)
 80086ae:	f7fe fbc6 	bl	8006e3e <tcp_seg_copy>
                  if (cseg != NULL) {
 80086b2:	4604      	mov	r4, r0
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f000 80a0 	beq.w	80087fa <tcp_receive+0x9b2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80086ba:	68f3      	ldr	r3, [r6, #12]
 80086bc:	6859      	ldr	r1, [r3, #4]
 80086be:	8932      	ldrh	r2, [r6, #8]
 80086c0:	440a      	add	r2, r1
 80086c2:	4b4e      	ldr	r3, [pc, #312]	; (80087fc <tcp_receive+0x9b4>)
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	1ad2      	subs	r2, r2, r3
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	dc10      	bgt.n	80086ee <tcp_receive+0x8a6>
                    prev->next = cseg;
 80086cc:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 80086ce:	4629      	mov	r1, r5
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fb75 	bl	8007dc0 <tcp_oos_insert_segment>
 80086d6:	e090      	b.n	80087fa <tcp_receive+0x9b2>
                  cseg = tcp_seg_copy(&inseg);
 80086d8:	4849      	ldr	r0, [pc, #292]	; (8008800 <tcp_receive+0x9b8>)
 80086da:	f7fe fbb0 	bl	8006e3e <tcp_seg_copy>
                  if (cseg != NULL) {
 80086de:	2800      	cmp	r0, #0
 80086e0:	f000 808b 	beq.w	80087fa <tcp_receive+0x9b2>
                    pcb->ooseq = cseg;
 80086e4:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7ff fb6a 	bl	8007dc0 <tcp_oos_insert_segment>
 80086ec:	e085      	b.n	80087fa <tcp_receive+0x9b2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80086ee:	1a5b      	subs	r3, r3, r1
 80086f0:	b299      	uxth	r1, r3
 80086f2:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 80086f4:	6870      	ldr	r0, [r6, #4]
 80086f6:	f7fe f859 	bl	80067ac <pbuf_realloc>
 80086fa:	e7e7      	b.n	80086cc <tcp_receive+0x884>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80086fc:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dc01      	bgt.n	8008706 <tcp_receive+0x8be>
 8008702:	460d      	mov	r5, r1
 8008704:	e7be      	b.n	8008684 <tcp_receive+0x83c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008706:	8980      	ldrh	r0, [r0, #12]
 8008708:	f7fd fac6 	bl	8005c98 <lwip_htons>
 800870c:	f010 0f01 	tst.w	r0, #1
 8008710:	d173      	bne.n	80087fa <tcp_receive+0x9b2>
                next->next = tcp_seg_copy(&inseg);
 8008712:	483b      	ldr	r0, [pc, #236]	; (8008800 <tcp_receive+0x9b8>)
 8008714:	f7fe fb93 	bl	8006e3e <tcp_seg_copy>
 8008718:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800871a:	2800      	cmp	r0, #0
 800871c:	d06d      	beq.n	80087fa <tcp_receive+0x9b2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800871e:	68eb      	ldr	r3, [r5, #12]
 8008720:	6859      	ldr	r1, [r3, #4]
 8008722:	892a      	ldrh	r2, [r5, #8]
 8008724:	440a      	add	r2, r1
 8008726:	4b35      	ldr	r3, [pc, #212]	; (80087fc <tcp_receive+0x9b4>)
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	1ad2      	subs	r2, r2, r3
 800872c:	2a00      	cmp	r2, #0
 800872e:	dc3c      	bgt.n	80087aa <tcp_receive+0x962>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008730:	4a32      	ldr	r2, [pc, #200]	; (80087fc <tcp_receive+0x9b4>)
 8008732:	8a93      	ldrh	r3, [r2, #20]
 8008734:	6912      	ldr	r2, [r2, #16]
 8008736:	4413      	add	r3, r2
 8008738:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800873a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800873c:	440a      	add	r2, r1
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	2b00      	cmp	r3, #0
 8008742:	dd5a      	ble.n	80087fa <tcp_receive+0x9b2>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	8998      	ldrh	r0, [r3, #12]
 800874a:	f7fd faa5 	bl	8005c98 <lwip_htons>
 800874e:	f010 0f01 	tst.w	r0, #1
 8008752:	d131      	bne.n	80087b8 <tcp_receive+0x970>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008758:	4413      	add	r3, r2
 800875a:	b29b      	uxth	r3, r3
 800875c:	682a      	ldr	r2, [r5, #0]
 800875e:	4927      	ldr	r1, [pc, #156]	; (80087fc <tcp_receive+0x9b4>)
 8008760:	6909      	ldr	r1, [r1, #16]
 8008762:	1a5b      	subs	r3, r3, r1
 8008764:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	8919      	ldrh	r1, [r3, #8]
 800876a:	6858      	ldr	r0, [r3, #4]
 800876c:	f7fe f81e 	bl	80067ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	891d      	ldrh	r5, [r3, #8]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	8998      	ldrh	r0, [r3, #12]
 8008778:	f7fd fa8e 	bl	8005c98 <lwip_htons>
 800877c:	f010 0303 	ands.w	r3, r0, #3
 8008780:	d000      	beq.n	8008784 <tcp_receive+0x93c>
 8008782:	2301      	movs	r3, #1
 8008784:	442b      	add	r3, r5
 8008786:	b29b      	uxth	r3, r3
 8008788:	4a1c      	ldr	r2, [pc, #112]	; (80087fc <tcp_receive+0x9b4>)
 800878a:	8293      	strh	r3, [r2, #20]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800878c:	6912      	ldr	r2, [r2, #16]
 800878e:	4413      	add	r3, r2
 8008790:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008792:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008794:	440a      	add	r2, r1
 8008796:	4293      	cmp	r3, r2
 8008798:	d02f      	beq.n	80087fa <tcp_receive+0x9b2>
 800879a:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <tcp_receive+0x9bc>)
 800879c:	f240 627a 	movw	r2, #1658	; 0x67a
 80087a0:	4919      	ldr	r1, [pc, #100]	; (8008808 <tcp_receive+0x9c0>)
 80087a2:	481a      	ldr	r0, [pc, #104]	; (800880c <tcp_receive+0x9c4>)
 80087a4:	f00a fbb0 	bl	8012f08 <printf>
 80087a8:	e027      	b.n	80087fa <tcp_receive+0x9b2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80087aa:	1a5b      	subs	r3, r3, r1
 80087ac:	b299      	uxth	r1, r3
 80087ae:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80087b0:	6868      	ldr	r0, [r5, #4]
 80087b2:	f7fd fffb 	bl	80067ac <pbuf_realloc>
 80087b6:	e7bb      	b.n	8008730 <tcp_receive+0x8e8>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	8998      	ldrh	r0, [r3, #12]
 80087be:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 80087c2:	b2b6      	uxth	r6, r6
 80087c4:	f7fd fa68 	bl	8005c98 <lwip_htons>
 80087c8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80087cc:	f7fd fa64 	bl	8005c98 <lwip_htons>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4306      	orrs	r6, r0
 80087d6:	819e      	strh	r6, [r3, #12]
 80087d8:	e7bc      	b.n	8008754 <tcp_receive+0x90c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80087da:	4b08      	ldr	r3, [pc, #32]	; (80087fc <tcp_receive+0x9b4>)
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087e0:	1a99      	subs	r1, r3, r2
 80087e2:	2900      	cmp	r1, #0
 80087e4:	db05      	blt.n	80087f2 <tcp_receive+0x9aa>
 80087e6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80087e8:	440a      	add	r2, r1
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	3301      	adds	r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd03      	ble.n	80087fa <tcp_receive+0x9b2>
      tcp_ack_now(pcb);
 80087f2:	7ea3      	ldrb	r3, [r4, #26]
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	76a3      	strb	r3, [r4, #26]
}
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	200033c4 	.word	0x200033c4
 8008800:	200033e4 	.word	0x200033e4
 8008804:	0801af1c 	.word	0x0801af1c
 8008808:	0801aff8 	.word	0x0801aff8
 800880c:	0801a38c 	.word	0x0801a38c

08008810 <tcp_process>:
{
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 8008816:	4ba5      	ldr	r3, [pc, #660]	; (8008aac <tcp_process+0x29c>)
 8008818:	7bdb      	ldrb	r3, [r3, #15]
 800881a:	f013 0f04 	tst.w	r3, #4
 800881e:	d032      	beq.n	8008886 <tcp_process+0x76>
    if (pcb->state == SYN_SENT) {
 8008820:	7d01      	ldrb	r1, [r0, #20]
 8008822:	2902      	cmp	r1, #2
 8008824:	d011      	beq.n	800884a <tcp_process+0x3a>
      if (seqno == pcb->rcv_nxt) {
 8008826:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008828:	4ba0      	ldr	r3, [pc, #640]	; (8008aac <tcp_process+0x29c>)
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	429a      	cmp	r2, r3
 800882e:	d015      	beq.n	800885c <tcp_process+0x4c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008830:	1a99      	subs	r1, r3, r2
 8008832:	2900      	cmp	r1, #0
 8008834:	db0e      	blt.n	8008854 <tcp_process+0x44>
 8008836:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8008838:	440a      	add	r2, r1
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	dc09      	bgt.n	8008854 <tcp_process+0x44>
        tcp_ack_now(pcb);
 8008840:	7e83      	ldrb	r3, [r0, #26]
 8008842:	f043 0302 	orr.w	r3, r3, #2
 8008846:	7683      	strb	r3, [r0, #26]
    if (acceptable) {
 8008848:	e004      	b.n	8008854 <tcp_process+0x44>
      if (ackno == pcb->snd_nxt) {
 800884a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800884c:	4b97      	ldr	r3, [pc, #604]	; (8008aac <tcp_process+0x29c>)
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	429a      	cmp	r2, r3
 8008852:	d003      	beq.n	800885c <tcp_process+0x4c>
      return ERR_OK;
 8008854:	2500      	movs	r5, #0
}
 8008856:	4628      	mov	r0, r5
 8008858:	b002      	add	sp, #8
 800885a:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800885c:	b159      	cbz	r1, 8008876 <tcp_process+0x66>
      recv_flags |= TF_RESET;
 800885e:	4a93      	ldr	r2, [pc, #588]	; (8008aac <tcp_process+0x29c>)
 8008860:	7b93      	ldrb	r3, [r2, #14]
 8008862:	f043 0308 	orr.w	r3, r3, #8
 8008866:	7393      	strb	r3, [r2, #14]
      pcb->flags &= ~TF_ACK_DELAY;
 8008868:	7ea3      	ldrb	r3, [r4, #26]
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 8008870:	f06f 050d 	mvn.w	r5, #13
 8008874:	e7ef      	b.n	8008856 <tcp_process+0x46>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008876:	4b8e      	ldr	r3, [pc, #568]	; (8008ab0 <tcp_process+0x2a0>)
 8008878:	f240 22e7 	movw	r2, #743	; 0x2e7
 800887c:	498d      	ldr	r1, [pc, #564]	; (8008ab4 <tcp_process+0x2a4>)
 800887e:	488e      	ldr	r0, [pc, #568]	; (8008ab8 <tcp_process+0x2a8>)
 8008880:	f00a fb42 	bl	8012f08 <printf>
 8008884:	e7eb      	b.n	800885e <tcp_process+0x4e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008886:	f013 0f02 	tst.w	r3, #2
 800888a:	d004      	beq.n	8008896 <tcp_process+0x86>
 800888c:	7d03      	ldrb	r3, [r0, #20]
 800888e:	3b02      	subs	r3, #2
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b01      	cmp	r3, #1
 8008894:	d81b      	bhi.n	80088ce <tcp_process+0xbe>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008896:	7ea3      	ldrb	r3, [r4, #26]
 8008898:	f013 0f10 	tst.w	r3, #16
 800889c:	d102      	bne.n	80088a4 <tcp_process+0x94>
    pcb->tmr = tcp_ticks;
 800889e:	4b87      	ldr	r3, [pc, #540]	; (8008abc <tcp_process+0x2ac>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff f968 	bl	8007b80 <tcp_parseopt>
  switch (pcb->state) {
 80088b0:	7d23      	ldrb	r3, [r4, #20]
 80088b2:	3b02      	subs	r3, #2
 80088b4:	2b07      	cmp	r3, #7
 80088b6:	f200 820d 	bhi.w	8008cd4 <tcp_process+0x4c4>
 80088ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80088be:	000e      	.short	0x000e
 80088c0:	0129009a 	.word	0x0129009a
 80088c4:	0190013a 	.word	0x0190013a
 80088c8:	01be0129 	.word	0x01be0129
 80088cc:	01f1      	.short	0x01f1
    tcp_ack_now(pcb);
 80088ce:	7e83      	ldrb	r3, [r0, #26]
 80088d0:	f043 0302 	orr.w	r3, r3, #2
 80088d4:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 80088d6:	2500      	movs	r5, #0
 80088d8:	e7bd      	b.n	8008856 <tcp_process+0x46>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80088da:	4b74      	ldr	r3, [pc, #464]	; (8008aac <tcp_process+0x29c>)
 80088dc:	7bdb      	ldrb	r3, [r3, #15]
 80088de:	f003 0212 	and.w	r2, r3, #18
 80088e2:	2a12      	cmp	r2, #18
 80088e4:	d004      	beq.n	80088f0 <tcp_process+0xe0>
    else if (flags & TCP_ACK) {
 80088e6:	f013 0f10 	tst.w	r3, #16
 80088ea:	d168      	bne.n	80089be <tcp_process+0x1ae>
  return ERR_OK;
 80088ec:	2500      	movs	r5, #0
 80088ee:	e7b2      	b.n	8008856 <tcp_process+0x46>
        && (ackno == pcb->lastack + 1)) {
 80088f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80088f2:	3201      	adds	r2, #1
 80088f4:	496d      	ldr	r1, [pc, #436]	; (8008aac <tcp_process+0x29c>)
 80088f6:	6989      	ldr	r1, [r1, #24]
 80088f8:	428a      	cmp	r2, r1
 80088fa:	d1f4      	bne.n	80088e6 <tcp_process+0xd6>
      pcb->rcv_nxt = seqno + 1;
 80088fc:	4a6b      	ldr	r2, [pc, #428]	; (8008aac <tcp_process+0x29c>)
 80088fe:	6913      	ldr	r3, [r2, #16]
 8008900:	1c58      	adds	r0, r3, #1
 8008902:	6260      	str	r0, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008904:	62e0      	str	r0, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 8008906:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8008908:	6892      	ldr	r2, [r2, #8]
 800890a:	89d2      	ldrh	r2, [r2, #14]
 800890c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008910:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008914:	3b01      	subs	r3, #1
 8008916:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008918:	2304      	movs	r3, #4
 800891a:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800891c:	18e1      	adds	r1, r4, r3
 800891e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008920:	f7ff f846 	bl	80079b0 <tcp_eff_send_mss_impl>
 8008924:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008926:	0043      	lsls	r3, r0, #1
 8008928:	f241 121c 	movw	r2, #4380	; 0x111c
 800892c:	4293      	cmp	r3, r2
 800892e:	bf38      	it	cc
 8008930:	4613      	movcc	r3, r2
 8008932:	0080      	lsls	r0, r0, #2
 8008934:	4298      	cmp	r0, r3
 8008936:	bf28      	it	cs
 8008938:	4618      	movcs	r0, r3
 800893a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800893e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008942:	b31b      	cbz	r3, 800898c <tcp_process+0x17c>
      --pcb->snd_queuelen;
 8008944:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008948:	3b01      	subs	r3, #1
 800894a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800894e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 8008950:	b325      	cbz	r5, 800899c <tcp_process+0x18c>
        pcb->unacked = rseg->next;
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 8008956:	4628      	mov	r0, r5
 8008958:	f7fe fa5a 	bl	8006e10 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800895c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800895e:	b353      	cbz	r3, 80089b6 <tcp_process+0x1a6>
        pcb->rtime = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8008964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008968:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800896c:	b143      	cbz	r3, 8008980 <tcp_process+0x170>
 800896e:	2200      	movs	r2, #0
 8008970:	4621      	mov	r1, r4
 8008972:	6920      	ldr	r0, [r4, #16]
 8008974:	4798      	blx	r3
 8008976:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 8008978:	f110 0f0d 	cmn.w	r0, #13
 800897c:	f43f af6b 	beq.w	8008856 <tcp_process+0x46>
      tcp_ack_now(pcb);
 8008980:	7ea3      	ldrb	r3, [r4, #26]
 8008982:	f043 0302 	orr.w	r3, r3, #2
 8008986:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 8008988:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 800898a:	e764      	b.n	8008856 <tcp_process+0x46>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800898c:	4b48      	ldr	r3, [pc, #288]	; (8008ab0 <tcp_process+0x2a0>)
 800898e:	f240 321a 	movw	r2, #794	; 0x31a
 8008992:	494b      	ldr	r1, [pc, #300]	; (8008ac0 <tcp_process+0x2b0>)
 8008994:	4848      	ldr	r0, [pc, #288]	; (8008ab8 <tcp_process+0x2a8>)
 8008996:	f00a fab7 	bl	8012f08 <printf>
 800899a:	e7d3      	b.n	8008944 <tcp_process+0x134>
        rseg = pcb->unsent;
 800899c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800899e:	b115      	cbz	r5, 80089a6 <tcp_process+0x196>
        pcb->unsent = rseg->next;
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	66a3      	str	r3, [r4, #104]	; 0x68
 80089a4:	e7d7      	b.n	8008956 <tcp_process+0x146>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80089a6:	4b42      	ldr	r3, [pc, #264]	; (8008ab0 <tcp_process+0x2a0>)
 80089a8:	f240 3222 	movw	r2, #802	; 0x322
 80089ac:	4945      	ldr	r1, [pc, #276]	; (8008ac4 <tcp_process+0x2b4>)
 80089ae:	4842      	ldr	r0, [pc, #264]	; (8008ab8 <tcp_process+0x2a8>)
 80089b0:	f00a faaa 	bl	8012f08 <printf>
 80089b4:	e7f4      	b.n	80089a0 <tcp_process+0x190>
        pcb->rtime = -1;
 80089b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089ba:	8623      	strh	r3, [r4, #48]	; 0x30
 80089bc:	e7d4      	b.n	8008968 <tcp_process+0x158>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089be:	483b      	ldr	r0, [pc, #236]	; (8008aac <tcp_process+0x29c>)
 80089c0:	6882      	ldr	r2, [r0, #8]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80089c2:	4b41      	ldr	r3, [pc, #260]	; (8008ac8 <tcp_process+0x2b8>)
 80089c4:	8a85      	ldrh	r5, [r0, #20]
 80089c6:	6901      	ldr	r1, [r0, #16]
 80089c8:	8816      	ldrh	r6, [r2, #0]
 80089ca:	9601      	str	r6, [sp, #4]
 80089cc:	8852      	ldrh	r2, [r2, #2]
 80089ce:	9200      	str	r2, [sp, #0]
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	4429      	add	r1, r5
 80089d4:	6980      	ldr	r0, [r0, #24]
 80089d6:	f001 fa8d 	bl	8009ef4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80089da:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d901      	bls.n	80089e6 <tcp_process+0x1d6>
  return ERR_OK;
 80089e2:	2500      	movs	r5, #0
 80089e4:	e737      	b.n	8008856 <tcp_process+0x46>
        pcb->rtime = 0;
 80089e6:	2500      	movs	r5, #0
 80089e8:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80089ea:	4620      	mov	r0, r4
 80089ec:	f001 fad8 	bl	8009fa0 <tcp_rexmit_rto>
 80089f0:	e731      	b.n	8008856 <tcp_process+0x46>
    if (flags & TCP_ACK) {
 80089f2:	4b2e      	ldr	r3, [pc, #184]	; (8008aac <tcp_process+0x29c>)
 80089f4:	7bdb      	ldrb	r3, [r3, #15]
 80089f6:	f013 0f10 	tst.w	r3, #16
 80089fa:	d078      	beq.n	8008aee <tcp_process+0x2de>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80089fc:	4b2b      	ldr	r3, [pc, #172]	; (8008aac <tcp_process+0x29c>)
 80089fe:	6998      	ldr	r0, [r3, #24]
 8008a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a02:	1ac3      	subs	r3, r0, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d403      	bmi.n	8008a10 <tcp_process+0x200>
 8008a08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a0a:	1ac3      	subs	r3, r0, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd0e      	ble.n	8008a2e <tcp_process+0x21e>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a10:	4c26      	ldr	r4, [pc, #152]	; (8008aac <tcp_process+0x29c>)
 8008a12:	68a2      	ldr	r2, [r4, #8]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a14:	4b2c      	ldr	r3, [pc, #176]	; (8008ac8 <tcp_process+0x2b8>)
 8008a16:	8aa5      	ldrh	r5, [r4, #20]
 8008a18:	6921      	ldr	r1, [r4, #16]
 8008a1a:	8814      	ldrh	r4, [r2, #0]
 8008a1c:	9401      	str	r4, [sp, #4]
 8008a1e:	8852      	ldrh	r2, [r2, #2]
 8008a20:	9200      	str	r2, [sp, #0]
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	4429      	add	r1, r5
 8008a26:	f001 fa65 	bl	8009ef4 <tcp_rst>
  return ERR_OK;
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	e713      	b.n	8008856 <tcp_process+0x46>
        pcb->state = ESTABLISHED;
 8008a2e:	2304      	movs	r3, #4
 8008a30:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008a32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a34:	b113      	cbz	r3, 8008a3c <tcp_process+0x22c>
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d02f      	beq.n	8008a9c <tcp_process+0x28c>
        if (pcb->listener == NULL) {
 8008a3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d046      	beq.n	8008ad0 <tcp_process+0x2c0>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d04b      	beq.n	8008ae0 <tcp_process+0x2d0>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	6920      	ldr	r0, [r4, #16]
 8008a4e:	4798      	blx	r3
        if (err != ERR_OK) {
 8008a50:	4605      	mov	r5, r0
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d13e      	bne.n	8008ad4 <tcp_process+0x2c4>
        tcp_receive(pcb);
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7ff f9f6 	bl	8007e48 <tcp_receive>
        if (recv_acked != 0) {
 8008a5c:	4b13      	ldr	r3, [pc, #76]	; (8008aac <tcp_process+0x29c>)
 8008a5e:	8b9b      	ldrh	r3, [r3, #28]
 8008a60:	b113      	cbz	r3, 8008a68 <tcp_process+0x258>
          recv_acked--;
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4a11      	ldr	r2, [pc, #68]	; (8008aac <tcp_process+0x29c>)
 8008a66:	8393      	strh	r3, [r2, #28]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008a68:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8008a6a:	0053      	lsls	r3, r2, #1
 8008a6c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a70:	428b      	cmp	r3, r1
 8008a72:	bf38      	it	cc
 8008a74:	460b      	movcc	r3, r1
 8008a76:	0092      	lsls	r2, r2, #2
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	bf28      	it	cs
 8008a7c:	4613      	movcs	r3, r2
 8008a7e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 8008a82:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <tcp_process+0x29c>)
 8008a84:	7b9b      	ldrb	r3, [r3, #14]
 8008a86:	f013 0f20 	tst.w	r3, #32
 8008a8a:	f43f aee4 	beq.w	8008856 <tcp_process+0x46>
          tcp_ack_now(pcb);
 8008a8e:	7ea3      	ldrb	r3, [r4, #26]
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 8008a96:	2307      	movs	r3, #7
 8008a98:	7523      	strb	r3, [r4, #20]
 8008a9a:	e6dc      	b.n	8008856 <tcp_process+0x46>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008a9c:	4b04      	ldr	r3, [pc, #16]	; (8008ab0 <tcp_process+0x2a0>)
 8008a9e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008aa2:	490a      	ldr	r1, [pc, #40]	; (8008acc <tcp_process+0x2bc>)
 8008aa4:	4804      	ldr	r0, [pc, #16]	; (8008ab8 <tcp_process+0x2a8>)
 8008aa6:	f00a fa2f 	bl	8012f08 <printf>
 8008aaa:	e7c7      	b.n	8008a3c <tcp_process+0x22c>
 8008aac:	200033c4 	.word	0x200033c4
 8008ab0:	0801af1c 	.word	0x0801af1c
 8008ab4:	0801b0b4 	.word	0x0801b0b4
 8008ab8:	0801a38c 	.word	0x0801a38c
 8008abc:	20007a04 	.word	0x20007a04
 8008ac0:	0801b0d4 	.word	0x0801b0d4
 8008ac4:	0801b0ec 	.word	0x0801b0ec
 8008ac8:	200044e0 	.word	0x200044e0
 8008acc:	0801b100 	.word	0x0801b100
          err = ERR_VAL;
 8008ad0:	f06f 0505 	mvn.w	r5, #5
          if (err != ERR_ABRT) {
 8008ad4:	f115 0f0d 	cmn.w	r5, #13
 8008ad8:	d105      	bne.n	8008ae6 <tcp_process+0x2d6>
          return ERR_ABRT;
 8008ada:	f06f 050c 	mvn.w	r5, #12
 8008ade:	e6ba      	b.n	8008856 <tcp_process+0x46>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008ae0:	f06f 050f 	mvn.w	r5, #15
 8008ae4:	e7f6      	b.n	8008ad4 <tcp_process+0x2c4>
            tcp_abort(pcb);
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f7fe fe6a 	bl	80077c0 <tcp_abort>
 8008aec:	e7f5      	b.n	8008ada <tcp_process+0x2ca>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008aee:	f013 0f02 	tst.w	r3, #2
 8008af2:	f000 80f1 	beq.w	8008cd8 <tcp_process+0x4c8>
 8008af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af8:	3b01      	subs	r3, #1
 8008afa:	4a7c      	ldr	r2, [pc, #496]	; (8008cec <tcp_process+0x4dc>)
 8008afc:	6912      	ldr	r2, [r2, #16]
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d001      	beq.n	8008b06 <tcp_process+0x2f6>
  return ERR_OK;
 8008b02:	2500      	movs	r5, #0
 8008b04:	e6a7      	b.n	8008856 <tcp_process+0x46>
      tcp_rexmit(pcb);
 8008b06:	4620      	mov	r0, r4
 8008b08:	f001 fa63 	bl	8009fd2 <tcp_rexmit>
  return ERR_OK;
 8008b0c:	2500      	movs	r5, #0
 8008b0e:	e6a2      	b.n	8008856 <tcp_process+0x46>
    tcp_receive(pcb);
 8008b10:	4620      	mov	r0, r4
 8008b12:	f7ff f999 	bl	8007e48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008b16:	4b75      	ldr	r3, [pc, #468]	; (8008cec <tcp_process+0x4dc>)
 8008b18:	7b9b      	ldrb	r3, [r3, #14]
 8008b1a:	f013 0f20 	tst.w	r3, #32
 8008b1e:	f000 80dd 	beq.w	8008cdc <tcp_process+0x4cc>
      tcp_ack_now(pcb);
 8008b22:	7ea3      	ldrb	r3, [r4, #26]
 8008b24:	f043 0302 	orr.w	r3, r3, #2
 8008b28:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8008b2a:	2307      	movs	r3, #7
 8008b2c:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8008b2e:	2500      	movs	r5, #0
 8008b30:	e691      	b.n	8008856 <tcp_process+0x46>
    tcp_receive(pcb);
 8008b32:	4620      	mov	r0, r4
 8008b34:	f7ff f988 	bl	8007e48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008b38:	4b6c      	ldr	r3, [pc, #432]	; (8008cec <tcp_process+0x4dc>)
 8008b3a:	7b9b      	ldrb	r3, [r3, #14]
 8008b3c:	f013 0f20 	tst.w	r3, #32
 8008b40:	d038      	beq.n	8008bb4 <tcp_process+0x3a4>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b42:	4b6a      	ldr	r3, [pc, #424]	; (8008cec <tcp_process+0x4dc>)
 8008b44:	7bdb      	ldrb	r3, [r3, #15]
 8008b46:	f013 0f10 	tst.w	r3, #16
 8008b4a:	d004      	beq.n	8008b56 <tcp_process+0x346>
 8008b4c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008b4e:	4b67      	ldr	r3, [pc, #412]	; (8008cec <tcp_process+0x4dc>)
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d007      	beq.n	8008b66 <tcp_process+0x356>
        tcp_ack_now(pcb);
 8008b56:	7ea3      	ldrb	r3, [r4, #26]
 8008b58:	f043 0302 	orr.w	r3, r3, #2
 8008b5c:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8008b5e:	2308      	movs	r3, #8
 8008b60:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8008b62:	2500      	movs	r5, #0
 8008b64:	e677      	b.n	8008856 <tcp_process+0x46>
          pcb->unsent == NULL) {
 8008b66:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f4      	bne.n	8008b56 <tcp_process+0x346>
        tcp_ack_now(pcb);
 8008b6c:	7ea3      	ldrb	r3, [r4, #26]
 8008b6e:	f043 0302 	orr.w	r3, r3, #2
 8008b72:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8008b74:	4620      	mov	r0, r4
 8008b76:	f7fe f9df 	bl	8006f38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008b7a:	4b5d      	ldr	r3, [pc, #372]	; (8008cf0 <tcp_process+0x4e0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	d005      	beq.n	8008b8e <tcp_process+0x37e>
 8008b82:	b153      	cbz	r3, 8008b9a <tcp_process+0x38a>
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	42a2      	cmp	r2, r4
 8008b88:	d005      	beq.n	8008b96 <tcp_process+0x386>
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	e7f9      	b.n	8008b82 <tcp_process+0x372>
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	4b57      	ldr	r3, [pc, #348]	; (8008cf0 <tcp_process+0x4e0>)
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e001      	b.n	8008b9a <tcp_process+0x38a>
 8008b96:	68e2      	ldr	r2, [r4, #12]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	4b56      	ldr	r3, [pc, #344]	; (8008cf4 <tcp_process+0x4e4>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008ba0:	230a      	movs	r3, #10
 8008ba2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008ba4:	4b54      	ldr	r3, [pc, #336]	; (8008cf8 <tcp_process+0x4e8>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	60e2      	str	r2, [r4, #12]
 8008baa:	601c      	str	r4, [r3, #0]
 8008bac:	f001 fb52 	bl	800a254 <tcp_timer_needed>
  return ERR_OK;
 8008bb0:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008bb2:	e650      	b.n	8008856 <tcp_process+0x46>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008bb4:	4b4d      	ldr	r3, [pc, #308]	; (8008cec <tcp_process+0x4dc>)
 8008bb6:	7bdb      	ldrb	r3, [r3, #15]
 8008bb8:	f013 0f10 	tst.w	r3, #16
 8008bbc:	f000 8090 	beq.w	8008ce0 <tcp_process+0x4d0>
 8008bc0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008bc2:	4b4a      	ldr	r3, [pc, #296]	; (8008cec <tcp_process+0x4dc>)
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d001      	beq.n	8008bce <tcp_process+0x3be>
  return ERR_OK;
 8008bca:	2500      	movs	r5, #0
 8008bcc:	e643      	b.n	8008856 <tcp_process+0x46>
               pcb->unsent == NULL) {
 8008bce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008bd0:	b10b      	cbz	r3, 8008bd6 <tcp_process+0x3c6>
  return ERR_OK;
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	e63f      	b.n	8008856 <tcp_process+0x46>
      pcb->state = FIN_WAIT_2;
 8008bd6:	2306      	movs	r3, #6
 8008bd8:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8008bda:	2500      	movs	r5, #0
 8008bdc:	e63b      	b.n	8008856 <tcp_process+0x46>
    tcp_receive(pcb);
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff f932 	bl	8007e48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008be4:	4b41      	ldr	r3, [pc, #260]	; (8008cec <tcp_process+0x4dc>)
 8008be6:	7b9b      	ldrb	r3, [r3, #14]
 8008be8:	f013 0f20 	tst.w	r3, #32
 8008bec:	d101      	bne.n	8008bf2 <tcp_process+0x3e2>
  return ERR_OK;
 8008bee:	2500      	movs	r5, #0
 8008bf0:	e631      	b.n	8008856 <tcp_process+0x46>
      tcp_ack_now(pcb);
 8008bf2:	7ea3      	ldrb	r3, [r4, #26]
 8008bf4:	f043 0302 	orr.w	r3, r3, #2
 8008bf8:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f7fe f99c 	bl	8006f38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008c00:	4b3b      	ldr	r3, [pc, #236]	; (8008cf0 <tcp_process+0x4e0>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	d005      	beq.n	8008c14 <tcp_process+0x404>
 8008c08:	b153      	cbz	r3, 8008c20 <tcp_process+0x410>
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	42a2      	cmp	r2, r4
 8008c0e:	d005      	beq.n	8008c1c <tcp_process+0x40c>
 8008c10:	4613      	mov	r3, r2
 8008c12:	e7f9      	b.n	8008c08 <tcp_process+0x3f8>
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <tcp_process+0x4e0>)
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	e001      	b.n	8008c20 <tcp_process+0x410>
 8008c1c:	68e2      	ldr	r2, [r4, #12]
 8008c1e:	60da      	str	r2, [r3, #12]
 8008c20:	4b34      	ldr	r3, [pc, #208]	; (8008cf4 <tcp_process+0x4e4>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008c26:	230a      	movs	r3, #10
 8008c28:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008c2a:	4b33      	ldr	r3, [pc, #204]	; (8008cf8 <tcp_process+0x4e8>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	60e2      	str	r2, [r4, #12]
 8008c30:	601c      	str	r4, [r3, #0]
 8008c32:	f001 fb0f 	bl	800a254 <tcp_timer_needed>
  return ERR_OK;
 8008c36:	2500      	movs	r5, #0
 8008c38:	e60d      	b.n	8008856 <tcp_process+0x46>
    tcp_receive(pcb);
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7ff f904 	bl	8007e48 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008c40:	4b2a      	ldr	r3, [pc, #168]	; (8008cec <tcp_process+0x4dc>)
 8008c42:	7bdb      	ldrb	r3, [r3, #15]
 8008c44:	f013 0f10 	tst.w	r3, #16
 8008c48:	d04c      	beq.n	8008ce4 <tcp_process+0x4d4>
 8008c4a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <tcp_process+0x4dc>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d001      	beq.n	8008c58 <tcp_process+0x448>
  return ERR_OK;
 8008c54:	2500      	movs	r5, #0
 8008c56:	e5fe      	b.n	8008856 <tcp_process+0x46>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008c58:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008c5a:	b10b      	cbz	r3, 8008c60 <tcp_process+0x450>
  return ERR_OK;
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	e5fa      	b.n	8008856 <tcp_process+0x46>
      tcp_pcb_purge(pcb);
 8008c60:	4620      	mov	r0, r4
 8008c62:	f7fe f969 	bl	8006f38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008c66:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <tcp_process+0x4e0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	d005      	beq.n	8008c7a <tcp_process+0x46a>
 8008c6e:	b153      	cbz	r3, 8008c86 <tcp_process+0x476>
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	42a2      	cmp	r2, r4
 8008c74:	d005      	beq.n	8008c82 <tcp_process+0x472>
 8008c76:	4613      	mov	r3, r2
 8008c78:	e7f9      	b.n	8008c6e <tcp_process+0x45e>
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	4b1c      	ldr	r3, [pc, #112]	; (8008cf0 <tcp_process+0x4e0>)
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e001      	b.n	8008c86 <tcp_process+0x476>
 8008c82:	68e2      	ldr	r2, [r4, #12]
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	4b1b      	ldr	r3, [pc, #108]	; (8008cf4 <tcp_process+0x4e4>)
 8008c88:	2201      	movs	r2, #1
 8008c8a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008c8c:	230a      	movs	r3, #10
 8008c8e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008c90:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <tcp_process+0x4e8>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	60e2      	str	r2, [r4, #12]
 8008c96:	601c      	str	r4, [r3, #0]
 8008c98:	f001 fadc 	bl	800a254 <tcp_timer_needed>
  return ERR_OK;
 8008c9c:	2500      	movs	r5, #0
 8008c9e:	e5da      	b.n	8008856 <tcp_process+0x46>
    tcp_receive(pcb);
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f7ff f8d1 	bl	8007e48 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008ca6:	4b11      	ldr	r3, [pc, #68]	; (8008cec <tcp_process+0x4dc>)
 8008ca8:	7bdb      	ldrb	r3, [r3, #15]
 8008caa:	f013 0f10 	tst.w	r3, #16
 8008cae:	d01b      	beq.n	8008ce8 <tcp_process+0x4d8>
 8008cb0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008cb2:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <tcp_process+0x4dc>)
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d001      	beq.n	8008cbe <tcp_process+0x4ae>
  return ERR_OK;
 8008cba:	2500      	movs	r5, #0
 8008cbc:	e5cb      	b.n	8008856 <tcp_process+0x46>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008cbe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008cc0:	b10b      	cbz	r3, 8008cc6 <tcp_process+0x4b6>
  return ERR_OK;
 8008cc2:	2500      	movs	r5, #0
 8008cc4:	e5c7      	b.n	8008856 <tcp_process+0x46>
      recv_flags |= TF_CLOSED;
 8008cc6:	4a09      	ldr	r2, [pc, #36]	; (8008cec <tcp_process+0x4dc>)
 8008cc8:	7b93      	ldrb	r3, [r2, #14]
 8008cca:	f043 0310 	orr.w	r3, r3, #16
 8008cce:	7393      	strb	r3, [r2, #14]
  return ERR_OK;
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	e5c0      	b.n	8008856 <tcp_process+0x46>
  switch (pcb->state) {
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	e5be      	b.n	8008856 <tcp_process+0x46>
  return ERR_OK;
 8008cd8:	2500      	movs	r5, #0
 8008cda:	e5bc      	b.n	8008856 <tcp_process+0x46>
 8008cdc:	2500      	movs	r5, #0
 8008cde:	e5ba      	b.n	8008856 <tcp_process+0x46>
 8008ce0:	2500      	movs	r5, #0
 8008ce2:	e5b8      	b.n	8008856 <tcp_process+0x46>
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	e5b6      	b.n	8008856 <tcp_process+0x46>
 8008ce8:	2500      	movs	r5, #0
 8008cea:	e5b4      	b.n	8008856 <tcp_process+0x46>
 8008cec:	200033c4 	.word	0x200033c4
 8008cf0:	20007a00 	.word	0x20007a00
 8008cf4:	200079fc 	.word	0x200079fc
 8008cf8:	20007a10 	.word	0x20007a10

08008cfc <tcp_input>:
{
 8008cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8008d02:	6842      	ldr	r2, [r0, #4]
 8008d04:	4b62      	ldr	r3, [pc, #392]	; (8008e90 <tcp_input+0x194>)
 8008d06:	609a      	str	r2, [r3, #8]
  if (p->len < TCP_HLEN) {
 8008d08:	8943      	ldrh	r3, [r0, #10]
 8008d0a:	2b13      	cmp	r3, #19
 8008d0c:	d804      	bhi.n	8008d18 <tcp_input+0x1c>
  pbuf_free(p);
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f7fd fbf8 	bl	8006504 <pbuf_free>
}
 8008d14:	b003      	add	sp, #12
 8008d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008d18:	4b5e      	ldr	r3, [pc, #376]	; (8008e94 <tcp_input+0x198>)
 8008d1a:	6819      	ldr	r1, [r3, #0]
 8008d1c:	6958      	ldr	r0, [r3, #20]
 8008d1e:	f002 fb3a 	bl	800b396 <ip4_addr_isbroadcast_u32>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d1f3      	bne.n	8008d0e <tcp_input+0x12>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008d26:	4b5b      	ldr	r3, [pc, #364]	; (8008e94 <tcp_input+0x198>)
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008d2e:	2be0      	cmp	r3, #224	; 0xe0
 8008d30:	d0ed      	beq.n	8008d0e <tcp_input+0x12>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008d32:	4b57      	ldr	r3, [pc, #348]	; (8008e90 <tcp_input+0x194>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	8998      	ldrh	r0, [r3, #12]
 8008d38:	f7fc ffae 	bl	8005c98 <lwip_htons>
 8008d3c:	f3c0 310f 	ubfx	r1, r0, #12, #16
 8008d40:	0089      	lsls	r1, r1, #2
 8008d42:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008d44:	2913      	cmp	r1, #19
 8008d46:	d9e2      	bls.n	8008d0e <tcp_input+0x12>
 8008d48:	b289      	uxth	r1, r1
 8008d4a:	892b      	ldrh	r3, [r5, #8]
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	d8de      	bhi.n	8008d0e <tcp_input+0x12>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008d50:	f1a1 0314 	sub.w	r3, r1, #20
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	4a4e      	ldr	r2, [pc, #312]	; (8008e90 <tcp_input+0x194>)
 8008d58:	8193      	strh	r3, [r2, #12]
  tcphdr_opt2 = NULL;
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 8008d5e:	896a      	ldrh	r2, [r5, #10]
 8008d60:	4291      	cmp	r1, r2
 8008d62:	d930      	bls.n	8008dc6 <tcp_input+0xca>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d061      	beq.n	8008e2e <tcp_input+0x132>
    pbuf_header(p, -TCP_HLEN);
 8008d6a:	f06f 0113 	mvn.w	r1, #19
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7fd fbbe 	bl	80064f0 <pbuf_header>
    tcphdr_opt1len = p->len;
 8008d74:	896c      	ldrh	r4, [r5, #10]
 8008d76:	4b46      	ldr	r3, [pc, #280]	; (8008e90 <tcp_input+0x194>)
 8008d78:	80dc      	strh	r4, [r3, #6]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008d7a:	899f      	ldrh	r7, [r3, #12]
 8008d7c:	1b3e      	subs	r6, r7, r4
 8008d7e:	b2b6      	uxth	r6, r6
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008d80:	4261      	negs	r1, r4
 8008d82:	b209      	sxth	r1, r1
 8008d84:	4628      	mov	r0, r5
 8008d86:	f7fd fbb3 	bl	80064f0 <pbuf_header>
    if (opt2len > p->next->len) {
 8008d8a:	6828      	ldr	r0, [r5, #0]
 8008d8c:	8943      	ldrh	r3, [r0, #10]
 8008d8e:	42b3      	cmp	r3, r6
 8008d90:	d3bd      	bcc.n	8008d0e <tcp_input+0x12>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008d92:	6842      	ldr	r2, [r0, #4]
 8008d94:	4b3e      	ldr	r3, [pc, #248]	; (8008e90 <tcp_input+0x194>)
 8008d96:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008d98:	1be1      	subs	r1, r4, r7
 8008d9a:	b28c      	uxth	r4, r1
 8008d9c:	b209      	sxth	r1, r1
 8008d9e:	f7fd fba7 	bl	80064f0 <pbuf_header>
    p->tot_len -= opt2len;
 8008da2:	892b      	ldrh	r3, [r5, #8]
 8008da4:	441c      	add	r4, r3
 8008da6:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008da8:	896b      	ldrh	r3, [r5, #10]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d146      	bne.n	8008e3c <tcp_input+0x140>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008dae:	892a      	ldrh	r2, [r5, #8]
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	891b      	ldrh	r3, [r3, #8]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d00c      	beq.n	8008dd2 <tcp_input+0xd6>
 8008db8:	4b37      	ldr	r3, [pc, #220]	; (8008e98 <tcp_input+0x19c>)
 8008dba:	22d0      	movs	r2, #208	; 0xd0
 8008dbc:	4937      	ldr	r1, [pc, #220]	; (8008e9c <tcp_input+0x1a0>)
 8008dbe:	4838      	ldr	r0, [pc, #224]	; (8008ea0 <tcp_input+0x1a4>)
 8008dc0:	f00a f8a2 	bl	8012f08 <printf>
 8008dc4:	e005      	b.n	8008dd2 <tcp_input+0xd6>
    tcphdr_opt1len = tcphdr_optlen;
 8008dc6:	4a32      	ldr	r2, [pc, #200]	; (8008e90 <tcp_input+0x194>)
 8008dc8:	80d3      	strh	r3, [r2, #6]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008dca:	4249      	negs	r1, r1
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f7fd fb8f 	bl	80064f0 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008dd2:	4c2f      	ldr	r4, [pc, #188]	; (8008e90 <tcp_input+0x194>)
 8008dd4:	68a6      	ldr	r6, [r4, #8]
 8008dd6:	8830      	ldrh	r0, [r6, #0]
 8008dd8:	f7fc ff5e 	bl	8005c98 <lwip_htons>
 8008ddc:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008dde:	68a6      	ldr	r6, [r4, #8]
 8008de0:	8870      	ldrh	r0, [r6, #2]
 8008de2:	f7fc ff59 	bl	8005c98 <lwip_htons>
 8008de6:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008de8:	68a6      	ldr	r6, [r4, #8]
 8008dea:	6870      	ldr	r0, [r6, #4]
 8008dec:	f7fc ff57 	bl	8005c9e <lwip_htonl>
 8008df0:	6070      	str	r0, [r6, #4]
 8008df2:	6120      	str	r0, [r4, #16]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008df4:	68a6      	ldr	r6, [r4, #8]
 8008df6:	68b0      	ldr	r0, [r6, #8]
 8008df8:	f7fc ff51 	bl	8005c9e <lwip_htonl>
 8008dfc:	60b0      	str	r0, [r6, #8]
 8008dfe:	61a0      	str	r0, [r4, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008e00:	68a6      	ldr	r6, [r4, #8]
 8008e02:	89f0      	ldrh	r0, [r6, #14]
 8008e04:	f7fc ff48 	bl	8005c98 <lwip_htons>
 8008e08:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	8998      	ldrh	r0, [r3, #12]
 8008e0e:	f7fc ff43 	bl	8005c98 <lwip_htons>
 8008e12:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8008e16:	73e3      	strb	r3, [r4, #15]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008e18:	892a      	ldrh	r2, [r5, #8]
 8008e1a:	f013 0303 	ands.w	r3, r3, #3
 8008e1e:	bf18      	it	ne
 8008e20:	2301      	movne	r3, #1
 8008e22:	4413      	add	r3, r2
 8008e24:	82a3      	strh	r3, [r4, #20]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e26:	4b1f      	ldr	r3, [pc, #124]	; (8008ea4 <tcp_input+0x1a8>)
 8008e28:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8008e2a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e2c:	e04c      	b.n	8008ec8 <tcp_input+0x1cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <tcp_input+0x19c>)
 8008e30:	22b2      	movs	r2, #178	; 0xb2
 8008e32:	491d      	ldr	r1, [pc, #116]	; (8008ea8 <tcp_input+0x1ac>)
 8008e34:	481a      	ldr	r0, [pc, #104]	; (8008ea0 <tcp_input+0x1a4>)
 8008e36:	f00a f867 	bl	8012f08 <printf>
 8008e3a:	e796      	b.n	8008d6a <tcp_input+0x6e>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008e3c:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <tcp_input+0x19c>)
 8008e3e:	22cf      	movs	r2, #207	; 0xcf
 8008e40:	491a      	ldr	r1, [pc, #104]	; (8008eac <tcp_input+0x1b0>)
 8008e42:	4817      	ldr	r0, [pc, #92]	; (8008ea0 <tcp_input+0x1a4>)
 8008e44:	f00a f860 	bl	8012f08 <printf>
 8008e48:	e7b1      	b.n	8008dae <tcp_input+0xb2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008e4a:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <tcp_input+0x19c>)
 8008e4c:	22e2      	movs	r2, #226	; 0xe2
 8008e4e:	4918      	ldr	r1, [pc, #96]	; (8008eb0 <tcp_input+0x1b4>)
 8008e50:	4813      	ldr	r0, [pc, #76]	; (8008ea0 <tcp_input+0x1a4>)
 8008e52:	f00a f859 	bl	8012f08 <printf>
 8008e56:	e03c      	b.n	8008ed2 <tcp_input+0x1d6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008e58:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <tcp_input+0x19c>)
 8008e5a:	22e3      	movs	r2, #227	; 0xe3
 8008e5c:	4915      	ldr	r1, [pc, #84]	; (8008eb4 <tcp_input+0x1b8>)
 8008e5e:	4810      	ldr	r0, [pc, #64]	; (8008ea0 <tcp_input+0x1a4>)
 8008e60:	f00a f852 	bl	8012f08 <printf>
 8008e64:	e038      	b.n	8008ed8 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <tcp_input+0x19c>)
 8008e68:	22e4      	movs	r2, #228	; 0xe4
 8008e6a:	4913      	ldr	r1, [pc, #76]	; (8008eb8 <tcp_input+0x1bc>)
 8008e6c:	480c      	ldr	r0, [pc, #48]	; (8008ea0 <tcp_input+0x1a4>)
 8008e6e:	f00a f84b 	bl	8012f08 <printf>
 8008e72:	e034      	b.n	8008ede <tcp_input+0x1e2>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <tcp_input+0x19c>)
 8008e76:	22ec      	movs	r2, #236	; 0xec
 8008e78:	4910      	ldr	r1, [pc, #64]	; (8008ebc <tcp_input+0x1c0>)
 8008e7a:	4809      	ldr	r0, [pc, #36]	; (8008ea0 <tcp_input+0x1a4>)
 8008e7c:	f00a f844 	bl	8012f08 <printf>
 8008e80:	e044      	b.n	8008f0c <tcp_input+0x210>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <tcp_input+0x19c>)
 8008e84:	22f4      	movs	r2, #244	; 0xf4
 8008e86:	490e      	ldr	r1, [pc, #56]	; (8008ec0 <tcp_input+0x1c4>)
 8008e88:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <tcp_input+0x1a4>)
 8008e8a:	f00a f83d 	bl	8012f08 <printf>
 8008e8e:	e047      	b.n	8008f20 <tcp_input+0x224>
 8008e90:	200033c4 	.word	0x200033c4
 8008e94:	200044d0 	.word	0x200044d0
 8008e98:	0801af1c 	.word	0x0801af1c
 8008e9c:	0801b13c 	.word	0x0801b13c
 8008ea0:	0801a38c 	.word	0x0801a38c
 8008ea4:	20007a00 	.word	0x20007a00
 8008ea8:	0801b120 	.word	0x0801b120
 8008eac:	0801b130 	.word	0x0801b130
 8008eb0:	0801b15c 	.word	0x0801b15c
 8008eb4:	0801b184 	.word	0x0801b184
 8008eb8:	0801b1b0 	.word	0x0801b1b0
 8008ebc:	0801b1d8 	.word	0x0801b1d8
 8008ec0:	0801b204 	.word	0x0801b204
    prev = pcb;
 8008ec4:	4626      	mov	r6, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ec6:	68e4      	ldr	r4, [r4, #12]
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	d029      	beq.n	8008f20 <tcp_input+0x224>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008ecc:	7d23      	ldrb	r3, [r4, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0bb      	beq.n	8008e4a <tcp_input+0x14e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ed2:	7d23      	ldrb	r3, [r4, #20]
 8008ed4:	2b0a      	cmp	r3, #10
 8008ed6:	d0bf      	beq.n	8008e58 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008ed8:	7d23      	ldrb	r3, [r4, #20]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d0c3      	beq.n	8008e66 <tcp_input+0x16a>
    if (pcb->remote_port == tcphdr->src &&
 8008ede:	8b21      	ldrh	r1, [r4, #24]
 8008ee0:	4b92      	ldr	r3, [pc, #584]	; (800912c <tcp_input+0x430>)
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	881a      	ldrh	r2, [r3, #0]
 8008ee6:	4291      	cmp	r1, r2
 8008ee8:	d1ec      	bne.n	8008ec4 <tcp_input+0x1c8>
        pcb->local_port == tcphdr->dest &&
 8008eea:	8ae2      	ldrh	r2, [r4, #22]
 8008eec:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d1e8      	bne.n	8008ec4 <tcp_input+0x1c8>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ef2:	6862      	ldr	r2, [r4, #4]
 8008ef4:	4b8e      	ldr	r3, [pc, #568]	; (8009130 <tcp_input+0x434>)
 8008ef6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d1e3      	bne.n	8008ec4 <tcp_input+0x1c8>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	4b8c      	ldr	r3, [pc, #560]	; (8009130 <tcp_input+0x434>)
 8008f00:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d1de      	bne.n	8008ec4 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008f06:	68e3      	ldr	r3, [r4, #12]
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d0b3      	beq.n	8008e74 <tcp_input+0x178>
      if (prev != NULL) {
 8008f0c:	b12e      	cbz	r6, 8008f1a <tcp_input+0x21e>
        prev->next = pcb->next;
 8008f0e:	68e3      	ldr	r3, [r4, #12]
 8008f10:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8008f12:	4b88      	ldr	r3, [pc, #544]	; (8009134 <tcp_input+0x438>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 8008f18:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008f1a:	68e3      	ldr	r3, [r4, #12]
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d0b0      	beq.n	8008e82 <tcp_input+0x186>
  if (pcb == NULL) {
 8008f20:	2c00      	cmp	r4, #0
 8008f22:	d04e      	beq.n	8008fc2 <tcp_input+0x2c6>
  if (pcb != NULL) {
 8008f24:	2c00      	cmp	r4, #0
 8008f26:	f000 8128 	beq.w	800917a <tcp_input+0x47e>
    inseg.next = NULL;
 8008f2a:	4b80      	ldr	r3, [pc, #512]	; (800912c <tcp_input+0x430>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	621a      	str	r2, [r3, #32]
    inseg.len = p->tot_len;
 8008f30:	8929      	ldrh	r1, [r5, #8]
 8008f32:	8519      	strh	r1, [r3, #40]	; 0x28
    inseg.p = p;
 8008f34:	625d      	str	r5, [r3, #36]	; 0x24
    inseg.tcphdr = tcphdr;
 8008f36:	6899      	ldr	r1, [r3, #8]
 8008f38:	62d9      	str	r1, [r3, #44]	; 0x2c
    recv_data = NULL;
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30
    recv_flags = 0;
 8008f3c:	739a      	strb	r2, [r3, #14]
    recv_acked = 0;
 8008f3e:	839a      	strh	r2, [r3, #28]
    if (flags & TCP_PSH) {
 8008f40:	7bdb      	ldrb	r3, [r3, #15]
 8008f42:	f013 0f08 	tst.w	r3, #8
 8008f46:	d003      	beq.n	8008f50 <tcp_input+0x254>
      p->flags |= PBUF_FLAG_PUSH;
 8008f48:	7b6b      	ldrb	r3, [r5, #13]
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8008f50:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008f52:	b15b      	cbz	r3, 8008f6c <tcp_input+0x270>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f54:	4620      	mov	r0, r4
 8008f56:	f7fe fb2f 	bl	80075b8 <tcp_process_refused_data>
 8008f5a:	f110 0f0d 	cmn.w	r0, #13
 8008f5e:	d07f      	beq.n	8009060 <tcp_input+0x364>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f60:	6f63      	ldr	r3, [r4, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008f62:	b11b      	cbz	r3, 8008f6c <tcp_input+0x270>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008f64:	4b71      	ldr	r3, [pc, #452]	; (800912c <tcp_input+0x430>)
 8008f66:	8a9b      	ldrh	r3, [r3, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d179      	bne.n	8009060 <tcp_input+0x364>
    tcp_input_pcb = pcb;
 8008f6c:	4b72      	ldr	r3, [pc, #456]	; (8009138 <tcp_input+0x43c>)
 8008f6e:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 8008f70:	4620      	mov	r0, r4
 8008f72:	f7ff fc4d 	bl	8008810 <tcp_process>
    if (err != ERR_ABRT) {
 8008f76:	f110 0f0d 	cmn.w	r0, #13
 8008f7a:	d013      	beq.n	8008fa4 <tcp_input+0x2a8>
      if (recv_flags & TF_RESET) {
 8008f7c:	4b6b      	ldr	r3, [pc, #428]	; (800912c <tcp_input+0x430>)
 8008f7e:	7b9b      	ldrb	r3, [r3, #14]
 8008f80:	f013 0f08 	tst.w	r3, #8
 8008f84:	d073      	beq.n	800906e <tcp_input+0x372>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f86:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008f8a:	b11b      	cbz	r3, 8008f94 <tcp_input+0x298>
 8008f8c:	f06f 010d 	mvn.w	r1, #13
 8008f90:	6920      	ldr	r0, [r4, #16]
 8008f92:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f94:	4621      	mov	r1, r4
 8008f96:	4867      	ldr	r0, [pc, #412]	; (8009134 <tcp_input+0x438>)
 8008f98:	f7fe f9f6 	bl	8007388 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	f7fd f8fc 	bl	800619c <memp_free>
    tcp_input_pcb = NULL;
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4b64      	ldr	r3, [pc, #400]	; (8009138 <tcp_input+0x43c>)
 8008fa8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008faa:	4b60      	ldr	r3, [pc, #384]	; (800912c <tcp_input+0x430>)
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
    if (inseg.p != NULL)
 8008fae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f43f aeaf 	beq.w	8008d14 <tcp_input+0x18>
      pbuf_free(inseg.p);
 8008fb6:	f7fd faa5 	bl	8006504 <pbuf_free>
      inseg.p = NULL;
 8008fba:	4b5c      	ldr	r3, [pc, #368]	; (800912c <tcp_input+0x430>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8008fc0:	e6a8      	b.n	8008d14 <tcp_input+0x18>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fc2:	4b5e      	ldr	r3, [pc, #376]	; (800913c <tcp_input+0x440>)
 8008fc4:	681c      	ldr	r4, [r3, #0]
 8008fc6:	e00c      	b.n	8008fe2 <tcp_input+0x2e6>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fc8:	4b5d      	ldr	r3, [pc, #372]	; (8009140 <tcp_input+0x444>)
 8008fca:	22fe      	movs	r2, #254	; 0xfe
 8008fcc:	495d      	ldr	r1, [pc, #372]	; (8009144 <tcp_input+0x448>)
 8008fce:	485e      	ldr	r0, [pc, #376]	; (8009148 <tcp_input+0x44c>)
 8008fd0:	f009 ff9a 	bl	8012f08 <printf>
      if (pcb->remote_port == tcphdr->src &&
 8008fd4:	8b21      	ldrh	r1, [r4, #24]
 8008fd6:	4b55      	ldr	r3, [pc, #340]	; (800912c <tcp_input+0x430>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	881a      	ldrh	r2, [r3, #0]
 8008fdc:	4291      	cmp	r1, r2
 8008fde:	d005      	beq.n	8008fec <tcp_input+0x2f0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fe0:	68e4      	ldr	r4, [r4, #12]
 8008fe2:	b1c4      	cbz	r4, 8009016 <tcp_input+0x31a>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fe4:	7d23      	ldrb	r3, [r4, #20]
 8008fe6:	2b0a      	cmp	r3, #10
 8008fe8:	d0f4      	beq.n	8008fd4 <tcp_input+0x2d8>
 8008fea:	e7ed      	b.n	8008fc8 <tcp_input+0x2cc>
          pcb->local_port == tcphdr->dest &&
 8008fec:	8ae2      	ldrh	r2, [r4, #22]
 8008fee:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d1f5      	bne.n	8008fe0 <tcp_input+0x2e4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ff4:	6862      	ldr	r2, [r4, #4]
 8008ff6:	4b4e      	ldr	r3, [pc, #312]	; (8009130 <tcp_input+0x434>)
 8008ff8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d1f0      	bne.n	8008fe0 <tcp_input+0x2e4>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	4b4b      	ldr	r3, [pc, #300]	; (8009130 <tcp_input+0x434>)
 8009002:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009004:	429a      	cmp	r2, r3
 8009006:	d1eb      	bne.n	8008fe0 <tcp_input+0x2e4>
        tcp_timewait_input(pcb);
 8009008:	4620      	mov	r0, r4
 800900a:	f7fe fe1b 	bl	8007c44 <tcp_timewait_input>
        pbuf_free(p);
 800900e:	4628      	mov	r0, r5
 8009010:	f7fd fa78 	bl	8006504 <pbuf_free>
        return;
 8009014:	e67e      	b.n	8008d14 <tcp_input+0x18>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009016:	4b4d      	ldr	r3, [pc, #308]	; (800914c <tcp_input+0x450>)
 8009018:	681e      	ldr	r6, [r3, #0]
 800901a:	4630      	mov	r0, r6
    prev = NULL;
 800901c:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800901e:	e001      	b.n	8009024 <tcp_input+0x328>
      prev = (struct tcp_pcb *)lpcb;
 8009020:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009022:	68c0      	ldr	r0, [r0, #12]
 8009024:	b168      	cbz	r0, 8009042 <tcp_input+0x346>
      if (lpcb->local_port == tcphdr->dest) {
 8009026:	8ac2      	ldrh	r2, [r0, #22]
 8009028:	4b40      	ldr	r3, [pc, #256]	; (800912c <tcp_input+0x430>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	885b      	ldrh	r3, [r3, #2]
 800902e:	429a      	cmp	r2, r3
 8009030:	d1f6      	bne.n	8009020 <tcp_input+0x324>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009032:	6803      	ldr	r3, [r0, #0]
 8009034:	4a3e      	ldr	r2, [pc, #248]	; (8009130 <tcp_input+0x434>)
 8009036:	6952      	ldr	r2, [r2, #20]
 8009038:	4293      	cmp	r3, r2
 800903a:	d002      	beq.n	8009042 <tcp_input+0x346>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800903c:	b108      	cbz	r0, 8009042 <tcp_input+0x346>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1ee      	bne.n	8009020 <tcp_input+0x324>
    if (lpcb != NULL) {
 8009042:	2800      	cmp	r0, #0
 8009044:	f43f af6e 	beq.w	8008f24 <tcp_input+0x228>
      if (prev != NULL) {
 8009048:	b121      	cbz	r1, 8009054 <tcp_input+0x358>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800904a:	68c3      	ldr	r3, [r0, #12]
 800904c:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800904e:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009050:	4b3e      	ldr	r3, [pc, #248]	; (800914c <tcp_input+0x450>)
 8009052:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 8009054:	f7fe fe34 	bl	8007cc0 <tcp_listen_input>
      pbuf_free(p);
 8009058:	4628      	mov	r0, r5
 800905a:	f7fd fa53 	bl	8006504 <pbuf_free>
      return;
 800905e:	e659      	b.n	8008d14 <tcp_input+0x18>
        if (pcb->rcv_ann_wnd == 0) {
 8009060:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009062:	2b00      	cmp	r3, #0
 8009064:	d19e      	bne.n	8008fa4 <tcp_input+0x2a8>
          tcp_send_empty_ack(pcb);
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fdc2 	bl	8009bf0 <tcp_send_empty_ack>
        goto aborted;
 800906c:	e79a      	b.n	8008fa4 <tcp_input+0x2a8>
        if (recv_acked > 0) {
 800906e:	4b2f      	ldr	r3, [pc, #188]	; (800912c <tcp_input+0x430>)
 8009070:	8b9a      	ldrh	r2, [r3, #28]
 8009072:	b152      	cbz	r2, 800908a <tcp_input+0x38e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009074:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009076:	b12b      	cbz	r3, 8009084 <tcp_input+0x388>
 8009078:	4621      	mov	r1, r4
 800907a:	6920      	ldr	r0, [r4, #16]
 800907c:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800907e:	f110 0f0d 	cmn.w	r0, #13
 8009082:	d08f      	beq.n	8008fa4 <tcp_input+0x2a8>
          recv_acked = 0;
 8009084:	4b29      	ldr	r3, [pc, #164]	; (800912c <tcp_input+0x430>)
 8009086:	2200      	movs	r2, #0
 8009088:	839a      	strh	r2, [r3, #28]
        if (tcp_input_delayed_close(pcb)) {
 800908a:	4620      	mov	r0, r4
 800908c:	f7fe fdb8 	bl	8007c00 <tcp_input_delayed_close>
 8009090:	2800      	cmp	r0, #0
 8009092:	d187      	bne.n	8008fa4 <tcp_input+0x2a8>
        if (recv_data != NULL) {
 8009094:	4b25      	ldr	r3, [pc, #148]	; (800912c <tcp_input+0x430>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	b1f3      	cbz	r3, 80090d8 <tcp_input+0x3dc>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800909a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800909c:	b133      	cbz	r3, 80090ac <tcp_input+0x3b0>
 800909e:	4b28      	ldr	r3, [pc, #160]	; (8009140 <tcp_input+0x444>)
 80090a0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80090a4:	492a      	ldr	r1, [pc, #168]	; (8009150 <tcp_input+0x454>)
 80090a6:	4828      	ldr	r0, [pc, #160]	; (8009148 <tcp_input+0x44c>)
 80090a8:	f009 ff2e 	bl	8012f08 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 80090ac:	7ea3      	ldrb	r3, [r4, #26]
 80090ae:	f013 0f10 	tst.w	r3, #16
 80090b2:	d12a      	bne.n	800910a <tcp_input+0x40e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80090b4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80090b8:	2d00      	cmp	r5, #0
 80090ba:	d02e      	beq.n	800911a <tcp_input+0x41e>
 80090bc:	2300      	movs	r3, #0
 80090be:	4a1b      	ldr	r2, [pc, #108]	; (800912c <tcp_input+0x430>)
 80090c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80090c2:	4621      	mov	r1, r4
 80090c4:	6920      	ldr	r0, [r4, #16]
 80090c6:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 80090c8:	f110 0f0d 	cmn.w	r0, #13
 80090cc:	f43f af6a 	beq.w	8008fa4 <tcp_input+0x2a8>
          if (err != ERR_OK) {
 80090d0:	b110      	cbz	r0, 80090d8 <tcp_input+0x3dc>
            pcb->refused_data = recv_data;
 80090d2:	4b16      	ldr	r3, [pc, #88]	; (800912c <tcp_input+0x430>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80090d8:	4b14      	ldr	r3, [pc, #80]	; (800912c <tcp_input+0x430>)
 80090da:	7b9b      	ldrb	r3, [r3, #14]
 80090dc:	f013 0f20 	tst.w	r3, #32
 80090e0:	d006      	beq.n	80090f0 <tcp_input+0x3f4>
          if (pcb->refused_data != NULL) {
 80090e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d035      	beq.n	8009154 <tcp_input+0x458>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80090e8:	7b5a      	ldrb	r2, [r3, #13]
 80090ea:	f042 0220 	orr.w	r2, r2, #32
 80090ee:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80090f0:	4b11      	ldr	r3, [pc, #68]	; (8009138 <tcp_input+0x43c>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fe fd82 	bl	8007c00 <tcp_input_delayed_close>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f47f af51 	bne.w	8008fa4 <tcp_input+0x2a8>
        tcp_output(pcb);
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fdae 	bl	8009c64 <tcp_output>
 8009108:	e74c      	b.n	8008fa4 <tcp_input+0x2a8>
            pbuf_free(recv_data);
 800910a:	4b08      	ldr	r3, [pc, #32]	; (800912c <tcp_input+0x430>)
 800910c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800910e:	f7fd f9f9 	bl	8006504 <pbuf_free>
            tcp_abort(pcb);
 8009112:	4620      	mov	r0, r4
 8009114:	f7fe fb54 	bl	80077c0 <tcp_abort>
            goto aborted;
 8009118:	e744      	b.n	8008fa4 <tcp_input+0x2a8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800911a:	2300      	movs	r3, #0
 800911c:	4a03      	ldr	r2, [pc, #12]	; (800912c <tcp_input+0x430>)
 800911e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009120:	4621      	mov	r1, r4
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fa36 	bl	8007594 <tcp_recv_null>
 8009128:	e7ce      	b.n	80090c8 <tcp_input+0x3cc>
 800912a:	bf00      	nop
 800912c:	200033c4 	.word	0x200033c4
 8009130:	200044d0 	.word	0x200044d0
 8009134:	20007a00 	.word	0x20007a00
 8009138:	20007a14 	.word	0x20007a14
 800913c:	20007a10 	.word	0x20007a10
 8009140:	0801af1c 	.word	0x0801af1c
 8009144:	0801b230 	.word	0x0801b230
 8009148:	0801a38c 	.word	0x0801a38c
 800914c:	20007a08 	.word	0x20007a08
 8009150:	0801b260 	.word	0x0801b260
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009154:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009156:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800915a:	d001      	beq.n	8009160 <tcp_input+0x464>
              pcb->rcv_wnd++;
 800915c:	3301      	adds	r3, #1
 800915e:	8523      	strh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009160:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8009164:	2d00      	cmp	r5, #0
 8009166:	d0c3      	beq.n	80090f0 <tcp_input+0x3f4>
 8009168:	2300      	movs	r3, #0
 800916a:	461a      	mov	r2, r3
 800916c:	4621      	mov	r1, r4
 800916e:	6920      	ldr	r0, [r4, #16]
 8009170:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8009172:	f110 0f0d 	cmn.w	r0, #13
 8009176:	d1bb      	bne.n	80090f0 <tcp_input+0x3f4>
 8009178:	e714      	b.n	8008fa4 <tcp_input+0x2a8>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800917a:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <tcp_input+0x4b4>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	8998      	ldrh	r0, [r3, #12]
 8009180:	f7fc fd8a 	bl	8005c98 <lwip_htons>
 8009184:	f010 0f04 	tst.w	r0, #4
 8009188:	d003      	beq.n	8009192 <tcp_input+0x496>
    pbuf_free(p);
 800918a:	4628      	mov	r0, r5
 800918c:	f7fd f9ba 	bl	8006504 <pbuf_free>
 8009190:	e5c0      	b.n	8008d14 <tcp_input+0x18>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009192:	4807      	ldr	r0, [pc, #28]	; (80091b0 <tcp_input+0x4b4>)
 8009194:	6882      	ldr	r2, [r0, #8]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009196:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <tcp_input+0x4b8>)
 8009198:	8a84      	ldrh	r4, [r0, #20]
 800919a:	6901      	ldr	r1, [r0, #16]
 800919c:	8816      	ldrh	r6, [r2, #0]
 800919e:	9601      	str	r6, [sp, #4]
 80091a0:	8852      	ldrh	r2, [r2, #2]
 80091a2:	9200      	str	r2, [sp, #0]
 80091a4:	1d1a      	adds	r2, r3, #4
 80091a6:	4421      	add	r1, r4
 80091a8:	6980      	ldr	r0, [r0, #24]
 80091aa:	f000 fea3 	bl	8009ef4 <tcp_rst>
 80091ae:	e7ec      	b.n	800918a <tcp_input+0x48e>
 80091b0:	200033c4 	.word	0x200033c4
 80091b4:	200044e0 	.word	0x200044e0

080091b8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80091b8:	4a02      	ldr	r2, [pc, #8]	; (80091c4 <tcp_trigger_input_pcb_close+0xc>)
 80091ba:	7b93      	ldrb	r3, [r2, #14]
 80091bc:	f043 0310 	orr.w	r3, r3, #16
 80091c0:	7393      	strb	r3, [r2, #14]
}
 80091c2:	4770      	bx	lr
 80091c4:	200033c4 	.word	0x200033c4

080091c8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80091c8:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80091ca:	7d03      	ldrb	r3, [r0, #20]
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d005      	beq.n	80091dc <tcp_write_checks+0x14>
 80091d0:	2b07      	cmp	r3, #7
 80091d2:	d003      	beq.n	80091dc <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d001      	beq.n	80091dc <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d139      	bne.n	8009250 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 80091dc:	2900      	cmp	r1, #0
 80091de:	d03a      	beq.n	8009256 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80091e0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80091e4:	428b      	cmp	r3, r1
 80091e6:	d308      	bcc.n	80091fa <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80091e8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d80b      	bhi.n	8009208 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 80091f0:	b1f3      	cbz	r3, 8009230 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80091f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80091f4:	b17b      	cbz	r3, 8009216 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80091f6:	2000      	movs	r0, #0
 80091f8:	e02e      	b.n	8009258 <tcp_write_checks+0x90>
    pcb->flags |= TF_NAGLEMEMERR;
 80091fa:	7e83      	ldrb	r3, [r0, #26]
 80091fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009200:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 8009202:	f04f 30ff 	mov.w	r0, #4294967295
 8009206:	e027      	b.n	8009258 <tcp_write_checks+0x90>
    pcb->flags |= TF_NAGLEMEMERR;
 8009208:	7e83      	ldrb	r3, [r0, #26]
 800920a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800920e:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	e020      	b.n	8009258 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009216:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009218:	b10b      	cbz	r3, 800921e <tcp_write_checks+0x56>
  return ERR_OK;
 800921a:	2000      	movs	r0, #0
 800921c:	e01c      	b.n	8009258 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <tcp_write_checks+0x94>)
 8009220:	f240 1255 	movw	r2, #341	; 0x155
 8009224:	490e      	ldr	r1, [pc, #56]	; (8009260 <tcp_write_checks+0x98>)
 8009226:	480f      	ldr	r0, [pc, #60]	; (8009264 <tcp_write_checks+0x9c>)
 8009228:	f009 fe6e 	bl	8012f08 <printf>
  return ERR_OK;
 800922c:	2000      	movs	r0, #0
 800922e:	e013      	b.n	8009258 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009230:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009232:	b143      	cbz	r3, 8009246 <tcp_write_checks+0x7e>
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <tcp_write_checks+0x94>)
 8009236:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800923a:	490b      	ldr	r1, [pc, #44]	; (8009268 <tcp_write_checks+0xa0>)
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <tcp_write_checks+0x9c>)
 800923e:	f009 fe63 	bl	8012f08 <printf>
  return ERR_OK;
 8009242:	2000      	movs	r0, #0
 8009244:	e008      	b.n	8009258 <tcp_write_checks+0x90>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009246:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1f3      	bne.n	8009234 <tcp_write_checks+0x6c>
  return ERR_OK;
 800924c:	2000      	movs	r0, #0
 800924e:	e003      	b.n	8009258 <tcp_write_checks+0x90>
    return ERR_CONN;
 8009250:	f06f 000a 	mvn.w	r0, #10
 8009254:	e000      	b.n	8009258 <tcp_write_checks+0x90>
    return ERR_OK;
 8009256:	2000      	movs	r0, #0
}
 8009258:	bd08      	pop	{r3, pc}
 800925a:	bf00      	nop
 800925c:	0801b27c 	.word	0x0801b27c
 8009260:	0801b2b0 	.word	0x0801b2b0
 8009264:	0801a38c 	.word	0x0801a38c
 8009268:	0801b2ec 	.word	0x0801b2ec

0800926c <tcp_pbuf_prealloc>:
{
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	461e      	mov	r6, r3
 8009272:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 8009276:	4291      	cmp	r1, r2
 8009278:	d215      	bcs.n	80092a6 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800927a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800927e:	f011 0f02 	tst.w	r1, #2
 8009282:	d108      	bne.n	8009296 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 8009284:	9904      	ldr	r1, [sp, #16]
 8009286:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009288:	f011 0f40 	tst.w	r1, #64	; 0x40
 800928c:	d126      	bne.n	80092dc <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800928e:	b113      	cbz	r3, 8009296 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8009294:	b1e3      	cbz	r3, 80092d0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009296:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800929a:	f021 0103 	bic.w	r1, r1, #3
 800929e:	428a      	cmp	r2, r1
 80092a0:	bf28      	it	cs
 80092a2:	460a      	movcs	r2, r1
 80092a4:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80092a6:	2200      	movs	r2, #0
 80092a8:	f7fd f990 	bl	80065cc <pbuf_alloc>
  if (p == NULL) {
 80092ac:	4605      	mov	r5, r0
 80092ae:	b168      	cbz	r0, 80092cc <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80092b0:	6803      	ldr	r3, [r0, #0]
 80092b2:	b133      	cbz	r3, 80092c2 <tcp_pbuf_prealloc+0x56>
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <tcp_pbuf_prealloc+0x74>)
 80092b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80092ba:	490a      	ldr	r1, [pc, #40]	; (80092e4 <tcp_pbuf_prealloc+0x78>)
 80092bc:	480a      	ldr	r0, [pc, #40]	; (80092e8 <tcp_pbuf_prealloc+0x7c>)
 80092be:	f009 fe23 	bl	8012f08 <printf>
  *oversize = p->len - length;
 80092c2:	896b      	ldrh	r3, [r5, #10]
 80092c4:	1b1b      	subs	r3, r3, r4
 80092c6:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 80092c8:	812c      	strh	r4, [r5, #8]
 80092ca:	816c      	strh	r4, [r5, #10]
}
 80092cc:	4628      	mov	r0, r5
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1de      	bne.n	8009296 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 80092d8:	4621      	mov	r1, r4
 80092da:	e7e4      	b.n	80092a6 <tcp_pbuf_prealloc+0x3a>
 80092dc:	4621      	mov	r1, r4
 80092de:	e7e2      	b.n	80092a6 <tcp_pbuf_prealloc+0x3a>
 80092e0:	0801b27c 	.word	0x0801b27c
 80092e4:	0801b320 	.word	0x0801b320
 80092e8:	0801a38c 	.word	0x0801a38c

080092ec <tcp_create_segment>:
{
 80092ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f0:	4607      	mov	r7, r0
 80092f2:	460e      	mov	r6, r1
 80092f4:	4690      	mov	r8, r2
 80092f6:	4699      	mov	r9, r3
 80092f8:	f89d a020 	ldrb.w	sl, [sp, #32]
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80092fc:	2003      	movs	r0, #3
 80092fe:	f7fc ff33 	bl	8006168 <memp_malloc>
 8009302:	4604      	mov	r4, r0
 8009304:	2800      	cmp	r0, #0
 8009306:	d036      	beq.n	8009376 <tcp_create_segment+0x8a>
 8009308:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800930c:	f005 0504 	and.w	r5, r5, #4
  seg->flags = optflags;
 8009310:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	6003      	str	r3, [r0, #0]
  seg->p = p;
 8009318:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800931a:	8933      	ldrh	r3, [r6, #8]
 800931c:	fa1f fa85 	uxth.w	sl, r5
 8009320:	4553      	cmp	r3, sl
 8009322:	d32c      	bcc.n	800937e <tcp_create_segment+0x92>
  seg->len = p->tot_len - optlen;
 8009324:	8931      	ldrh	r1, [r6, #8]
 8009326:	eba1 010a 	sub.w	r1, r1, sl
 800932a:	8121      	strh	r1, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800932c:	2114      	movs	r1, #20
 800932e:	4630      	mov	r0, r6
 8009330:	f7fd f8de 	bl	80064f0 <pbuf_header>
 8009334:	bb50      	cbnz	r0, 800938c <tcp_create_segment+0xa0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009336:	6863      	ldr	r3, [r4, #4]
 8009338:	685e      	ldr	r6, [r3, #4]
 800933a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800933c:	8af8      	ldrh	r0, [r7, #22]
 800933e:	f7fc fcab 	bl	8005c98 <lwip_htons>
 8009342:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009344:	68e6      	ldr	r6, [r4, #12]
 8009346:	8b38      	ldrh	r0, [r7, #24]
 8009348:	f7fc fca6 	bl	8005c98 <lwip_htons>
 800934c:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800934e:	68e6      	ldr	r6, [r4, #12]
 8009350:	4648      	mov	r0, r9
 8009352:	f7fc fca4 	bl	8005c9e <lwip_htonl>
 8009356:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009358:	08a8      	lsrs	r0, r5, #2
 800935a:	3005      	adds	r0, #5
 800935c:	68e5      	ldr	r5, [r4, #12]
 800935e:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
 8009362:	f7fc fc99 	bl	8005c98 <lwip_htons>
 8009366:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 8009368:	68e3      	ldr	r3, [r4, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	749a      	strb	r2, [r3, #18]
 800936e:	74da      	strb	r2, [r3, #19]
}
 8009370:	4620      	mov	r0, r4
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 8009376:	4630      	mov	r0, r6
 8009378:	f7fd f8c4 	bl	8006504 <pbuf_free>
    return NULL;
 800937c:	e7f8      	b.n	8009370 <tcp_create_segment+0x84>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800937e:	4b06      	ldr	r3, [pc, #24]	; (8009398 <tcp_create_segment+0xac>)
 8009380:	22ba      	movs	r2, #186	; 0xba
 8009382:	4906      	ldr	r1, [pc, #24]	; (800939c <tcp_create_segment+0xb0>)
 8009384:	4806      	ldr	r0, [pc, #24]	; (80093a0 <tcp_create_segment+0xb4>)
 8009386:	f009 fdbf 	bl	8012f08 <printf>
 800938a:	e7cb      	b.n	8009324 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800938c:	4620      	mov	r0, r4
 800938e:	f7fd fd3f 	bl	8006e10 <tcp_seg_free>
    return NULL;
 8009392:	2400      	movs	r4, #0
 8009394:	e7ec      	b.n	8009370 <tcp_create_segment+0x84>
 8009396:	bf00      	nop
 8009398:	0801b27c 	.word	0x0801b27c
 800939c:	0801b334 	.word	0x0801b334
 80093a0:	0801a38c 	.word	0x0801a38c

080093a4 <tcp_output_alloc_header>:
{
 80093a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a8:	4605      	mov	r5, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80093ae:	4411      	add	r1, r2
 80093b0:	b289      	uxth	r1, r1
 80093b2:	3114      	adds	r1, #20
 80093b4:	2200      	movs	r2, #0
 80093b6:	b289      	uxth	r1, r1
 80093b8:	2001      	movs	r0, #1
 80093ba:	f7fd f907 	bl	80065cc <pbuf_alloc>
  if (p != NULL) {
 80093be:	4607      	mov	r7, r0
 80093c0:	b348      	cbz	r0, 8009416 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80093c2:	f104 0313 	add.w	r3, r4, #19
 80093c6:	8942      	ldrh	r2, [r0, #10]
 80093c8:	4293      	cmp	r3, r2
 80093ca:	da27      	bge.n	800941c <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 80093cc:	687e      	ldr	r6, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 80093ce:	8ae8      	ldrh	r0, [r5, #22]
 80093d0:	f7fc fc62 	bl	8005c98 <lwip_htons>
 80093d4:	8030      	strh	r0, [r6, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80093d6:	8b28      	ldrh	r0, [r5, #24]
 80093d8:	f7fc fc5e 	bl	8005c98 <lwip_htons>
 80093dc:	8070      	strh	r0, [r6, #2]
    tcphdr->seqno = seqno_be;
 80093de:	f8c6 8004 	str.w	r8, [r6, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80093e2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80093e4:	f7fc fc5b 	bl	8005c9e <lwip_htonl>
 80093e8:	60b0      	str	r0, [r6, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80093ea:	08a4      	lsrs	r4, r4, #2
 80093ec:	3405      	adds	r4, #5
 80093ee:	0324      	lsls	r4, r4, #12
 80093f0:	b2a4      	uxth	r4, r4
 80093f2:	f044 0010 	orr.w	r0, r4, #16
 80093f6:	f7fc fc4f 	bl	8005c98 <lwip_htons>
 80093fa:	81b0      	strh	r0, [r6, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80093fc:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80093fe:	f7fc fc4b 	bl	8005c98 <lwip_htons>
 8009402:	81f0      	strh	r0, [r6, #14]
    tcphdr->chksum = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	7433      	strb	r3, [r6, #16]
 8009408:	7473      	strb	r3, [r6, #17]
    tcphdr->urgp = 0;
 800940a:	74b3      	strb	r3, [r6, #18]
 800940c:	74f3      	strb	r3, [r6, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800940e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009410:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8009412:	4413      	add	r3, r2
 8009414:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8009416:	4638      	mov	r0, r7
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800941c:	4b03      	ldr	r3, [pc, #12]	; (800942c <tcp_output_alloc_header+0x88>)
 800941e:	2272      	movs	r2, #114	; 0x72
 8009420:	4903      	ldr	r1, [pc, #12]	; (8009430 <tcp_output_alloc_header+0x8c>)
 8009422:	4804      	ldr	r0, [pc, #16]	; (8009434 <tcp_output_alloc_header+0x90>)
 8009424:	f009 fd70 	bl	8012f08 <printf>
 8009428:	e7d0      	b.n	80093cc <tcp_output_alloc_header+0x28>
 800942a:	bf00      	nop
 800942c:	0801b27c 	.word	0x0801b27c
 8009430:	0801b34c 	.word	0x0801b34c
 8009434:	0801a38c 	.word	0x0801a38c

08009438 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009438:	6843      	ldr	r3, [r0, #4]
 800943a:	89db      	ldrh	r3, [r3, #14]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d001      	beq.n	8009444 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009440:	2000      	movs	r0, #0
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 8009442:	4770      	bx	lr
{
 8009444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009446:	b085      	sub	sp, #20
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	4616      	mov	r6, r2
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800944e:	68c7      	ldr	r7, [r0, #12]
 8009450:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8009452:	f7fc fc24 	bl	8005c9e <lwip_htonl>
 8009456:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009458:	68e7      	ldr	r7, [r4, #12]
 800945a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800945c:	f7fc fc1c 	bl	8005c98 <lwip_htons>
 8009460:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009462:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009464:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8009466:	4413      	add	r3, r2
 8009468:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800946a:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800946c:	7aa3      	ldrb	r3, [r4, #10]
 800946e:	f013 0f01 	tst.w	r3, #1
 8009472:	d125      	bne.n	80094c0 <tcp_output_segment+0x88>
  if (pcb->rtime < 0) {
 8009474:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8009478:	2b00      	cmp	r3, #0
 800947a:	db2c      	blt.n	80094d6 <tcp_output_segment+0x9e>
  if (pcb->rttest == 0) {
 800947c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800947e:	2b00      	cmp	r3, #0
 8009480:	d02c      	beq.n	80094dc <tcp_output_segment+0xa4>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	6862      	ldr	r2, [r4, #4]
 8009486:	6851      	ldr	r1, [r2, #4]
 8009488:	1a5b      	subs	r3, r3, r1
 800948a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800948c:	8951      	ldrh	r1, [r2, #10]
 800948e:	1ac9      	subs	r1, r1, r3
 8009490:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8009492:	6861      	ldr	r1, [r4, #4]
 8009494:	890a      	ldrh	r2, [r1, #8]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800949a:	6862      	ldr	r2, [r4, #4]
 800949c:	68e3      	ldr	r3, [r4, #12]
 800949e:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 80094a0:	2200      	movs	r2, #0
 80094a2:	741a      	strb	r2, [r3, #16]
 80094a4:	745a      	strb	r2, [r3, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80094a6:	9602      	str	r6, [sp, #8]
 80094a8:	2306      	movs	r3, #6
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	7a6b      	ldrb	r3, [r5, #9]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	7aab      	ldrb	r3, [r5, #10]
 80094b2:	1d2a      	adds	r2, r5, #4
 80094b4:	4629      	mov	r1, r5
 80094b6:	6860      	ldr	r0, [r4, #4]
 80094b8:	f001 ff58 	bl	800b36c <ip4_output_if>
}
 80094bc:	b005      	add	sp, #20
 80094be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80094c0:	1d29      	adds	r1, r5, #4
 80094c2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80094c6:	f7fe fa73 	bl	80079b0 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80094ca:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80094ce:	f7fc fbe6 	bl	8005c9e <lwip_htonl>
 80094d2:	6178      	str	r0, [r7, #20]
    opts += 1;
 80094d4:	e7ce      	b.n	8009474 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	862b      	strh	r3, [r5, #48]	; 0x30
 80094da:	e7cf      	b.n	800947c <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 80094dc:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <tcp_output_segment+0xb8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80094e2:	68e3      	ldr	r3, [r4, #12]
 80094e4:	6858      	ldr	r0, [r3, #4]
 80094e6:	f7fc fbda 	bl	8005c9e <lwip_htonl>
 80094ea:	63a8      	str	r0, [r5, #56]	; 0x38
 80094ec:	e7c9      	b.n	8009482 <tcp_output_segment+0x4a>
 80094ee:	bf00      	nop
 80094f0:	20007a04 	.word	0x20007a04

080094f4 <tcp_write>:
{
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	b091      	sub	sp, #68	; 0x44
 80094fa:	4680      	mov	r8, r0
 80094fc:	9108      	str	r1, [sp, #32]
 80094fe:	4692      	mov	sl, r2
 8009500:	9307      	str	r3, [sp, #28]
  u16_t oversize = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009508:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800950c:	085b      	lsrs	r3, r3, #1
 800950e:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
 8009512:	455b      	cmp	r3, fp
 8009514:	bf28      	it	cs
 8009516:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 8009518:	b103      	cbz	r3, 800951c <tcp_write+0x28>
 800951a:	469b      	mov	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800951c:	9b08      	ldr	r3, [sp, #32]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 808a 	beq.w	8009638 <tcp_write+0x144>
  err = tcp_write_checks(pcb, len);
 8009524:	4651      	mov	r1, sl
 8009526:	4640      	mov	r0, r8
 8009528:	f7ff fe4e 	bl	80091c8 <tcp_write_checks>
  if (err != ERR_OK) {
 800952c:	900a      	str	r0, [sp, #40]	; 0x28
 800952e:	2800      	cmp	r0, #0
 8009530:	f040 818d 	bne.w	800984e <tcp_write+0x35a>
  queuelen = pcb->snd_queuelen;
 8009534:	f8b8 6062 	ldrh.w	r6, [r8, #98]	; 0x62
  if (pcb->unsent != NULL) {
 8009538:	f8d8 9068 	ldr.w	r9, [r8, #104]	; 0x68
 800953c:	f1b9 0f00 	cmp.w	r9, #0
 8009540:	f000 80cc 	beq.w	80096dc <tcp_write+0x1e8>
 8009544:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009546:	9309      	str	r3, [sp, #36]	; 0x24
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1fb      	bne.n	8009546 <tcp_write+0x52>
 800954e:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009552:	7a9c      	ldrb	r4, [r3, #10]
 8009554:	00a4      	lsls	r4, r4, #2
 8009556:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800955a:	891b      	ldrh	r3, [r3, #8]
 800955c:	4423      	add	r3, r4
 800955e:	459b      	cmp	fp, r3
 8009560:	db75      	blt.n	800964e <tcp_write+0x15a>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	441c      	add	r4, r3
 8009568:	b2a4      	uxth	r4, r4
 800956a:	ebab 0404 	sub.w	r4, fp, r4
 800956e:	b2a1      	uxth	r1, r4
 8009570:	910c      	str	r1, [sp, #48]	; 0x30
    oversize = pcb->unsent_oversize;
 8009572:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8009576:	930b      	str	r3, [sp, #44]	; 0x2c
 8009578:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800957c:	2b00      	cmp	r3, #0
 800957e:	d076      	beq.n	800966e <tcp_write+0x17a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009580:	428b      	cmp	r3, r1
 8009582:	d86c      	bhi.n	800965e <tcp_write+0x16a>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009584:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8009588:	461a      	mov	r2, r3
 800958a:	4553      	cmp	r3, sl
 800958c:	bf28      	it	cs
 800958e:	4652      	movcs	r2, sl
 8009590:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009592:	428a      	cmp	r2, r1
 8009594:	bf28      	it	cs
 8009596:	460a      	movcs	r2, r1
 8009598:	b292      	uxth	r2, r2
 800959a:	920b      	str	r2, [sp, #44]	; 0x2c
      oversize -= oversize_used;
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80095a2:	1a8b      	subs	r3, r1, r2
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	930c      	str	r3, [sp, #48]	; 0x30
      seg = last_unsent;
 80095a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80095aa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80095ae:	b113      	cbz	r3, 80095b6 <tcp_write+0xc2>
 80095b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b2:	4553      	cmp	r3, sl
 80095b4:	d15d      	bne.n	8009672 <tcp_write+0x17e>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80095b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095b8:	4552      	cmp	r2, sl
 80095ba:	f080 8156 	bcs.w	800986a <tcp_write+0x376>
 80095be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095c0:	2900      	cmp	r1, #0
 80095c2:	f000 815b 	beq.w	800987c <tcp_write+0x388>
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	891b      	ldrh	r3, [r3, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8158 	beq.w	8009880 <tcp_write+0x38c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80095d0:	ebaa 0402 	sub.w	r4, sl, r2
 80095d4:	428c      	cmp	r4, r1
 80095d6:	bfa8      	it	ge
 80095d8:	460c      	movge	r4, r1
 80095da:	b2a5      	uxth	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	f013 0f01 	tst.w	r3, #1
 80095e2:	d14e      	bne.n	8009682 <tcp_write+0x18e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80095ea:	464a      	mov	r2, r9
 80095ec:	4613      	mov	r3, r2
 80095ee:	6812      	ldr	r2, [r2, #0]
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	d1fb      	bne.n	80095ec <tcp_write+0xf8>
 80095f4:	4691      	mov	r9, r2
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80095f6:	7b1a      	ldrb	r2, [r3, #12]
 80095f8:	2a01      	cmp	r2, #1
 80095fa:	d105      	bne.n	8009608 <tcp_write+0x114>
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	895b      	ldrh	r3, [r3, #10]
 8009600:	4413      	add	r3, r2
 8009602:	9a08      	ldr	r2, [sp, #32]
 8009604:	4293      	cmp	r3, r2
 8009606:	d05c      	beq.n	80096c2 <tcp_write+0x1ce>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009608:	2201      	movs	r2, #1
 800960a:	4629      	mov	r1, r5
 800960c:	2004      	movs	r0, #4
 800960e:	f7fc ffdd 	bl	80065cc <pbuf_alloc>
 8009612:	4681      	mov	r9, r0
 8009614:	2800      	cmp	r0, #0
 8009616:	f000 81ef 	beq.w	80099f8 <tcp_write+0x504>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800961a:	9b08      	ldr	r3, [sp, #32]
 800961c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800961e:	4413      	add	r3, r2
 8009620:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 8009622:	f7fd f93b 	bl	800689c <pbuf_clen>
 8009626:	4406      	add	r6, r0
 8009628:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	930c      	str	r3, [sp, #48]	; 0x30
      pos += seglen;
 800962e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009630:	195c      	adds	r4, r3, r5
 8009632:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 8009634:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009636:	e11b      	b.n	8009870 <tcp_write+0x37c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009638:	4ba1      	ldr	r3, [pc, #644]	; (80098c0 <tcp_write+0x3cc>)
 800963a:	f240 1291 	movw	r2, #401	; 0x191
 800963e:	49a1      	ldr	r1, [pc, #644]	; (80098c4 <tcp_write+0x3d0>)
 8009640:	48a1      	ldr	r0, [pc, #644]	; (80098c8 <tcp_write+0x3d4>)
 8009642:	f009 fc61 	bl	8012f08 <printf>
 8009646:	f06f 030f 	mvn.w	r3, #15
 800964a:	930a      	str	r3, [sp, #40]	; 0x28
 800964c:	e0ff      	b.n	800984e <tcp_write+0x35a>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800964e:	4b9c      	ldr	r3, [pc, #624]	; (80098c0 <tcp_write+0x3cc>)
 8009650:	f240 12c7 	movw	r2, #455	; 0x1c7
 8009654:	499d      	ldr	r1, [pc, #628]	; (80098cc <tcp_write+0x3d8>)
 8009656:	489c      	ldr	r0, [pc, #624]	; (80098c8 <tcp_write+0x3d4>)
 8009658:	f009 fc56 	bl	8012f08 <printf>
 800965c:	e781      	b.n	8009562 <tcp_write+0x6e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800965e:	4b98      	ldr	r3, [pc, #608]	; (80098c0 <tcp_write+0x3cc>)
 8009660:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009664:	499a      	ldr	r1, [pc, #616]	; (80098d0 <tcp_write+0x3dc>)
 8009666:	4898      	ldr	r0, [pc, #608]	; (80098c8 <tcp_write+0x3d4>)
 8009668:	f009 fc4e 	bl	8012f08 <printf>
 800966c:	e78a      	b.n	8009584 <tcp_write+0x90>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800966e:	464f      	mov	r7, r9
 8009670:	e79b      	b.n	80095aa <tcp_write+0xb6>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009672:	4b93      	ldr	r3, [pc, #588]	; (80098c0 <tcp_write+0x3cc>)
 8009674:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009678:	4996      	ldr	r1, [pc, #600]	; (80098d4 <tcp_write+0x3e0>)
 800967a:	4893      	ldr	r0, [pc, #588]	; (80098c8 <tcp_write+0x3d4>)
 800967c:	f009 fc44 	bl	8012f08 <printf>
 8009680:	e799      	b.n	80095b6 <tcp_write+0xc2>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009682:	2301      	movs	r3, #1
 8009684:	9302      	str	r3, [sp, #8]
 8009686:	9b07      	ldr	r3, [sp, #28]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	f8cd 8000 	str.w	r8, [sp]
 800968e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009692:	460a      	mov	r2, r1
 8009694:	4629      	mov	r1, r5
 8009696:	2004      	movs	r0, #4
 8009698:	f7ff fde8 	bl	800926c <tcp_pbuf_prealloc>
 800969c:	4681      	mov	r9, r0
 800969e:	2800      	cmp	r0, #0
 80096a0:	f000 81a8 	beq.w	80099f4 <tcp_write+0x500>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80096a4:	462a      	mov	r2, r5
 80096a6:	9b08      	ldr	r3, [sp, #32]
 80096a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096aa:	1859      	adds	r1, r3, r1
 80096ac:	6840      	ldr	r0, [r0, #4]
 80096ae:	f009 fc09 	bl	8012ec4 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80096b2:	4648      	mov	r0, r9
 80096b4:	f7fd f8f2 	bl	800689c <pbuf_clen>
 80096b8:	4406      	add	r6, r0
 80096ba:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	930c      	str	r3, [sp, #48]	; 0x30
 80096c0:	e7b5      	b.n	800962e <tcp_write+0x13a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80096c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096c4:	b90b      	cbnz	r3, 80096ca <tcp_write+0x1d6>
          extendlen = seglen;
 80096c6:	950c      	str	r5, [sp, #48]	; 0x30
 80096c8:	e7b1      	b.n	800962e <tcp_write+0x13a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80096ca:	4b7d      	ldr	r3, [pc, #500]	; (80098c0 <tcp_write+0x3cc>)
 80096cc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80096d0:	4981      	ldr	r1, [pc, #516]	; (80098d8 <tcp_write+0x3e4>)
 80096d2:	487d      	ldr	r0, [pc, #500]	; (80098c8 <tcp_write+0x3d4>)
 80096d4:	f009 fc18 	bl	8012f08 <printf>
          extendlen = seglen;
 80096d8:	950c      	str	r5, [sp, #48]	; 0x30
 80096da:	e7a8      	b.n	800962e <tcp_write+0x13a>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80096dc:	f8b8 4064 	ldrh.w	r4, [r8, #100]	; 0x64
 80096e0:	b92c      	cbnz	r4, 80096ee <tcp_write+0x1fa>
  u16_t extendlen = 0;
 80096e2:	940c      	str	r4, [sp, #48]	; 0x30
  u16_t oversize_used = 0;
 80096e4:	940b      	str	r4, [sp, #44]	; 0x2c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80096e6:	464f      	mov	r7, r9
 80096e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80096ec:	e0c0      	b.n	8009870 <tcp_write+0x37c>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80096ee:	4b74      	ldr	r3, [pc, #464]	; (80098c0 <tcp_write+0x3cc>)
 80096f0:	f44f 7209 	mov.w	r2, #548	; 0x224
 80096f4:	4979      	ldr	r1, [pc, #484]	; (80098dc <tcp_write+0x3e8>)
 80096f6:	4874      	ldr	r0, [pc, #464]	; (80098c8 <tcp_write+0x3d4>)
 80096f8:	f009 fc06 	bl	8012f08 <printf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80096fc:	464f      	mov	r7, r9
 80096fe:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  u16_t extendlen = 0;
 8009702:	2400      	movs	r4, #0
 8009704:	940c      	str	r4, [sp, #48]	; 0x30
  u16_t oversize_used = 0;
 8009706:	940b      	str	r4, [sp, #44]	; 0x2c
 8009708:	e0b2      	b.n	8009870 <tcp_write+0x37c>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800970a:	9b06      	ldr	r3, [sp, #24]
 800970c:	fab3 f383 	clz	r3, r3
 8009710:	095b      	lsrs	r3, r3, #5
 8009712:	9302      	str	r3, [sp, #8]
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	f8cd 8000 	str.w	r8, [sp]
 800971c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009720:	465a      	mov	r2, fp
 8009722:	4629      	mov	r1, r5
 8009724:	2000      	movs	r0, #0
 8009726:	f7ff fda1 	bl	800926c <tcp_pbuf_prealloc>
 800972a:	4607      	mov	r7, r0
 800972c:	2800      	cmp	r0, #0
 800972e:	f000 8165 	beq.w	80099fc <tcp_write+0x508>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009732:	8943      	ldrh	r3, [r0, #10]
 8009734:	42ab      	cmp	r3, r5
 8009736:	d306      	bcc.n	8009746 <tcp_write+0x252>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009738:	462a      	mov	r2, r5
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	1919      	adds	r1, r3, r4
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f009 fbc0 	bl	8012ec4 <memcpy>
 8009744:	e025      	b.n	8009792 <tcp_write+0x29e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009746:	4b5e      	ldr	r3, [pc, #376]	; (80098c0 <tcp_write+0x3cc>)
 8009748:	f44f 7210 	mov.w	r2, #576	; 0x240
 800974c:	4964      	ldr	r1, [pc, #400]	; (80098e0 <tcp_write+0x3ec>)
 800974e:	485e      	ldr	r0, [pc, #376]	; (80098c8 <tcp_write+0x3d4>)
 8009750:	f009 fbda 	bl	8012f08 <printf>
 8009754:	e7f0      	b.n	8009738 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009756:	4b5a      	ldr	r3, [pc, #360]	; (80098c0 <tcp_write+0x3cc>)
 8009758:	f240 224b 	movw	r2, #587	; 0x24b
 800975c:	4961      	ldr	r1, [pc, #388]	; (80098e4 <tcp_write+0x3f0>)
 800975e:	485a      	ldr	r0, [pc, #360]	; (80098c8 <tcp_write+0x3d4>)
 8009760:	f009 fbd2 	bl	8012f08 <printf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009764:	2201      	movs	r2, #1
 8009766:	4629      	mov	r1, r5
 8009768:	2000      	movs	r0, #0
 800976a:	f7fc ff2f 	bl	80065cc <pbuf_alloc>
 800976e:	4681      	mov	r9, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	f000 8146 	beq.w	8009a02 <tcp_write+0x50e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009776:	9b08      	ldr	r3, [sp, #32]
 8009778:	4423      	add	r3, r4
 800977a:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800977c:	2200      	movs	r2, #0
 800977e:	4611      	mov	r1, r2
 8009780:	4610      	mov	r0, r2
 8009782:	f7fc ff23 	bl	80065cc <pbuf_alloc>
 8009786:	4607      	mov	r7, r0
 8009788:	2800      	cmp	r0, #0
 800978a:	d032      	beq.n	80097f2 <tcp_write+0x2fe>
      pbuf_cat(p/*header*/, p2/*data*/);
 800978c:	4649      	mov	r1, r9
 800978e:	f7fd f8a5 	bl	80068dc <pbuf_cat>
    queuelen += pbuf_clen(p);
 8009792:	4638      	mov	r0, r7
 8009794:	f7fd f882 	bl	800689c <pbuf_clen>
 8009798:	4406      	add	r6, r0
 800979a:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800979c:	2e09      	cmp	r6, #9
 800979e:	d82e      	bhi.n	80097fe <tcp_write+0x30a>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80097a0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 80097a4:	2200      	movs	r2, #0
 80097a6:	9200      	str	r2, [sp, #0]
 80097a8:	4423      	add	r3, r4
 80097aa:	4639      	mov	r1, r7
 80097ac:	4640      	mov	r0, r8
 80097ae:	f7ff fd9d 	bl	80092ec <tcp_create_segment>
 80097b2:	4607      	mov	r7, r0
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f000 8127 	beq.w	8009a08 <tcp_write+0x514>
    if (queue == NULL) {
 80097ba:	9b06      	ldr	r3, [sp, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d052      	beq.n	8009866 <tcp_write+0x372>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d047      	beq.n	8009856 <tcp_write+0x362>
      prev_seg->next = seg;
 80097c6:	9b05      	ldr	r3, [sp, #20]
 80097c8:	601f      	str	r7, [r3, #0]
    pos += seglen;
 80097ca:	442c      	add	r4, r5
 80097cc:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 80097ce:	9705      	str	r7, [sp, #20]
  while (pos < len) {
 80097d0:	4554      	cmp	r4, sl
 80097d2:	d258      	bcs.n	8009886 <tcp_write+0x392>
    u16_t left = len - pos;
 80097d4:	ebaa 0504 	sub.w	r5, sl, r4
 80097d8:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 80097da:	455d      	cmp	r5, fp
 80097dc:	bf28      	it	cs
 80097de:	465d      	movcs	r5, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80097e0:	9b07      	ldr	r3, [sp, #28]
 80097e2:	f013 0f01 	tst.w	r3, #1
 80097e6:	d190      	bne.n	800970a <tcp_write+0x216>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80097e8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0b9      	beq.n	8009764 <tcp_write+0x270>
 80097f0:	e7b1      	b.n	8009756 <tcp_write+0x262>
 80097f2:	4648      	mov	r0, r9
 80097f4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
        pbuf_free(p2);
 80097f8:	f7fc fe84 	bl	8006504 <pbuf_free>
        goto memerr;
 80097fc:	e004      	b.n	8009808 <tcp_write+0x314>
 80097fe:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
      pbuf_free(p);
 8009802:	4638      	mov	r0, r7
 8009804:	f7fc fe7e 	bl	8006504 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8009808:	f898 301a 	ldrb.w	r3, [r8, #26]
 800980c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009810:	f888 301a 	strb.w	r3, [r8, #26]
  if (concat_p != NULL) {
 8009814:	f1b9 0f00 	cmp.w	r9, #0
 8009818:	d002      	beq.n	8009820 <tcp_write+0x32c>
    pbuf_free(concat_p);
 800981a:	4648      	mov	r0, r9
 800981c:	f7fc fe72 	bl	8006504 <pbuf_free>
  if (queue != NULL) {
 8009820:	9b06      	ldr	r3, [sp, #24]
 8009822:	b113      	cbz	r3, 800982a <tcp_write+0x336>
    tcp_segs_free(queue);
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd fb00 	bl	8006e2a <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800982a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 80f8 	beq.w	8009a24 <tcp_write+0x530>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009834:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 80f7 	bne.w	8009a2c <tcp_write+0x538>
 800983e:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80e3 	beq.w	8009a0e <tcp_write+0x51a>
  return ERR_MEM;
 8009848:	f04f 33ff 	mov.w	r3, #4294967295
 800984c:	930a      	str	r3, [sp, #40]	; 0x28
}
 800984e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009850:	b011      	add	sp, #68	; 0x44
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009856:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <tcp_write+0x3cc>)
 8009858:	f240 2285 	movw	r2, #645	; 0x285
 800985c:	4922      	ldr	r1, [pc, #136]	; (80098e8 <tcp_write+0x3f4>)
 800985e:	481a      	ldr	r0, [pc, #104]	; (80098c8 <tcp_write+0x3d4>)
 8009860:	f009 fb52 	bl	8012f08 <printf>
 8009864:	e7af      	b.n	80097c6 <tcp_write+0x2d2>
      queue = seg;
 8009866:	9006      	str	r0, [sp, #24]
 8009868:	e7af      	b.n	80097ca <tcp_write+0x2d6>
 800986a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  u16_t extendlen = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	930c      	str	r3, [sp, #48]	; 0x30
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	9306      	str	r3, [sp, #24]
 8009874:	9305      	str	r3, [sp, #20]
 8009876:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800987a:	e7a9      	b.n	80097d0 <tcp_write+0x2dc>
 800987c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800987e:	e7f7      	b.n	8009870 <tcp_write+0x37c>
  u16_t extendlen = 0;
 8009880:	930c      	str	r3, [sp, #48]	; 0x30
 8009882:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009884:	e7f4      	b.n	8009870 <tcp_write+0x37c>
 8009886:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800988a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800988c:	2d00      	cmp	r5, #0
 800988e:	d032      	beq.n	80098f6 <tcp_write+0x402>
    for (p = last_unsent->p; p; p = p->next) {
 8009890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009892:	685c      	ldr	r4, [r3, #4]
 8009894:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009898:	e000      	b.n	800989c <tcp_write+0x3a8>
 800989a:	6824      	ldr	r4, [r4, #0]
 800989c:	b334      	cbz	r4, 80098ec <tcp_write+0x3f8>
      p->tot_len += oversize_used;
 800989e:	8923      	ldrh	r3, [r4, #8]
 80098a0:	442b      	add	r3, r5
 80098a2:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f7      	bne.n	800989a <tcp_write+0x3a6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80098aa:	6860      	ldr	r0, [r4, #4]
 80098ac:	8963      	ldrh	r3, [r4, #10]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4659      	mov	r1, fp
 80098b2:	4418      	add	r0, r3
 80098b4:	f009 fb06 	bl	8012ec4 <memcpy>
        p->len += oversize_used;
 80098b8:	8963      	ldrh	r3, [r4, #10]
 80098ba:	442b      	add	r3, r5
 80098bc:	8163      	strh	r3, [r4, #10]
 80098be:	e7ec      	b.n	800989a <tcp_write+0x3a6>
 80098c0:	0801b27c 	.word	0x0801b27c
 80098c4:	0801b37c 	.word	0x0801b37c
 80098c8:	0801a38c 	.word	0x0801a38c
 80098cc:	0801b3b0 	.word	0x0801b3b0
 80098d0:	0801b3c8 	.word	0x0801b3c8
 80098d4:	0801b3e8 	.word	0x0801b3e8
 80098d8:	0801b408 	.word	0x0801b408
 80098dc:	0801b434 	.word	0x0801b434
 80098e0:	0801b464 	.word	0x0801b464
 80098e4:	0801b4a4 	.word	0x0801b4a4
 80098e8:	0801b4b4 	.word	0x0801b4b4
    last_unsent->len += oversize_used;
 80098ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ee:	8913      	ldrh	r3, [r2, #8]
 80098f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098f2:	4419      	add	r1, r3
 80098f4:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 80098f6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80098fa:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
  if (concat_p != NULL) {
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	d041      	beq.n	8009988 <tcp_write+0x494>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	2b00      	cmp	r3, #0
 8009908:	d036      	beq.n	8009978 <tcp_write+0x484>
    pbuf_cat(last_unsent->p, concat_p);
 800990a:	4649      	mov	r1, r9
 800990c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800990e:	6860      	ldr	r0, [r4, #4]
 8009910:	f7fc ffe4 	bl	80068dc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009914:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8009918:	8922      	ldrh	r2, [r4, #8]
 800991a:	4413      	add	r3, r2
 800991c:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	d057      	beq.n	80099d4 <tcp_write+0x4e0>
    last_unsent->next = queue;
 8009924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009926:	461a      	mov	r2, r3
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 800992c:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 8009930:	4453      	add	r3, sl
 8009932:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
  pcb->snd_buf -= len;
 8009936:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 800993a:	eba3 0a0a 	sub.w	sl, r3, sl
 800993e:	f8a8 a060 	strh.w	sl, [r8, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8009942:	f8a8 6062 	strh.w	r6, [r8, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009946:	b11e      	cbz	r6, 8009950 <tcp_write+0x45c>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009948:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d045      	beq.n	80099dc <tcp_write+0x4e8>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8009950:	2f00      	cmp	r7, #0
 8009952:	f43f af7c 	beq.w	800984e <tcp_write+0x35a>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f43f af78 	beq.w	800984e <tcp_write+0x35a>
 800995e:	9a07      	ldr	r2, [sp, #28]
 8009960:	f012 0f02 	tst.w	r2, #2
 8009964:	f47f af73 	bne.w	800984e <tcp_write+0x35a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009968:	899c      	ldrh	r4, [r3, #12]
 800996a:	2008      	movs	r0, #8
 800996c:	f7fc f994 	bl	8005c98 <lwip_htons>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4304      	orrs	r4, r0
 8009974:	819c      	strh	r4, [r3, #12]
 8009976:	e76a      	b.n	800984e <tcp_write+0x35a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009978:	4b2e      	ldr	r3, [pc, #184]	; (8009a34 <tcp_write+0x540>)
 800997a:	f240 22ba 	movw	r2, #698	; 0x2ba
 800997e:	492e      	ldr	r1, [pc, #184]	; (8009a38 <tcp_write+0x544>)
 8009980:	482e      	ldr	r0, [pc, #184]	; (8009a3c <tcp_write+0x548>)
 8009982:	f009 fac1 	bl	8012f08 <printf>
 8009986:	e7c0      	b.n	800990a <tcp_write+0x416>
  } else if (extendlen > 0) {
 8009988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0c7      	beq.n	800991e <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	b12b      	cbz	r3, 800999e <tcp_write+0x4aa>
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	b11b      	cbz	r3, 800999e <tcp_write+0x4aa>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800999c:	e00b      	b.n	80099b6 <tcp_write+0x4c2>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800999e:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <tcp_write+0x540>)
 80099a0:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80099a4:	4926      	ldr	r1, [pc, #152]	; (8009a40 <tcp_write+0x54c>)
 80099a6:	4825      	ldr	r0, [pc, #148]	; (8009a3c <tcp_write+0x548>)
 80099a8:	f009 faae 	bl	8012f08 <printf>
 80099ac:	e7f3      	b.n	8009996 <tcp_write+0x4a2>
      p->tot_len += extendlen;
 80099ae:	891a      	ldrh	r2, [r3, #8]
 80099b0:	4402      	add	r2, r0
 80099b2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80099b4:	460b      	mov	r3, r1
 80099b6:	6819      	ldr	r1, [r3, #0]
 80099b8:	2900      	cmp	r1, #0
 80099ba:	d1f8      	bne.n	80099ae <tcp_write+0x4ba>
    p->tot_len += extendlen;
 80099bc:	891a      	ldrh	r2, [r3, #8]
 80099be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099c0:	440a      	add	r2, r1
 80099c2:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80099c4:	895a      	ldrh	r2, [r3, #10]
 80099c6:	440a      	add	r2, r1
 80099c8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80099ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099cc:	8913      	ldrh	r3, [r2, #8]
 80099ce:	440b      	add	r3, r1
 80099d0:	8113      	strh	r3, [r2, #8]
 80099d2:	e7a4      	b.n	800991e <tcp_write+0x42a>
    pcb->unsent = queue;
 80099d4:	9b06      	ldr	r3, [sp, #24]
 80099d6:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
 80099da:	e7a7      	b.n	800992c <tcp_write+0x438>
    LWIP_ASSERT("tcp_write: valid queue length",
 80099dc:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1b5      	bne.n	8009950 <tcp_write+0x45c>
 80099e4:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <tcp_write+0x540>)
 80099e6:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 80099ea:	4916      	ldr	r1, [pc, #88]	; (8009a44 <tcp_write+0x550>)
 80099ec:	4813      	ldr	r0, [pc, #76]	; (8009a3c <tcp_write+0x548>)
 80099ee:	f009 fa8b 	bl	8012f08 <printf>
 80099f2:	e7ad      	b.n	8009950 <tcp_write+0x45c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80099f4:	9006      	str	r0, [sp, #24]
 80099f6:	e707      	b.n	8009808 <tcp_write+0x314>
 80099f8:	9006      	str	r0, [sp, #24]
 80099fa:	e705      	b.n	8009808 <tcp_write+0x314>
 80099fc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009a00:	e702      	b.n	8009808 <tcp_write+0x314>
 8009a02:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009a06:	e6ff      	b.n	8009808 <tcp_write+0x314>
 8009a08:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009a0c:	e6fc      	b.n	8009808 <tcp_write+0x314>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009a0e:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <tcp_write+0x540>)
 8009a10:	f240 3201 	movw	r2, #769	; 0x301
 8009a14:	490b      	ldr	r1, [pc, #44]	; (8009a44 <tcp_write+0x550>)
 8009a16:	4809      	ldr	r0, [pc, #36]	; (8009a3c <tcp_write+0x548>)
 8009a18:	f009 fa76 	bl	8012f08 <printf>
  return ERR_MEM;
 8009a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a20:	930a      	str	r3, [sp, #40]	; 0x28
 8009a22:	e714      	b.n	800984e <tcp_write+0x35a>
 8009a24:	f04f 33ff 	mov.w	r3, #4294967295
 8009a28:	930a      	str	r3, [sp, #40]	; 0x28
 8009a2a:	e710      	b.n	800984e <tcp_write+0x35a>
 8009a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a30:	930a      	str	r3, [sp, #40]	; 0x28
 8009a32:	e70c      	b.n	800984e <tcp_write+0x35a>
 8009a34:	0801b27c 	.word	0x0801b27c
 8009a38:	0801b4c8 	.word	0x0801b4c8
 8009a3c:	0801a38c 	.word	0x0801a38c
 8009a40:	0801b500 	.word	0x0801b500
 8009a44:	0801b538 	.word	0x0801b538

08009a48 <tcp_enqueue_flags>:
{
 8009a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009a52:	f011 0703 	ands.w	r7, r1, #3
 8009a56:	d052      	beq.n	8009afe <tcp_enqueue_flags+0xb6>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009a58:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d902      	bls.n	8009a66 <tcp_enqueue_flags+0x1e>
 8009a60:	f015 0f01 	tst.w	r5, #1
 8009a64:	d053      	beq.n	8009b0e <tcp_enqueue_flags+0xc6>
  if (flags & TCP_SYN) {
 8009a66:	f015 0802 	ands.w	r8, r5, #2
 8009a6a:	d001      	beq.n	8009a70 <tcp_enqueue_flags+0x28>
    optflags = TF_SEG_OPTS_MSS;
 8009a6c:	f04f 0801 	mov.w	r8, #1
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009a70:	ea4f 0688 	mov.w	r6, r8, lsl #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a74:	f006 0604 	and.w	r6, r6, #4
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fc fda5 	bl	80065cc <pbuf_alloc>
 8009a82:	4681      	mov	r9, r0
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d049      	beq.n	8009b1c <tcp_enqueue_flags+0xd4>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009a88:	8943      	ldrh	r3, [r0, #10]
 8009a8a:	429e      	cmp	r6, r3
 8009a8c:	d84d      	bhi.n	8009b2a <tcp_enqueue_flags+0xe2>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009a8e:	f8cd 8000 	str.w	r8, [sp]
 8009a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a94:	462a      	mov	r2, r5
 8009a96:	4649      	mov	r1, r9
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f7ff fc27 	bl	80092ec <tcp_create_segment>
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d04a      	beq.n	8009b3a <tcp_enqueue_flags+0xf2>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009aa4:	68c3      	ldr	r3, [r0, #12]
 8009aa6:	f013 0f03 	tst.w	r3, #3
 8009aaa:	d14d      	bne.n	8009b48 <tcp_enqueue_flags+0x100>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009aac:	8933      	ldrh	r3, [r6, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d152      	bne.n	8009b58 <tcp_enqueue_flags+0x110>
  if (pcb->unsent == NULL) {
 8009ab2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d057      	beq.n	8009b68 <tcp_enqueue_flags+0x120>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009ab8:	461a      	mov	r2, r3
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1fb      	bne.n	8009ab8 <tcp_enqueue_flags+0x70>
    useg->next = seg;
 8009ac0:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009ac8:	b117      	cbz	r7, 8009ad0 <tcp_enqueue_flags+0x88>
    pcb->snd_lbb++;
 8009aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009acc:	3301      	adds	r3, #1
 8009ace:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8009ad0:	f015 0f01 	tst.w	r5, #1
 8009ad4:	d003      	beq.n	8009ade <tcp_enqueue_flags+0x96>
    pcb->flags |= TF_FIN;
 8009ad6:	7ea3      	ldrb	r3, [r4, #26]
 8009ad8:	f043 0320 	orr.w	r3, r3, #32
 8009adc:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ade:	6870      	ldr	r0, [r6, #4]
 8009ae0:	f7fc fedc 	bl	800689c <pbuf_clen>
 8009ae4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009ae8:	4418      	add	r0, r3
 8009aea:	b280      	uxth	r0, r0
 8009aec:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d048      	beq.n	8009b86 <tcp_enqueue_flags+0x13e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009af4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d038      	beq.n	8009b6c <tcp_enqueue_flags+0x124>
  return ERR_OK;
 8009afa:	2000      	movs	r0, #0
 8009afc:	e044      	b.n	8009b88 <tcp_enqueue_flags+0x140>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <tcp_enqueue_flags+0x148>)
 8009b00:	f240 321a 	movw	r2, #794	; 0x31a
 8009b04:	4923      	ldr	r1, [pc, #140]	; (8009b94 <tcp_enqueue_flags+0x14c>)
 8009b06:	4824      	ldr	r0, [pc, #144]	; (8009b98 <tcp_enqueue_flags+0x150>)
 8009b08:	f009 f9fe 	bl	8012f08 <printf>
 8009b0c:	e7a4      	b.n	8009a58 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 8009b0e:	7ea3      	ldrb	r3, [r4, #26]
 8009b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b14:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1a:	e035      	b.n	8009b88 <tcp_enqueue_flags+0x140>
    pcb->flags |= TF_NAGLEMEMERR;
 8009b1c:	7ea3      	ldrb	r3, [r4, #26]
 8009b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b22:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	e02e      	b.n	8009b88 <tcp_enqueue_flags+0x140>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009b2a:	4b19      	ldr	r3, [pc, #100]	; (8009b90 <tcp_enqueue_flags+0x148>)
 8009b2c:	f44f 7250 	mov.w	r2, #832	; 0x340
 8009b30:	491a      	ldr	r1, [pc, #104]	; (8009b9c <tcp_enqueue_flags+0x154>)
 8009b32:	4819      	ldr	r0, [pc, #100]	; (8009b98 <tcp_enqueue_flags+0x150>)
 8009b34:	f009 f9e8 	bl	8012f08 <printf>
 8009b38:	e7a9      	b.n	8009a8e <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 8009b3a:	7ea3      	ldrb	r3, [r4, #26]
 8009b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b40:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 8009b42:	f04f 30ff 	mov.w	r0, #4294967295
 8009b46:	e01f      	b.n	8009b88 <tcp_enqueue_flags+0x140>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009b48:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <tcp_enqueue_flags+0x148>)
 8009b4a:	f240 3249 	movw	r2, #841	; 0x349
 8009b4e:	4914      	ldr	r1, [pc, #80]	; (8009ba0 <tcp_enqueue_flags+0x158>)
 8009b50:	4811      	ldr	r0, [pc, #68]	; (8009b98 <tcp_enqueue_flags+0x150>)
 8009b52:	f009 f9d9 	bl	8012f08 <printf>
 8009b56:	e7a9      	b.n	8009aac <tcp_enqueue_flags+0x64>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009b58:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <tcp_enqueue_flags+0x148>)
 8009b5a:	f240 324a 	movw	r2, #842	; 0x34a
 8009b5e:	4911      	ldr	r1, [pc, #68]	; (8009ba4 <tcp_enqueue_flags+0x15c>)
 8009b60:	480d      	ldr	r0, [pc, #52]	; (8009b98 <tcp_enqueue_flags+0x150>)
 8009b62:	f009 f9d1 	bl	8012f08 <printf>
 8009b66:	e7a4      	b.n	8009ab2 <tcp_enqueue_flags+0x6a>
    pcb->unsent = seg;
 8009b68:	66a6      	str	r6, [r4, #104]	; 0x68
 8009b6a:	e7aa      	b.n	8009ac2 <tcp_enqueue_flags+0x7a>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009b6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009b6e:	b10b      	cbz	r3, 8009b74 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 8009b70:	2000      	movs	r0, #0
 8009b72:	e009      	b.n	8009b88 <tcp_enqueue_flags+0x140>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009b74:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <tcp_enqueue_flags+0x148>)
 8009b76:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009b7a:	490b      	ldr	r1, [pc, #44]	; (8009ba8 <tcp_enqueue_flags+0x160>)
 8009b7c:	4806      	ldr	r0, [pc, #24]	; (8009b98 <tcp_enqueue_flags+0x150>)
 8009b7e:	f009 f9c3 	bl	8012f08 <printf>
  return ERR_OK;
 8009b82:	2000      	movs	r0, #0
 8009b84:	e000      	b.n	8009b88 <tcp_enqueue_flags+0x140>
 8009b86:	2000      	movs	r0, #0
}
 8009b88:	b003      	add	sp, #12
 8009b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	bf00      	nop
 8009b90:	0801b27c 	.word	0x0801b27c
 8009b94:	0801b558 	.word	0x0801b558
 8009b98:	0801a38c 	.word	0x0801a38c
 8009b9c:	0801b5b0 	.word	0x0801b5b0
 8009ba0:	0801b5ec 	.word	0x0801b5ec
 8009ba4:	0801b604 	.word	0x0801b604
 8009ba8:	0801b630 	.word	0x0801b630

08009bac <tcp_send_fin>:
{
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8009bb0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009bb2:	b153      	cbz	r3, 8009bca <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1fb      	bne.n	8009bb4 <tcp_send_fin+0x8>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009bbc:	68e3      	ldr	r3, [r4, #12]
 8009bbe:	8998      	ldrh	r0, [r3, #12]
 8009bc0:	f7fc f86a 	bl	8005c98 <lwip_htons>
 8009bc4:	f010 0f07 	tst.w	r0, #7
 8009bc8:	d004      	beq.n	8009bd4 <tcp_send_fin+0x28>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f7ff ff3b 	bl	8009a48 <tcp_enqueue_flags>
}
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009bd4:	68e3      	ldr	r3, [r4, #12]
 8009bd6:	899e      	ldrh	r6, [r3, #12]
 8009bd8:	2001      	movs	r0, #1
 8009bda:	f7fc f85d 	bl	8005c98 <lwip_htons>
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	4306      	orrs	r6, r0
 8009be2:	819e      	strh	r6, [r3, #12]
      pcb->flags |= TF_FIN;
 8009be4:	7eab      	ldrb	r3, [r5, #26]
 8009be6:	f043 0320 	orr.w	r3, r3, #32
 8009bea:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 8009bec:	2000      	movs	r0, #0
 8009bee:	e7f0      	b.n	8009bd2 <tcp_send_fin+0x26>

08009bf0 <tcp_send_empty_ack>:
{
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009bf6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009bf8:	f7fc f851 	bl	8005c9e <lwip_htonl>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4611      	mov	r1, r2
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff fbce 	bl	80093a4 <tcp_output_alloc_header>
  if (p == NULL) {
 8009c08:	b1e0      	cbz	r0, 8009c44 <tcp_send_empty_ack+0x54>
 8009c0a:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009c0c:	1d25      	adds	r5, r4, #4
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f001 fa24 	bl	800b05c <ip4_route>
  if (netif == NULL) {
 8009c14:	b1e8      	cbz	r0, 8009c52 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009c16:	9002      	str	r0, [sp, #8]
 8009c18:	2306      	movs	r3, #6
 8009c1a:	9301      	str	r3, [sp, #4]
 8009c1c:	7a63      	ldrb	r3, [r4, #9]
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	7aa3      	ldrb	r3, [r4, #10]
 8009c22:	462a      	mov	r2, r5
 8009c24:	4621      	mov	r1, r4
 8009c26:	4630      	mov	r0, r6
 8009c28:	f001 fba0 	bl	800b36c <ip4_output_if>
 8009c2c:	4605      	mov	r5, r0
  pbuf_free(p);
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7fc fc68 	bl	8006504 <pbuf_free>
  if (err != ERR_OK) {
 8009c34:	b185      	cbz	r5, 8009c58 <tcp_send_empty_ack+0x68>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009c36:	7ea3      	ldrb	r3, [r4, #26]
 8009c38:	f043 0303 	orr.w	r3, r3, #3
 8009c3c:	76a3      	strb	r3, [r4, #26]
}
 8009c3e:	4628      	mov	r0, r5
 8009c40:	b004      	add	sp, #16
 8009c42:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009c44:	7ea3      	ldrb	r3, [r4, #26]
 8009c46:	f043 0303 	orr.w	r3, r3, #3
 8009c4a:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 8009c4c:	f06f 0501 	mvn.w	r5, #1
 8009c50:	e7f5      	b.n	8009c3e <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 8009c52:	f06f 0503 	mvn.w	r5, #3
 8009c56:	e7ea      	b.n	8009c2e <tcp_send_empty_ack+0x3e>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009c58:	7ea3      	ldrb	r3, [r4, #26]
 8009c5a:	f023 0303 	bic.w	r3, r3, #3
 8009c5e:	76a3      	strb	r3, [r4, #26]
 8009c60:	e7ed      	b.n	8009c3e <tcp_send_empty_ack+0x4e>
	...

08009c64 <tcp_output>:
{
 8009c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009c6a:	7d03      	ldrb	r3, [r0, #20]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d054      	beq.n	8009d1a <tcp_output+0xb6>
  if (tcp_input_pcb == pcb) {
 8009c70:	4b9b      	ldr	r3, [pc, #620]	; (8009ee0 <tcp_output+0x27c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	f000 812b 	beq.w	8009ed0 <tcp_output+0x26c>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009c7a:	f8b5 9048 	ldrh.w	r9, [r5, #72]	; 0x48
 8009c7e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8009c82:	4599      	cmp	r9, r3
 8009c84:	bf28      	it	cs
 8009c86:	4699      	movcs	r9, r3
 8009c88:	46c8      	mov	r8, r9
  seg = pcb->unsent;
 8009c8a:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 8009c8c:	7eab      	ldrb	r3, [r5, #26]
 8009c8e:	f013 0f02 	tst.w	r3, #2
 8009c92:	d00b      	beq.n	8009cac <tcp_output+0x48>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d048      	beq.n	8009d2a <tcp_output+0xc6>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009c98:	68e3      	ldr	r3, [r4, #12]
 8009c9a:	6858      	ldr	r0, [r3, #4]
 8009c9c:	f7fb ffff 	bl	8005c9e <lwip_htonl>
 8009ca0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009ca2:	1ac3      	subs	r3, r0, r3
 8009ca4:	8922      	ldrh	r2, [r4, #8]
 8009ca6:	4413      	add	r3, r2
     (seg == NULL ||
 8009ca8:	454b      	cmp	r3, r9
 8009caa:	d83e      	bhi.n	8009d2a <tcp_output+0xc6>
  useg = pcb->unacked;
 8009cac:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (useg != NULL) {
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d040      	beq.n	8009d34 <tcp_output+0xd0>
    for (; useg->next != NULL; useg = useg->next);
 8009cb2:	461e      	mov	r6, r3
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1fb      	bne.n	8009cb2 <tcp_output+0x4e>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009cba:	1d28      	adds	r0, r5, #4
 8009cbc:	f001 f9ce 	bl	800b05c <ip4_route>
  if (netif == NULL) {
 8009cc0:	4607      	mov	r7, r0
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f000 8106 	beq.w	8009ed4 <tcp_output+0x270>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009cc8:	b10d      	cbz	r5, 8009cce <tcp_output+0x6a>
 8009cca:	682b      	ldr	r3, [r5, #0]
 8009ccc:	b92b      	cbnz	r3, 8009cda <tcp_output+0x76>
    if (local_ip == NULL) {
 8009cce:	f117 0f04 	cmn.w	r7, #4
 8009cd2:	f000 8102 	beq.w	8009eda <tcp_output+0x276>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	f000 8089 	beq.w	8009df2 <tcp_output+0x18e>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009ce0:	68e3      	ldr	r3, [r4, #12]
 8009ce2:	6858      	ldr	r0, [r3, #4]
 8009ce4:	f7fb ffdb 	bl	8005c9e <lwip_htonl>
 8009ce8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009cea:	1ac3      	subs	r3, r0, r3
 8009cec:	8922      	ldrh	r2, [r4, #8]
 8009cee:	4413      	add	r3, r2
  if (seg != NULL &&
 8009cf0:	454b      	cmp	r3, r9
 8009cf2:	d97e      	bls.n	8009df2 <tcp_output+0x18e>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009cf4:	f1b9 0f00 	cmp.w	r9, #0
 8009cf8:	d07b      	beq.n	8009df2 <tcp_output+0x18e>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009cfa:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8009cfe:	4599      	cmp	r9, r3
 8009d00:	d177      	bne.n	8009df2 <tcp_output+0x18e>
 8009d02:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d174      	bne.n	8009df2 <tcp_output+0x18e>
    if (pcb->persist_backoff == 0) {
 8009d08:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 8009d0c:	bb5b      	cbnz	r3, 8009d66 <tcp_output+0x102>
      pcb->persist_cnt = 0;
 8009d0e:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
    goto output_done;
 8009d18:	e025      	b.n	8009d66 <tcp_output+0x102>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009d1a:	4b72      	ldr	r3, [pc, #456]	; (8009ee4 <tcp_output+0x280>)
 8009d1c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009d20:	4971      	ldr	r1, [pc, #452]	; (8009ee8 <tcp_output+0x284>)
 8009d22:	4872      	ldr	r0, [pc, #456]	; (8009eec <tcp_output+0x288>)
 8009d24:	f009 f8f0 	bl	8012f08 <printf>
 8009d28:	e7a2      	b.n	8009c70 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f7ff ff60 	bl	8009bf0 <tcp_send_empty_ack>
 8009d30:	4603      	mov	r3, r0
 8009d32:	e021      	b.n	8009d78 <tcp_output+0x114>
  useg = pcb->unacked;
 8009d34:	461e      	mov	r6, r3
 8009d36:	e7c0      	b.n	8009cba <tcp_output+0x56>
    LWIP_ASSERT("RST not expected here!",
 8009d38:	4b6a      	ldr	r3, [pc, #424]	; (8009ee4 <tcp_output+0x280>)
 8009d3a:	f240 4245 	movw	r2, #1093	; 0x445
 8009d3e:	496c      	ldr	r1, [pc, #432]	; (8009ef0 <tcp_output+0x28c>)
 8009d40:	486a      	ldr	r0, [pc, #424]	; (8009eec <tcp_output+0x288>)
 8009d42:	f009 f8e1 	bl	8012f08 <printf>
 8009d46:	e067      	b.n	8009e18 <tcp_output+0x1b4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009d48:	8911      	ldrh	r1, [r2, #8]
 8009d4a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8009d4c:	4291      	cmp	r1, r2
 8009d4e:	d26f      	bcs.n	8009e30 <tcp_output+0x1cc>
 8009d50:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	d06b      	beq.n	8009e30 <tcp_output+0x1cc>
 8009d58:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 8009d5c:	2a08      	cmp	r2, #8
 8009d5e:	d867      	bhi.n	8009e30 <tcp_output+0x1cc>
 8009d60:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8009d64:	d164      	bne.n	8009e30 <tcp_output+0x1cc>
  if (pcb->unsent == NULL) {
 8009d66:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80ae 	beq.w	8009eca <tcp_output+0x266>
  pcb->flags &= ~TF_NAGLEMEMERR;
 8009d6e:	7eab      	ldrb	r3, [r5, #26]
 8009d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d74:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8009d84:	2010      	movs	r0, #16
 8009d86:	f7fb ff87 	bl	8005c98 <lwip_htons>
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	ea49 0900 	orr.w	r9, r9, r0
 8009d90:	f8a3 900c 	strh.w	r9, [r3, #12]
 8009d94:	e04f      	b.n	8009e36 <tcp_output+0x1d2>
      pcb->flags |= TF_NAGLEMEMERR;
 8009d96:	7eaa      	ldrb	r2, [r5, #26]
 8009d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d9c:	76aa      	strb	r2, [r5, #26]
      return err;
 8009d9e:	e7eb      	b.n	8009d78 <tcp_output+0x114>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009da0:	2000      	movs	r0, #0
 8009da2:	e068      	b.n	8009e76 <tcp_output+0x212>
      pcb->snd_nxt = snd_nxt;
 8009da4:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009da6:	e06c      	b.n	8009e82 <tcp_output+0x21e>
    if (TCP_TCPLEN(seg) > 0) {
 8009da8:	2300      	movs	r3, #0
 8009daa:	e074      	b.n	8009e96 <tcp_output+0x232>
        pcb->unacked = seg;
 8009dac:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 8009dae:	4626      	mov	r6, r4
 8009db0:	e01e      	b.n	8009df0 <tcp_output+0x18c>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009db2:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 8009db6:	f8da 3000 	ldr.w	r3, [sl]
 8009dba:	b183      	cbz	r3, 8009dde <tcp_output+0x17a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	6858      	ldr	r0, [r3, #4]
 8009dc0:	f7fb ff6d 	bl	8005c9e <lwip_htonl>
 8009dc4:	4681      	mov	r9, r0
 8009dc6:	68e3      	ldr	r3, [r4, #12]
 8009dc8:	6858      	ldr	r0, [r3, #4]
 8009dca:	f7fb ff68 	bl	8005c9e <lwip_htonl>
 8009dce:	eba9 0900 	sub.w	r9, r9, r0
          while (*cur_seg &&
 8009dd2:	f1b9 0f00 	cmp.w	r9, #0
 8009dd6:	da02      	bge.n	8009dde <tcp_output+0x17a>
              cur_seg = &((*cur_seg)->next );
 8009dd8:	f8da a000 	ldr.w	sl, [sl]
 8009ddc:	e7eb      	b.n	8009db6 <tcp_output+0x152>
          seg->next = (*cur_seg);
 8009dde:	f8da 3000 	ldr.w	r3, [sl]
 8009de2:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 8009de4:	f8ca 4000 	str.w	r4, [sl]
 8009de8:	e002      	b.n	8009df0 <tcp_output+0x18c>
      tcp_seg_free(seg);
 8009dea:	4620      	mov	r0, r4
 8009dec:	f7fd f810 	bl	8006e10 <tcp_seg_free>
    seg = pcb->unsent;
 8009df0:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	d0b7      	beq.n	8009d66 <tcp_output+0x102>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009df6:	68e3      	ldr	r3, [r4, #12]
 8009df8:	6858      	ldr	r0, [r3, #4]
 8009dfa:	f7fb ff50 	bl	8005c9e <lwip_htonl>
 8009dfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009e00:	1ac0      	subs	r0, r0, r3
 8009e02:	8923      	ldrh	r3, [r4, #8]
 8009e04:	4418      	add	r0, r3
  while (seg != NULL &&
 8009e06:	4540      	cmp	r0, r8
 8009e08:	d8ad      	bhi.n	8009d66 <tcp_output+0x102>
    LWIP_ASSERT("RST not expected here!",
 8009e0a:	68e3      	ldr	r3, [r4, #12]
 8009e0c:	8998      	ldrh	r0, [r3, #12]
 8009e0e:	f7fb ff43 	bl	8005c98 <lwip_htons>
 8009e12:	f010 0f04 	tst.w	r0, #4
 8009e16:	d18f      	bne.n	8009d38 <tcp_output+0xd4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009e18:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009e1a:	b14b      	cbz	r3, 8009e30 <tcp_output+0x1cc>
 8009e1c:	7eab      	ldrb	r3, [r5, #26]
 8009e1e:	f013 0f44 	tst.w	r3, #68	; 0x44
 8009e22:	d105      	bne.n	8009e30 <tcp_output+0x1cc>
 8009e24:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8009e26:	2a00      	cmp	r2, #0
 8009e28:	d092      	beq.n	8009d50 <tcp_output+0xec>
 8009e2a:	6811      	ldr	r1, [r2, #0]
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	d08b      	beq.n	8009d48 <tcp_output+0xe4>
    if (pcb->state != SYN_SENT) {
 8009e30:	7d2b      	ldrb	r3, [r5, #20]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d1a3      	bne.n	8009d7e <tcp_output+0x11a>
    err = tcp_output_segment(seg, pcb, netif);
 8009e36:	463a      	mov	r2, r7
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7ff fafc 	bl	8009438 <tcp_output_segment>
    if (err != ERR_OK) {
 8009e40:	4603      	mov	r3, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d1a7      	bne.n	8009d96 <tcp_output+0x132>
    pcb->unsent = seg->next;
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009e4a:	7d2b      	ldrb	r3, [r5, #20]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d003      	beq.n	8009e58 <tcp_output+0x1f4>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009e50:	7eab      	ldrb	r3, [r5, #26]
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009e58:	68e3      	ldr	r3, [r4, #12]
 8009e5a:	6858      	ldr	r0, [r3, #4]
 8009e5c:	f7fb ff1f 	bl	8005c9e <lwip_htonl>
 8009e60:	4681      	mov	r9, r0
 8009e62:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 8009e66:	68e3      	ldr	r3, [r4, #12]
 8009e68:	8998      	ldrh	r0, [r3, #12]
 8009e6a:	f7fb ff15 	bl	8005c98 <lwip_htons>
 8009e6e:	f010 0f03 	tst.w	r0, #3
 8009e72:	d095      	beq.n	8009da0 <tcp_output+0x13c>
 8009e74:	2001      	movs	r0, #1
 8009e76:	4450      	add	r0, sl
 8009e78:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009e7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009e7c:	1a1b      	subs	r3, r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	db90      	blt.n	8009da4 <tcp_output+0x140>
    if (TCP_TCPLEN(seg) > 0) {
 8009e82:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 8009e86:	68e3      	ldr	r3, [r4, #12]
 8009e88:	8998      	ldrh	r0, [r3, #12]
 8009e8a:	f7fb ff05 	bl	8005c98 <lwip_htons>
 8009e8e:	f010 0f03 	tst.w	r0, #3
 8009e92:	d089      	beq.n	8009da8 <tcp_output+0x144>
 8009e94:	2301      	movs	r3, #1
 8009e96:	eb19 0f03 	cmn.w	r9, r3
 8009e9a:	d0a6      	beq.n	8009dea <tcp_output+0x186>
      seg->next = NULL;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 8009ea0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d082      	beq.n	8009dac <tcp_output+0x148>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009ea6:	68e3      	ldr	r3, [r4, #12]
 8009ea8:	6858      	ldr	r0, [r3, #4]
 8009eaa:	f7fb fef8 	bl	8005c9e <lwip_htonl>
 8009eae:	4681      	mov	r9, r0
 8009eb0:	68f3      	ldr	r3, [r6, #12]
 8009eb2:	6858      	ldr	r0, [r3, #4]
 8009eb4:	f7fb fef3 	bl	8005c9e <lwip_htonl>
 8009eb8:	eba9 0900 	sub.w	r9, r9, r0
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	f6ff af77 	blt.w	8009db2 <tcp_output+0x14e>
          useg->next = seg;
 8009ec4:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 8009ec6:	4626      	mov	r6, r4
 8009ec8:	e792      	b.n	8009df0 <tcp_output+0x18c>
    pcb->unsent_oversize = 0;
 8009eca:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8009ece:	e74e      	b.n	8009d6e <tcp_output+0x10a>
    return ERR_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e751      	b.n	8009d78 <tcp_output+0x114>
    return ERR_RTE;
 8009ed4:	f06f 0303 	mvn.w	r3, #3
 8009ed8:	e74e      	b.n	8009d78 <tcp_output+0x114>
      return ERR_RTE;
 8009eda:	f06f 0303 	mvn.w	r3, #3
 8009ede:	e74b      	b.n	8009d78 <tcp_output+0x114>
 8009ee0:	20007a14 	.word	0x20007a14
 8009ee4:	0801b27c 	.word	0x0801b27c
 8009ee8:	0801b658 	.word	0x0801b658
 8009eec:	0801a38c 	.word	0x0801a38c
 8009ef0:	0801b680 	.word	0x0801b680

08009ef4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	4680      	mov	r8, r0
 8009efc:	460f      	mov	r7, r1
 8009efe:	4691      	mov	r9, r2
 8009f00:	461d      	mov	r5, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009f02:	2200      	movs	r2, #0
 8009f04:	2114      	movs	r1, #20
 8009f06:	2001      	movs	r0, #1
 8009f08:	f7fc fb60 	bl	80065cc <pbuf_alloc>
  if (p == NULL) {
 8009f0c:	b3b0      	cbz	r0, 8009f7c <tcp_rst+0x88>
 8009f0e:	4606      	mov	r6, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009f10:	8943      	ldrh	r3, [r0, #10]
 8009f12:	2b13      	cmp	r3, #19
 8009f14:	d935      	bls.n	8009f82 <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f16:	6874      	ldr	r4, [r6, #4]
  tcphdr->src = lwip_htons(local_port);
 8009f18:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8009f1c:	f7fb febc 	bl	8005c98 <lwip_htons>
 8009f20:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009f22:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8009f26:	f7fb feb7 	bl	8005c98 <lwip_htons>
 8009f2a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	f7fb feb6 	bl	8005c9e <lwip_htonl>
 8009f32:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009f34:	4638      	mov	r0, r7
 8009f36:	f7fb feb2 	bl	8005c9e <lwip_htonl>
 8009f3a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009f3c:	f245 0014 	movw	r0, #20500	; 0x5014
 8009f40:	f7fb feaa 	bl	8005c98 <lwip_htons>
 8009f44:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009f46:	2300      	movs	r3, #0
 8009f48:	2208      	movs	r2, #8
 8009f4a:	73a2      	strb	r2, [r4, #14]
 8009f4c:	2260      	movs	r2, #96	; 0x60
 8009f4e:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8009f50:	7423      	strb	r3, [r4, #16]
 8009f52:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 8009f54:	74a3      	strb	r3, [r4, #18]
 8009f56:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f001 f87f 	bl	800b05c <ip4_route>
  if (netif != NULL) {
 8009f5e:	b150      	cbz	r0, 8009f76 <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009f60:	9002      	str	r0, [sp, #8]
 8009f62:	2306      	movs	r3, #6
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	2300      	movs	r3, #0
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	23ff      	movs	r3, #255	; 0xff
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	4649      	mov	r1, r9
 8009f70:	4630      	mov	r0, r6
 8009f72:	f001 f9fb 	bl	800b36c <ip4_output_if>
  }
  pbuf_free(p);
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7fc fac4 	bl	8006504 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009f7c:	b005      	add	sp, #20
 8009f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009f82:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <tcp_rst+0xa0>)
 8009f84:	f240 524c 	movw	r2, #1356	; 0x54c
 8009f88:	4903      	ldr	r1, [pc, #12]	; (8009f98 <tcp_rst+0xa4>)
 8009f8a:	4804      	ldr	r0, [pc, #16]	; (8009f9c <tcp_rst+0xa8>)
 8009f8c:	f008 ffbc 	bl	8012f08 <printf>
 8009f90:	e7c1      	b.n	8009f16 <tcp_rst+0x22>
 8009f92:	bf00      	nop
 8009f94:	0801b27c 	.word	0x0801b27c
 8009f98:	0801b34c 	.word	0x0801b34c
 8009f9c:	0801a38c 	.word	0x0801a38c

08009fa0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009fa0:	b508      	push	{r3, lr}
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009fa2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009fa4:	b1a3      	cbz	r3, 8009fd0 <tcp_rexmit_rto+0x30>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1fb      	bne.n	8009fa6 <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009fae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009fb0:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009fb2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009fb4:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009fba:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009fbe:	2bff      	cmp	r3, #255	; 0xff
 8009fc0:	d002      	beq.n	8009fc8 <tcp_rexmit_rto+0x28>
    ++pcb->nrtx;
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009fcc:	f7ff fe4a 	bl	8009c64 <tcp_output>
}
 8009fd0:	bd08      	pop	{r3, pc}

08009fd2 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009fd4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8009fd6:	b316      	cbz	r6, 800a01e <tcp_rexmit+0x4c>
 8009fd8:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8009fda:	6833      	ldr	r3, [r6, #0]
 8009fdc:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8009fde:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	b16b      	cbz	r3, 800a002 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	6858      	ldr	r0, [r3, #4]
 8009fea:	f7fb fe58 	bl	8005c9e <lwip_htonl>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	68f3      	ldr	r3, [r6, #12]
 8009ff2:	6858      	ldr	r0, [r3, #4]
 8009ff4:	f7fb fe53 	bl	8005c9e <lwip_htonl>
 8009ff8:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	da01      	bge.n	800a002 <tcp_rexmit+0x30>
      cur_seg = &((*cur_seg)->next );
 8009ffe:	682d      	ldr	r5, [r5, #0]
 800a000:	e7ef      	b.n	8009fe2 <tcp_rexmit+0x10>
  }
  seg->next = *cur_seg;
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800a006:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a008:	6833      	ldr	r3, [r6, #0]
 800a00a:	b14b      	cbz	r3, 800a020 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a00c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a010:	2bff      	cmp	r3, #255	; 0xff
 800a012:	d002      	beq.n	800a01a <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800a014:	3301      	adds	r3, #1
 800a016:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800a020:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a024:	e7f2      	b.n	800a00c <tcp_rexmit+0x3a>

0800a026 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a026:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a028:	b33b      	cbz	r3, 800a07a <tcp_rexmit_fast+0x54>
{
 800a02a:	b510      	push	{r4, lr}
 800a02c:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a02e:	7e83      	ldrb	r3, [r0, #26]
 800a030:	f013 0f04 	tst.w	r3, #4
 800a034:	d000      	beq.n	800a038 <tcp_rexmit_fast+0x12>
    pcb->flags |= TF_INFR;

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  }
}
 800a036:	bd10      	pop	{r4, pc}
    tcp_rexmit(pcb);
 800a038:	f7ff ffcb 	bl	8009fd2 <tcp_rexmit>
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a03c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800a040:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a044:	4293      	cmp	r3, r2
 800a046:	bf28      	it	cs
 800a048:	4613      	movcs	r3, r2
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a050:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800a052:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a056:	d202      	bcs.n	800a05e <tcp_rexmit_fast+0x38>
      pcb->ssthresh = 2*pcb->mss;
 800a058:	0053      	lsls	r3, r2, #1
 800a05a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a05e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800a062:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a066:	441a      	add	r2, r3
 800a068:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a06c:	7ea3      	ldrb	r3, [r4, #26]
 800a06e:	f043 0304 	orr.w	r3, r3, #4
 800a072:	76a3      	strb	r3, [r4, #26]
    pcb->rtime = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800a078:	e7dd      	b.n	800a036 <tcp_rexmit_fast+0x10>
 800a07a:	4770      	bx	lr

0800a07c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a082:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a084:	3801      	subs	r0, #1
 800a086:	f7fb fe0a 	bl	8005c9e <lwip_htonl>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2200      	movs	r2, #0
 800a08e:	4611      	mov	r1, r2
 800a090:	4620      	mov	r0, r4
 800a092:	f7ff f987 	bl	80093a4 <tcp_output_alloc_header>
  if (p == NULL) {
 800a096:	b1d0      	cbz	r0, 800a0ce <tcp_keepalive+0x52>
 800a098:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a09a:	1d26      	adds	r6, r4, #4
 800a09c:	4630      	mov	r0, r6
 800a09e:	f000 ffdd 	bl	800b05c <ip4_route>
  if (netif == NULL) {
 800a0a2:	b188      	cbz	r0, 800a0c8 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a0a4:	9002      	str	r0, [sp, #8]
 800a0a6:	2306      	movs	r3, #6
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	7aa3      	ldrb	r3, [r4, #10]
 800a0b0:	4632      	mov	r2, r6
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f001 f959 	bl	800b36c <ip4_output_if>
 800a0ba:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a0bc:	4628      	mov	r0, r5
 800a0be:	f7fc fa21 	bl	8006504 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	b004      	add	sp, #16
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800a0c8:	f06f 0403 	mvn.w	r4, #3
 800a0cc:	e7f6      	b.n	800a0bc <tcp_keepalive+0x40>
    return ERR_MEM;
 800a0ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a0d2:	e7f6      	b.n	800a0c2 <tcp_keepalive+0x46>

0800a0d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a0dc:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800a0de:	b16d      	cbz	r5, 800a0fc <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	d05c      	beq.n	800a19e <tcp_zero_window_probe+0xca>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a0e4:	68eb      	ldr	r3, [r5, #12]
 800a0e6:	8998      	ldrh	r0, [r3, #12]
 800a0e8:	f7fb fdd6 	bl	8005c98 <lwip_htons>
 800a0ec:	f010 0f01 	tst.w	r0, #1
 800a0f0:	d006      	beq.n	800a100 <tcp_zero_window_probe+0x2c>
 800a0f2:	892b      	ldrh	r3, [r5, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d040      	beq.n	800a17a <tcp_zero_window_probe+0xa6>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	e002      	b.n	800a102 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800a0fc:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800a0fe:	e7ef      	b.n	800a0e0 <tcp_zero_window_probe+0xc>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a100:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a102:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a106:	68eb      	ldr	r3, [r5, #12]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f082 0201 	eor.w	r2, r2, #1
 800a10e:	2100      	movs	r1, #0
 800a110:	4620      	mov	r0, r4
 800a112:	f7ff f947 	bl	80093a4 <tcp_output_alloc_header>
  if (p == NULL) {
 800a116:	4607      	mov	r7, r0
 800a118:	2800      	cmp	r0, #0
 800a11a:	d042      	beq.n	800a1a2 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a11c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a120:	b36e      	cbz	r6, 800a17e <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a122:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800a126:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a12a:	b2b6      	uxth	r6, r6
 800a12c:	2011      	movs	r0, #17
 800a12e:	f7fb fdb3 	bl	8005c98 <lwip_htons>
 800a132:	4306      	orrs	r6, r0
 800a134:	f8a8 600c 	strh.w	r6, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a138:	68eb      	ldr	r3, [r5, #12]
 800a13a:	6858      	ldr	r0, [r3, #4]
 800a13c:	f7fb fdaf 	bl	8005c9e <lwip_htonl>
 800a140:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a142:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a144:	1a1b      	subs	r3, r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	db24      	blt.n	800a194 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a14a:	1d25      	adds	r5, r4, #4
 800a14c:	4628      	mov	r0, r5
 800a14e:	f000 ff85 	bl	800b05c <ip4_route>
  if (netif == NULL) {
 800a152:	b308      	cbz	r0, 800a198 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a154:	9002      	str	r0, [sp, #8]
 800a156:	2306      	movs	r3, #6
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	2300      	movs	r3, #0
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	7aa3      	ldrb	r3, [r4, #10]
 800a160:	462a      	mov	r2, r5
 800a162:	4621      	mov	r1, r4
 800a164:	4638      	mov	r0, r7
 800a166:	f001 f901 	bl	800b36c <ip4_output_if>
 800a16a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a16c:	4638      	mov	r0, r7
 800a16e:	f7fc f9c9 	bl	8006504 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a172:	4620      	mov	r0, r4
 800a174:	b004      	add	sp, #16
 800a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a17a:	2201      	movs	r2, #1
 800a17c:	e7c1      	b.n	800a102 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a17e:	6868      	ldr	r0, [r5, #4]
 800a180:	8903      	ldrh	r3, [r0, #8]
 800a182:	892a      	ldrh	r2, [r5, #8]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	b29b      	uxth	r3, r3
 800a188:	2201      	movs	r2, #1
 800a18a:	f108 0114 	add.w	r1, r8, #20
 800a18e:	f7fc fc77 	bl	8006a80 <pbuf_copy_partial>
 800a192:	e7d1      	b.n	800a138 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800a194:	64e0      	str	r0, [r4, #76]	; 0x4c
 800a196:	e7d8      	b.n	800a14a <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800a198:	f06f 0403 	mvn.w	r4, #3
 800a19c:	e7e6      	b.n	800a16c <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800a19e:	2400      	movs	r4, #0
 800a1a0:	e7e7      	b.n	800a172 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800a1a2:	f04f 34ff 	mov.w	r4, #4294967295
 800a1a6:	e7e4      	b.n	800a172 <tcp_zero_window_probe+0x9e>

0800a1a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	4688      	mov	r8, r1
 800a1b0:	4617      	mov	r7, r2
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a1b2:	2006      	movs	r0, #6
 800a1b4:	f7fb ffd8 	bl	8006168 <memp_malloc>
  if (timeout == NULL) {
 800a1b8:	b1d0      	cbz	r0, 800a1f0 <sys_timeout+0x48>
 800a1ba:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 800a1bc:	f002 f934 	bl	800c428 <sys_now>
  if (next_timeout == NULL) {
 800a1c0:	4b20      	ldr	r3, [pc, #128]	; (800a244 <sys_timeout+0x9c>)
 800a1c2:	681e      	ldr	r6, [r3, #0]
 800a1c4:	b1de      	cbz	r6, 800a1fe <sys_timeout+0x56>
    diff = 0;
    timeouts_last_time = now;
  } else {
    diff = now - timeouts_last_time;
 800a1c6:	4b1f      	ldr	r3, [pc, #124]	; (800a244 <sys_timeout+0x9c>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	1ac3      	subs	r3, r0, r3
  }

  timeout->next = NULL;
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	6022      	str	r2, [r4, #0]
  timeout->h = handler;
 800a1d0:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800a1d4:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800a1d6:	442b      	add	r3, r5
 800a1d8:	6063      	str	r3, [r4, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a1da:	b19e      	cbz	r6, 800a204 <sys_timeout+0x5c>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 800a1dc:	6870      	ldr	r0, [r6, #4]
 800a1de:	42a8      	cmp	r0, r5
 800a1e0:	d921      	bls.n	800a226 <sys_timeout+0x7e>
    next_timeout->time -= msecs;
 800a1e2:	1b40      	subs	r0, r0, r5
 800a1e4:	6070      	str	r0, [r6, #4]
    timeout->next = next_timeout;
 800a1e6:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800a1e8:	4b16      	ldr	r3, [pc, #88]	; (800a244 <sys_timeout+0x9c>)
 800a1ea:	601c      	str	r4, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a1f0:	4b15      	ldr	r3, [pc, #84]	; (800a248 <sys_timeout+0xa0>)
 800a1f2:	22d4      	movs	r2, #212	; 0xd4
 800a1f4:	4915      	ldr	r1, [pc, #84]	; (800a24c <sys_timeout+0xa4>)
 800a1f6:	4816      	ldr	r0, [pc, #88]	; (800a250 <sys_timeout+0xa8>)
 800a1f8:	f008 fe86 	bl	8012f08 <printf>
    return;
 800a1fc:	e7f6      	b.n	800a1ec <sys_timeout+0x44>
    timeouts_last_time = now;
 800a1fe:	6058      	str	r0, [r3, #4]
    diff = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	e7e3      	b.n	800a1cc <sys_timeout+0x24>
    next_timeout = timeout;
 800a204:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <sys_timeout+0x9c>)
 800a206:	601c      	str	r4, [r3, #0]
    return;
 800a208:	e7f0      	b.n	800a1ec <sys_timeout+0x44>
        if (t->next != NULL) {
 800a20a:	b131      	cbz	r1, 800a21a <sys_timeout+0x72>
          t->next->time -= timeout->time;
 800a20c:	6848      	ldr	r0, [r1, #4]
 800a20e:	1ac3      	subs	r3, r0, r3
 800a210:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800a212:	6813      	ldr	r3, [r2, #0]
 800a214:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800a216:	6014      	str	r4, [r2, #0]
        break;
 800a218:	e7e8      	b.n	800a1ec <sys_timeout+0x44>
        } else if (timeout->time > msecs) {
 800a21a:	42ab      	cmp	r3, r5
 800a21c:	d9f9      	bls.n	800a212 <sys_timeout+0x6a>
          timeout->time = msecs + next_timeout->time;
 800a21e:	6873      	ldr	r3, [r6, #4]
 800a220:	441d      	add	r5, r3
 800a222:	6065      	str	r5, [r4, #4]
 800a224:	e7f5      	b.n	800a212 <sys_timeout+0x6a>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a226:	4632      	mov	r2, r6
 800a228:	2a00      	cmp	r2, #0
 800a22a:	d0df      	beq.n	800a1ec <sys_timeout+0x44>
      timeout->time -= t->time;
 800a22c:	6851      	ldr	r1, [r2, #4]
 800a22e:	6863      	ldr	r3, [r4, #4]
 800a230:	1a5b      	subs	r3, r3, r1
 800a232:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a234:	6811      	ldr	r1, [r2, #0]
 800a236:	2900      	cmp	r1, #0
 800a238:	d0e7      	beq.n	800a20a <sys_timeout+0x62>
 800a23a:	6848      	ldr	r0, [r1, #4]
 800a23c:	4283      	cmp	r3, r0
 800a23e:	d3e4      	bcc.n	800a20a <sys_timeout+0x62>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a240:	460a      	mov	r2, r1
 800a242:	e7f1      	b.n	800a228 <sys_timeout+0x80>
 800a244:	200033f8 	.word	0x200033f8
 800a248:	0801b698 	.word	0x0801b698
 800a24c:	0801b6cc 	.word	0x0801b6cc
 800a250:	0801a38c 	.word	0x0801a38c

0800a254 <tcp_timer_needed>:
{
 800a254:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a256:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <tcp_timer_needed+0x2c>)
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	b953      	cbnz	r3, 800a272 <tcp_timer_needed+0x1e>
 800a25c:	4b09      	ldr	r3, [pc, #36]	; (800a284 <tcp_timer_needed+0x30>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	b143      	cbz	r3, 800a274 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a262:	4b07      	ldr	r3, [pc, #28]	; (800a280 <tcp_timer_needed+0x2c>)
 800a264:	2201      	movs	r2, #1
 800a266:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a268:	2200      	movs	r2, #0
 800a26a:	4907      	ldr	r1, [pc, #28]	; (800a288 <tcp_timer_needed+0x34>)
 800a26c:	20fa      	movs	r0, #250	; 0xfa
 800a26e:	f7ff ff9b 	bl	800a1a8 <sys_timeout>
}
 800a272:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <tcp_timer_needed+0x38>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1f2      	bne.n	800a262 <tcp_timer_needed+0xe>
 800a27c:	e7f9      	b.n	800a272 <tcp_timer_needed+0x1e>
 800a27e:	bf00      	nop
 800a280:	200033f8 	.word	0x200033f8
 800a284:	20007a00 	.word	0x20007a00
 800a288:	0800a291 	.word	0x0800a291
 800a28c:	20007a10 	.word	0x20007a10

0800a290 <tcpip_tcp_timer>:
{
 800a290:	b508      	push	{r3, lr}
  tcp_tmr();
 800a292:	f7fd fa07 	bl	80076a4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a296:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <tcpip_tcp_timer+0x28>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	b12b      	cbz	r3, 800a2a8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a29c:	2200      	movs	r2, #0
 800a29e:	4907      	ldr	r1, [pc, #28]	; (800a2bc <tcpip_tcp_timer+0x2c>)
 800a2a0:	20fa      	movs	r0, #250	; 0xfa
 800a2a2:	f7ff ff81 	bl	800a1a8 <sys_timeout>
}
 800a2a6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <tcpip_tcp_timer+0x30>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1f5      	bne.n	800a29c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <tcpip_tcp_timer+0x34>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	609a      	str	r2, [r3, #8]
}
 800a2b6:	e7f6      	b.n	800a2a6 <tcpip_tcp_timer+0x16>
 800a2b8:	20007a00 	.word	0x20007a00
 800a2bc:	0800a291 	.word	0x0800a291
 800a2c0:	20007a10 	.word	0x20007a10
 800a2c4:	200033f8 	.word	0x200033f8

0800a2c8 <sys_timeouts_init>:
{
 800a2c8:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a2ca:	2401      	movs	r4, #1
 800a2cc:	e008      	b.n	800a2e0 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <sys_timeouts_init+0x28>)
 800a2d0:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800a2d4:	4907      	ldr	r1, [pc, #28]	; (800a2f4 <sys_timeouts_init+0x2c>)
 800a2d6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800a2da:	f7ff ff65 	bl	800a1a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a2de:	3401      	adds	r4, #1
 800a2e0:	2c02      	cmp	r4, #2
 800a2e2:	d9f4      	bls.n	800a2ce <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800a2e4:	f002 f8a0 	bl	800c428 <sys_now>
 800a2e8:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <sys_timeouts_init+0x30>)
 800a2ea:	6058      	str	r0, [r3, #4]
}
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0801a2fc 	.word	0x0801a2fc
 800a2f4:	0800a2fd 	.word	0x0800a2fd
 800a2f8:	200033f8 	.word	0x200033f8

0800a2fc <cyclic_timer>:
{
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	4604      	mov	r4, r0
  cyclic->handler();
 800a300:	6843      	ldr	r3, [r0, #4]
 800a302:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a304:	4622      	mov	r2, r4
 800a306:	4902      	ldr	r1, [pc, #8]	; (800a310 <cyclic_timer+0x14>)
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	f7ff ff4d 	bl	800a1a8 <sys_timeout>
}
 800a30e:	bd10      	pop	{r4, pc}
 800a310:	0800a2fd 	.word	0x0800a2fd

0800a314 <sys_check_timeouts>:
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  if (next_timeout) {
 800a314:	4b13      	ldr	r3, [pc, #76]	; (800a364 <sys_check_timeouts+0x50>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	b31b      	cbz	r3, 800a362 <sys_check_timeouts+0x4e>
{
 800a31a:	b570      	push	{r4, r5, r6, lr}
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a31c:	f002 f884 	bl	800c428 <sys_now>
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a320:	4b10      	ldr	r3, [pc, #64]	; (800a364 <sys_check_timeouts+0x50>)
 800a322:	685d      	ldr	r5, [r3, #4]
 800a324:	1b45      	subs	r5, r0, r5
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <sys_check_timeouts+0x54>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b9b3      	cbnz	r3, 800a35a <sys_check_timeouts+0x46>
      had_one = 0;
      tmptimeout = next_timeout;
 800a32c:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <sys_check_timeouts+0x50>)
 800a32e:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a330:	b1b1      	cbz	r1, 800a360 <sys_check_timeouts+0x4c>
 800a332:	684b      	ldr	r3, [r1, #4]
 800a334:	42ab      	cmp	r3, r5
 800a336:	d813      	bhi.n	800a360 <sys_check_timeouts+0x4c>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 800a338:	4a0a      	ldr	r2, [pc, #40]	; (800a364 <sys_check_timeouts+0x50>)
 800a33a:	6854      	ldr	r4, [r2, #4]
 800a33c:	441c      	add	r4, r3
 800a33e:	6054      	str	r4, [r2, #4]
        diff -= tmptimeout->time;
 800a340:	1aed      	subs	r5, r5, r3
        next_timeout = tmptimeout->next;
 800a342:	680b      	ldr	r3, [r1, #0]
 800a344:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a346:	688c      	ldr	r4, [r1, #8]
        arg = tmptimeout->arg;
 800a348:	68ce      	ldr	r6, [r1, #12]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a34a:	2006      	movs	r0, #6
 800a34c:	f7fb ff26 	bl	800619c <memp_free>
        if (handler != NULL) {
 800a350:	2c00      	cmp	r4, #0
 800a352:	d0e8      	beq.n	800a326 <sys_check_timeouts+0x12>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a354:	4630      	mov	r0, r6
 800a356:	47a0      	blx	r4
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a358:	e7e5      	b.n	800a326 <sys_check_timeouts+0x12>
      PBUF_CHECK_FREE_OOSEQ();
 800a35a:	f7fc f879 	bl	8006450 <pbuf_free_ooseq>
 800a35e:	e7e5      	b.n	800a32c <sys_check_timeouts+0x18>
  }
}
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	4770      	bx	lr
 800a364:	200033f8 	.word	0x200033f8
 800a368:	200079f8 	.word	0x200079f8

0800a36c <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a36c:	4613      	mov	r3, r2
 800a36e:	b16a      	cbz	r2, 800a38c <udp_input_local_match+0x20>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a370:	b1a8      	cbz	r0, 800a39e <udp_input_local_match+0x32>
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	b1ab      	cbz	r3, 800a3a2 <udp_input_local_match+0x36>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a376:	4a11      	ldr	r2, [pc, #68]	; (800a3bc <udp_input_local_match+0x50>)
 800a378:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a37a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a37e:	d012      	beq.n	800a3a6 <udp_input_local_match+0x3a>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a380:	6889      	ldr	r1, [r1, #8]
 800a382:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a384:	420b      	tst	r3, r1
 800a386:	d010      	beq.n	800a3aa <udp_input_local_match+0x3e>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800a388:	2000      	movs	r0, #0
 800a38a:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a38c:	b178      	cbz	r0, 800a3ae <udp_input_local_match+0x42>
 800a38e:	6802      	ldr	r2, [r0, #0]
 800a390:	b17a      	cbz	r2, 800a3b2 <udp_input_local_match+0x46>
 800a392:	490a      	ldr	r1, [pc, #40]	; (800a3bc <udp_input_local_match+0x50>)
 800a394:	6949      	ldr	r1, [r1, #20]
 800a396:	428a      	cmp	r2, r1
 800a398:	d00d      	beq.n	800a3b6 <udp_input_local_match+0x4a>
  return 0;
 800a39a:	4618      	mov	r0, r3
 800a39c:	4770      	bx	lr
          return 1;
 800a39e:	2001      	movs	r0, #1
 800a3a0:	4770      	bx	lr
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	4770      	bx	lr
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	4770      	bx	lr
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	4770      	bx	lr
      return 1;
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	4770      	bx	lr
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	4770      	bx	lr
 800a3b6:	2001      	movs	r0, #1
}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	200044d0 	.word	0x200044d0

0800a3c0 <udp_init>:
}
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a3cc:	8943      	ldrh	r3, [r0, #10]
 800a3ce:	2b07      	cmp	r3, #7
 800a3d0:	d917      	bls.n	800a402 <udp_input+0x3e>
 800a3d2:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a3d4:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a3d6:	4b43      	ldr	r3, [pc, #268]	; (800a4e4 <udp_input+0x120>)
 800a3d8:	6819      	ldr	r1, [r3, #0]
 800a3da:	6958      	ldr	r0, [r3, #20]
 800a3dc:	f000 ffdb 	bl	800b396 <ip4_addr_isbroadcast_u32>
 800a3e0:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a3e2:	8820      	ldrh	r0, [r4, #0]
 800a3e4:	f7fb fc58 	bl	8005c98 <lwip_htons>
 800a3e8:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800a3ea:	8860      	ldrh	r0, [r4, #2]
 800a3ec:	f7fb fc54 	bl	8005c98 <lwip_htons>
 800a3f0:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3f2:	4b3d      	ldr	r3, [pc, #244]	; (800a4e8 <udp_input+0x124>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	9303      	str	r3, [sp, #12]
 800a3f8:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800a3fa:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800a3fe:	465e      	mov	r6, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a400:	e009      	b.n	800a416 <udp_input+0x52>
    pbuf_free(p);
 800a402:	f7fc f87f 	bl	8006504 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a406:	b005      	add	sp, #20
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800a40c:	8aa3      	ldrh	r3, [r4, #20]
 800a40e:	4553      	cmp	r3, sl
 800a410:	d015      	beq.n	800a43e <udp_input+0x7a>
    prev = pcb;
 800a412:	4626      	mov	r6, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a414:	68e4      	ldr	r4, [r4, #12]
 800a416:	b1fc      	cbz	r4, 800a458 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800a418:	8a63      	ldrh	r3, [r4, #18]
 800a41a:	42ab      	cmp	r3, r5
 800a41c:	d1f9      	bne.n	800a412 <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a41e:	4642      	mov	r2, r8
 800a420:	4639      	mov	r1, r7
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff ffa2 	bl	800a36c <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800a428:	2800      	cmp	r0, #0
 800a42a:	d0f2      	beq.n	800a412 <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a42c:	7c23      	ldrb	r3, [r4, #16]
 800a42e:	f013 0f04 	tst.w	r3, #4
 800a432:	d1eb      	bne.n	800a40c <udp_input+0x48>
 800a434:	f1bb 0f00 	cmp.w	fp, #0
 800a438:	d1e8      	bne.n	800a40c <udp_input+0x48>
        uncon_pcb = pcb;
 800a43a:	46a3      	mov	fp, r4
 800a43c:	e7e6      	b.n	800a40c <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a43e:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800a440:	b11b      	cbz	r3, 800a44a <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a442:	4a28      	ldr	r2, [pc, #160]	; (800a4e4 <udp_input+0x120>)
 800a444:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a446:	4293      	cmp	r3, r2
 800a448:	d1e3      	bne.n	800a412 <udp_input+0x4e>
        if (prev != NULL) {
 800a44a:	b12e      	cbz	r6, 800a458 <udp_input+0x94>
          prev->next = pcb->next;
 800a44c:	68e3      	ldr	r3, [r4, #12]
 800a44e:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800a454:	4b24      	ldr	r3, [pc, #144]	; (800a4e8 <udp_input+0x124>)
 800a456:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800a458:	b18c      	cbz	r4, 800a47e <udp_input+0xba>
  if (pcb != NULL) {
 800a45a:	b194      	cbz	r4, 800a482 <udp_input+0xbe>
    if (pbuf_header(p, -UDP_HLEN)) {
 800a45c:	f06f 0107 	mvn.w	r1, #7
 800a460:	4648      	mov	r0, r9
 800a462:	f7fc f845 	bl	80064f0 <pbuf_header>
 800a466:	b9a8      	cbnz	r0, 800a494 <udp_input+0xd0>
    if (pcb != NULL) {
 800a468:	b31c      	cbz	r4, 800a4b2 <udp_input+0xee>
      if (pcb->recv != NULL) {
 800a46a:	69a5      	ldr	r5, [r4, #24]
 800a46c:	b1ed      	cbz	r5, 800a4aa <udp_input+0xe6>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a46e:	69e0      	ldr	r0, [r4, #28]
 800a470:	f8cd a000 	str.w	sl, [sp]
 800a474:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <udp_input+0x128>)
 800a476:	464a      	mov	r2, r9
 800a478:	4621      	mov	r1, r4
 800a47a:	47a8      	blx	r5
 800a47c:	e7c3      	b.n	800a406 <udp_input+0x42>
    pcb = uncon_pcb;
 800a47e:	465c      	mov	r4, fp
 800a480:	e7eb      	b.n	800a45a <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	4b17      	ldr	r3, [pc, #92]	; (800a4e4 <udp_input+0x120>)
 800a486:	695b      	ldr	r3, [r3, #20]
  if (for_us) {
 800a488:	429a      	cmp	r2, r3
 800a48a:	d0e7      	beq.n	800a45c <udp_input+0x98>
    pbuf_free(p);
 800a48c:	4648      	mov	r0, r9
 800a48e:	f7fc f839 	bl	8006504 <pbuf_free>
  return;
 800a492:	e7b8      	b.n	800a406 <udp_input+0x42>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a494:	4b16      	ldr	r3, [pc, #88]	; (800a4f0 <udp_input+0x12c>)
 800a496:	f240 1255 	movw	r2, #341	; 0x155
 800a49a:	4916      	ldr	r1, [pc, #88]	; (800a4f4 <udp_input+0x130>)
 800a49c:	4816      	ldr	r0, [pc, #88]	; (800a4f8 <udp_input+0x134>)
 800a49e:	f008 fd33 	bl	8012f08 <printf>
      pbuf_free(p);
 800a4a2:	4648      	mov	r0, r9
 800a4a4:	f7fc f82e 	bl	8006504 <pbuf_free>
      goto end;
 800a4a8:	e7ad      	b.n	800a406 <udp_input+0x42>
        pbuf_free(p);
 800a4aa:	4648      	mov	r0, r9
 800a4ac:	f7fc f82a 	bl	8006504 <pbuf_free>
        goto end;
 800a4b0:	e7a9      	b.n	800a406 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a4b2:	f1b8 0f00 	cmp.w	r8, #0
 800a4b6:	d105      	bne.n	800a4c4 <udp_input+0x100>
 800a4b8:	4b0a      	ldr	r3, [pc, #40]	; (800a4e4 <udp_input+0x120>)
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4c0:	2be0      	cmp	r3, #224	; 0xe0
 800a4c2:	d103      	bne.n	800a4cc <udp_input+0x108>
      pbuf_free(p);
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f7fc f81d 	bl	8006504 <pbuf_free>
 800a4ca:	e79c      	b.n	800a406 <udp_input+0x42>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a4cc:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <udp_input+0x120>)
 800a4ce:	8999      	ldrh	r1, [r3, #12]
 800a4d0:	3108      	adds	r1, #8
 800a4d2:	b209      	sxth	r1, r1
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f7fc f810 	bl	80064fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a4da:	2103      	movs	r1, #3
 800a4dc:	4648      	mov	r0, r9
 800a4de:	f000 fdb1 	bl	800b044 <icmp_dest_unreach>
 800a4e2:	e7ef      	b.n	800a4c4 <udp_input+0x100>
 800a4e4:	200044d0 	.word	0x200044d0
 800a4e8:	20007a18 	.word	0x20007a18
 800a4ec:	200044e0 	.word	0x200044e0
 800a4f0:	0801b70c 	.word	0x0801b70c
 800a4f4:	0801b73c 	.word	0x0801b73c
 800a4f8:	0801a38c 	.word	0x0801a38c

0800a4fc <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a4fc:	b1b8      	cbz	r0, 800a52e <udp_netif_ip_addr_changed+0x32>
 800a4fe:	4602      	mov	r2, r0
 800a500:	6803      	ldr	r3, [r0, #0]
 800a502:	b1a3      	cbz	r3, 800a52e <udp_netif_ip_addr_changed+0x32>
 800a504:	b199      	cbz	r1, 800a52e <udp_netif_ip_addr_changed+0x32>
 800a506:	680b      	ldr	r3, [r1, #0]
 800a508:	b18b      	cbz	r3, 800a52e <udp_netif_ip_addr_changed+0x32>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <udp_netif_ip_addr_changed+0x34>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	b16b      	cbz	r3, 800a52c <udp_netif_ip_addr_changed+0x30>
{
 800a510:	b410      	push	{r4}
 800a512:	e001      	b.n	800a518 <udp_netif_ip_addr_changed+0x1c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	b133      	cbz	r3, 800a526 <udp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a518:	681c      	ldr	r4, [r3, #0]
 800a51a:	6810      	ldr	r0, [r2, #0]
 800a51c:	4284      	cmp	r4, r0
 800a51e:	d1f9      	bne.n	800a514 <udp_netif_ip_addr_changed+0x18>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a520:	6808      	ldr	r0, [r1, #0]
 800a522:	6018      	str	r0, [r3, #0]
 800a524:	e7f6      	b.n	800a514 <udp_netif_ip_addr_changed+0x18>
      }
    }
  }
}
 800a526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	4770      	bx	lr
 800a52e:	4770      	bx	lr
 800a530:	20007a18 	.word	0x20007a18

0800a534 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a534:	b510      	push	{r4, lr}
 800a536:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a538:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a53c:	4b09      	ldr	r3, [pc, #36]	; (800a564 <etharp_free_entry+0x30>)
 800a53e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800a542:	b138      	cbz	r0, 800a554 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a544:	f7fb ffde 	bl	8006504 <pbuf_free>
    arp_table[i].q = NULL;
 800a548:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	4a05      	ldr	r2, [pc, #20]	; (800a564 <etharp_free_entry+0x30>)
 800a550:	2100      	movs	r1, #0
 800a552:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a554:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a558:	4802      	ldr	r0, [pc, #8]	; (800a564 <etharp_free_entry+0x30>)
 800a55a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800a55e:	2300      	movs	r3, #0
 800a560:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a562:	bd10      	pop	{r4, pc}
 800a564:	20003404 	.word	0x20003404

0800a568 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800a568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	4606      	mov	r6, r0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a56e:	f04f 0c00 	mov.w	ip, #0
 800a572:	46e3      	mov	fp, ip
 800a574:	46e1      	mov	r9, ip
  s8_t old_queue = ARP_TABLE_SIZE;
 800a576:	f04f 0e0a 	mov.w	lr, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a57a:	4663      	mov	r3, ip
  s8_t empty = ARP_TABLE_SIZE;
 800a57c:	4675      	mov	r5, lr
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a57e:	46f0      	mov	r8, lr
 800a580:	46f2      	mov	sl, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a582:	e003      	b.n	800a58c <etharp_find_entry+0x24>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a584:	b968      	cbnz	r0, 800a5a2 <etharp_find_entry+0x3a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800a586:	b25d      	sxtb	r5, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a588:	3301      	adds	r3, #1
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d843      	bhi.n	800a618 <etharp_find_entry+0xb0>
    u8_t state = arp_table[i].state;
 800a590:	461a      	mov	r2, r3
 800a592:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800a596:	4c57      	ldr	r4, [pc, #348]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a598:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800a59c:	7d00      	ldrb	r0, [r0, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a59e:	2d0a      	cmp	r5, #10
 800a5a0:	d0f0      	beq.n	800a584 <etharp_find_entry+0x1c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d0f0      	beq.n	800a588 <etharp_find_entry+0x20>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a5a6:	b146      	cbz	r6, 800a5ba <etharp_find_entry+0x52>
 800a5a8:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 800a5ac:	4c51      	ldr	r4, [pc, #324]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a5ae:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 800a5b2:	6864      	ldr	r4, [r4, #4]
 800a5b4:	6837      	ldr	r7, [r6, #0]
 800a5b6:	42a7      	cmp	r7, r4
 800a5b8:	d00f      	beq.n	800a5da <etharp_find_entry+0x72>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a5ba:	2801      	cmp	r0, #1
 800a5bc:	d00f      	beq.n	800a5de <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a5be:	2801      	cmp	r0, #1
 800a5c0:	d9e2      	bls.n	800a588 <etharp_find_entry+0x20>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a5c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a5c6:	484b      	ldr	r0, [pc, #300]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a5c8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a5cc:	8a52      	ldrh	r2, [r2, #18]
 800a5ce:	4562      	cmp	r2, ip
 800a5d0:	d3da      	bcc.n	800a588 <etharp_find_entry+0x20>
            old_stable = i;
 800a5d2:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 800a5d6:	4694      	mov	ip, r2
 800a5d8:	e7d6      	b.n	800a588 <etharp_find_entry+0x20>
        return i;
 800a5da:	b258      	sxtb	r0, r3
 800a5dc:	e03f      	b.n	800a65e <etharp_find_entry+0xf6>
        if (arp_table[i].q != NULL) {
 800a5de:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800a5e2:	4c44      	ldr	r4, [pc, #272]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a5e4:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 800a5e8:	b150      	cbz	r0, 800a600 <etharp_find_entry+0x98>
          if (arp_table[i].ctime >= age_queue) {
 800a5ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a5ee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a5f2:	8a52      	ldrh	r2, [r2, #18]
 800a5f4:	454a      	cmp	r2, r9
 800a5f6:	d3c7      	bcc.n	800a588 <etharp_find_entry+0x20>
            old_queue = i;
 800a5f8:	fa4f fe83 	sxtb.w	lr, r3
            age_queue = arp_table[i].ctime;
 800a5fc:	4691      	mov	r9, r2
 800a5fe:	e7c3      	b.n	800a588 <etharp_find_entry+0x20>
          if (arp_table[i].ctime >= age_pending) {
 800a600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a604:	483b      	ldr	r0, [pc, #236]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a606:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a60a:	8a52      	ldrh	r2, [r2, #18]
 800a60c:	455a      	cmp	r2, fp
 800a60e:	d3bb      	bcc.n	800a588 <etharp_find_entry+0x20>
            old_pending = i;
 800a610:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800a614:	4693      	mov	fp, r2
 800a616:	e7b7      	b.n	800a588 <etharp_find_entry+0x20>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a618:	f011 0f02 	tst.w	r1, #2
 800a61c:	d163      	bne.n	800a6e6 <etharp_find_entry+0x17e>
 800a61e:	2d0a      	cmp	r5, #10
 800a620:	d01f      	beq.n	800a662 <etharp_find_entry+0xfa>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a622:	2d09      	cmp	r5, #9
 800a624:	dc23      	bgt.n	800a66e <etharp_find_entry+0x106>
    i = empty;
 800a626:	b2ed      	uxtb	r5, r5
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a628:	2d09      	cmp	r5, #9
 800a62a:	d84c      	bhi.n	800a6c6 <etharp_find_entry+0x15e>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a62c:	462c      	mov	r4, r5
 800a62e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a632:	4a30      	ldr	r2, [pc, #192]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a634:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a638:	7d1b      	ldrb	r3, [r3, #20]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d14b      	bne.n	800a6d6 <etharp_find_entry+0x16e>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a63e:	b136      	cbz	r6, 800a64e <etharp_find_entry+0xe6>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a640:	6831      	ldr	r1, [r6, #0]
 800a642:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a646:	4a2b      	ldr	r2, [pc, #172]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a64c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800a64e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a652:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a654:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a658:	2300      	movs	r3, #0
 800a65a:	8263      	strh	r3, [r4, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a65c:	b268      	sxtb	r0, r5
}
 800a65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a662:	f011 0f01 	tst.w	r1, #1
 800a666:	d1dc      	bne.n	800a622 <etharp_find_entry+0xba>
    return (s8_t)ERR_MEM;
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e7f7      	b.n	800a65e <etharp_find_entry+0xf6>
    if (old_stable < ARP_TABLE_SIZE) {
 800a66e:	f1b8 0f09 	cmp.w	r8, #9
 800a672:	dc14      	bgt.n	800a69e <etharp_find_entry+0x136>
      i = old_stable;
 800a674:	fa5f f588 	uxtb.w	r5, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a678:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800a67c:	4b1d      	ldr	r3, [pc, #116]	; (800a6f4 <etharp_find_entry+0x18c>)
 800a67e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a682:	b133      	cbz	r3, 800a692 <etharp_find_entry+0x12a>
 800a684:	4b1c      	ldr	r3, [pc, #112]	; (800a6f8 <etharp_find_entry+0x190>)
 800a686:	f240 126f 	movw	r2, #367	; 0x16f
 800a68a:	491c      	ldr	r1, [pc, #112]	; (800a6fc <etharp_find_entry+0x194>)
 800a68c:	481c      	ldr	r0, [pc, #112]	; (800a700 <etharp_find_entry+0x198>)
 800a68e:	f008 fc3b 	bl	8012f08 <printf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a692:	2d09      	cmp	r5, #9
 800a694:	d80f      	bhi.n	800a6b6 <etharp_find_entry+0x14e>
    etharp_free_entry(i);
 800a696:	4628      	mov	r0, r5
 800a698:	f7ff ff4c 	bl	800a534 <etharp_free_entry>
 800a69c:	e7c4      	b.n	800a628 <etharp_find_entry+0xc0>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a69e:	f1ba 0f09 	cmp.w	sl, #9
 800a6a2:	dc02      	bgt.n	800a6aa <etharp_find_entry+0x142>
      i = old_pending;
 800a6a4:	fa5f f58a 	uxtb.w	r5, sl
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
 800a6a8:	e7f3      	b.n	800a692 <etharp_find_entry+0x12a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a6aa:	f1be 0f09 	cmp.w	lr, #9
 800a6ae:	dc1d      	bgt.n	800a6ec <etharp_find_entry+0x184>
      i = old_queue;
 800a6b0:	fa5f f58e 	uxtb.w	r5, lr
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
 800a6b4:	e7ed      	b.n	800a692 <etharp_find_entry+0x12a>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a6b6:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <etharp_find_entry+0x190>)
 800a6b8:	f240 1281 	movw	r2, #385	; 0x181
 800a6bc:	4911      	ldr	r1, [pc, #68]	; (800a704 <etharp_find_entry+0x19c>)
 800a6be:	4810      	ldr	r0, [pc, #64]	; (800a700 <etharp_find_entry+0x198>)
 800a6c0:	f008 fc22 	bl	8012f08 <printf>
 800a6c4:	e7e7      	b.n	800a696 <etharp_find_entry+0x12e>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <etharp_find_entry+0x190>)
 800a6c8:	f240 1285 	movw	r2, #389	; 0x185
 800a6cc:	490d      	ldr	r1, [pc, #52]	; (800a704 <etharp_find_entry+0x19c>)
 800a6ce:	480c      	ldr	r0, [pc, #48]	; (800a700 <etharp_find_entry+0x198>)
 800a6d0:	f008 fc1a 	bl	8012f08 <printf>
 800a6d4:	e7aa      	b.n	800a62c <etharp_find_entry+0xc4>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a6d6:	4b08      	ldr	r3, [pc, #32]	; (800a6f8 <etharp_find_entry+0x190>)
 800a6d8:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800a6dc:	490a      	ldr	r1, [pc, #40]	; (800a708 <etharp_find_entry+0x1a0>)
 800a6de:	4808      	ldr	r0, [pc, #32]	; (800a700 <etharp_find_entry+0x198>)
 800a6e0:	f008 fc12 	bl	8012f08 <printf>
 800a6e4:	e7ab      	b.n	800a63e <etharp_find_entry+0xd6>
    return (s8_t)ERR_MEM;
 800a6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ea:	e7b8      	b.n	800a65e <etharp_find_entry+0xf6>
      return (s8_t)ERR_MEM;
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	e7b5      	b.n	800a65e <etharp_find_entry+0xf6>
 800a6f2:	bf00      	nop
 800a6f4:	20003404 	.word	0x20003404
 800a6f8:	0801b780 	.word	0x0801b780
 800a6fc:	0801b7b8 	.word	0x0801b7b8
 800a700:	0801a38c 	.word	0x0801a38c
 800a704:	0801b7d0 	.word	0x0801b7d0
 800a708:	0801b7e4 	.word	0x0801b7e4

0800a70c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70e:	b083      	sub	sp, #12
 800a710:	4604      	mov	r4, r0
 800a712:	460e      	mov	r6, r1
 800a714:	4615      	mov	r5, r2
 800a716:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a718:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800a71c:	2a06      	cmp	r2, #6
 800a71e:	d13e      	bne.n	800a79e <etharp_update_arp_entry+0x92>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a720:	2e00      	cmp	r6, #0
 800a722:	d044      	beq.n	800a7ae <etharp_update_arp_entry+0xa2>
 800a724:	6830      	ldr	r0, [r6, #0]
 800a726:	2800      	cmp	r0, #0
 800a728:	d041      	beq.n	800a7ae <etharp_update_arp_entry+0xa2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a72a:	4621      	mov	r1, r4
 800a72c:	f000 fe33 	bl	800b396 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800a730:	2800      	cmp	r0, #0
 800a732:	d13c      	bne.n	800a7ae <etharp_update_arp_entry+0xa2>
      ip4_addr_ismulticast(ipaddr)) {
 800a734:	6832      	ldr	r2, [r6, #0]
 800a736:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a73a:	2ae0      	cmp	r2, #224	; 0xe0
 800a73c:	d037      	beq.n	800a7ae <etharp_update_arp_entry+0xa2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a73e:	4622      	mov	r2, r4
 800a740:	4639      	mov	r1, r7
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ff10 	bl	800a568 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800a748:	2800      	cmp	r0, #0
 800a74a:	db26      	blt.n	800a79a <etharp_update_arp_entry+0x8e>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a74c:	4a1a      	ldr	r2, [pc, #104]	; (800a7b8 <etharp_update_arp_entry+0xac>)
 800a74e:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 800a752:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
 800a756:	2302      	movs	r3, #2
 800a758:	750b      	strb	r3, [r1, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a75a:	608c      	str	r4, [r1, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a75c:	00f3      	lsls	r3, r6, #3
 800a75e:	3308      	adds	r3, #8
 800a760:	4413      	add	r3, r2
 800a762:	682f      	ldr	r7, [r5, #0]
 800a764:	605f      	str	r7, [r3, #4]
 800a766:	88af      	ldrh	r7, [r5, #4]
 800a768:	811f      	strh	r7, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	824b      	strh	r3, [r1, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a76e:	f852 6036 	ldr.w	r6, [r2, r6, lsl #3]
 800a772:	b1fe      	cbz	r6, 800a7b4 <etharp_update_arp_entry+0xa8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800a774:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a778:	00c0      	lsls	r0, r0, #3
 800a77a:	461f      	mov	r7, r3
 800a77c:	5013      	str	r3, [r2, r0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a77e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	462b      	mov	r3, r5
 800a786:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800a78a:	4631      	mov	r1, r6
 800a78c:	4620      	mov	r0, r4
 800a78e:	f001 fb19 	bl	800bdc4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a792:	4630      	mov	r0, r6
 800a794:	f7fb feb6 	bl	8006504 <pbuf_free>
  }
  return ERR_OK;
 800a798:	4638      	mov	r0, r7
}
 800a79a:	b003      	add	sp, #12
 800a79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a79e:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <etharp_update_arp_entry+0xb0>)
 800a7a0:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a7a4:	4906      	ldr	r1, [pc, #24]	; (800a7c0 <etharp_update_arp_entry+0xb4>)
 800a7a6:	4807      	ldr	r0, [pc, #28]	; (800a7c4 <etharp_update_arp_entry+0xb8>)
 800a7a8:	f008 fbae 	bl	8012f08 <printf>
 800a7ac:	e7b8      	b.n	800a720 <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 800a7ae:	f06f 000f 	mvn.w	r0, #15
 800a7b2:	e7f2      	b.n	800a79a <etharp_update_arp_entry+0x8e>
  return ERR_OK;
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e7f0      	b.n	800a79a <etharp_update_arp_entry+0x8e>
 800a7b8:	20003404 	.word	0x20003404
 800a7bc:	0801b780 	.word	0x0801b780
 800a7c0:	0801b810 	.word	0x0801b810
 800a7c4:	0801a38c 	.word	0x0801a38c

0800a7c8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	460f      	mov	r7, r1
 800a7d0:	4690      	mov	r8, r2
 800a7d2:	461d      	mov	r5, r3
 800a7d4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a7d8:	4681      	mov	r9, r0
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d041      	beq.n	800a862 <etharp_raw+0x9a>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a7de:	2200      	movs	r2, #0
 800a7e0:	211c      	movs	r1, #28
 800a7e2:	2002      	movs	r0, #2
 800a7e4:	f7fb fef2 	bl	80065cc <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d051      	beq.n	800a892 <etharp_raw+0xca>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a7ee:	8943      	ldrh	r3, [r0, #10]
 800a7f0:	2b1b      	cmp	r3, #27
 800a7f2:	d93e      	bls.n	800a872 <etharp_raw+0xaa>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a7f4:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a7f6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800a7fa:	f7fb fa4d 	bl	8005c98 <lwip_htons>
 800a7fe:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a800:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 800a804:	2b06      	cmp	r3, #6
 800a806:	d13c      	bne.n	800a882 <etharp_raw+0xba>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	60a3      	str	r3, [r4, #8]
 800a80c:	88ab      	ldrh	r3, [r5, #4]
 800a80e:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a810:	f8da 3000 	ldr.w	r3, [sl]
 800a814:	f8c4 3012 	str.w	r3, [r4, #18]
 800a818:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a81c:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a82c:	2500      	movs	r5, #0
 800a82e:	7025      	strb	r5, [r4, #0]
 800a830:	2301      	movs	r3, #1
 800a832:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a834:	2308      	movs	r3, #8
 800a836:	70a3      	strb	r3, [r4, #2]
 800a838:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a83a:	2306      	movs	r3, #6
 800a83c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a83e:	2304      	movs	r3, #4
 800a840:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a842:	f640 0306 	movw	r3, #2054	; 0x806
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	4643      	mov	r3, r8
 800a84a:	463a      	mov	r2, r7
 800a84c:	4631      	mov	r1, r6
 800a84e:	4648      	mov	r0, r9
 800a850:	f001 fab8 	bl	800bdc4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a854:	4630      	mov	r0, r6
 800a856:	f7fb fe55 	bl	8006504 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800a85a:	4628      	mov	r0, r5
}
 800a85c:	b002      	add	sp, #8
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a862:	4b0d      	ldr	r3, [pc, #52]	; (800a898 <etharp_raw+0xd0>)
 800a864:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800a868:	490c      	ldr	r1, [pc, #48]	; (800a89c <etharp_raw+0xd4>)
 800a86a:	480d      	ldr	r0, [pc, #52]	; (800a8a0 <etharp_raw+0xd8>)
 800a86c:	f008 fb4c 	bl	8012f08 <printf>
 800a870:	e7b5      	b.n	800a7de <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a872:	4b09      	ldr	r3, [pc, #36]	; (800a898 <etharp_raw+0xd0>)
 800a874:	f240 4263 	movw	r2, #1123	; 0x463
 800a878:	490a      	ldr	r1, [pc, #40]	; (800a8a4 <etharp_raw+0xdc>)
 800a87a:	4809      	ldr	r0, [pc, #36]	; (800a8a0 <etharp_raw+0xd8>)
 800a87c:	f008 fb44 	bl	8012f08 <printf>
 800a880:	e7b8      	b.n	800a7f4 <etharp_raw+0x2c>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a882:	4b05      	ldr	r3, [pc, #20]	; (800a898 <etharp_raw+0xd0>)
 800a884:	f240 426a 	movw	r2, #1130	; 0x46a
 800a888:	4907      	ldr	r1, [pc, #28]	; (800a8a8 <etharp_raw+0xe0>)
 800a88a:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <etharp_raw+0xd8>)
 800a88c:	f008 fb3c 	bl	8012f08 <printf>
 800a890:	e7ba      	b.n	800a808 <etharp_raw+0x40>
    return ERR_MEM;
 800a892:	f04f 30ff 	mov.w	r0, #4294967295
 800a896:	e7e1      	b.n	800a85c <etharp_raw+0x94>
 800a898:	0801b780 	.word	0x0801b780
 800a89c:	0801b834 	.word	0x0801b834
 800a8a0:	0801a38c 	.word	0x0801a38c
 800a8a4:	0801b844 	.word	0x0801b844
 800a8a8:	0801b878 	.word	0x0801b878

0800a8ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800a8ac:	b530      	push	{r4, r5, lr}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	4604      	mov	r4, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a8b2:	f100 0325 	add.w	r3, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a8b6:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a8b8:	2501      	movs	r5, #1
 800a8ba:	9503      	str	r5, [sp, #12]
 800a8bc:	9102      	str	r1, [sp, #8]
 800a8be:	4904      	ldr	r1, [pc, #16]	; (800a8d0 <etharp_request_dst+0x24>)
 800a8c0:	9101      	str	r1, [sp, #4]
 800a8c2:	9400      	str	r4, [sp, #0]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f7ff ff7f 	bl	800a7c8 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800a8ca:	b005      	add	sp, #20
 800a8cc:	bd30      	pop	{r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	0801a324 	.word	0x0801a324

0800a8d4 <etharp_cleanup_netif>:
{
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8d8:	2400      	movs	r4, #0
 800a8da:	e001      	b.n	800a8e0 <etharp_cleanup_netif+0xc>
 800a8dc:	3401      	adds	r4, #1
 800a8de:	b2e4      	uxtb	r4, r4
 800a8e0:	2c09      	cmp	r4, #9
 800a8e2:	d812      	bhi.n	800a90a <etharp_cleanup_netif+0x36>
    u8_t state = arp_table[i].state;
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a8ea:	4a08      	ldr	r2, [pc, #32]	; (800a90c <etharp_cleanup_netif+0x38>)
 800a8ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8f0:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0f2      	beq.n	800a8dc <etharp_cleanup_netif+0x8>
 800a8f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a8fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	42ab      	cmp	r3, r5
 800a902:	d1eb      	bne.n	800a8dc <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800a904:	f7ff fe16 	bl	800a534 <etharp_free_entry>
 800a908:	e7e8      	b.n	800a8dc <etharp_cleanup_netif+0x8>
}
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20003404 	.word	0x20003404

0800a910 <etharp_input>:
{
 800a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a916:	b1a9      	cbz	r1, 800a944 <etharp_input+0x34>
 800a918:	4604      	mov	r4, r0
 800a91a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800a91c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a91e:	882b      	ldrh	r3, [r5, #0]
 800a920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a924:	d108      	bne.n	800a938 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a926:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a928:	2b06      	cmp	r3, #6
 800a92a:	d105      	bne.n	800a938 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a92c:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d102      	bne.n	800a938 <etharp_input+0x28>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a932:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a934:	2b08      	cmp	r3, #8
 800a936:	d00d      	beq.n	800a954 <etharp_input+0x44>
    pbuf_free(p);
 800a938:	4620      	mov	r0, r4
 800a93a:	f7fb fde3 	bl	8006504 <pbuf_free>
}
 800a93e:	b006      	add	sp, #24
 800a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a944:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <etharp_input+0xac>)
 800a946:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a94a:	491d      	ldr	r1, [pc, #116]	; (800a9c0 <etharp_input+0xb0>)
 800a94c:	481d      	ldr	r0, [pc, #116]	; (800a9c4 <etharp_input+0xb4>)
 800a94e:	f008 fadb 	bl	8012f08 <printf>
 800a952:	e7f4      	b.n	800a93e <etharp_input+0x2e>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a954:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800a958:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a95a:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a95c:	684b      	ldr	r3, [r1, #4]
 800a95e:	b983      	cbnz	r3, 800a982 <etharp_input+0x72>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a960:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800a964:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a966:	2302      	movs	r3, #2
 800a968:	4642      	mov	r2, r8
 800a96a:	a905      	add	r1, sp, #20
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7ff fecd 	bl	800a70c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800a972:	88eb      	ldrh	r3, [r5, #6]
 800a974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a978:	d00e      	beq.n	800a998 <etharp_input+0x88>
  pbuf_free(p);
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7fb fdc2 	bl	8006504 <pbuf_free>
 800a980:	e7dd      	b.n	800a93e <etharp_input+0x2e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a982:	42bb      	cmp	r3, r7
 800a984:	bf14      	ite	ne
 800a986:	2700      	movne	r7, #0
 800a988:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a98a:	f105 0808 	add.w	r8, r5, #8
 800a98e:	b10f      	cbz	r7, 800a994 <etharp_input+0x84>
 800a990:	2301      	movs	r3, #1
 800a992:	e7e9      	b.n	800a968 <etharp_input+0x58>
 800a994:	2302      	movs	r3, #2
 800a996:	e7e7      	b.n	800a968 <etharp_input+0x58>
    if (for_us) {
 800a998:	2f00      	cmp	r7, #0
 800a99a:	d0ee      	beq.n	800a97a <etharp_input+0x6a>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a99c:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a9a0:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	9203      	str	r2, [sp, #12]
 800a9a6:	aa05      	add	r2, sp, #20
 800a9a8:	9202      	str	r2, [sp, #8]
 800a9aa:	f8cd 8004 	str.w	r8, [sp, #4]
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4642      	mov	r2, r8
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff ff07 	bl	800a7c8 <etharp_raw>
 800a9ba:	e7de      	b.n	800a97a <etharp_input+0x6a>
 800a9bc:	0801b780 	.word	0x0801b780
 800a9c0:	0801b834 	.word	0x0801b834
 800a9c4:	0801a38c 	.word	0x0801a38c

0800a9c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a9c8:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a9ca:	4a02      	ldr	r2, [pc, #8]	; (800a9d4 <etharp_request+0xc>)
 800a9cc:	f7ff ff6e 	bl	800a8ac <etharp_request_dst>
}
 800a9d0:	bd08      	pop	{r3, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0801a31c 	.word	0x0801a31c

0800a9d8 <etharp_tmr>:
{
 800a9d8:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a9da:	2400      	movs	r4, #0
 800a9dc:	e005      	b.n	800a9ea <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d922      	bls.n	800aa28 <etharp_tmr+0x50>
        etharp_free_entry(i);
 800a9e2:	f7ff fda7 	bl	800a534 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a9e6:	3401      	adds	r4, #1
 800a9e8:	b2e4      	uxtb	r4, r4
 800a9ea:	2c09      	cmp	r4, #9
 800a9ec:	d83d      	bhi.n	800aa6a <etharp_tmr+0x92>
    u8_t state = arp_table[i].state;
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a9f4:	00da      	lsls	r2, r3, #3
 800a9f6:	4b1d      	ldr	r3, [pc, #116]	; (800aa6c <etharp_tmr+0x94>)
 800a9f8:	4413      	add	r3, r2
 800a9fa:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0f2      	beq.n	800a9e6 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 800aa00:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800aa04:	00d3      	lsls	r3, r2, #3
 800aa06:	4a19      	ldr	r2, [pc, #100]	; (800aa6c <etharp_tmr+0x94>)
 800aa08:	441a      	add	r2, r3
 800aa0a:	8a53      	ldrh	r3, [r2, #18]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800aa12:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800aa16:	d2e4      	bcs.n	800a9e2 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800aa18:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800aa1c:	00d1      	lsls	r1, r2, #3
 800aa1e:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <etharp_tmr+0x94>)
 800aa20:	440a      	add	r2, r1
 800aa22:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800aa24:	2a01      	cmp	r2, #1
 800aa26:	d0da      	beq.n	800a9de <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800aa28:	2a03      	cmp	r2, #3
 800aa2a:	d00e      	beq.n	800aa4a <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800aa2c:	2a04      	cmp	r2, #4
 800aa2e:	d014      	beq.n	800aa5a <etharp_tmr+0x82>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aa30:	2a01      	cmp	r2, #1
 800aa32:	d1d8      	bne.n	800a9e6 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800aa34:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <etharp_tmr+0x94>)
 800aa36:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800aa3a:	00d1      	lsls	r1, r2, #3
 800aa3c:	4419      	add	r1, r3
 800aa3e:	460b      	mov	r3, r1
 800aa40:	3104      	adds	r1, #4
 800aa42:	6898      	ldr	r0, [r3, #8]
 800aa44:	f7ff ffc0 	bl	800a9c8 <etharp_request>
 800aa48:	e7cd      	b.n	800a9e6 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800aa4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800aa4e:	00c2      	lsls	r2, r0, #3
 800aa50:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <etharp_tmr+0x94>)
 800aa52:	4413      	add	r3, r2
 800aa54:	2204      	movs	r2, #4
 800aa56:	751a      	strb	r2, [r3, #20]
 800aa58:	e7c5      	b.n	800a9e6 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800aa5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800aa5e:	00c2      	lsls	r2, r0, #3
 800aa60:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <etharp_tmr+0x94>)
 800aa62:	4413      	add	r3, r2
 800aa64:	2202      	movs	r2, #2
 800aa66:	751a      	strb	r2, [r3, #20]
 800aa68:	e7bd      	b.n	800a9e6 <etharp_tmr+0xe>
}
 800aa6a:	bd10      	pop	{r4, pc}
 800aa6c:	20003404 	.word	0x20003404

0800aa70 <etharp_output_to_arp_index>:
{
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	4605      	mov	r5, r0
 800aa76:	460e      	mov	r6, r1
 800aa78:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800aa7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800aa7e:	4b2f      	ldr	r3, [pc, #188]	; (800ab3c <etharp_output_to_arp_index+0xcc>)
 800aa80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa84:	7d1b      	ldrb	r3, [r3, #20]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d919      	bls.n	800aabe <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800aa8a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aa8e:	4a2b      	ldr	r2, [pc, #172]	; (800ab3c <etharp_output_to_arp_index+0xcc>)
 800aa90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa94:	7d1b      	ldrb	r3, [r3, #20]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d019      	beq.n	800aace <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800aa9a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	4c26      	ldr	r4, [pc, #152]	; (800ab3c <etharp_output_to_arp_index+0xcc>)
 800aaa4:	4423      	add	r3, r4
 800aaa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaaa:	9200      	str	r2, [sp, #0]
 800aaac:	3304      	adds	r3, #4
 800aaae:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	f001 f985 	bl	800bdc4 <ethernet_output>
}
 800aaba:	b002      	add	sp, #8
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800aabe:	4b20      	ldr	r3, [pc, #128]	; (800ab40 <etharp_output_to_arp_index+0xd0>)
 800aac0:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800aac4:	491f      	ldr	r1, [pc, #124]	; (800ab44 <etharp_output_to_arp_index+0xd4>)
 800aac6:	4820      	ldr	r0, [pc, #128]	; (800ab48 <etharp_output_to_arp_index+0xd8>)
 800aac8:	f008 fa1e 	bl	8012f08 <printf>
 800aacc:	e7dd      	b.n	800aa8a <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800aace:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aad2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aad6:	8a5b      	ldrh	r3, [r3, #18]
 800aad8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800aadc:	d81b      	bhi.n	800ab16 <etharp_output_to_arp_index+0xa6>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aade:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800aae2:	d3da      	bcc.n	800aa9a <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800aae4:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <etharp_output_to_arp_index+0xcc>)
 800aae6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800aaea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aaee:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800aaf2:	00d2      	lsls	r2, r2, #3
 800aaf4:	3208      	adds	r2, #8
 800aaf6:	441a      	add	r2, r3
 800aaf8:	3204      	adds	r2, #4
 800aafa:	3104      	adds	r1, #4
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7ff fed5 	bl	800a8ac <etharp_request_dst>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d1c9      	bne.n	800aa9a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ab06:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ab0a:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <etharp_output_to_arp_index+0xcc>)
 800ab0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab10:	2203      	movs	r2, #3
 800ab12:	751a      	strb	r2, [r3, #20]
 800ab14:	e7c1      	b.n	800aa9a <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ab16:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ab1a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800ab1e:	3104      	adds	r1, #4
 800ab20:	4628      	mov	r0, r5
 800ab22:	f7ff ff51 	bl	800a9c8 <etharp_request>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d1b7      	bne.n	800aa9a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ab2a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ab2e:	4a03      	ldr	r2, [pc, #12]	; (800ab3c <etharp_output_to_arp_index+0xcc>)
 800ab30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab34:	2203      	movs	r2, #3
 800ab36:	751a      	strb	r2, [r3, #20]
 800ab38:	e7af      	b.n	800aa9a <etharp_output_to_arp_index+0x2a>
 800ab3a:	bf00      	nop
 800ab3c:	20003404 	.word	0x20003404
 800ab40:	0801b780 	.word	0x0801b780
 800ab44:	0801b900 	.word	0x0801b900
 800ab48:	0801a38c 	.word	0x0801a38c

0800ab4c <etharp_query>:
{
 800ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	4606      	mov	r6, r0
 800ab54:	460d      	mov	r5, r1
 800ab56:	4690      	mov	r8, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ab58:	f100 0925 	add.w	r9, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	6828      	ldr	r0, [r5, #0]
 800ab60:	f000 fc19 	bl	800b396 <ip4_addr_isbroadcast_u32>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f040 80b3 	bne.w	800acd0 <etharp_query+0x184>
      ip4_addr_ismulticast(ipaddr) ||
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ab70:	2ae0      	cmp	r2, #224	; 0xe0
 800ab72:	f000 80b0 	beq.w	800acd6 <etharp_query+0x18a>
      ip4_addr_ismulticast(ipaddr) ||
 800ab76:	2d00      	cmp	r5, #0
 800ab78:	f000 80b0 	beq.w	800acdc <etharp_query+0x190>
      ip4_addr_isany(ipaddr)) {
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 80b0 	beq.w	800ace2 <etharp_query+0x196>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ab82:	4632      	mov	r2, r6
 800ab84:	2101      	movs	r1, #1
 800ab86:	4628      	mov	r0, r5
 800ab88:	f7ff fcee 	bl	800a568 <etharp_find_entry>
  if (i < 0) {
 800ab8c:	1e04      	subs	r4, r0, #0
 800ab8e:	db5c      	blt.n	800ac4a <etharp_query+0xfe>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ab90:	4627      	mov	r7, r4
 800ab92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ab96:	4a56      	ldr	r2, [pc, #344]	; (800acf0 <etharp_query+0x1a4>)
 800ab98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab9c:	7d1b      	ldrb	r3, [r3, #20]
 800ab9e:	b94b      	cbnz	r3, 800abb4 <etharp_query+0x68>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800aba0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aba8:	f04f 0a01 	mov.w	sl, #1
 800abac:	f883 a014 	strb.w	sl, [r3, #20]
    arp_table[i].netif = netif;
 800abb0:	609e      	str	r6, [r3, #8]
 800abb2:	e001      	b.n	800abb8 <etharp_query+0x6c>
  int is_new_entry = 0;
 800abb4:	f04f 0a00 	mov.w	sl, #0
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800abb8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800abbc:	4a4c      	ldr	r2, [pc, #304]	; (800acf0 <etharp_query+0x1a4>)
 800abbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abc2:	7d1b      	ldrb	r3, [r3, #20]
 800abc4:	b1b3      	cbz	r3, 800abf4 <etharp_query+0xa8>
  if (is_new_entry || (q == NULL)) {
 800abc6:	f1ba 0f00 	cmp.w	sl, #0
 800abca:	d11b      	bne.n	800ac04 <etharp_query+0xb8>
 800abcc:	f1b8 0f00 	cmp.w	r8, #0
 800abd0:	d018      	beq.n	800ac04 <etharp_query+0xb8>
  err_t result = ERR_MEM;
 800abd2:	f04f 35ff 	mov.w	r5, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800abd6:	f1b8 0f00 	cmp.w	r8, #0
 800abda:	d01d      	beq.n	800ac18 <etharp_query+0xcc>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800abdc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800abe0:	4a43      	ldr	r2, [pc, #268]	; (800acf0 <etharp_query+0x1a4>)
 800abe2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d81d      	bhi.n	800ac28 <etharp_query+0xdc>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800abec:	2b01      	cmp	r3, #1
 800abee:	d044      	beq.n	800ac7a <etharp_query+0x12e>
 800abf0:	462c      	mov	r4, r5
 800abf2:	e02a      	b.n	800ac4a <etharp_query+0xfe>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800abf4:	4b3f      	ldr	r3, [pc, #252]	; (800acf4 <etharp_query+0x1a8>)
 800abf6:	f240 32c7 	movw	r2, #967	; 0x3c7
 800abfa:	493f      	ldr	r1, [pc, #252]	; (800acf8 <etharp_query+0x1ac>)
 800abfc:	483f      	ldr	r0, [pc, #252]	; (800acfc <etharp_query+0x1b0>)
 800abfe:	f008 f983 	bl	8012f08 <printf>
 800ac02:	e7e0      	b.n	800abc6 <etharp_query+0x7a>
    result = etharp_request(netif, ipaddr);
 800ac04:	4629      	mov	r1, r5
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff fede 	bl	800a9c8 <etharp_request>
 800ac0c:	4605      	mov	r5, r0
    if (q == NULL) {
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	d1e0      	bne.n	800abd6 <etharp_query+0x8a>
      return result;
 800ac14:	4604      	mov	r4, r0
 800ac16:	e018      	b.n	800ac4a <etharp_query+0xfe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ac18:	4b36      	ldr	r3, [pc, #216]	; (800acf4 <etharp_query+0x1a8>)
 800ac1a:	f240 32db 	movw	r2, #987	; 0x3db
 800ac1e:	4938      	ldr	r1, [pc, #224]	; (800ad00 <etharp_query+0x1b4>)
 800ac20:	4836      	ldr	r0, [pc, #216]	; (800acfc <etharp_query+0x1b0>)
 800ac22:	f008 f971 	bl	8012f08 <printf>
 800ac26:	e7d9      	b.n	800abdc <etharp_query+0x90>
    ETHARP_SET_HINT(netif, i);
 800ac28:	f882 40f0 	strb.w	r4, [r2, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ac2c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	3308      	adds	r3, #8
 800ac34:	4413      	add	r3, r2
 800ac36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac3a:	9200      	str	r2, [sp, #0]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	464a      	mov	r2, r9
 800ac40:	4641      	mov	r1, r8
 800ac42:	4630      	mov	r0, r6
 800ac44:	f001 f8be 	bl	800bdc4 <ethernet_output>
 800ac48:	4604      	mov	r4, r0
}
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	b002      	add	sp, #8
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ac52:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <etharp_query+0x1a8>)
 800ac54:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800ac58:	492a      	ldr	r1, [pc, #168]	; (800ad04 <etharp_query+0x1b8>)
 800ac5a:	4828      	ldr	r0, [pc, #160]	; (800acfc <etharp_query+0x1b0>)
 800ac5c:	f008 f954 	bl	8012f08 <printf>
      if (p->type != PBUF_ROM) {
 800ac60:	7b23      	ldrb	r3, [r4, #12]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d11e      	bne.n	800aca4 <etharp_query+0x158>
      p = p->next;
 800ac66:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800ac68:	b14c      	cbz	r4, 800ac7e <etharp_query+0x132>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ac6a:	8962      	ldrh	r2, [r4, #10]
 800ac6c:	8923      	ldrh	r3, [r4, #8]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d1f6      	bne.n	800ac60 <etharp_query+0x114>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1ec      	bne.n	800ac52 <etharp_query+0x106>
 800ac78:	e7f2      	b.n	800ac60 <etharp_query+0x114>
    p = q;
 800ac7a:	4644      	mov	r4, r8
 800ac7c:	e7f4      	b.n	800ac68 <etharp_query+0x11c>
    int copy_needed = 0;
 800ac7e:	2300      	movs	r3, #0
    if (copy_needed) {
 800ac80:	b193      	cbz	r3, 800aca8 <etharp_query+0x15c>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800ac82:	2200      	movs	r2, #0
 800ac84:	8921      	ldrh	r1, [r4, #8]
 800ac86:	2002      	movs	r0, #2
 800ac88:	f7fb fca0 	bl	80065cc <pbuf_alloc>
      if (p != NULL) {
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	b178      	cbz	r0, 800acb0 <etharp_query+0x164>
        if (pbuf_copy(p, q) != ERR_OK) {
 800ac90:	4641      	mov	r1, r8
 800ac92:	f7fb fe5d 	bl	8006950 <pbuf_copy>
 800ac96:	b158      	cbz	r0, 800acb0 <etharp_query+0x164>
          pbuf_free(p);
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f7fb fc33 	bl	8006504 <pbuf_free>
      result = ERR_MEM;
 800ac9e:	f04f 34ff 	mov.w	r4, #4294967295
 800aca2:	e7d2      	b.n	800ac4a <etharp_query+0xfe>
        copy_needed = 1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e7eb      	b.n	800ac80 <etharp_query+0x134>
      pbuf_ref(p);
 800aca8:	4640      	mov	r0, r8
 800acaa:	f7fb fdff 	bl	80068ac <pbuf_ref>
      p = q;
 800acae:	4644      	mov	r4, r8
    if (p != NULL) {
 800acb0:	b1d4      	cbz	r4, 800ace8 <etharp_query+0x19c>
      if (arp_table[i].q != NULL) {
 800acb2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800acb6:	4a0e      	ldr	r2, [pc, #56]	; (800acf0 <etharp_query+0x1a4>)
 800acb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800acbc:	b108      	cbz	r0, 800acc2 <etharp_query+0x176>
        pbuf_free(arp_table[i].q);
 800acbe:	f7fb fc21 	bl	8006504 <pbuf_free>
      arp_table[i].q = p;
 800acc2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800acc6:	4a0a      	ldr	r2, [pc, #40]	; (800acf0 <etharp_query+0x1a4>)
 800acc8:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
      result = ERR_OK;
 800accc:	2400      	movs	r4, #0
 800acce:	e7bc      	b.n	800ac4a <etharp_query+0xfe>
    return ERR_ARG;
 800acd0:	f06f 040f 	mvn.w	r4, #15
 800acd4:	e7b9      	b.n	800ac4a <etharp_query+0xfe>
 800acd6:	f06f 040f 	mvn.w	r4, #15
 800acda:	e7b6      	b.n	800ac4a <etharp_query+0xfe>
 800acdc:	f06f 040f 	mvn.w	r4, #15
 800ace0:	e7b3      	b.n	800ac4a <etharp_query+0xfe>
 800ace2:	f06f 040f 	mvn.w	r4, #15
 800ace6:	e7b0      	b.n	800ac4a <etharp_query+0xfe>
      result = ERR_MEM;
 800ace8:	f04f 34ff 	mov.w	r4, #4294967295
 800acec:	e7ad      	b.n	800ac4a <etharp_query+0xfe>
 800acee:	bf00      	nop
 800acf0:	20003404 	.word	0x20003404
 800acf4:	0801b780 	.word	0x0801b780
 800acf8:	0801b930 	.word	0x0801b930
 800acfc:	0801a38c 	.word	0x0801a38c
 800ad00:	0801b958 	.word	0x0801b958
 800ad04:	0801b964 	.word	0x0801b964

0800ad08 <etharp_output>:
{
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	460e      	mov	r6, r1
 800ad0e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ad10:	4607      	mov	r7, r0
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d031      	beq.n	800ad7a <etharp_output+0x72>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	d037      	beq.n	800ad8a <etharp_output+0x82>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	d03d      	beq.n	800ad9a <etharp_output+0x92>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ad1e:	4639      	mov	r1, r7
 800ad20:	6828      	ldr	r0, [r5, #0]
 800ad22:	f000 fb38 	bl	800b396 <ip4_addr_isbroadcast_u32>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d17e      	bne.n	800ae28 <etharp_output+0x120>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ad2a:	682b      	ldr	r3, [r5, #0]
 800ad2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad30:	2ae0      	cmp	r2, #224	; 0xe0
 800ad32:	d03a      	beq.n	800adaa <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	405a      	eors	r2, r3
 800ad3a:	420a      	tst	r2, r1
 800ad3c:	d009      	beq.n	800ad52 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800ad3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ad40:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d004      	beq.n	800ad52 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d078      	beq.n	800ae40 <etharp_output+0x138>
            dst_addr = netif_ip4_gw(netif);
 800ad4e:	f107 050c 	add.w	r5, r7, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ad52:	4b3d      	ldr	r3, [pc, #244]	; (800ae48 <etharp_output+0x140>)
 800ad54:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800ad58:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ad5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ad60:	7d1b      	ldrb	r3, [r3, #20]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d958      	bls.n	800ae18 <etharp_output+0x110>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ad66:	6828      	ldr	r0, [r5, #0]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4937      	ldr	r1, [pc, #220]	; (800ae48 <etharp_output+0x140>)
 800ad6c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ad70:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ad72:	4298      	cmp	r0, r3
 800ad74:	d02f      	beq.n	800add6 <etharp_output+0xce>
 800ad76:	2300      	movs	r3, #0
 800ad78:	e034      	b.n	800ade4 <etharp_output+0xdc>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ad7a:	4b34      	ldr	r3, [pc, #208]	; (800ae4c <etharp_output+0x144>)
 800ad7c:	f240 321b 	movw	r2, #795	; 0x31b
 800ad80:	4933      	ldr	r1, [pc, #204]	; (800ae50 <etharp_output+0x148>)
 800ad82:	4834      	ldr	r0, [pc, #208]	; (800ae54 <etharp_output+0x14c>)
 800ad84:	f008 f8c0 	bl	8012f08 <printf>
 800ad88:	e7c5      	b.n	800ad16 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ad8a:	4b30      	ldr	r3, [pc, #192]	; (800ae4c <etharp_output+0x144>)
 800ad8c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ad90:	4931      	ldr	r1, [pc, #196]	; (800ae58 <etharp_output+0x150>)
 800ad92:	4830      	ldr	r0, [pc, #192]	; (800ae54 <etharp_output+0x14c>)
 800ad94:	f008 f8b8 	bl	8012f08 <printf>
 800ad98:	e7bf      	b.n	800ad1a <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ad9a:	4b2c      	ldr	r3, [pc, #176]	; (800ae4c <etharp_output+0x144>)
 800ad9c:	f240 321d 	movw	r2, #797	; 0x31d
 800ada0:	492e      	ldr	r1, [pc, #184]	; (800ae5c <etharp_output+0x154>)
 800ada2:	482c      	ldr	r0, [pc, #176]	; (800ae54 <etharp_output+0x14c>)
 800ada4:	f008 f8b0 	bl	8012f08 <printf>
 800ada8:	e7b9      	b.n	800ad1e <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800adaa:	2301      	movs	r3, #1
 800adac:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800adb0:	2300      	movs	r3, #0
 800adb2:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800adb6:	235e      	movs	r3, #94	; 0x5e
 800adb8:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800adbc:	786b      	ldrb	r3, [r5, #1]
 800adbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc2:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800adc6:	78ab      	ldrb	r3, [r5, #2]
 800adc8:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800adcc:	78eb      	ldrb	r3, [r5, #3]
 800adce:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800add2:	ab02      	add	r3, sp, #8
 800add4:	e029      	b.n	800ae2a <etharp_output+0x122>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800add6:	4631      	mov	r1, r6
 800add8:	4638      	mov	r0, r7
 800adda:	f7ff fe49 	bl	800aa70 <etharp_output_to_arp_index>
 800adde:	e02d      	b.n	800ae3c <etharp_output+0x134>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ade0:	3301      	adds	r3, #1
 800ade2:	b25b      	sxtb	r3, r3
 800ade4:	2b09      	cmp	r3, #9
 800ade6:	dc19      	bgt.n	800ae1c <etharp_output+0x114>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ade8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800adec:	4c16      	ldr	r4, [pc, #88]	; (800ae48 <etharp_output+0x140>)
 800adee:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800adf2:	7d02      	ldrb	r2, [r0, #20]
 800adf4:	2a01      	cmp	r2, #1
 800adf6:	d9f3      	bls.n	800ade0 <etharp_output+0xd8>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800adf8:	6828      	ldr	r0, [r5, #0]
 800adfa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800adfe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800ae02:	6852      	ldr	r2, [r2, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ae04:	4290      	cmp	r0, r2
 800ae06:	d1eb      	bne.n	800ade0 <etharp_output+0xd8>
        ETHARP_SET_HINT(netif, i);
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4638      	mov	r0, r7
 800ae12:	f7ff fe2d 	bl	800aa70 <etharp_output_to_arp_index>
 800ae16:	e011      	b.n	800ae3c <etharp_output+0x134>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e7e3      	b.n	800ade4 <etharp_output+0xdc>
    return etharp_query(netif, dst_addr, q);
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4638      	mov	r0, r7
 800ae22:	f7ff fe93 	bl	800ab4c <etharp_query>
 800ae26:	e009      	b.n	800ae3c <etharp_output+0x134>
    dest = (const struct eth_addr *)&ethbroadcast;
 800ae28:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <etharp_output+0x158>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800ae2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae2e:	9200      	str	r2, [sp, #0]
 800ae30:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ae34:	4631      	mov	r1, r6
 800ae36:	4638      	mov	r0, r7
 800ae38:	f000 ffc4 	bl	800bdc4 <ethernet_output>
}
 800ae3c:	b005      	add	sp, #20
 800ae3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800ae40:	f06f 0003 	mvn.w	r0, #3
 800ae44:	e7fa      	b.n	800ae3c <etharp_output+0x134>
 800ae46:	bf00      	nop
 800ae48:	20003404 	.word	0x20003404
 800ae4c:	0801b780 	.word	0x0801b780
 800ae50:	0801b834 	.word	0x0801b834
 800ae54:	0801a38c 	.word	0x0801a38c
 800ae58:	0801b958 	.word	0x0801b958
 800ae5c:	0801b8e0 	.word	0x0801b8e0
 800ae60:	0801a31c 	.word	0x0801a31c

0800ae64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	b086      	sub	sp, #24
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	4688      	mov	r8, r1
 800ae6e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ae70:	2200      	movs	r2, #0
 800ae72:	2124      	movs	r1, #36	; 0x24
 800ae74:	2001      	movs	r0, #1
 800ae76:	f7fb fba9 	bl	80065cc <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800ae7a:	b3a0      	cbz	r0, 800aee6 <icmp_send_response+0x82>
 800ae7c:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ae7e:	8943      	ldrh	r3, [r0, #10]
 800ae80:	2b23      	cmp	r3, #35	; 0x23
 800ae82:	d933      	bls.n	800aeec <icmp_send_response+0x88>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ae84:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ae88:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800ae8a:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800ae8e:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	7123      	strb	r3, [r4, #4]
 800ae94:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800ae96:	71a3      	strb	r3, [r4, #6]
 800ae98:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ae9a:	686b      	ldr	r3, [r5, #4]
 800ae9c:	6872      	ldr	r2, [r6, #4]
 800ae9e:	6816      	ldr	r6, [r2, #0]
 800aea0:	6850      	ldr	r0, [r2, #4]
 800aea2:	6891      	ldr	r1, [r2, #8]
 800aea4:	68d7      	ldr	r7, [r2, #12]
 800aea6:	609e      	str	r6, [r3, #8]
 800aea8:	60d8      	str	r0, [r3, #12]
 800aeaa:	6119      	str	r1, [r3, #16]
 800aeac:	615f      	str	r7, [r3, #20]
 800aeae:	6916      	ldr	r6, [r2, #16]
 800aeb0:	6950      	ldr	r0, [r2, #20]
 800aeb2:	6991      	ldr	r1, [r2, #24]
 800aeb4:	619e      	str	r6, [r3, #24]
 800aeb6:	61d8      	str	r0, [r3, #28]
 800aeb8:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800aeba:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800aebe:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800aec0:	a805      	add	r0, sp, #20
 800aec2:	f000 f8cb 	bl	800b05c <ip4_route>
#endif
  if (netif != NULL) {
 800aec6:	b158      	cbz	r0, 800aee0 <icmp_send_response+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800aec8:	2100      	movs	r1, #0
 800aeca:	70a1      	strb	r1, [r4, #2]
 800aecc:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800aece:	9002      	str	r0, [sp, #8]
 800aed0:	2301      	movs	r3, #1
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	9100      	str	r1, [sp, #0]
 800aed6:	23ff      	movs	r3, #255	; 0xff
 800aed8:	aa05      	add	r2, sp, #20
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 fa46 	bl	800b36c <ip4_output_if>
  }
  pbuf_free(q);
 800aee0:	4628      	mov	r0, r5
 800aee2:	f7fb fb0f 	bl	8006504 <pbuf_free>
}
 800aee6:	b006      	add	sp, #24
 800aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800aeec:	4b03      	ldr	r3, [pc, #12]	; (800aefc <icmp_send_response+0x98>)
 800aeee:	f240 1261 	movw	r2, #353	; 0x161
 800aef2:	4903      	ldr	r1, [pc, #12]	; (800af00 <icmp_send_response+0x9c>)
 800aef4:	4803      	ldr	r0, [pc, #12]	; (800af04 <icmp_send_response+0xa0>)
 800aef6:	f008 f807 	bl	8012f08 <printf>
 800aefa:	e7c3      	b.n	800ae84 <icmp_send_response+0x20>
 800aefc:	0801b980 	.word	0x0801b980
 800af00:	0801b9b8 	.word	0x0801b9b8
 800af04:	0801a38c 	.word	0x0801a38c

0800af08 <icmp_input>:
{
 800af08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800af10:	4b47      	ldr	r3, [pc, #284]	; (800b030 <icmp_input+0x128>)
 800af12:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 800af14:	7834      	ldrb	r4, [r6, #0]
 800af16:	f004 040f 	and.w	r4, r4, #15
 800af1a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800af1c:	2c13      	cmp	r4, #19
 800af1e:	d915      	bls.n	800af4c <icmp_input+0x44>
 800af20:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 800af22:	8943      	ldrh	r3, [r0, #10]
 800af24:	2b03      	cmp	r3, #3
 800af26:	d911      	bls.n	800af4c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800af28:	6843      	ldr	r3, [r0, #4]
 800af2a:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800af2c:	2b08      	cmp	r3, #8
 800af2e:	d15d      	bne.n	800afec <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800af30:	4b3f      	ldr	r3, [pc, #252]	; (800b030 <icmp_input+0x128>)
 800af32:	6958      	ldr	r0, [r3, #20]
 800af34:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800af38:	2be0      	cmp	r3, #224	; 0xe0
 800af3a:	d037      	beq.n	800afac <icmp_input+0xa4>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800af3c:	4b3c      	ldr	r3, [pc, #240]	; (800b030 <icmp_input+0x128>)
 800af3e:	6819      	ldr	r1, [r3, #0]
 800af40:	f000 fa29 	bl	800b396 <ip4_addr_isbroadcast_u32>
 800af44:	bb90      	cbnz	r0, 800afac <icmp_input+0xa4>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800af46:	892b      	ldrh	r3, [r5, #8]
 800af48:	2b07      	cmp	r3, #7
 800af4a:	d805      	bhi.n	800af58 <icmp_input+0x50>
  pbuf_free(p);
 800af4c:	4628      	mov	r0, r5
 800af4e:	f7fb fad9 	bl	8006504 <pbuf_free>
}
 800af52:	b004      	add	sp, #16
 800af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800af58:	f104 010e 	add.w	r1, r4, #14
 800af5c:	4628      	mov	r0, r5
 800af5e:	f7fb fac7 	bl	80064f0 <pbuf_header>
 800af62:	b3a8      	cbz	r0, 800afd0 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800af64:	8929      	ldrh	r1, [r5, #8]
 800af66:	4421      	add	r1, r4
 800af68:	2200      	movs	r2, #0
 800af6a:	b289      	uxth	r1, r1
 800af6c:	2002      	movs	r0, #2
 800af6e:	f7fb fb2d 	bl	80065cc <pbuf_alloc>
      if (r == NULL) {
 800af72:	4680      	mov	r8, r0
 800af74:	b1d0      	cbz	r0, 800afac <icmp_input+0xa4>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800af76:	8942      	ldrh	r2, [r0, #10]
 800af78:	f104 0308 	add.w	r3, r4, #8
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d313      	bcc.n	800afa8 <icmp_input+0xa0>
      MEMCPY(r->payload, iphdr_in, hlen);
 800af80:	4622      	mov	r2, r4
 800af82:	4631      	mov	r1, r6
 800af84:	6840      	ldr	r0, [r0, #4]
 800af86:	f007 ff9d 	bl	8012ec4 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800af8a:	4261      	negs	r1, r4
 800af8c:	4640      	mov	r0, r8
 800af8e:	f7fb faaf 	bl	80064f0 <pbuf_header>
 800af92:	b978      	cbnz	r0, 800afb4 <icmp_input+0xac>
      if (pbuf_copy(r, p) != ERR_OK) {
 800af94:	4629      	mov	r1, r5
 800af96:	4640      	mov	r0, r8
 800af98:	f7fb fcda 	bl	8006950 <pbuf_copy>
 800af9c:	b9a0      	cbnz	r0, 800afc8 <icmp_input+0xc0>
      pbuf_free(p);
 800af9e:	4628      	mov	r0, r5
 800afa0:	f7fb fab0 	bl	8006504 <pbuf_free>
      p = r;
 800afa4:	4645      	mov	r5, r8
 800afa6:	e01b      	b.n	800afe0 <icmp_input+0xd8>
        pbuf_free(r);
 800afa8:	f7fb faac 	bl	8006504 <pbuf_free>
  pbuf_free(p);
 800afac:	4628      	mov	r0, r5
 800afae:	f7fb faa9 	bl	8006504 <pbuf_free>
  return;
 800afb2:	e7ce      	b.n	800af52 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800afb4:	4b1f      	ldr	r3, [pc, #124]	; (800b034 <icmp_input+0x12c>)
 800afb6:	22af      	movs	r2, #175	; 0xaf
 800afb8:	491f      	ldr	r1, [pc, #124]	; (800b038 <icmp_input+0x130>)
 800afba:	4820      	ldr	r0, [pc, #128]	; (800b03c <icmp_input+0x134>)
 800afbc:	f007 ffa4 	bl	8012f08 <printf>
        pbuf_free(r);
 800afc0:	4640      	mov	r0, r8
 800afc2:	f7fb fa9f 	bl	8006504 <pbuf_free>
        goto icmperr;
 800afc6:	e7f1      	b.n	800afac <icmp_input+0xa4>
        pbuf_free(r);
 800afc8:	4640      	mov	r0, r8
 800afca:	f7fb fa9b 	bl	8006504 <pbuf_free>
        goto icmperr;
 800afce:	e7ed      	b.n	800afac <icmp_input+0xa4>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800afd0:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 800afd4:	31f2      	adds	r1, #242	; 0xf2
 800afd6:	b209      	sxth	r1, r1
 800afd8:	4628      	mov	r0, r5
 800afda:	f7fb fa89 	bl	80064f0 <pbuf_header>
 800afde:	b948      	cbnz	r0, 800aff4 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 800afe0:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800afe2:	4621      	mov	r1, r4
 800afe4:	4628      	mov	r0, r5
 800afe6:	f7fb fa83 	bl	80064f0 <pbuf_header>
 800afea:	b150      	cbz	r0, 800b002 <icmp_input+0xfa>
  pbuf_free(p);
 800afec:	4628      	mov	r0, r5
 800afee:	f7fb fa89 	bl	8006504 <pbuf_free>
  return;
 800aff2:	e7ae      	b.n	800af52 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800aff4:	4b0f      	ldr	r3, [pc, #60]	; (800b034 <icmp_input+0x12c>)
 800aff6:	22c0      	movs	r2, #192	; 0xc0
 800aff8:	4911      	ldr	r1, [pc, #68]	; (800b040 <icmp_input+0x138>)
 800affa:	4810      	ldr	r0, [pc, #64]	; (800b03c <icmp_input+0x134>)
 800affc:	f007 ff84 	bl	8012f08 <printf>
        goto icmperr;
 800b000:	e7d4      	b.n	800afac <icmp_input+0xa4>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800b002:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 800b004:	490a      	ldr	r1, [pc, #40]	; (800b030 <icmp_input+0x128>)
 800b006:	694b      	ldr	r3, [r1, #20]
 800b008:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b00a:	690b      	ldr	r3, [r1, #16]
 800b00c:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b00e:	2200      	movs	r2, #0
 800b010:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 800b012:	70b2      	strb	r2, [r6, #2]
 800b014:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800b016:	23ff      	movs	r3, #255	; 0xff
 800b018:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800b01a:	7282      	strb	r2, [r0, #10]
 800b01c:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b01e:	9702      	str	r7, [sp, #8]
 800b020:	2001      	movs	r0, #1
 800b022:	9001      	str	r0, [sp, #4]
 800b024:	9200      	str	r2, [sp, #0]
 800b026:	3114      	adds	r1, #20
 800b028:	4628      	mov	r0, r5
 800b02a:	f000 f99f 	bl	800b36c <ip4_output_if>
      if (ret != ERR_OK) {
 800b02e:	e7dd      	b.n	800afec <icmp_input+0xe4>
 800b030:	200044d0 	.word	0x200044d0
 800b034:	0801b980 	.word	0x0801b980
 800b038:	0801b9e4 	.word	0x0801b9e4
 800b03c:	0801a38c 	.word	0x0801a38c
 800b040:	0801ba1c 	.word	0x0801ba1c

0800b044 <icmp_dest_unreach>:
{
 800b044:	b508      	push	{r3, lr}
 800b046:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800b048:	2103      	movs	r1, #3
 800b04a:	f7ff ff0b 	bl	800ae64 <icmp_send_response>
}
 800b04e:	bd08      	pop	{r3, pc}

0800b050 <icmp_time_exceeded>:
{
 800b050:	b508      	push	{r3, lr}
 800b052:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800b054:	210b      	movs	r1, #11
 800b056:	f7ff ff05 	bl	800ae64 <icmp_send_response>
}
 800b05a:	bd08      	pop	{r3, pc}

0800b05c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b05c:	b430      	push	{r4, r5}
 800b05e:	4604      	mov	r4, r0
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b060:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <ip4_route+0x58>)
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	e000      	b.n	800b068 <ip4_route+0xc>
 800b066:	6800      	ldr	r0, [r0, #0]
 800b068:	b1b0      	cbz	r0, 800b098 <ip4_route+0x3c>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b06a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800b06e:	f013 0f01 	tst.w	r3, #1
 800b072:	d0f8      	beq.n	800b066 <ip4_route+0xa>
 800b074:	f013 0f04 	tst.w	r3, #4
 800b078:	d0f5      	beq.n	800b066 <ip4_route+0xa>
 800b07a:	6842      	ldr	r2, [r0, #4]
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	d0f2      	beq.n	800b066 <ip4_route+0xa>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b080:	6821      	ldr	r1, [r4, #0]
 800b082:	6885      	ldr	r5, [r0, #8]
 800b084:	404a      	eors	r2, r1
 800b086:	422a      	tst	r2, r5
 800b088:	d012      	beq.n	800b0b0 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b08a:	f013 0f02 	tst.w	r3, #2
 800b08e:	d1ea      	bne.n	800b066 <ip4_route+0xa>
 800b090:	68c3      	ldr	r3, [r0, #12]
 800b092:	4299      	cmp	r1, r3
 800b094:	d1e7      	bne.n	800b066 <ip4_route+0xa>
 800b096:	e00b      	b.n	800b0b0 <ip4_route+0x54>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b098:	4b07      	ldr	r3, [pc, #28]	; (800b0b8 <ip4_route+0x5c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	b143      	cbz	r3, 800b0b0 <ip4_route+0x54>
 800b09e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800b0a2:	f002 0205 	and.w	r2, r2, #5
 800b0a6:	2a05      	cmp	r2, #5
 800b0a8:	d102      	bne.n	800b0b0 <ip4_route+0x54>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800b0aa:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b0ac:	b102      	cbz	r2, 800b0b0 <ip4_route+0x54>
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
 800b0ae:	4618      	mov	r0, r3
}
 800b0b0:	bc30      	pop	{r4, r5}
 800b0b2:	4770      	bx	lr
 800b0b4:	200079f0 	.word	0x200079f0
 800b0b8:	200079f4 	.word	0x200079f4

0800b0bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b0c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800b0c6:	f898 3000 	ldrb.w	r3, [r8]
 800b0ca:	091a      	lsrs	r2, r3, #4
 800b0cc:	2a04      	cmp	r2, #4
 800b0ce:	d004      	beq.n	800b0da <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b0d0:	f7fb fa18 	bl	8006504 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL(iphdr);
 800b0dc:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 800b0e0:	009f      	lsls	r7, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b0e2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800b0e6:	f7fa fdd7 	bl	8005c98 <lwip_htons>
 800b0ea:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800b0ec:	892b      	ldrh	r3, [r5, #8]
 800b0ee:	4283      	cmp	r3, r0
 800b0f0:	d816      	bhi.n	800b120 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b0f2:	896b      	ldrh	r3, [r5, #10]
 800b0f4:	42bb      	cmp	r3, r7
 800b0f6:	d318      	bcc.n	800b12a <ip4_input+0x6e>
 800b0f8:	892b      	ldrh	r3, [r5, #8]
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	d315      	bcc.n	800b12a <ip4_input+0x6e>
 800b0fe:	2f13      	cmp	r7, #19
 800b100:	d913      	bls.n	800b12a <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b102:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b106:	4a5a      	ldr	r2, [pc, #360]	; (800b270 <ip4_input+0x1b4>)
 800b108:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b10a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b10e:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b114:	2be0      	cmp	r3, #224	; 0xe0
 800b116:	d00c      	beq.n	800b132 <ip4_input+0x76>
    netif = inp;
 800b118:	4634      	mov	r4, r6
    int first = 1;
 800b11a:	f04f 0901 	mov.w	r9, #1
 800b11e:	e016      	b.n	800b14e <ip4_input+0x92>
    pbuf_realloc(p, iphdr_len);
 800b120:	4601      	mov	r1, r0
 800b122:	4628      	mov	r0, r5
 800b124:	f7fb fb42 	bl	80067ac <pbuf_realloc>
 800b128:	e7e3      	b.n	800b0f2 <ip4_input+0x36>
    pbuf_free(p);
 800b12a:	4628      	mov	r0, r5
 800b12c:	f7fb f9ea 	bl	8006504 <pbuf_free>
    return ERR_OK;
 800b130:	e7d0      	b.n	800b0d4 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b132:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800b136:	f013 0f01 	tst.w	r3, #1
 800b13a:	d025      	beq.n	800b188 <ip4_input+0xcc>
 800b13c:	6873      	ldr	r3, [r6, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d167      	bne.n	800b212 <ip4_input+0x156>
      netif = NULL;
 800b142:	2400      	movs	r4, #0
 800b144:	e021      	b.n	800b18a <ip4_input+0xce>
        netif = netif->next;
 800b146:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 800b148:	42b4      	cmp	r4, r6
 800b14a:	d01b      	beq.n	800b184 <ip4_input+0xc8>
    } while (netif != NULL);
 800b14c:	b1ec      	cbz	r4, 800b18a <ip4_input+0xce>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b14e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800b152:	f013 0f01 	tst.w	r3, #1
 800b156:	d009      	beq.n	800b16c <ip4_input+0xb0>
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	b13b      	cbz	r3, 800b16c <ip4_input+0xb0>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b15c:	4a44      	ldr	r2, [pc, #272]	; (800b270 <ip4_input+0x1b4>)
 800b15e:	6950      	ldr	r0, [r2, #20]
 800b160:	4283      	cmp	r3, r0
 800b162:	d012      	beq.n	800b18a <ip4_input+0xce>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b164:	4621      	mov	r1, r4
 800b166:	f000 f916 	bl	800b396 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b16a:	b970      	cbnz	r0, 800b18a <ip4_input+0xce>
      if (first) {
 800b16c:	f1b9 0f00 	cmp.w	r9, #0
 800b170:	d0e9      	beq.n	800b146 <ip4_input+0x8a>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800b172:	4b3f      	ldr	r3, [pc, #252]	; (800b270 <ip4_input+0x1b4>)
 800b174:	7d1b      	ldrb	r3, [r3, #20]
 800b176:	2b7f      	cmp	r3, #127	; 0x7f
 800b178:	d04d      	beq.n	800b216 <ip4_input+0x15a>
        netif = netif_list;
 800b17a:	4b3e      	ldr	r3, [pc, #248]	; (800b274 <ip4_input+0x1b8>)
 800b17c:	681c      	ldr	r4, [r3, #0]
        first = 0;
 800b17e:	f04f 0900 	mov.w	r9, #0
 800b182:	e7e1      	b.n	800b148 <ip4_input+0x8c>
        netif = netif->next;
 800b184:	6824      	ldr	r4, [r4, #0]
 800b186:	e7e1      	b.n	800b14c <ip4_input+0x90>
      netif = NULL;
 800b188:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b18a:	4631      	mov	r1, r6
 800b18c:	4b38      	ldr	r3, [pc, #224]	; (800b270 <ip4_input+0x1b4>)
 800b18e:	6918      	ldr	r0, [r3, #16]
 800b190:	f000 f901 	bl	800b396 <ip4_addr_isbroadcast_u32>
 800b194:	2800      	cmp	r0, #0
 800b196:	d140      	bne.n	800b21a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b198:	4b35      	ldr	r3, [pc, #212]	; (800b270 <ip4_input+0x1b4>)
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b1a0:	2be0      	cmp	r3, #224	; 0xe0
 800b1a2:	d03a      	beq.n	800b21a <ip4_input+0x15e>
  if (netif == NULL) {
 800b1a4:	2c00      	cmp	r4, #0
 800b1a6:	d03c      	beq.n	800b222 <ip4_input+0x166>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b1a8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800b1ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	b13b      	cbz	r3, 800b1c4 <ip4_input+0x108>
    p = ip4_reass(p);
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	f000 fbeb 	bl	800b990 <ip4_reass>
    if (p == NULL) {
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d089      	beq.n	800b0d4 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 800b1c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800b1c4:	4a2a      	ldr	r2, [pc, #168]	; (800b270 <ip4_input+0x1b4>)
 800b1c6:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 800b1c8:	6056      	str	r6, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b1ca:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800b1ce:	f898 3000 	ldrb.w	r3, [r8]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800b1da:	4279      	negs	r1, r7
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f7fb f987 	bl	80064f0 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800b1e2:	f898 3009 	ldrb.w	r3, [r8, #9]
 800b1e6:	2b06      	cmp	r3, #6
 800b1e8:	d02c      	beq.n	800b244 <ip4_input+0x188>
 800b1ea:	2b11      	cmp	r3, #17
 800b1ec:	d01d      	beq.n	800b22a <ip4_input+0x16e>
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d02d      	beq.n	800b24e <ip4_input+0x192>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4b1e      	ldr	r3, [pc, #120]	; (800b270 <ip4_input+0x1b4>)
 800b1f6:	6958      	ldr	r0, [r3, #20]
 800b1f8:	f000 f8cd 	bl	800b396 <ip4_addr_isbroadcast_u32>
 800b1fc:	b928      	cbnz	r0, 800b20a <ip4_input+0x14e>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b1fe:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <ip4_input+0x1b4>)
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b206:	2be0      	cmp	r3, #224	; 0xe0
 800b208:	d126      	bne.n	800b258 <ip4_input+0x19c>
      pbuf_free(p);
 800b20a:	4628      	mov	r0, r5
 800b20c:	f7fb f97a 	bl	8006504 <pbuf_free>
 800b210:	e00f      	b.n	800b232 <ip4_input+0x176>
      netif = inp;
 800b212:	4634      	mov	r4, r6
 800b214:	e7b9      	b.n	800b18a <ip4_input+0xce>
          netif = NULL;
 800b216:	2400      	movs	r4, #0
 800b218:	e7b7      	b.n	800b18a <ip4_input+0xce>
      pbuf_free(p);
 800b21a:	4628      	mov	r0, r5
 800b21c:	f7fb f972 	bl	8006504 <pbuf_free>
      return ERR_OK;
 800b220:	e758      	b.n	800b0d4 <ip4_input+0x18>
    pbuf_free(p);
 800b222:	4628      	mov	r0, r5
 800b224:	f7fb f96e 	bl	8006504 <pbuf_free>
    return ERR_OK;
 800b228:	e754      	b.n	800b0d4 <ip4_input+0x18>
      udp_input(p, inp);
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	f7ff f8c9 	bl	800a3c4 <udp_input>
  ip_data.current_netif = NULL;
 800b232:	4b0f      	ldr	r3, [pc, #60]	; (800b270 <ip4_input+0x1b4>)
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b238:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b23a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b23c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b23e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b240:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800b242:	e747      	b.n	800b0d4 <ip4_input+0x18>
      tcp_input(p, inp);
 800b244:	4631      	mov	r1, r6
 800b246:	4628      	mov	r0, r5
 800b248:	f7fd fd58 	bl	8008cfc <tcp_input>
      break;
 800b24c:	e7f1      	b.n	800b232 <ip4_input+0x176>
      icmp_input(p, inp);
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fe59 	bl	800af08 <icmp_input>
      break;
 800b256:	e7ec      	b.n	800b232 <ip4_input+0x176>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800b258:	4639      	mov	r1, r7
 800b25a:	4628      	mov	r0, r5
 800b25c:	f7fb f94d 	bl	80064fa <pbuf_header_force>
        p->payload = iphdr;
 800b260:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b264:	2102      	movs	r1, #2
 800b266:	4628      	mov	r0, r5
 800b268:	f7ff feec 	bl	800b044 <icmp_dest_unreach>
 800b26c:	e7cd      	b.n	800b20a <ip4_input+0x14e>
 800b26e:	bf00      	nop
 800b270:	200044d0 	.word	0x200044d0
 800b274:	200079f0 	.word	0x200079f0

0800b278 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b27c:	b083      	sub	sp, #12
 800b27e:	4604      	mov	r4, r0
 800b280:	460f      	mov	r7, r1
 800b282:	4616      	mov	r6, r2
 800b284:	4699      	mov	r9, r3
 800b286:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b28a:	89c2      	ldrh	r2, [r0, #14]
 800b28c:	2a01      	cmp	r2, #1
 800b28e:	d13f      	bne.n	800b310 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b290:	2e00      	cmp	r6, #0
 800b292:	d051      	beq.n	800b338 <ip4_output_if_src+0xc0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800b294:	2114      	movs	r1, #20
 800b296:	4620      	mov	r0, r4
 800b298:	f7fb f92a 	bl	80064f0 <pbuf_header>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d156      	bne.n	800b34e <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b2a0:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b2a2:	8963      	ldrh	r3, [r4, #10]
 800b2a4:	2b13      	cmp	r3, #19
 800b2a6:	d93b      	bls.n	800b320 <ip4_output_if_src+0xa8>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b2a8:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b2ac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b2b0:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b2b2:	6833      	ldr	r3, [r6, #0]
 800b2b4:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b2b6:	2345      	movs	r3, #69	; 0x45
 800b2b8:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800b2ba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b2be:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b2c0:	8920      	ldrh	r0, [r4, #8]
 800b2c2:	f7fa fce9 	bl	8005c98 <lwip_htons>
 800b2c6:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	71ab      	strb	r3, [r5, #6]
 800b2cc:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b2ce:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800b368 <ip4_output_if_src+0xf0>
 800b2d2:	f8b9 0000 	ldrh.w	r0, [r9]
 800b2d6:	f7fa fcdf 	bl	8005c98 <lwip_htons>
 800b2da:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b2dc:	f8b9 3000 	ldrh.w	r3, [r9]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800b2e6:	b31f      	cbz	r7, 800b330 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	72ab      	strb	r3, [r5, #10]
 800b2f0:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b2f2:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 800b2f6:	b113      	cbz	r3, 800b2fe <ip4_output_if_src+0x86>
 800b2f8:	8922      	ldrh	r2, [r4, #8]
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d321      	bcc.n	800b342 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b2fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b302:	4632      	mov	r2, r6
 800b304:	4621      	mov	r1, r4
 800b306:	4640      	mov	r0, r8
 800b308:	4798      	blx	r3
}
 800b30a:	b003      	add	sp, #12
 800b30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b310:	4b10      	ldr	r3, [pc, #64]	; (800b354 <ip4_output_if_src+0xdc>)
 800b312:	f240 3233 	movw	r2, #819	; 0x333
 800b316:	4910      	ldr	r1, [pc, #64]	; (800b358 <ip4_output_if_src+0xe0>)
 800b318:	4810      	ldr	r0, [pc, #64]	; (800b35c <ip4_output_if_src+0xe4>)
 800b31a:	f007 fdf5 	bl	8012f08 <printf>
 800b31e:	e7b7      	b.n	800b290 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b320:	4b0c      	ldr	r3, [pc, #48]	; (800b354 <ip4_output_if_src+0xdc>)
 800b322:	f44f 7258 	mov.w	r2, #864	; 0x360
 800b326:	490e      	ldr	r1, [pc, #56]	; (800b360 <ip4_output_if_src+0xe8>)
 800b328:	480c      	ldr	r0, [pc, #48]	; (800b35c <ip4_output_if_src+0xe4>)
 800b32a:	f007 fded 	bl	8012f08 <printf>
 800b32e:	e7bb      	b.n	800b2a8 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b330:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <ip4_output_if_src+0xec>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	60eb      	str	r3, [r5, #12]
 800b336:	e7d9      	b.n	800b2ec <ip4_output_if_src+0x74>
    iphdr = (struct ip_hdr *)p->payload;
 800b338:	6863      	ldr	r3, [r4, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800b33e:	ae01      	add	r6, sp, #4
 800b340:	e7d7      	b.n	800b2f2 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800b342:	4632      	mov	r2, r6
 800b344:	4641      	mov	r1, r8
 800b346:	4620      	mov	r0, r4
 800b348:	f000 fbf2 	bl	800bb30 <ip4_frag>
 800b34c:	e7dd      	b.n	800b30a <ip4_output_if_src+0x92>
      return ERR_BUF;
 800b34e:	f06f 0001 	mvn.w	r0, #1
 800b352:	e7da      	b.n	800b30a <ip4_output_if_src+0x92>
 800b354:	0801ba50 	.word	0x0801ba50
 800b358:	0801ba84 	.word	0x0801ba84
 800b35c:	0801a38c 	.word	0x0801a38c
 800b360:	0801ba90 	.word	0x0801ba90
 800b364:	0801a318 	.word	0x0801a318
 800b368:	200034f6 	.word	0x200034f6

0800b36c <ip4_output_if>:
{
 800b36c:	b530      	push	{r4, r5, lr}
 800b36e:	b085      	sub	sp, #20
 800b370:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800b372:	4615      	mov	r5, r2
 800b374:	b11a      	cbz	r2, 800b37e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800b376:	b109      	cbz	r1, 800b37c <ip4_output_if+0x10>
 800b378:	680a      	ldr	r2, [r1, #0]
 800b37a:	b902      	cbnz	r2, 800b37e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800b37c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b37e:	9402      	str	r4, [sp, #8]
 800b380:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800b384:	9201      	str	r2, [sp, #4]
 800b386:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800b38a:	9200      	str	r2, [sp, #0]
 800b38c:	462a      	mov	r2, r5
 800b38e:	f7ff ff73 	bl	800b278 <ip4_output_if_src>
}
 800b392:	b005      	add	sp, #20
 800b394:	bd30      	pop	{r4, r5, pc}

0800b396 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b396:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b398:	1e42      	subs	r2, r0, #1
 800b39a:	f112 0f03 	cmn.w	r2, #3
 800b39e:	d812      	bhi.n	800b3c6 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b3a0:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 800b3a4:	f010 0002 	ands.w	r0, r0, #2
 800b3a8:	d014      	beq.n	800b3d4 <ip4_addr_isbroadcast_u32+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b3aa:	684a      	ldr	r2, [r1, #4]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d00c      	beq.n	800b3ca <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b3b0:	6888      	ldr	r0, [r1, #8]
 800b3b2:	405a      	eors	r2, r3
 800b3b4:	4202      	tst	r2, r0
 800b3b6:	d10a      	bne.n	800b3ce <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b3b8:	43c2      	mvns	r2, r0
 800b3ba:	ea23 0300 	bic.w	r3, r3, r0
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d007      	beq.n	800b3d2 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	4770      	bx	lr
    return 1;
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	4770      	bx	lr
    return 0;
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	4770      	bx	lr
    return 0;
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	4770      	bx	lr
    return 1;
 800b3d2:	2001      	movs	r0, #1
  }
}
 800b3d4:	4770      	bx	lr
	...

0800b3d8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 800b3de:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 800b3e0:	466e      	mov	r6, sp
 800b3e2:	e03b      	b.n	800b45c <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 800b3e4:	1c42      	adds	r2, r0, #1
 800b3e6:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 800b3e8:	2b78      	cmp	r3, #120	; 0x78
 800b3ea:	d004      	beq.n	800b3f6 <ip4addr_aton+0x1e>
 800b3ec:	2b58      	cmp	r3, #88	; 0x58
 800b3ee:	d002      	beq.n	800b3f6 <ip4addr_aton+0x1e>
      c = *++cp;
 800b3f0:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 800b3f2:	2108      	movs	r1, #8
 800b3f4:	e03a      	b.n	800b46c <ip4addr_aton+0x94>
        c = *++cp;
 800b3f6:	7883      	ldrb	r3, [r0, #2]
 800b3f8:	3002      	adds	r0, #2
        base = 16;
 800b3fa:	2110      	movs	r1, #16
        c = *++cp;
 800b3fc:	e036      	b.n	800b46c <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 800b3fe:	2910      	cmp	r1, #16
 800b400:	d123      	bne.n	800b44a <ip4addr_aton+0x72>
 800b402:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	2a05      	cmp	r2, #5
 800b40a:	d904      	bls.n	800b416 <ip4addr_aton+0x3e>
 800b40c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b410:	b2d2      	uxtb	r2, r2
 800b412:	2a05      	cmp	r2, #5
 800b414:	d819      	bhi.n	800b44a <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800b416:	012d      	lsls	r5, r5, #4
 800b418:	f103 020a 	add.w	r2, r3, #10
 800b41c:	3b61      	subs	r3, #97	; 0x61
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b19      	cmp	r3, #25
 800b422:	d810      	bhi.n	800b446 <ip4addr_aton+0x6e>
 800b424:	2361      	movs	r3, #97	; 0x61
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	4315      	orrs	r5, r2
        c = *++cp;
 800b42a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 800b42e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	2a09      	cmp	r2, #9
 800b436:	d8e2      	bhi.n	800b3fe <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 800b438:	fb05 3201 	mla	r2, r5, r1, r3
 800b43c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 800b440:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b444:	e7f3      	b.n	800b42e <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800b446:	2341      	movs	r3, #65	; 0x41
 800b448:	e7ed      	b.n	800b426 <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 800b44a:	2b2e      	cmp	r3, #46	; 0x2e
 800b44c:	d110      	bne.n	800b470 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800b44e:	ab03      	add	r3, sp, #12
 800b450:	429e      	cmp	r6, r3
 800b452:	d25f      	bcs.n	800b514 <ip4addr_aton+0x13c>
        return 0;
      }
      *pp++ = val;
 800b454:	f846 5b04 	str.w	r5, [r6], #4
      c = *++cp;
 800b458:	7843      	ldrb	r3, [r0, #1]
 800b45a:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 800b45c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b460:	b2d2      	uxtb	r2, r2
 800b462:	2a09      	cmp	r2, #9
 800b464:	d854      	bhi.n	800b510 <ip4addr_aton+0x138>
    if (c == '0') {
 800b466:	2b30      	cmp	r3, #48	; 0x30
 800b468:	d0bc      	beq.n	800b3e4 <ip4addr_aton+0xc>
    base = 10;
 800b46a:	210a      	movs	r1, #10
        base = 8;
 800b46c:	2500      	movs	r5, #0
 800b46e:	e7de      	b.n	800b42e <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 800b470:	b15b      	cbz	r3, 800b48a <ip4addr_aton+0xb2>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d009      	beq.n	800b48a <ip4addr_aton+0xb2>
 800b476:	2b0c      	cmp	r3, #12
 800b478:	d007      	beq.n	800b48a <ip4addr_aton+0xb2>
 800b47a:	2b0a      	cmp	r3, #10
 800b47c:	d005      	beq.n	800b48a <ip4addr_aton+0xb2>
 800b47e:	2b0d      	cmp	r3, #13
 800b480:	d003      	beq.n	800b48a <ip4addr_aton+0xb2>
 800b482:	2b09      	cmp	r3, #9
 800b484:	d001      	beq.n	800b48a <ip4addr_aton+0xb2>
 800b486:	2b0b      	cmp	r3, #11
 800b488:	d147      	bne.n	800b51a <ip4addr_aton+0x142>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800b48a:	4668      	mov	r0, sp
 800b48c:	1a30      	subs	r0, r6, r0
 800b48e:	1080      	asrs	r0, r0, #2
 800b490:	3001      	adds	r0, #1
 800b492:	2804      	cmp	r0, #4
 800b494:	d834      	bhi.n	800b500 <ip4addr_aton+0x128>
 800b496:	e8df f000 	tbb	[pc, r0]
 800b49a:	0b3e      	.short	0x0b3e
 800b49c:	1303      	.short	0x1303
 800b49e:	21          	.byte	0x21
 800b49f:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 800b4a0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 800b4a4:	d23b      	bcs.n	800b51e <ip4addr_aton+0x146>
      return 0;
    }
    if (parts[0] > 0xff) {
 800b4a6:	9b00      	ldr	r3, [sp, #0]
 800b4a8:	2bff      	cmp	r3, #255	; 0xff
 800b4aa:	d83a      	bhi.n	800b522 <ip4addr_aton+0x14a>
      return 0;
    }
    val |= parts[0] << 24;
 800b4ac:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	d046      	beq.n	800b542 <ip4addr_aton+0x16a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f7fa fbf2 	bl	8005c9e <lwip_htonl>
 800b4ba:	6020      	str	r0, [r4, #0]
  }
  return 1;
 800b4bc:	2001      	movs	r0, #1
 800b4be:	e02a      	b.n	800b516 <ip4addr_aton+0x13e>
    if (val > 0xffff) {
 800b4c0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800b4c4:	d22f      	bcs.n	800b526 <ip4addr_aton+0x14e>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800b4c6:	9a00      	ldr	r2, [sp, #0]
 800b4c8:	2aff      	cmp	r2, #255	; 0xff
 800b4ca:	d82e      	bhi.n	800b52a <ip4addr_aton+0x152>
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	2bff      	cmp	r3, #255	; 0xff
 800b4d0:	d82d      	bhi.n	800b52e <ip4addr_aton+0x156>
    val |= (parts[0] << 24) | (parts[1] << 16);
 800b4d2:	041b      	lsls	r3, r3, #16
 800b4d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b4d8:	431d      	orrs	r5, r3
    break;
 800b4da:	e7e9      	b.n	800b4b0 <ip4addr_aton+0xd8>
    if (val > 0xff) {
 800b4dc:	2dff      	cmp	r5, #255	; 0xff
 800b4de:	d828      	bhi.n	800b532 <ip4addr_aton+0x15a>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800b4e0:	9900      	ldr	r1, [sp, #0]
 800b4e2:	29ff      	cmp	r1, #255	; 0xff
 800b4e4:	d827      	bhi.n	800b536 <ip4addr_aton+0x15e>
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	2bff      	cmp	r3, #255	; 0xff
 800b4ea:	d826      	bhi.n	800b53a <ip4addr_aton+0x162>
 800b4ec:	9a02      	ldr	r2, [sp, #8]
 800b4ee:	2aff      	cmp	r2, #255	; 0xff
 800b4f0:	d825      	bhi.n	800b53e <ip4addr_aton+0x166>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800b4f2:	041b      	lsls	r3, r3, #16
 800b4f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b4f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4fc:	431d      	orrs	r5, r3
    break;
 800b4fe:	e7d7      	b.n	800b4b0 <ip4addr_aton+0xd8>
    LWIP_ASSERT("unhandled", 0);
 800b500:	4b11      	ldr	r3, [pc, #68]	; (800b548 <ip4addr_aton+0x170>)
 800b502:	f240 1203 	movw	r2, #259	; 0x103
 800b506:	4911      	ldr	r1, [pc, #68]	; (800b54c <ip4addr_aton+0x174>)
 800b508:	4811      	ldr	r0, [pc, #68]	; (800b550 <ip4addr_aton+0x178>)
 800b50a:	f007 fcfd 	bl	8012f08 <printf>
    break;
 800b50e:	e7cf      	b.n	800b4b0 <ip4addr_aton+0xd8>
      return 0;
 800b510:	2000      	movs	r0, #0
 800b512:	e000      	b.n	800b516 <ip4addr_aton+0x13e>
        return 0;
 800b514:	2000      	movs	r0, #0
}
 800b516:	b004      	add	sp, #16
 800b518:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800b51a:	2000      	movs	r0, #0
 800b51c:	e7fb      	b.n	800b516 <ip4addr_aton+0x13e>
      return 0;
 800b51e:	2000      	movs	r0, #0
 800b520:	e7f9      	b.n	800b516 <ip4addr_aton+0x13e>
      return 0;
 800b522:	2000      	movs	r0, #0
 800b524:	e7f7      	b.n	800b516 <ip4addr_aton+0x13e>
      return 0;
 800b526:	2000      	movs	r0, #0
 800b528:	e7f5      	b.n	800b516 <ip4addr_aton+0x13e>
      return 0;
 800b52a:	2000      	movs	r0, #0
 800b52c:	e7f3      	b.n	800b516 <ip4addr_aton+0x13e>
 800b52e:	2000      	movs	r0, #0
 800b530:	e7f1      	b.n	800b516 <ip4addr_aton+0x13e>
      return 0;
 800b532:	2000      	movs	r0, #0
 800b534:	e7ef      	b.n	800b516 <ip4addr_aton+0x13e>
      return 0;
 800b536:	2000      	movs	r0, #0
 800b538:	e7ed      	b.n	800b516 <ip4addr_aton+0x13e>
 800b53a:	2000      	movs	r0, #0
 800b53c:	e7eb      	b.n	800b516 <ip4addr_aton+0x13e>
 800b53e:	2000      	movs	r0, #0
 800b540:	e7e9      	b.n	800b516 <ip4addr_aton+0x13e>
  return 1;
 800b542:	2001      	movs	r0, #1
 800b544:	e7e7      	b.n	800b516 <ip4addr_aton+0x13e>
 800b546:	bf00      	nop
 800b548:	0801bac0 	.word	0x0801bac0
 800b54c:	0801bafc 	.word	0x0801bafc
 800b550:	0801a38c 	.word	0x0801a38c

0800b554 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <ip_reass_dequeue_datagram+0x38>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4283      	cmp	r3, r0
 800b55e:	d008      	beq.n	800b572 <ip_reass_dequeue_datagram+0x1e>
 800b560:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b562:	b151      	cbz	r1, 800b57a <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b568:	4621      	mov	r1, r4
 800b56a:	2004      	movs	r0, #4
 800b56c:	f7fa fe16 	bl	800619c <memp_free>
}
 800b570:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800b572:	6802      	ldr	r2, [r0, #0]
 800b574:	4b05      	ldr	r3, [pc, #20]	; (800b58c <ip_reass_dequeue_datagram+0x38>)
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	e7f6      	b.n	800b568 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b57a:	4b05      	ldr	r3, [pc, #20]	; (800b590 <ip_reass_dequeue_datagram+0x3c>)
 800b57c:	f240 1245 	movw	r2, #325	; 0x145
 800b580:	4904      	ldr	r1, [pc, #16]	; (800b594 <ip_reass_dequeue_datagram+0x40>)
 800b582:	4805      	ldr	r0, [pc, #20]	; (800b598 <ip_reass_dequeue_datagram+0x44>)
 800b584:	f007 fcc0 	bl	8012f08 <printf>
 800b588:	e7ec      	b.n	800b564 <ip_reass_dequeue_datagram+0x10>
 800b58a:	bf00      	nop
 800b58c:	200034f8 	.word	0x200034f8
 800b590:	0801bb08 	.word	0x0801bb08
 800b594:	0801bb44 	.word	0x0801bb44
 800b598:	0801a38c 	.word	0x0801a38c

0800b59c <ip_reass_free_complete_datagram>:
{
 800b59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a0:	4680      	mov	r8, r0
 800b5a2:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b5a4:	4281      	cmp	r1, r0
 800b5a6:	d015      	beq.n	800b5d4 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800b5a8:	f1b9 0f00 	cmp.w	r9, #0
 800b5ac:	d009      	beq.n	800b5c2 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b5ae:	f8d9 3000 	ldr.w	r3, [r9]
 800b5b2:	4543      	cmp	r3, r8
 800b5b4:	d005      	beq.n	800b5c2 <ip_reass_free_complete_datagram+0x26>
 800b5b6:	4b30      	ldr	r3, [pc, #192]	; (800b678 <ip_reass_free_complete_datagram+0xdc>)
 800b5b8:	22ad      	movs	r2, #173	; 0xad
 800b5ba:	4930      	ldr	r1, [pc, #192]	; (800b67c <ip_reass_free_complete_datagram+0xe0>)
 800b5bc:	4830      	ldr	r0, [pc, #192]	; (800b680 <ip_reass_free_complete_datagram+0xe4>)
 800b5be:	f007 fca3 	bl	8012f08 <printf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b5c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5c6:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800b5c8:	889a      	ldrh	r2, [r3, #4]
 800b5ca:	b152      	cbz	r2, 800b5e2 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800b5cc:	2600      	movs	r6, #0
  p = ipr->p;
 800b5ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
  while (p != NULL) {
 800b5d2:	e02e      	b.n	800b632 <ip_reass_free_complete_datagram+0x96>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b5d4:	4b28      	ldr	r3, [pc, #160]	; (800b678 <ip_reass_free_complete_datagram+0xdc>)
 800b5d6:	22ab      	movs	r2, #171	; 0xab
 800b5d8:	492a      	ldr	r1, [pc, #168]	; (800b684 <ip_reass_free_complete_datagram+0xe8>)
 800b5da:	4829      	ldr	r0, [pc, #164]	; (800b680 <ip_reass_free_complete_datagram+0xe4>)
 800b5dc:	f007 fc94 	bl	8012f08 <printf>
 800b5e0:	e7e2      	b.n	800b5a8 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b5e8:	4643      	mov	r3, r8
 800b5ea:	686a      	ldr	r2, [r5, #4]
 800b5ec:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800b5f0:	685e      	ldr	r6, [r3, #4]
 800b5f2:	689c      	ldr	r4, [r3, #8]
 800b5f4:	68d8      	ldr	r0, [r3, #12]
 800b5f6:	6011      	str	r1, [r2, #0]
 800b5f8:	6056      	str	r6, [r2, #4]
 800b5fa:	6094      	str	r4, [r2, #8]
 800b5fc:	60d0      	str	r0, [r2, #12]
 800b5fe:	6919      	ldr	r1, [r3, #16]
 800b600:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b602:	2101      	movs	r1, #1
 800b604:	4628      	mov	r0, r5
 800b606:	f7ff fd23 	bl	800b050 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b60a:	4628      	mov	r0, r5
 800b60c:	f7fb f946 	bl	800689c <pbuf_clen>
 800b610:	4606      	mov	r6, r0
    pbuf_free(p);
 800b612:	4628      	mov	r0, r5
 800b614:	f7fa ff76 	bl	8006504 <pbuf_free>
 800b618:	e7d9      	b.n	800b5ce <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b61a:	4b17      	ldr	r3, [pc, #92]	; (800b678 <ip_reass_free_complete_datagram+0xdc>)
 800b61c:	22cc      	movs	r2, #204	; 0xcc
 800b61e:	491a      	ldr	r1, [pc, #104]	; (800b688 <ip_reass_free_complete_datagram+0xec>)
 800b620:	4817      	ldr	r0, [pc, #92]	; (800b680 <ip_reass_free_complete_datagram+0xe4>)
 800b622:	f007 fc71 	bl	8012f08 <printf>
    pbufs_freed += clen;
 800b626:	4434      	add	r4, r6
 800b628:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 800b62a:	4628      	mov	r0, r5
 800b62c:	f7fa ff6a 	bl	8006504 <pbuf_free>
    p = iprh->next_pbuf;
 800b630:	463d      	mov	r5, r7
  while (p != NULL) {
 800b632:	b155      	cbz	r5, 800b64a <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 800b634:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 800b636:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800b638:	4628      	mov	r0, r5
 800b63a:	f7fb f92f 	bl	800689c <pbuf_clen>
 800b63e:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b640:	1833      	adds	r3, r6, r0
 800b642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b646:	dbee      	blt.n	800b626 <ip_reass_free_complete_datagram+0x8a>
 800b648:	e7e7      	b.n	800b61a <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 800b64a:	4649      	mov	r1, r9
 800b64c:	4640      	mov	r0, r8
 800b64e:	f7ff ff81 	bl	800b554 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b652:	4b0e      	ldr	r3, [pc, #56]	; (800b68c <ip_reass_free_complete_datagram+0xf0>)
 800b654:	889b      	ldrh	r3, [r3, #4]
 800b656:	42b3      	cmp	r3, r6
 800b658:	d306      	bcc.n	800b668 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount -= pbufs_freed;
 800b65a:	4a0c      	ldr	r2, [pc, #48]	; (800b68c <ip_reass_free_complete_datagram+0xf0>)
 800b65c:	8893      	ldrh	r3, [r2, #4]
 800b65e:	1b9b      	subs	r3, r3, r6
 800b660:	8093      	strh	r3, [r2, #4]
}
 800b662:	4630      	mov	r0, r6
 800b664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b668:	4b03      	ldr	r3, [pc, #12]	; (800b678 <ip_reass_free_complete_datagram+0xdc>)
 800b66a:	22d2      	movs	r2, #210	; 0xd2
 800b66c:	4908      	ldr	r1, [pc, #32]	; (800b690 <ip_reass_free_complete_datagram+0xf4>)
 800b66e:	4804      	ldr	r0, [pc, #16]	; (800b680 <ip_reass_free_complete_datagram+0xe4>)
 800b670:	f007 fc4a 	bl	8012f08 <printf>
 800b674:	e7f1      	b.n	800b65a <ip_reass_free_complete_datagram+0xbe>
 800b676:	bf00      	nop
 800b678:	0801bb08 	.word	0x0801bb08
 800b67c:	0801bb6c 	.word	0x0801bb6c
 800b680:	0801a38c 	.word	0x0801a38c
 800b684:	0801bb60 	.word	0x0801bb60
 800b688:	0801bb80 	.word	0x0801bb80
 800b68c:	200034f8 	.word	0x200034f8
 800b690:	0801bba0 	.word	0x0801bba0

0800b694 <ip_reass_remove_oldest_datagram>:
{
 800b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	4606      	mov	r6, r0
 800b69a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800b69c:	2700      	movs	r7, #0
 800b69e:	e02b      	b.n	800b6f8 <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b6a0:	699a      	ldr	r2, [r3, #24]
 800b6a2:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800b6a6:	4562      	cmp	r2, ip
 800b6a8:	d111      	bne.n	800b6ce <ip_reass_remove_oldest_datagram+0x3a>
 800b6aa:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800b6ae:	88b2      	ldrh	r2, [r6, #4]
 800b6b0:	4594      	cmp	ip, r2
 800b6b2:	d10c      	bne.n	800b6ce <ip_reass_remove_oldest_datagram+0x3a>
 800b6b4:	e001      	b.n	800b6ba <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800b6b6:	4629      	mov	r1, r5
          oldest = r;
 800b6b8:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	b192      	cbz	r2, 800b6e4 <ip_reass_remove_oldest_datagram+0x50>
 800b6be:	461d      	mov	r5, r3
 800b6c0:	4613      	mov	r3, r2
    while (r != NULL) {
 800b6c2:	b18b      	cbz	r3, 800b6e8 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b6c4:	695a      	ldr	r2, [r3, #20]
 800b6c6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800b6ca:	4562      	cmp	r2, ip
 800b6cc:	d0e8      	beq.n	800b6a0 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800b6ce:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d0f0      	beq.n	800b6b6 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800b6d4:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800b6d8:	7fc2      	ldrb	r2, [r0, #31]
 800b6da:	4594      	cmp	ip, r2
 800b6dc:	d8ed      	bhi.n	800b6ba <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800b6de:	4629      	mov	r1, r5
          oldest = r;
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	e7ea      	b.n	800b6ba <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	e7ea      	b.n	800b6be <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800b6e8:	b110      	cbz	r0, 800b6f0 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b6ea:	f7ff ff57 	bl	800b59c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800b6ee:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b6f0:	4547      	cmp	r7, r8
 800b6f2:	da08      	bge.n	800b706 <ip_reass_remove_oldest_datagram+0x72>
 800b6f4:	2c01      	cmp	r4, #1
 800b6f6:	dd06      	ble.n	800b706 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <ip_reass_remove_oldest_datagram+0x78>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800b6fc:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800b6fe:	4621      	mov	r1, r4
    prev = NULL;
 800b700:	4625      	mov	r5, r4
    oldest = NULL;
 800b702:	4620      	mov	r0, r4
    while (r != NULL) {
 800b704:	e7dd      	b.n	800b6c2 <ip_reass_remove_oldest_datagram+0x2e>
}
 800b706:	4638      	mov	r0, r7
 800b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70c:	200034f8 	.word	0x200034f8

0800b710 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b710:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800b712:	4604      	mov	r4, r0
 800b714:	b120      	cbz	r0, 800b720 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800b716:	4621      	mov	r1, r4
 800b718:	2005      	movs	r0, #5
 800b71a:	f7fa fd3f 	bl	800619c <memp_free>
}
 800b71e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800b720:	4b03      	ldr	r3, [pc, #12]	; (800b730 <ip_frag_free_pbuf_custom_ref+0x20>)
 800b722:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b726:	4903      	ldr	r1, [pc, #12]	; (800b734 <ip_frag_free_pbuf_custom_ref+0x24>)
 800b728:	4803      	ldr	r0, [pc, #12]	; (800b738 <ip_frag_free_pbuf_custom_ref+0x28>)
 800b72a:	f007 fbed 	bl	8012f08 <printf>
 800b72e:	e7f2      	b.n	800b716 <ip_frag_free_pbuf_custom_ref+0x6>
 800b730:	0801bb08 	.word	0x0801bb08
 800b734:	0801a680 	.word	0x0801a680
 800b738:	0801a38c 	.word	0x0801a38c

0800b73c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b73c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b73e:	4604      	mov	r4, r0
 800b740:	b138      	cbz	r0, 800b752 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800b742:	6960      	ldr	r0, [r4, #20]
 800b744:	b108      	cbz	r0, 800b74a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800b746:	f7fa fedd 	bl	8006504 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b74a:	4620      	mov	r0, r4
 800b74c:	f7ff ffe0 	bl	800b710 <ip_frag_free_pbuf_custom_ref>
}
 800b750:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b752:	4b04      	ldr	r3, [pc, #16]	; (800b764 <ipfrag_free_pbuf_custom+0x28>)
 800b754:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b758:	4903      	ldr	r1, [pc, #12]	; (800b768 <ipfrag_free_pbuf_custom+0x2c>)
 800b75a:	4804      	ldr	r0, [pc, #16]	; (800b76c <ipfrag_free_pbuf_custom+0x30>)
 800b75c:	f007 fbd4 	bl	8012f08 <printf>
 800b760:	e7ef      	b.n	800b742 <ipfrag_free_pbuf_custom+0x6>
 800b762:	bf00      	nop
 800b764:	0801bb08 	.word	0x0801bb08
 800b768:	0801bbbc 	.word	0x0801bbbc
 800b76c:	0801a38c 	.word	0x0801a38c

0800b770 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	4681      	mov	r9, r0
 800b776:	4688      	mov	r8, r1
 800b778:	4692      	mov	sl, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 800b77a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b77c:	8860      	ldrh	r0, [r4, #2]
 800b77e:	f7fa fa8b 	bl	8005c98 <lwip_htons>
 800b782:	7823      	ldrb	r3, [r4, #0]
 800b784:	f003 030f 	and.w	r3, r3, #15
 800b788:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 800b78c:	b29f      	uxth	r7, r3
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b78e:	88e0      	ldrh	r0, [r4, #6]
 800b790:	f7fa fa82 	bl	8005c98 <lwip_htons>
 800b794:	f3c0 040c 	ubfx	r4, r0, #0, #13
 800b798:	00e4      	lsls	r4, r4, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 800b79a:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 800b79e:	2500      	movs	r5, #0
 800b7a0:	7035      	strb	r5, [r6, #0]
 800b7a2:	7075      	strb	r5, [r6, #1]
 800b7a4:	70b5      	strb	r5, [r6, #2]
 800b7a6:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800b7a8:	80b4      	strh	r4, [r6, #4]
  iprh->end = offset + len;
 800b7aa:	193b      	adds	r3, r7, r4
 800b7ac:	b298      	uxth	r0, r3
 800b7ae:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800b7b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  int valid = 1;
 800b7b4:	2701      	movs	r7, #1
  for (q = ipr->p; q != NULL;) {
 800b7b6:	e020      	b.n	800b7fa <ip_reass_chain_frag_into_datagram_and_validate+0x8a>
      iprh->next_pbuf = q;
 800b7b8:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800b7ba:	b1b5      	cbz	r5, 800b7ea <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b7bc:	88ea      	ldrh	r2, [r5, #6]
 800b7be:	42a2      	cmp	r2, r4
 800b7c0:	d87c      	bhi.n	800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
 800b7c2:	889b      	ldrh	r3, [r3, #4]
 800b7c4:	4298      	cmp	r0, r3
 800b7c6:	d879      	bhi.n	800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        iprh_prev->next_pbuf = new_p;
 800b7c8:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 800b7cc:	88b3      	ldrh	r3, [r6, #4]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d000      	beq.n	800b7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x64>
          valid = 0;
 800b7d2:	2700      	movs	r7, #0
  if (q == NULL) {
 800b7d4:	b319      	cbz	r1, 800b81e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b7d6:	f1ba 0f00 	cmp.w	sl, #0
 800b7da:	d142      	bne.n	800b862 <ip_reass_chain_frag_into_datagram_and_validate+0xf2>
 800b7dc:	f899 301e 	ldrb.w	r3, [r9, #30]
 800b7e0:	f013 0f01 	tst.w	r3, #1
 800b7e4:	d13d      	bne.n	800b862 <ip_reass_chain_frag_into_datagram_and_validate+0xf2>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	e074      	b.n	800b8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
        if (iprh->end > iprh_tmp->start) {
 800b7ea:	889b      	ldrh	r3, [r3, #4]
 800b7ec:	4298      	cmp	r0, r3
 800b7ee:	d865      	bhi.n	800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        ipr->p = new_p;
 800b7f0:	f8c9 8004 	str.w	r8, [r9, #4]
 800b7f4:	e7ee      	b.n	800b7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x64>
    q = iprh_tmp->next_pbuf;
 800b7f6:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800b7f8:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 800b7fa:	2900      	cmp	r1, #0
 800b7fc:	d0ea      	beq.n	800b7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x64>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800b7fe:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800b800:	889a      	ldrh	r2, [r3, #4]
 800b802:	42a2      	cmp	r2, r4
 800b804:	d8d8      	bhi.n	800b7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    } else if (iprh->start == iprh_tmp->start) {
 800b806:	42a2      	cmp	r2, r4
 800b808:	d058      	beq.n	800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    } else if (iprh->start < iprh_tmp->end) {
 800b80a:	88d9      	ldrh	r1, [r3, #6]
 800b80c:	42a1      	cmp	r1, r4
 800b80e:	d855      	bhi.n	800b8bc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
      if (iprh_prev != NULL) {
 800b810:	2d00      	cmp	r5, #0
 800b812:	d0f0      	beq.n	800b7f6 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
        if (iprh_prev->end != iprh_tmp->start) {
 800b814:	88e9      	ldrh	r1, [r5, #6]
 800b816:	428a      	cmp	r2, r1
 800b818:	d0ed      	beq.n	800b7f6 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
          valid = 0;
 800b81a:	2700      	movs	r7, #0
 800b81c:	e7eb      	b.n	800b7f6 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
    if (iprh_prev != NULL) {
 800b81e:	b19d      	cbz	r5, 800b848 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b820:	88ea      	ldrh	r2, [r5, #6]
 800b822:	88b3      	ldrh	r3, [r6, #4]
 800b824:	429a      	cmp	r2, r3
 800b826:	d807      	bhi.n	800b838 <ip_reass_chain_frag_into_datagram_and_validate+0xc8>
      iprh_prev->next_pbuf = new_p;
 800b828:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800b82c:	88ea      	ldrh	r2, [r5, #6]
 800b82e:	88b3      	ldrh	r3, [r6, #4]
 800b830:	429a      	cmp	r2, r3
 800b832:	d0d0      	beq.n	800b7d6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
        valid = 0;
 800b834:	2700      	movs	r7, #0
 800b836:	e7ce      	b.n	800b7d6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b838:	4b27      	ldr	r3, [pc, #156]	; (800b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800b83a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b83e:	4927      	ldr	r1, [pc, #156]	; (800b8dc <ip_reass_chain_frag_into_datagram_and_validate+0x16c>)
 800b840:	4827      	ldr	r0, [pc, #156]	; (800b8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800b842:	f007 fb61 	bl	8012f08 <printf>
 800b846:	e7ef      	b.n	800b828 <ip_reass_chain_frag_into_datagram_and_validate+0xb8>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b848:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b84c:	b133      	cbz	r3, 800b85c <ip_reass_chain_frag_into_datagram_and_validate+0xec>
 800b84e:	4b22      	ldr	r3, [pc, #136]	; (800b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800b850:	f240 12b3 	movw	r2, #435	; 0x1b3
 800b854:	4923      	ldr	r1, [pc, #140]	; (800b8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x174>)
 800b856:	4822      	ldr	r0, [pc, #136]	; (800b8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800b858:	f007 fb56 	bl	8012f08 <printf>
      ipr->p = new_p;
 800b85c:	f8c9 8004 	str.w	r8, [r9, #4]
 800b860:	e7b9      	b.n	800b7d6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    if (valid) {
 800b862:	b34f      	cbz	r7, 800b8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800b864:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b868:	b31b      	cbz	r3, 800b8b2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
 800b86a:	6858      	ldr	r0, [r3, #4]
 800b86c:	8883      	ldrh	r3, [r0, #4]
 800b86e:	bb13      	cbnz	r3, 800b8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
        q = iprh->next_pbuf;
 800b870:	6832      	ldr	r2, [r6, #0]
        while (q != NULL) {
 800b872:	b14a      	cbz	r2, 800b888 <ip_reass_chain_frag_into_datagram_and_validate+0x118>
          iprh = (struct ip_reass_helper*)q->payload;
 800b874:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800b876:	88f1      	ldrh	r1, [r6, #6]
 800b878:	889a      	ldrh	r2, [r3, #4]
 800b87a:	4291      	cmp	r1, r2
 800b87c:	d102      	bne.n	800b884 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
          q = iprh->next_pbuf;
 800b87e:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 800b880:	461e      	mov	r6, r3
 800b882:	e7f6      	b.n	800b872 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
 800b884:	461e      	mov	r6, r3
            valid = 0;
 800b886:	2700      	movs	r7, #0
        if (valid) {
 800b888:	b1b7      	cbz	r7, 800b8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
          LWIP_ASSERT("sanity check",
 800b88a:	42b0      	cmp	r0, r6
 800b88c:	d009      	beq.n	800b8a2 <ip_reass_chain_frag_into_datagram_and_validate+0x132>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b88e:	6833      	ldr	r3, [r6, #0]
 800b890:	b193      	cbz	r3, 800b8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 800b892:	4b11      	ldr	r3, [pc, #68]	; (800b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800b894:	f240 12d7 	movw	r2, #471	; 0x1d7
 800b898:	4913      	ldr	r1, [pc, #76]	; (800b8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800b89a:	4811      	ldr	r0, [pc, #68]	; (800b8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800b89c:	f007 fb34 	bl	8012f08 <printf>
 800b8a0:	e00a      	b.n	800b8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
          LWIP_ASSERT("sanity check",
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x168>)
 800b8a4:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b8a8:	4910      	ldr	r1, [pc, #64]	; (800b8ec <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 800b8aa:	480d      	ldr	r0, [pc, #52]	; (800b8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>)
 800b8ac:	f007 fb2c 	bl	8012f08 <printf>
 800b8b0:	e7ed      	b.n	800b88e <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
        valid = 0;
 800b8b2:	2700      	movs	r7, #0
 800b8b4:	e000      	b.n	800b8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 800b8b6:	2700      	movs	r7, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	e00b      	b.n	800b8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b8bc:	4640      	mov	r0, r8
 800b8be:	f7fa ffed 	bl	800689c <pbuf_clen>
 800b8c2:	4a0b      	ldr	r2, [pc, #44]	; (800b8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 800b8c4:	8893      	ldrh	r3, [r2, #4]
 800b8c6:	1a1b      	subs	r3, r3, r0
 800b8c8:	8093      	strh	r3, [r2, #4]
  pbuf_free(new_p);
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	f7fa fe1a 	bl	8006504 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b8d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d8:	0801bb08 	.word	0x0801bb08
 800b8dc:	0801bbc8 	.word	0x0801bbc8
 800b8e0:	0801a38c 	.word	0x0801a38c
 800b8e4:	0801bbe8 	.word	0x0801bbe8
 800b8e8:	0801bc30 	.word	0x0801bc30
 800b8ec:	0801bc20 	.word	0x0801bc20
 800b8f0:	200034f8 	.word	0x200034f8

0800b8f4 <ip_frag_alloc_pbuf_custom_ref>:
{
 800b8f4:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b8f6:	2005      	movs	r0, #5
 800b8f8:	f7fa fc36 	bl	8006168 <memp_malloc>
}
 800b8fc:	bd08      	pop	{r3, pc}
	...

0800b900 <ip_reass_enqueue_new_datagram>:
{
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	4605      	mov	r5, r0
 800b904:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b906:	2004      	movs	r0, #4
 800b908:	f7fa fc2e 	bl	8006168 <memp_malloc>
  if (ipr == NULL) {
 800b90c:	4604      	mov	r4, r0
 800b90e:	b1c8      	cbz	r0, 800b944 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b910:	2300      	movs	r3, #0
 800b912:	6063      	str	r3, [r4, #4]
 800b914:	60a3      	str	r3, [r4, #8]
 800b916:	60e3      	str	r3, [r4, #12]
 800b918:	6123      	str	r3, [r4, #16]
 800b91a:	6163      	str	r3, [r4, #20]
 800b91c:	61a3      	str	r3, [r4, #24]
 800b91e:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800b920:	2303      	movs	r3, #3
 800b922:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800b924:	4b0e      	ldr	r3, [pc, #56]	; (800b960 <ip_reass_enqueue_new_datagram+0x60>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800b92a:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	6868      	ldr	r0, [r5, #4]
 800b930:	68a9      	ldr	r1, [r5, #8]
 800b932:	68ea      	ldr	r2, [r5, #12]
 800b934:	60a3      	str	r3, [r4, #8]
 800b936:	60e0      	str	r0, [r4, #12]
 800b938:	6121      	str	r1, [r4, #16]
 800b93a:	6162      	str	r2, [r4, #20]
 800b93c:	692b      	ldr	r3, [r5, #16]
 800b93e:	61a3      	str	r3, [r4, #24]
}
 800b940:	4620      	mov	r0, r4
 800b942:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b944:	4631      	mov	r1, r6
 800b946:	4628      	mov	r0, r5
 800b948:	f7ff fea4 	bl	800b694 <ip_reass_remove_oldest_datagram>
 800b94c:	42b0      	cmp	r0, r6
 800b94e:	da02      	bge.n	800b956 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 800b950:	2c00      	cmp	r4, #0
 800b952:	d1dd      	bne.n	800b910 <ip_reass_enqueue_new_datagram+0x10>
 800b954:	e7f4      	b.n	800b940 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b956:	2004      	movs	r0, #4
 800b958:	f7fa fc06 	bl	8006168 <memp_malloc>
 800b95c:	4604      	mov	r4, r0
 800b95e:	e7f7      	b.n	800b950 <ip_reass_enqueue_new_datagram+0x50>
 800b960:	200034f8 	.word	0x200034f8

0800b964 <ip_reass_tmr>:
{
 800b964:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <ip_reass_tmr+0x28>)
 800b968:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800b96a:	2400      	movs	r4, #0
  while (r != NULL) {
 800b96c:	e004      	b.n	800b978 <ip_reass_tmr+0x14>
      r = r->next;
 800b96e:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800b970:	4621      	mov	r1, r4
 800b972:	f7ff fe13 	bl	800b59c <ip_reass_free_complete_datagram>
      r = r->next;
 800b976:	4628      	mov	r0, r5
  while (r != NULL) {
 800b978:	b138      	cbz	r0, 800b98a <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800b97a:	7fc3      	ldrb	r3, [r0, #31]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0f6      	beq.n	800b96e <ip_reass_tmr+0xa>
      r->timer--;
 800b980:	3b01      	subs	r3, #1
 800b982:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800b984:	4604      	mov	r4, r0
      r = r->next;
 800b986:	6800      	ldr	r0, [r0, #0]
 800b988:	e7f6      	b.n	800b978 <ip_reass_tmr+0x14>
}
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	200034f8 	.word	0x200034f8

0800b990 <ip4_reass>:
{
 800b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b994:	4606      	mov	r6, r0
  fraghdr = (struct ip_hdr*)p->payload;
 800b996:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b998:	782b      	ldrb	r3, [r5, #0]
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	2b05      	cmp	r3, #5
 800b9a0:	d126      	bne.n	800b9f0 <ip4_reass+0x60>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b9a2:	88e8      	ldrh	r0, [r5, #6]
 800b9a4:	f7fa f978 	bl	8005c98 <lwip_htons>
 800b9a8:	f3c0 070c 	ubfx	r7, r0, #0, #13
 800b9ac:	00ff      	lsls	r7, r7, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b9ae:	8868      	ldrh	r0, [r5, #2]
 800b9b0:	f7fa f972 	bl	8005c98 <lwip_htons>
 800b9b4:	f895 9000 	ldrb.w	r9, [r5]
 800b9b8:	f009 090f 	and.w	r9, r9, #15
 800b9bc:	eba0 0989 	sub.w	r9, r0, r9, lsl #2
 800b9c0:	fa1f f989 	uxth.w	r9, r9
  clen = pbuf_clen(p);
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f7fa ff69 	bl	800689c <pbuf_clen>
 800b9ca:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b9cc:	4b57      	ldr	r3, [pc, #348]	; (800bb2c <ip4_reass+0x19c>)
 800b9ce:	889b      	ldrh	r3, [r3, #4]
 800b9d0:	4403      	add	r3, r0
 800b9d2:	2b0a      	cmp	r3, #10
 800b9d4:	dc02      	bgt.n	800b9dc <ip4_reass+0x4c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b9d6:	4b55      	ldr	r3, [pc, #340]	; (800bb2c <ip4_reass+0x19c>)
 800b9d8:	681c      	ldr	r4, [r3, #0]
 800b9da:	e011      	b.n	800ba00 <ip4_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b9dc:	4601      	mov	r1, r0
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f7ff fe58 	bl	800b694 <ip_reass_remove_oldest_datagram>
 800b9e4:	b120      	cbz	r0, 800b9f0 <ip4_reass+0x60>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b9e6:	4b51      	ldr	r3, [pc, #324]	; (800bb2c <ip4_reass+0x19c>)
 800b9e8:	889b      	ldrh	r3, [r3, #4]
 800b9ea:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b9ec:	2b0a      	cmp	r3, #10
 800b9ee:	ddf2      	ble.n	800b9d6 <ip4_reass+0x46>
  pbuf_free(p);
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7fa fd87 	bl	8006504 <pbuf_free>
  return NULL;
 800b9f6:	2600      	movs	r6, #0
}
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b9fe:	6824      	ldr	r4, [r4, #0]
 800ba00:	b15c      	cbz	r4, 800ba1a <ip4_reass+0x8a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ba02:	6962      	ldr	r2, [r4, #20]
 800ba04:	68eb      	ldr	r3, [r5, #12]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d1f9      	bne.n	800b9fe <ip4_reass+0x6e>
 800ba0a:	69a2      	ldr	r2, [r4, #24]
 800ba0c:	692b      	ldr	r3, [r5, #16]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d1f5      	bne.n	800b9fe <ip4_reass+0x6e>
 800ba12:	89a2      	ldrh	r2, [r4, #12]
 800ba14:	88ab      	ldrh	r3, [r5, #4]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d1f1      	bne.n	800b9fe <ip4_reass+0x6e>
  if (ipr == NULL) {
 800ba1a:	b36c      	cbz	r4, 800ba78 <ip4_reass+0xe8>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ba1c:	88e8      	ldrh	r0, [r5, #6]
 800ba1e:	f7fa f93b 	bl	8005c98 <lwip_htons>
 800ba22:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ba26:	b378      	cbz	r0, 800ba88 <ip4_reass+0xf8>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ba28:	88ed      	ldrh	r5, [r5, #6]
 800ba2a:	f005 0520 	and.w	r5, r5, #32
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	bf0c      	ite	eq
 800ba32:	2201      	moveq	r2, #1
 800ba34:	2200      	movne	r2, #0
  if (is_last) {
 800ba36:	d108      	bne.n	800ba4a <ip4_reass+0xba>
    u16_t datagram_len = (u16_t)(offset + len);
 800ba38:	eb07 0309 	add.w	r3, r7, r9
 800ba3c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ba3e:	429f      	cmp	r7, r3
 800ba40:	d8d6      	bhi.n	800b9f0 <ip4_reass+0x60>
 800ba42:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800ba46:	428b      	cmp	r3, r1
 800ba48:	d8d2      	bhi.n	800b9f0 <ip4_reass+0x60>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f7ff fe8f 	bl	800b770 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ba52:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba56:	d0cb      	beq.n	800b9f0 <ip4_reass+0x60>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ba58:	4b34      	ldr	r3, [pc, #208]	; (800bb2c <ip4_reass+0x19c>)
 800ba5a:	889a      	ldrh	r2, [r3, #4]
 800ba5c:	4490      	add	r8, r2
 800ba5e:	f8a3 8004 	strh.w	r8, [r3, #4]
  if (is_last) {
 800ba62:	b92d      	cbnz	r5, 800ba70 <ip4_reass+0xe0>
    u16_t datagram_len = (u16_t)(offset + len);
 800ba64:	444f      	add	r7, r9
    ipr->datagram_len = datagram_len;
 800ba66:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ba68:	7fa3      	ldrb	r3, [r4, #30]
 800ba6a:	f043 0301 	orr.w	r3, r3, #1
 800ba6e:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ba70:	2801      	cmp	r0, #1
 800ba72:	d01b      	beq.n	800baac <ip4_reass+0x11c>
  return NULL;
 800ba74:	2600      	movs	r6, #0
 800ba76:	e7bf      	b.n	800b9f8 <ip4_reass+0x68>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ba78:	4641      	mov	r1, r8
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f7ff ff40 	bl	800b900 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800ba80:	4604      	mov	r4, r0
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d1d0      	bne.n	800ba28 <ip4_reass+0x98>
 800ba86:	e7b3      	b.n	800b9f0 <ip4_reass+0x60>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ba88:	89e0      	ldrh	r0, [r4, #14]
 800ba8a:	f7fa f905 	bl	8005c98 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ba8e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d0c8      	beq.n	800ba28 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ba96:	682b      	ldr	r3, [r5, #0]
 800ba98:	6868      	ldr	r0, [r5, #4]
 800ba9a:	68a9      	ldr	r1, [r5, #8]
 800ba9c:	68ea      	ldr	r2, [r5, #12]
 800ba9e:	60a3      	str	r3, [r4, #8]
 800baa0:	60e0      	str	r0, [r4, #12]
 800baa2:	6121      	str	r1, [r4, #16]
 800baa4:	6162      	str	r2, [r4, #20]
 800baa6:	692b      	ldr	r3, [r5, #16]
 800baa8:	61a3      	str	r3, [r4, #24]
 800baaa:	e7bd      	b.n	800ba28 <ip4_reass+0x98>
    ipr->datagram_len += IP_HLEN;
 800baac:	8ba3      	ldrh	r3, [r4, #28]
 800baae:	3314      	adds	r3, #20
 800bab0:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800bab2:	6863      	ldr	r3, [r4, #4]
 800bab4:	685e      	ldr	r6, [r3, #4]
 800bab6:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bab8:	4623      	mov	r3, r4
 800baba:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800babe:	685f      	ldr	r7, [r3, #4]
 800bac0:	6898      	ldr	r0, [r3, #8]
 800bac2:	68d9      	ldr	r1, [r3, #12]
 800bac4:	6032      	str	r2, [r6, #0]
 800bac6:	6077      	str	r7, [r6, #4]
 800bac8:	60b0      	str	r0, [r6, #8]
 800baca:	60f1      	str	r1, [r6, #12]
 800bacc:	691a      	ldr	r2, [r3, #16]
 800bace:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800bad0:	8ba0      	ldrh	r0, [r4, #28]
 800bad2:	f7fa f8e1 	bl	8005c98 <lwip_htons>
 800bad6:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bad8:	2300      	movs	r3, #0
 800bada:	71b3      	strb	r3, [r6, #6]
 800badc:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bade:	72b3      	strb	r3, [r6, #10]
 800bae0:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800bae2:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800bae4:	e00a      	b.n	800bafc <ip4_reass+0x16c>
      iprh = (struct ip_reass_helper*)r->payload;
 800bae6:	686f      	ldr	r7, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 800bae8:	f06f 0113 	mvn.w	r1, #19
 800baec:	4628      	mov	r0, r5
 800baee:	f7fa fcff 	bl	80064f0 <pbuf_header>
      pbuf_cat(p, r);
 800baf2:	4629      	mov	r1, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	f7fa fef1 	bl	80068dc <pbuf_cat>
      r = iprh->next_pbuf;
 800bafa:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	d1f2      	bne.n	800bae6 <ip4_reass+0x156>
    if (ipr == reassdatagrams) {
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <ip4_reass+0x19c>)
 800bb02:	6819      	ldr	r1, [r3, #0]
 800bb04:	42a1      	cmp	r1, r4
 800bb06:	d005      	beq.n	800bb14 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bb08:	b129      	cbz	r1, 800bb16 <ip4_reass+0x186>
        if (ipr_prev->next == ipr) {
 800bb0a:	680b      	ldr	r3, [r1, #0]
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	d002      	beq.n	800bb16 <ip4_reass+0x186>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bb10:	4619      	mov	r1, r3
 800bb12:	e7f9      	b.n	800bb08 <ip4_reass+0x178>
      ipr_prev = NULL;
 800bb14:	4629      	mov	r1, r5
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bb16:	4620      	mov	r0, r4
 800bb18:	f7ff fd1c 	bl	800b554 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7fa febd 	bl	800689c <pbuf_clen>
 800bb22:	4a02      	ldr	r2, [pc, #8]	; (800bb2c <ip4_reass+0x19c>)
 800bb24:	8893      	ldrh	r3, [r2, #4]
 800bb26:	1a1b      	subs	r3, r3, r0
 800bb28:	8093      	strh	r3, [r2, #4]
    return p;
 800bb2a:	e765      	b.n	800b9f8 <ip4_reass+0x68>
 800bb2c:	200034f8 	.word	0x200034f8

0800bb30 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	b08d      	sub	sp, #52	; 0x34
 800bb36:	4606      	mov	r6, r0
 800bb38:	9107      	str	r1, [sp, #28]
 800bb3a:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800bb3c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800bb3e:	3b14      	subs	r3, #20
 800bb40:	d451      	bmi.n	800bbe6 <ip4_frag+0xb6>
 800bb42:	10da      	asrs	r2, r3, #3
 800bb44:	9206      	str	r2, [sp, #24]
 800bb46:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800bb4a:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800bb4c:	f8d6 8004 	ldr.w	r8, [r6, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800bb50:	f898 3000 	ldrb.w	r3, [r8]
 800bb54:	f003 030f 	and.w	r3, r3, #15
 800bb58:	2b05      	cmp	r3, #5
 800bb5a:	d146      	bne.n	800bbea <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800bb5c:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800bb60:	f7fa f89a 	bl	8005c98 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800bb64:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800bb68:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800bb6a:	f410 5300 	ands.w	r3, r0, #8192	; 0x2000
 800bb6e:	9302      	str	r3, [sp, #8]
 800bb70:	d145      	bne.n	800bbfe <ip4_frag+0xce>

  left = p->tot_len - IP_HLEN;
 800bb72:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800bb76:	f1a9 0914 	sub.w	r9, r9, #20
 800bb7a:	fa1f f389 	uxth.w	r3, r9
 800bb7e:	9303      	str	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800bb80:	9c02      	ldr	r4, [sp, #8]
  u16_t poff = IP_HLEN;
 800bb82:	f04f 0a14 	mov.w	sl, #20

  while (left) {
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 80b6 	beq.w	800bcfa <ip4_frag+0x1ca>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800bb8e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	9a03      	ldr	r2, [sp, #12]
 800bb96:	9208      	str	r2, [sp, #32]
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	bfa8      	it	ge
 800bb9c:	4613      	movge	r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800bba2:	2200      	movs	r2, #0
 800bba4:	2114      	movs	r1, #20
 800bba6:	2002      	movs	r0, #2
 800bba8:	f7fa fd10 	bl	80065cc <pbuf_alloc>
    if (rambuf == NULL) {
 800bbac:	4683      	mov	fp, r0
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f000 80a5 	beq.w	800bcfe <ip4_frag+0x1ce>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800bbb4:	8973      	ldrh	r3, [r6, #10]
 800bbb6:	2b13      	cmp	r3, #19
 800bbb8:	d92b      	bls.n	800bc12 <ip4_frag+0xe2>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800bbba:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bbbe:	f8d8 2000 	ldr.w	r2, [r8]
 800bbc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbc6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800bbca:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	605d      	str	r5, [r3, #4]
 800bbd2:	6098      	str	r0, [r3, #8]
 800bbd4:	60d9      	str	r1, [r3, #12]
 800bbd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbda:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800bbdc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bbe0:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
 800bbe2:	9d04      	ldr	r5, [sp, #16]
    while (left_to_copy) {
 800bbe4:	e03d      	b.n	800bc62 <ip4_frag+0x132>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800bbe6:	3307      	adds	r3, #7
 800bbe8:	e7ab      	b.n	800bb42 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800bbea:	4b46      	ldr	r3, [pc, #280]	; (800bd04 <ip4_frag+0x1d4>)
 800bbec:	f240 22e1 	movw	r2, #737	; 0x2e1
 800bbf0:	4945      	ldr	r1, [pc, #276]	; (800bd08 <ip4_frag+0x1d8>)
 800bbf2:	4846      	ldr	r0, [pc, #280]	; (800bd0c <ip4_frag+0x1dc>)
 800bbf4:	f007 f988 	bl	8012f08 <printf>
 800bbf8:	f06f 0005 	mvn.w	r0, #5
 800bbfc:	e043      	b.n	800bc86 <ip4_frag+0x156>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800bbfe:	4b41      	ldr	r3, [pc, #260]	; (800bd04 <ip4_frag+0x1d4>)
 800bc00:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bc04:	4942      	ldr	r1, [pc, #264]	; (800bd10 <ip4_frag+0x1e0>)
 800bc06:	4841      	ldr	r0, [pc, #260]	; (800bd0c <ip4_frag+0x1dc>)
 800bc08:	f007 f97e 	bl	8012f08 <printf>
 800bc0c:	f06f 0005 	mvn.w	r0, #5
 800bc10:	e039      	b.n	800bc86 <ip4_frag+0x156>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800bc12:	4b3c      	ldr	r3, [pc, #240]	; (800bd04 <ip4_frag+0x1d4>)
 800bc14:	f44f 7242 	mov.w	r2, #776	; 0x308
 800bc18:	493e      	ldr	r1, [pc, #248]	; (800bd14 <ip4_frag+0x1e4>)
 800bc1a:	483c      	ldr	r0, [pc, #240]	; (800bd0c <ip4_frag+0x1dc>)
 800bc1c:	f007 f974 	bl	8012f08 <printf>
 800bc20:	e7cb      	b.n	800bbba <ip4_frag+0x8a>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800bc22:	f7ff fe67 	bl	800b8f4 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 800bc26:	4607      	mov	r7, r0
 800bc28:	b340      	cbz	r0, 800bc7c <ip4_frag+0x14c>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 800bc2a:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800bc2c:	9401      	str	r4, [sp, #4]
 800bc2e:	4453      	add	r3, sl
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	4603      	mov	r3, r0
 800bc34:	2202      	movs	r2, #2
 800bc36:	4621      	mov	r1, r4
 800bc38:	2004      	movs	r0, #4
 800bc3a:	f7fa fc1d 	bl	8006478 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800bc3e:	4681      	mov	r9, r0
 800bc40:	b320      	cbz	r0, 800bc8c <ip4_frag+0x15c>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7fa fe32 	bl	80068ac <pbuf_ref>
      pcr->original = p;
 800bc48:	617e      	str	r6, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800bc4a:	4b33      	ldr	r3, [pc, #204]	; (800bd18 <ip4_frag+0x1e8>)
 800bc4c:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800bc4e:	4649      	mov	r1, r9
 800bc50:	4658      	mov	r0, fp
 800bc52:	f7fa fe43 	bl	80068dc <pbuf_cat>
      left_to_copy -= newpbuflen;
 800bc56:	1b2d      	subs	r5, r5, r4
 800bc58:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 800bc5a:	b115      	cbz	r5, 800bc62 <ip4_frag+0x132>
        poff = 0;
        p = p->next;
 800bc5c:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800bc5e:	f8dd a008 	ldr.w	sl, [sp, #8]
    while (left_to_copy) {
 800bc62:	b1e5      	cbz	r5, 800bc9e <ip4_frag+0x16e>
      u16_t plen = p->len - poff;
 800bc64:	8974      	ldrh	r4, [r6, #10]
 800bc66:	eba4 040a 	sub.w	r4, r4, sl
 800bc6a:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800bc6c:	42ac      	cmp	r4, r5
 800bc6e:	bf28      	it	cs
 800bc70:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	d1d5      	bne.n	800bc22 <ip4_frag+0xf2>
        p = p->next;
 800bc76:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800bc78:	46a2      	mov	sl, r4
        continue;
 800bc7a:	e7f2      	b.n	800bc62 <ip4_frag+0x132>
        pbuf_free(rambuf);
 800bc7c:	4658      	mov	r0, fp
 800bc7e:	f7fa fc41 	bl	8006504 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bc86:	b00d      	add	sp, #52	; 0x34
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7ff fd3f 	bl	800b710 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800bc92:	4658      	mov	r0, fp
 800bc94:	f7fa fc36 	bl	8006504 <pbuf_free>
  return ERR_MEM;
 800bc98:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800bc9c:	e7f3      	b.n	800bc86 <ip4_frag+0x156>
    poff += newpbuflen;
 800bc9e:	44a2      	add	sl, r4
 800bca0:	fa1f fa8a 	uxth.w	sl, sl
    last = (left <= netif->mtu - IP_HLEN);
 800bca4:	9b07      	ldr	r3, [sp, #28]
 800bca6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bca8:	3b13      	subs	r3, #19
    tmp = (IP_OFFMASK & (ofo));
 800bcaa:	9a05      	ldr	r2, [sp, #20]
 800bcac:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 800bcb0:	9a08      	ldr	r2, [sp, #32]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	db01      	blt.n	800bcba <ip4_frag+0x18a>
      tmp = tmp | IP_MF;
 800bcb6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800bcba:	f7f9 ffed 	bl	8005c98 <lwip_htons>
 800bcbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bcc0:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800bcc2:	9f04      	ldr	r7, [sp, #16]
 800bcc4:	f107 0014 	add.w	r0, r7, #20
 800bcc8:	b280      	uxth	r0, r0
 800bcca:	f7f9 ffe5 	bl	8005c98 <lwip_htons>
 800bcce:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	72ab      	strb	r3, [r5, #10]
 800bcd4:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 800bcd6:	9807      	ldr	r0, [sp, #28]
 800bcd8:	6943      	ldr	r3, [r0, #20]
 800bcda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcdc:	4659      	mov	r1, fp
 800bcde:	4798      	blx	r3
    pbuf_free(rambuf);
 800bce0:	4658      	mov	r0, fp
 800bce2:	f7fa fc0f 	bl	8006504 <pbuf_free>
    left -= fragsize;
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1bdb      	subs	r3, r3, r7
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	9303      	str	r3, [sp, #12]
    ofo += nfb;
 800bcee:	9b05      	ldr	r3, [sp, #20]
 800bcf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcf2:	4413      	add	r3, r2
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	9305      	str	r3, [sp, #20]
 800bcf8:	e745      	b.n	800bb86 <ip4_frag+0x56>
  return ERR_OK;
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e7c3      	b.n	800bc86 <ip4_frag+0x156>
  return ERR_MEM;
 800bcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bd02:	e7c0      	b.n	800bc86 <ip4_frag+0x156>
 800bd04:	0801bb08 	.word	0x0801bb08
 800bd08:	0801bc54 	.word	0x0801bc54
 800bd0c:	0801a38c 	.word	0x0801a38c
 800bd10:	0801bc7c 	.word	0x0801bc7c
 800bd14:	0801bc98 	.word	0x0801bc98
 800bd18:	0800b73d 	.word	0x0800b73d

0800bd1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800bd20:	8946      	ldrh	r6, [r0, #10]
 800bd22:	2e0e      	cmp	r6, #14
 800bd24:	d916      	bls.n	800bd54 <ethernet_input+0x38>
 800bd26:	460d      	mov	r5, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800bd28:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800bd2a:	8987      	ldrh	r7, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800bd2c:	7803      	ldrb	r3, [r0, #0]
 800bd2e:	f013 0f01 	tst.w	r3, #1
 800bd32:	d00a      	beq.n	800bd4a <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d012      	beq.n	800bd5e <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800bd38:	2206      	movs	r2, #6
 800bd3a:	4921      	ldr	r1, [pc, #132]	; (800bdc0 <ethernet_input+0xa4>)
 800bd3c:	f007 f8b4 	bl	8012ea8 <memcmp>
 800bd40:	b918      	cbnz	r0, 800bd4a <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800bd42:	7b63      	ldrb	r3, [r4, #13]
 800bd44:	f043 0308 	orr.w	r3, r3, #8
 800bd48:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800bd4a:	2f08      	cmp	r7, #8
 800bd4c:	d012      	beq.n	800bd74 <ethernet_input+0x58>
 800bd4e:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
 800bd52:	d022      	beq.n	800bd9a <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7fa fbd5 	bl	8006504 <pbuf_free>
  return ERR_OK;
}
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800bd5e:	7843      	ldrb	r3, [r0, #1]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1f2      	bne.n	800bd4a <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800bd64:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800bd66:	2b5e      	cmp	r3, #94	; 0x5e
 800bd68:	d1ef      	bne.n	800bd4a <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800bd6a:	7b63      	ldrb	r3, [r4, #13]
 800bd6c:	f043 0310 	orr.w	r3, r3, #16
 800bd70:	7363      	strb	r3, [r4, #13]
 800bd72:	e7ea      	b.n	800bd4a <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bd74:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800bd78:	f013 0f08 	tst.w	r3, #8
 800bd7c:	d0ea      	beq.n	800bd54 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bd7e:	2e0d      	cmp	r6, #13
 800bd80:	d9e8      	bls.n	800bd54 <ethernet_input+0x38>
 800bd82:	f06f 010d 	mvn.w	r1, #13
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7fa fbb2 	bl	80064f0 <pbuf_header>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d1e1      	bne.n	800bd54 <ethernet_input+0x38>
        ip4_input(p, netif);
 800bd90:	4629      	mov	r1, r5
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7ff f992 	bl	800b0bc <ip4_input>
      break;
 800bd98:	e7df      	b.n	800bd5a <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bd9a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800bd9e:	f013 0f08 	tst.w	r3, #8
 800bda2:	d0d7      	beq.n	800bd54 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bda4:	2e0d      	cmp	r6, #13
 800bda6:	d9d5      	bls.n	800bd54 <ethernet_input+0x38>
 800bda8:	f06f 010d 	mvn.w	r1, #13
 800bdac:	4620      	mov	r0, r4
 800bdae:	f7fa fb9f 	bl	80064f0 <pbuf_header>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d1ce      	bne.n	800bd54 <ethernet_input+0x38>
        etharp_input(p, netif);
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7fe fda9 	bl	800a910 <etharp_input>
      break;
 800bdbe:	e7cc      	b.n	800bd5a <ethernet_input+0x3e>
 800bdc0:	0801a31c 	.word	0x0801a31c

0800bdc4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	4605      	mov	r5, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	4616      	mov	r6, r2
 800bdce:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800bdd0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bdd4:	f7f9 ff60 	bl	8005c98 <lwip_htons>
 800bdd8:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800bdda:	210e      	movs	r1, #14
 800bddc:	4620      	mov	r0, r4
 800bdde:	f7fa fb87 	bl	80064f0 <pbuf_header>
 800bde2:	b9e8      	cbnz	r0, 800be20 <ethernet_output+0x5c>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800bde4:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800bde6:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	600b      	str	r3, [r1, #0]
 800bdee:	88bb      	ldrh	r3, [r7, #4]
 800bdf0:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800bdf2:	6833      	ldr	r3, [r6, #0]
 800bdf4:	f8c1 3006 	str.w	r3, [r1, #6]
 800bdf8:	88b3      	ldrh	r3, [r6, #4]
 800bdfa:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800bdfc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800be00:	2b06      	cmp	r3, #6
 800be02:	d105      	bne.n	800be10 <ethernet_output+0x4c>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800be04:	69ab      	ldr	r3, [r5, #24]
 800be06:	4621      	mov	r1, r4
 800be08:	4628      	mov	r0, r5
 800be0a:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800be0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <ethernet_output+0x64>)
 800be12:	f240 122b 	movw	r2, #299	; 0x12b
 800be16:	4905      	ldr	r1, [pc, #20]	; (800be2c <ethernet_output+0x68>)
 800be18:	4805      	ldr	r0, [pc, #20]	; (800be30 <ethernet_output+0x6c>)
 800be1a:	f007 f875 	bl	8012f08 <printf>
 800be1e:	e7f1      	b.n	800be04 <ethernet_output+0x40>
  return ERR_BUF;
 800be20:	f06f 0001 	mvn.w	r0, #1
 800be24:	e7f2      	b.n	800be0c <ethernet_output+0x48>
 800be26:	bf00      	nop
 800be28:	0801bcb8 	.word	0x0801bcb8
 800be2c:	0801bcf0 	.word	0x0801bcf0
 800be30:	0801a38c 	.word	0x0801a38c

0800be34 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800be34:	b500      	push	{lr}
 800be36:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800be38:	2300      	movs	r3, #0
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	9302      	str	r3, [sp, #8]
 800be40:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800be42:	481c      	ldr	r0, [pc, #112]	; (800beb4 <MX_ADC1_Init+0x80>)
 800be44:	4a1c      	ldr	r2, [pc, #112]	; (800beb8 <MX_ADC1_Init+0x84>)
 800be46:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800be48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800be4c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800be4e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800be50:	2201      	movs	r2, #1
 800be52:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800be54:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800be56:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800be5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800be5c:	4917      	ldr	r1, [pc, #92]	; (800bebc <MX_ADC1_Init+0x88>)
 800be5e:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800be60:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 800be62:	2102      	movs	r1, #2
 800be64:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800be66:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800be6a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800be6c:	f7f5 f9dc 	bl	8001228 <HAL_ADC_Init>
 800be70:	b9b0      	cbnz	r0, 800bea0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800be72:	2312      	movs	r3, #18
 800be74:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800be76:	2301      	movs	r3, #1
 800be78:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800be7a:	2307      	movs	r3, #7
 800be7c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800be7e:	4669      	mov	r1, sp
 800be80:	480c      	ldr	r0, [pc, #48]	; (800beb4 <MX_ADC1_Init+0x80>)
 800be82:	f7f5 fc7d 	bl	8001780 <HAL_ADC_ConfigChannel>
 800be86:	b970      	cbnz	r0, 800bea6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800be88:	2303      	movs	r3, #3
 800be8a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800be8c:	2302      	movs	r3, #2
 800be8e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800be90:	4669      	mov	r1, sp
 800be92:	4808      	ldr	r0, [pc, #32]	; (800beb4 <MX_ADC1_Init+0x80>)
 800be94:	f7f5 fc74 	bl	8001780 <HAL_ADC_ConfigChannel>
 800be98:	b940      	cbnz	r0, 800beac <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }

}
 800be9a:	b005      	add	sp, #20
 800be9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800bea0:	f002 f944 	bl	800e12c <Error_Handler>
 800bea4:	e7e5      	b.n	800be72 <MX_ADC1_Init+0x3e>
    Error_Handler();
 800bea6:	f002 f941 	bl	800e12c <Error_Handler>
 800beaa:	e7ed      	b.n	800be88 <MX_ADC1_Init+0x54>
    Error_Handler();
 800beac:	f002 f93e 	bl	800e12c <Error_Handler>
}
 800beb0:	e7f3      	b.n	800be9a <MX_ADC1_Init+0x66>
 800beb2:	bf00      	nop
 800beb4:	20007a1c 	.word	0x20007a1c
 800beb8:	40012000 	.word	0x40012000
 800bebc:	0f000001 	.word	0x0f000001

0800bec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800bec0:	b530      	push	{r4, r5, lr}
 800bec2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bec4:	2300      	movs	r3, #0
 800bec6:	9303      	str	r3, [sp, #12]
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	9305      	str	r3, [sp, #20]
 800becc:	9306      	str	r3, [sp, #24]
 800bece:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800bed0:	6802      	ldr	r2, [r0, #0]
 800bed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bed6:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800beda:	429a      	cmp	r2, r3
 800bedc:	d001      	beq.n	800bee2 <HAL_ADC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800bede:	b009      	add	sp, #36	; 0x24
 800bee0:	bd30      	pop	{r4, r5, pc}
 800bee2:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bee4:	2500      	movs	r5, #0
 800bee6:	9501      	str	r5, [sp, #4]
 800bee8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800beec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bef2:	645a      	str	r2, [r3, #68]	; 0x44
 800bef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bef6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800befa:	9201      	str	r2, [sp, #4]
 800befc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800befe:	9502      	str	r5, [sp, #8]
 800bf00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf02:	f042 0201 	orr.w	r2, r2, #1
 800bf06:	631a      	str	r2, [r3, #48]	; 0x30
 800bf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	9302      	str	r3, [sp, #8]
 800bf10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VinSys_Pin;
 800bf12:	2308      	movs	r3, #8
 800bf14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf16:	2303      	movs	r3, #3
 800bf18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VinSys_GPIO_Port, &GPIO_InitStruct);
 800bf1c:	a903      	add	r1, sp, #12
 800bf1e:	4814      	ldr	r0, [pc, #80]	; (800bf70 <HAL_ADC_MspInit+0xb0>)
 800bf20:	f7f6 fe68 	bl	8002bf4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800bf24:	4813      	ldr	r0, [pc, #76]	; (800bf74 <HAL_ADC_MspInit+0xb4>)
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <HAL_ADC_MspInit+0xb8>)
 800bf28:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800bf2a:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bf2c:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800bf2e:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800bf30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf34:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800bf36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf3a:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800bf3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf40:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800bf42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf46:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800bf48:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bf4a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800bf4c:	f7f5 fdd6 	bl	8001afc <HAL_DMA_Init>
 800bf50:	b958      	cbnz	r0, 800bf6a <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800bf52:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <HAL_ADC_MspInit+0xb4>)
 800bf54:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf56:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2107      	movs	r1, #7
 800bf5c:	2012      	movs	r0, #18
 800bf5e:	f7f5 fcf5 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800bf62:	2012      	movs	r0, #18
 800bf64:	f7f5 fd26 	bl	80019b4 <HAL_NVIC_EnableIRQ>
}
 800bf68:	e7b9      	b.n	800bede <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800bf6a:	f002 f8df 	bl	800e12c <Error_Handler>
 800bf6e:	e7f0      	b.n	800bf52 <HAL_ADC_MspInit+0x92>
 800bf70:	40020000 	.word	0x40020000
 800bf74:	20007a64 	.word	0x20007a64
 800bf78:	40026470 	.word	0x40026470

0800bf7c <updateDeviceSignature>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateDeviceSignature(void)
{
 800bf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	uint32_t u32UUID0 = 0;
	uint32_t u32UUID1 = 0;
	uint32_t u32UUID2 = 0;

	u32UUID0 = STM32_UUID[0];
 800bf80:	4f1a      	ldr	r7, [pc, #104]	; (800bfec <updateDeviceSignature+0x70>)
 800bf82:	683c      	ldr	r4, [r7, #0]
	u32UUID1 = STM32_UUID[1];
 800bf84:	4e1a      	ldr	r6, [pc, #104]	; (800bff0 <updateDeviceSignature+0x74>)
 800bf86:	f8d6 8000 	ldr.w	r8, [r6]
	u32UUID2 = STM32_UUID[2];
 800bf8a:	4d1a      	ldr	r5, [pc, #104]	; (800bff4 <updateDeviceSignature+0x78>)
 800bf8c:	6828      	ldr	r0, [r5, #0]

	/* Variable for production */
	gu32DeviceId = STM32_UUID[0];
 800bf8e:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <updateDeviceSignature+0x7c>)
 800bf90:	601c      	str	r4, [r3, #0]
	/*Integer to ASCII UUID 2 */
	itoa(u32UUID2,buffuuid2,10);
 800bf92:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c008 <updateDeviceSignature+0x8c>
 800bf96:	220a      	movs	r2, #10
 800bf98:	4651      	mov	r1, sl
 800bf9a:	f006 fd31 	bl	8012a00 <itoa>
	/*Integer to ASCII UUID 1 */
	itoa(u32UUID1,buffuuid1,10);
 800bf9e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800c00c <updateDeviceSignature+0x90>
 800bfa2:	220a      	movs	r2, #10
 800bfa4:	4649      	mov	r1, r9
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	f006 fd2a 	bl	8012a00 <itoa>
	/*Integer to ASCII UUID 0 */
	itoa(u32UUID0,buffuuid0,10);
 800bfac:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800c010 <updateDeviceSignature+0x94>
 800bfb0:	220a      	movs	r2, #10
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f006 fd23 	bl	8012a00 <itoa>
#if (USEFLASHSIZEINDEVINFO == TRUE)
	itoa(deviceSign.u32FlashSize,buffflash,10);
#endif

	/* Append Device Info to Array */
	strcat(dinfo,buffuuid2);
 800bfba:	4c10      	ldr	r4, [pc, #64]	; (800bffc <updateDeviceSignature+0x80>)
 800bfbc:	4651      	mov	r1, sl
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f006 ffe4 	bl	8012f8c <strcat>
	strcat(dinfo,buffuuid1);
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f006 ffe0 	bl	8012f8c <strcat>
	strcat(dinfo,buffuuid0);
 800bfcc:	4641      	mov	r1, r8
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f006 ffdc 	bl	8012f8c <strcat>
#if (USEFLASHSIZEINDEVINFO == TRUE)
	strcat(dinfo,buffflash);
#endif
	/* Update Structure */
	/* 96 Bit UUID */
	deviceSign.u32UUID0 = STM32_UUID[0];
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <updateDeviceSignature+0x84>)
 800bfd8:	601a      	str	r2, [r3, #0]
	deviceSign.u32UUID1 = STM32_UUID[1];
 800bfda:	6832      	ldr	r2, [r6, #0]
 800bfdc:	605a      	str	r2, [r3, #4]
	deviceSign.u32UUID2 = STM32_UUID[2];
 800bfde:	682a      	ldr	r2, [r5, #0]
 800bfe0:	609a      	str	r2, [r3, #8]
	/* 16 Bit Flash Size */
	deviceSign.u32FlashSize = STM32_FLASHSIZE;
 800bfe2:	4a08      	ldr	r2, [pc, #32]	; (800c004 <updateDeviceSignature+0x88>)
 800bfe4:	6812      	ldr	r2, [r2, #0]
 800bfe6:	60da      	str	r2, [r3, #12]
}
 800bfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfec:	1fff7a10 	.word	0x1fff7a10
 800bff0:	1fff7a14 	.word	0x1fff7a14
 800bff4:	1fff7a18 	.word	0x1fff7a18
 800bff8:	20003500 	.word	0x20003500
 800bffc:	20007ac4 	.word	0x20007ac4
 800c000:	20007ba8 	.word	0x20007ba8
 800c004:	1fff7a22 	.word	0x1fff7a22
 800c008:	20007b88 	.word	0x20007b88
 800c00c:	20007b48 	.word	0x20007b48
 800c010:	20007b68 	.word	0x20007b68

0800c014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c014:	b500      	push	{lr}
 800c016:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c018:	2100      	movs	r1, #0
 800c01a:	9101      	str	r1, [sp, #4]
 800c01c:	4b09      	ldr	r3, [pc, #36]	; (800c044 <MX_DMA_Init+0x30>)
 800c01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c020:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c024:	631a      	str	r2, [r3, #48]	; 0x30
 800c026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800c030:	460a      	mov	r2, r1
 800c032:	203c      	movs	r0, #60	; 0x3c
 800c034:	f7f5 fc8a 	bl	800194c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800c038:	203c      	movs	r0, #60	; 0x3c
 800c03a:	f7f5 fcbb 	bl	80019b4 <HAL_NVIC_EnableIRQ>

}
 800c03e:	b003      	add	sp, #12
 800c040:	f85d fb04 	ldr.w	pc, [sp], #4
 800c044:	40023800 	.word	0x40023800

0800c048 <assertError>:
			/* Unwanted / Undefined Error Occured
			 * System Will Halt Completely */
			//while(1);
			break;
	}
}
 800c048:	4770      	bx	lr
	...

0800c04c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800c050:	4833      	ldr	r0, [pc, #204]	; (800c120 <low_level_input+0xd4>)
 800c052:	f7f6 f951 	bl	80022f8 <HAL_ETH_GetReceivedFrame>
 800c056:	2800      	cmp	r0, #0
 800c058:	d15e      	bne.n	800c118 <low_level_input+0xcc>
    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800c05a:	4b31      	ldr	r3, [pc, #196]	; (800c120 <low_level_input+0xd4>)
 800c05c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800c05e:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

  if (len > 0)
 800c062:	b979      	cbnz	r1, 800c084 <low_level_input+0x38>
  struct pbuf *p = NULL;
 800c064:	f04f 0a00 	mov.w	sl, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c068:	4b2d      	ldr	r3, [pc, #180]	; (800c120 <low_level_input+0xd4>)
 800c06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c06c:	2100      	movs	r1, #0
 800c06e:	4a2c      	ldr	r2, [pc, #176]	; (800c120 <low_level_input+0xd4>)
 800c070:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c072:	428a      	cmp	r2, r1
 800c074:	d93b      	bls.n	800c0ee <low_level_input+0xa2>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c07c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c07e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c080:	3101      	adds	r1, #1
 800c082:	e7f4      	b.n	800c06e <low_level_input+0x22>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c084:	2203      	movs	r2, #3
 800c086:	2004      	movs	r0, #4
 800c088:	f7fa faa0 	bl	80065cc <pbuf_alloc>
  if (p != NULL)
 800c08c:	4682      	mov	sl, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d0ea      	beq.n	800c068 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c092:	4b23      	ldr	r3, [pc, #140]	; (800c120 <low_level_input+0xd4>)
 800c094:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c096:	4681      	mov	r9, r0
    bufferoffset = 0;
 800c098:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800c09a:	e021      	b.n	800c0e0 <low_level_input+0x94>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800c09c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c0a0:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800c0a4:	3204      	adds	r2, #4
 800c0a6:	eb08 0104 	add.w	r1, r8, r4
 800c0aa:	4430      	add	r0, r6
 800c0ac:	f006 ff0a 	bl	8012ec4 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c0b0:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800c0b2:	f8d7 8008 	ldr.w	r8, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800c0b6:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800c0ba:	1b36      	subs	r6, r6, r4
 800c0bc:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800c0c0:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c0c2:	18a5      	adds	r5, r4, r2
 800c0c4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c0c8:	429d      	cmp	r5, r3
 800c0ca:	d8e7      	bhi.n	800c09c <low_level_input+0x50>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800c0cc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c0d0:	eb08 0104 	add.w	r1, r8, r4
 800c0d4:	4430      	add	r0, r6
 800c0d6:	f006 fef5 	bl	8012ec4 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800c0da:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800c0de:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800c0e0:	f1b9 0f00 	cmp.w	r9, #0
 800c0e4:	d0c0      	beq.n	800c068 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 800c0e6:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800c0ea:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c0ec:	e7e9      	b.n	800c0c2 <low_level_input+0x76>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800c0ee:	4b0c      	ldr	r3, [pc, #48]	; (800c120 <low_level_input+0xd4>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f241 0214 	movw	r2, #4116	; 0x1014
 800c0fa:	589a      	ldr	r2, [r3, r2]
 800c0fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c100:	d007      	beq.n	800c112 <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800c102:	f241 0214 	movw	r2, #4116	; 0x1014
 800c106:	2180      	movs	r1, #128	; 0x80
 800c108:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800c10a:	f241 0208 	movw	r2, #4104	; 0x1008
 800c10e:	2100      	movs	r1, #0
 800c110:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800c112:	4650      	mov	r0, sl
 800c114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800c118:	f04f 0a00 	mov.w	sl, #0
 800c11c:	e7f9      	b.n	800c112 <low_level_input+0xc6>
 800c11e:	bf00      	nop
 800c120:	2000a17c 	.word	0x2000a17c

0800c124 <low_level_output>:
{
 800c124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c12a:	4b2c      	ldr	r3, [pc, #176]	; (800c1dc <low_level_output+0xb8>)
 800c12c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800c12e:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800c132:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800c134:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800c136:	f1bb 0f00 	cmp.w	fp, #0
 800c13a:	d032      	beq.n	800c1a2 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c13c:	6833      	ldr	r3, [r6, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	db35      	blt.n	800c1ae <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800c142:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800c146:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c148:	eb04 0809 	add.w	r8, r4, r9
 800c14c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c150:	4598      	cmp	r8, r3
 800c152:	d919      	bls.n	800c188 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c154:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c158:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800c15c:	3204      	adds	r2, #4
 800c15e:	4429      	add	r1, r5
 800c160:	eb0a 0004 	add.w	r0, sl, r4
 800c164:	f006 feae 	bl	8012ec4 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c168:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c16a:	6833      	ldr	r3, [r6, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	db21      	blt.n	800c1b4 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c170:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c174:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c178:	1b2d      	subs	r5, r5, r4
 800c17a:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c17e:	1b3f      	subs	r7, r7, r4
 800c180:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800c184:	2400      	movs	r4, #0
 800c186:	e7df      	b.n	800c148 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c188:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c18c:	464a      	mov	r2, r9
 800c18e:	4429      	add	r1, r5
 800c190:	eb0a 0004 	add.w	r0, sl, r4
 800c194:	f006 fe96 	bl	8012ec4 <memcpy>
      framelength = framelength + byteslefttocopy;
 800c198:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800c19a:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800c19e:	4644      	mov	r4, r8
 800c1a0:	e7c9      	b.n	800c136 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c1a2:	4639      	mov	r1, r7
 800c1a4:	480d      	ldr	r0, [pc, #52]	; (800c1dc <low_level_output+0xb8>)
 800c1a6:	f7f6 f817 	bl	80021d8 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e004      	b.n	800c1b8 <low_level_output+0x94>
        errval = ERR_USE;
 800c1ae:	f06f 0007 	mvn.w	r0, #7
 800c1b2:	e001      	b.n	800c1b8 <low_level_output+0x94>
          errval = ERR_USE;
 800c1b4:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c1b8:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <low_level_output+0xb8>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f241 0214 	movw	r2, #4116	; 0x1014
 800c1c0:	589a      	ldr	r2, [r3, r2]
 800c1c2:	f012 0f20 	tst.w	r2, #32
 800c1c6:	d007      	beq.n	800c1d8 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c1c8:	f241 0214 	movw	r2, #4116	; 0x1014
 800c1cc:	2120      	movs	r1, #32
 800c1ce:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800c1d0:	f241 0204 	movw	r2, #4100	; 0x1004
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	5099      	str	r1, [r3, r2]
}
 800c1d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1dc:	2000a17c 	.word	0x2000a17c

0800c1e0 <low_level_init>:
{
 800c1e0:	b530      	push	{r4, r5, lr}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9303      	str	r3, [sp, #12]
  heth.Instance = ETH;
 800c1ea:	4833      	ldr	r0, [pc, #204]	; (800c2b8 <low_level_init+0xd8>)
 800c1ec:	4a33      	ldr	r2, [pc, #204]	; (800c2bc <low_level_init+0xdc>)
 800c1ee:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800c1f4:	8202      	strh	r2, [r0, #16]
  MACAddr[0] = 0x00;
 800c1f6:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[1] = 0x80;
 800c1fa:	2280      	movs	r2, #128	; 0x80
 800c1fc:	f88d 2005 	strb.w	r2, [sp, #5]
  MACAddr[2] = 0xE1;
 800c200:	22e1      	movs	r2, #225	; 0xe1
 800c202:	f88d 2006 	strb.w	r2, [sp, #6]
  MACAddr[3] = 0x00;
 800c206:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 800c20a:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 800c20e:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 800c212:	aa01      	add	r2, sp, #4
 800c214:	6142      	str	r2, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800c216:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c218:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c21a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c21e:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c220:	f7f6 f928 	bl	8002474 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800c224:	b928      	cbnz	r0, 800c232 <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800c226:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c22a:	f043 0304 	orr.w	r3, r3, #4
 800c22e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800c232:	4d21      	ldr	r5, [pc, #132]	; (800c2b8 <low_level_init+0xd8>)
 800c234:	2304      	movs	r3, #4
 800c236:	4a22      	ldr	r2, [pc, #136]	; (800c2c0 <low_level_init+0xe0>)
 800c238:	4922      	ldr	r1, [pc, #136]	; (800c2c4 <low_level_init+0xe4>)
 800c23a:	4628      	mov	r0, r5
 800c23c:	f7f5 ff5a 	bl	80020f4 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c240:	2304      	movs	r3, #4
 800c242:	4a21      	ldr	r2, [pc, #132]	; (800c2c8 <low_level_init+0xe8>)
 800c244:	4921      	ldr	r1, [pc, #132]	; (800c2cc <low_level_init+0xec>)
 800c246:	4628      	mov	r0, r5
 800c248:	f7f5 ff8e 	bl	8002168 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c24c:	2306      	movs	r3, #6
 800c24e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c252:	696b      	ldr	r3, [r5, #20]
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c25a:	785a      	ldrb	r2, [r3, #1]
 800c25c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c260:	789a      	ldrb	r2, [r3, #2]
 800c262:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c266:	78da      	ldrb	r2, [r3, #3]
 800c268:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c26c:	791a      	ldrb	r2, [r3, #4]
 800c26e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c272:	795b      	ldrb	r3, [r3, #5]
 800c274:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800c278:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c27c:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c27e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c282:	f043 030a 	orr.w	r3, r3, #10
 800c286:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7f6 fa1e 	bl	80026cc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800c290:	aa03      	add	r2, sp, #12
 800c292:	211d      	movs	r1, #29
 800c294:	4628      	mov	r0, r5
 800c296:	f7f6 f876 	bl	8002386 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800c29a:	9a03      	ldr	r2, [sp, #12]
 800c29c:	f042 020b 	orr.w	r2, r2, #11
 800c2a0:	9203      	str	r2, [sp, #12]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c2a2:	211d      	movs	r1, #29
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f7f6 f8aa 	bl	80023fe <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800c2aa:	aa03      	add	r2, sp, #12
 800c2ac:	211d      	movs	r1, #29
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f7f6 f869 	bl	8002386 <HAL_ETH_ReadPHYRegister>
}
 800c2b4:	b005      	add	sp, #20
 800c2b6:	bd30      	pop	{r4, r5, pc}
 800c2b8:	2000a17c 	.word	0x2000a17c
 800c2bc:	40028000 	.word	0x40028000
 800c2c0:	2000a1c4 	.word	0x2000a1c4
 800c2c4:	200088ac 	.word	0x200088ac
 800c2c8:	2000892c 	.word	0x2000892c
 800c2cc:	2000a0fc 	.word	0x2000a0fc

0800c2d0 <HAL_ETH_MspInit>:
{
 800c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d2:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9307      	str	r3, [sp, #28]
 800c2d8:	9308      	str	r3, [sp, #32]
 800c2da:	9309      	str	r3, [sp, #36]	; 0x24
 800c2dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c2de:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800c2e0:	6802      	ldr	r2, [r0, #0]
 800c2e2:	4b33      	ldr	r3, [pc, #204]	; (800c3b0 <HAL_ETH_MspInit+0xe0>)
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d001      	beq.n	800c2ec <HAL_ETH_MspInit+0x1c>
}
 800c2e8:	b00d      	add	sp, #52	; 0x34
 800c2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800c2ec:	2400      	movs	r4, #0
 800c2ee:	9401      	str	r4, [sp, #4]
 800c2f0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800c2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2f6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c2fa:	631a      	str	r2, [r3, #48]	; 0x30
 800c2fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2fe:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800c302:	9201      	str	r2, [sp, #4]
 800c304:	9a01      	ldr	r2, [sp, #4]
 800c306:	9402      	str	r4, [sp, #8]
 800c308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c30a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30
 800c310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c312:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800c316:	9202      	str	r2, [sp, #8]
 800c318:	9a02      	ldr	r2, [sp, #8]
 800c31a:	9403      	str	r4, [sp, #12]
 800c31c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c31e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c322:	631a      	str	r2, [r3, #48]	; 0x30
 800c324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c326:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800c32a:	9203      	str	r2, [sp, #12]
 800c32c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c32e:	9404      	str	r4, [sp, #16]
 800c330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c332:	f042 0204 	orr.w	r2, r2, #4
 800c336:	631a      	str	r2, [r3, #48]	; 0x30
 800c338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c33a:	f002 0204 	and.w	r2, r2, #4
 800c33e:	9204      	str	r2, [sp, #16]
 800c340:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c342:	9405      	str	r4, [sp, #20]
 800c344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c346:	f042 0201 	orr.w	r2, r2, #1
 800c34a:	631a      	str	r2, [r3, #48]	; 0x30
 800c34c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c34e:	f002 0201 	and.w	r2, r2, #1
 800c352:	9205      	str	r2, [sp, #20]
 800c354:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c356:	9406      	str	r4, [sp, #24]
 800c358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c35a:	f042 0202 	orr.w	r2, r2, #2
 800c35e:	631a      	str	r2, [r3, #48]	; 0x30
 800c360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	9306      	str	r3, [sp, #24]
 800c368:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c36a:	2332      	movs	r3, #50	; 0x32
 800c36c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c36e:	2702      	movs	r7, #2
 800c370:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c372:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c374:	2603      	movs	r6, #3
 800c376:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c378:	250b      	movs	r5, #11
 800c37a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c37c:	a907      	add	r1, sp, #28
 800c37e:	480d      	ldr	r0, [pc, #52]	; (800c3b4 <HAL_ETH_MspInit+0xe4>)
 800c380:	f7f6 fc38 	bl	8002bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c384:	2386      	movs	r3, #134	; 0x86
 800c386:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c388:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c38a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c38c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c38e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c390:	a907      	add	r1, sp, #28
 800c392:	4809      	ldr	r0, [pc, #36]	; (800c3b8 <HAL_ETH_MspInit+0xe8>)
 800c394:	f7f6 fc2e 	bl	8002bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800c398:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c39c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c39e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3a0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3a2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c3a4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3a6:	a907      	add	r1, sp, #28
 800c3a8:	4804      	ldr	r0, [pc, #16]	; (800c3bc <HAL_ETH_MspInit+0xec>)
 800c3aa:	f7f6 fc23 	bl	8002bf4 <HAL_GPIO_Init>
}
 800c3ae:	e79b      	b.n	800c2e8 <HAL_ETH_MspInit+0x18>
 800c3b0:	40028000 	.word	0x40028000
 800c3b4:	40020800 	.word	0x40020800
 800c3b8:	40020000 	.word	0x40020000
 800c3bc:	40020400 	.word	0x40020400

0800c3c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800c3c4:	f7ff fe42 	bl	800c04c <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800c3c8:	b120      	cbz	r0, 800c3d4 <ethernetif_input+0x14>
 800c3ca:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800c3cc:	6923      	ldr	r3, [r4, #16]
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4798      	blx	r3

  if (err != ERR_OK)
 800c3d2:	b900      	cbnz	r0, 800c3d6 <ethernetif_input+0x16>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 800c3d4:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7fa f894 	bl	8006504 <pbuf_free>
    p = NULL;
 800c3dc:	e7fa      	b.n	800c3d4 <ethernetif_input+0x14>
	...

0800c3e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c3e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b170      	cbz	r0, 800c404 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c3e6:	2373      	movs	r3, #115	; 0x73
 800c3e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800c3ec:	2374      	movs	r3, #116	; 0x74
 800c3ee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c3f2:	4b08      	ldr	r3, [pc, #32]	; (800c414 <ethernetif_init+0x34>)
 800c3f4:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c3f6:	4b08      	ldr	r3, [pc, #32]	; (800c418 <ethernetif_init+0x38>)
 800c3f8:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f7ff fef0 	bl	800c1e0 <low_level_init>

  return ERR_OK;
}
 800c400:	2000      	movs	r0, #0
 800c402:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c404:	4b05      	ldr	r3, [pc, #20]	; (800c41c <ethernetif_init+0x3c>)
 800c406:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c40a:	4905      	ldr	r1, [pc, #20]	; (800c420 <ethernetif_init+0x40>)
 800c40c:	4805      	ldr	r0, [pc, #20]	; (800c424 <ethernetif_init+0x44>)
 800c40e:	f006 fd7b 	bl	8012f08 <printf>
 800c412:	e7e8      	b.n	800c3e6 <ethernetif_init+0x6>
 800c414:	0800ad09 	.word	0x0800ad09
 800c418:	0800c125 	.word	0x0800c125
 800c41c:	0801bd24 	.word	0x0801bd24
 800c420:	0801b834 	.word	0x0801b834
 800c424:	0801a38c 	.word	0x0801a38c

0800c428 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c428:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800c42a:	f7f4 fe49 	bl	80010c0 <HAL_GetTick>
}
 800c42e:	bd08      	pop	{r3, pc}

0800c430 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800c430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c434:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c436:	2400      	movs	r4, #0
 800c438:	9407      	str	r4, [sp, #28]
 800c43a:	9408      	str	r4, [sp, #32]
 800c43c:	9409      	str	r4, [sp, #36]	; 0x24
 800c43e:	940a      	str	r4, [sp, #40]	; 0x28
 800c440:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c442:	9401      	str	r4, [sp, #4]
 800c444:	4b44      	ldr	r3, [pc, #272]	; (800c558 <MX_GPIO_Init+0x128>)
 800c446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c448:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c44c:	631a      	str	r2, [r3, #48]	; 0x30
 800c44e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c450:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c454:	9201      	str	r2, [sp, #4]
 800c456:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c458:	9402      	str	r4, [sp, #8]
 800c45a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c45c:	f042 0204 	orr.w	r2, r2, #4
 800c460:	631a      	str	r2, [r3, #48]	; 0x30
 800c462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c464:	f002 0204 	and.w	r2, r2, #4
 800c468:	9202      	str	r2, [sp, #8]
 800c46a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c46c:	9403      	str	r4, [sp, #12]
 800c46e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c470:	f042 0201 	orr.w	r2, r2, #1
 800c474:	631a      	str	r2, [r3, #48]	; 0x30
 800c476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c478:	f002 0201 	and.w	r2, r2, #1
 800c47c:	9203      	str	r2, [sp, #12]
 800c47e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c480:	9404      	str	r4, [sp, #16]
 800c482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c484:	f042 0210 	orr.w	r2, r2, #16
 800c488:	631a      	str	r2, [r3, #48]	; 0x30
 800c48a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c48c:	f002 0210 	and.w	r2, r2, #16
 800c490:	9204      	str	r2, [sp, #16]
 800c492:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c494:	9405      	str	r4, [sp, #20]
 800c496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c498:	f042 0202 	orr.w	r2, r2, #2
 800c49c:	631a      	str	r2, [r3, #48]	; 0x30
 800c49e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4a0:	f002 0202 	and.w	r2, r2, #2
 800c4a4:	9205      	str	r2, [sp, #20]
 800c4a6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4a8:	9406      	str	r4, [sp, #24]
 800c4aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4ac:	f042 0208 	orr.w	r2, r2, #8
 800c4b0:	631a      	str	r2, [r3, #48]	; 0x30
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b4:	f003 0308 	and.w	r3, r3, #8
 800c4b8:	9306      	str	r3, [sp, #24]
 800c4ba:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MB_DE_Pin|MB_RE_Pin, GPIO_PIN_RESET);
 800c4bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800c564 <MX_GPIO_Init+0x134>
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c4c6:	4648      	mov	r0, r9
 800c4c8:	f7f6 fc86 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_RESET);
 800c4cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800c568 <MX_GPIO_Init+0x138>
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	f7f6 fc7e 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|HEARTBEAT_Pin|LED_3_Pin|LED_2_Pin
 800c4dc:	4e1f      	ldr	r6, [pc, #124]	; (800c55c <MX_GPIO_Init+0x12c>)
 800c4de:	4622      	mov	r2, r4
 800c4e0:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f7f6 fc77 	bl	8002dd8 <HAL_GPIO_WritePin>
                          |GSM_PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_Reset_GPIO_Port, ETH_Reset_Pin, GPIO_PIN_RESET);
 800c4ea:	4f1d      	ldr	r7, [pc, #116]	; (800c560 <MX_GPIO_Init+0x130>)
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	2120      	movs	r1, #32
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	f7f6 fc71 	bl	8002dd8 <HAL_GPIO_WritePin>
// Direct without transistor
//  HAL_GPIO_WritePin(ETH_Reset_GPIO_Port, ETH_Reset_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MB_DE_Pin|MB_RE_Pin;
 800c4f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c4fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4fc:	2501      	movs	r5, #1
 800c4fe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c500:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c502:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c504:	a907      	add	r1, sp, #28
 800c506:	4648      	mov	r0, r9
 800c508:	f7f6 fb74 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CE_Pin;
 800c50c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c510:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c512:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c514:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c516:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI_CE_GPIO_Port, &GPIO_InitStruct);
 800c518:	a907      	add	r1, sp, #28
 800c51a:	4640      	mov	r0, r8
 800c51c:	f7f6 fb6a 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED_1_Pin|HEARTBEAT_Pin|LED_3_Pin|LED_2_Pin
 800c520:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
 800c524:	9307      	str	r3, [sp, #28]
                          |GSM_PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c526:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c528:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c52a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c52c:	a907      	add	r1, sp, #28
 800c52e:	4630      	mov	r0, r6
 800c530:	f7f6 fb60 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet reset PA5 */
  GPIO_InitStruct.Pin = ETH_Reset_Pin;
 800c534:	2320      	movs	r3, #32
 800c536:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c538:	9508      	str	r5, [sp, #32]

/*  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;*/

  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c53a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c53c:	940a      	str	r4, [sp, #40]	; 0x28

  HAL_GPIO_Init(ETH_Reset_GPIO_Port, &GPIO_InitStruct);
 800c53e:	a907      	add	r1, sp, #28
 800c540:	4638      	mov	r0, r7
 800c542:	f7f6 fb57 	bl	8002bf4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|LED_2_Pin, GPIO_PIN_SET);
 800c546:	462a      	mov	r2, r5
 800c548:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7f6 fc43 	bl	8002dd8 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
  HAL_GPIO_WritePin(ETH_Reset_GPIO_Port, ETH_Reset_Pin, 0); // High
  HAL_Delay(5000);*/


}
 800c552:	b00d      	add	sp, #52	; 0x34
 800c554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c558:	40023800 	.word	0x40023800
 800c55c:	40020c00 	.word	0x40020c00
 800c560:	40020000 	.word	0x40020000
 800c564:	40021000 	.word	0x40021000
 800c568:	40020400 	.word	0x40020400

0800c56c <initGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initGSMSIM868(void)
{
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Init Buffers */

	memset(gsmInstance.agpsLocationData, GSM_ARRAY_INIT_CHAR, (GPS_LOCATION_ARRAY_SIZE * sizeof(char)));
 800c570:	4c6a      	ldr	r4, [pc, #424]	; (800c71c <initGSMSIM868+0x1b0>)
 800c572:	2296      	movs	r2, #150	; 0x96
 800c574:	2100      	movs	r1, #0
 800c576:	4620      	mov	r0, r4
 800c578:	f006 fcb2 	bl	8012ee0 <memset>
	memset(gsmInstance.agsmNetworkIP, GSM_ARRAY_INIT_CHAR, (GPRS_NETWORKIP_ARRAY_SIZE * sizeof(char)));
 800c57c:	2223      	movs	r2, #35	; 0x23
 800c57e:	2100      	movs	r1, #0
 800c580:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 800c584:	f006 fcac 	bl	8012ee0 <memset>
	memset(gsmInstance.agsmSignalStrength, GSM_ARRAY_INIT_CHAR, (GSM_SIGSTRGTH_ARRAY_SIZE * sizeof(char)));
 800c588:	2500      	movs	r5, #0
 800c58a:	f8c4 5096 	str.w	r5, [r4, #150]	; 0x96
 800c58e:	f8c4 509a 	str.w	r5, [r4, #154]	; 0x9a
 800c592:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
	memset((char *)gsmInstance.as8GSM_Response_Buff,GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(char)));
 800c596:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c59a:	4629      	mov	r1, r5
 800c59c:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800c5a0:	f006 fc9e 	bl	8012ee0 <memset>
	memset(gsmInstance.agsmCommandResponse, DATA_UNKNOWN, sizeof(gsmInstance.agsmCommandResponse[0][0])
 800c5a4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800c5a8:	213f      	movs	r1, #63	; 0x3f
 800c5aa:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 800c5ae:	f006 fc97 	bl	8012ee0 <memset>
		   * GSM_TOTAL_COMMANDS * GSM_TOTAL_COMMANDS);
	memset(gsmInstance.agsmHTTPRequestStatus,DATA_UNKNOWN,GSM_HTTP_RESPONSE_CODE_SIZE * sizeof(char));
 800c5b2:	f04f 333f 	mov.w	r3, #1061109567	; 0x3f3f3f3f
 800c5b6:	f8c4 3447 	str.w	r3, [r4, #1095]	; 0x447
 800c5ba:	f8c4 344b 	str.w	r3, [r4, #1099]	; 0x44b
	memset(gsmInstance.strSystemSMS.agsmSMSRecipient,DATA_UNKNOWN,SMS_MOB_NO_LENGTH * sizeof(char));
 800c5be:	f8c4 3e41 	str.w	r3, [r4, #3649]	; 0xe41
 800c5c2:	f8c4 3e45 	str.w	r3, [r4, #3653]	; 0xe45
 800c5c6:	f8c4 3e49 	str.w	r3, [r4, #3657]	; 0xe49
 800c5ca:	f884 3e4d 	strb.w	r3, [r4, #3661]	; 0xe4d
	memset(gsmInstance.strSystemSMS.agsmSMSMessageBody,0x00,SMS_MAX_MSG_LENGTH * sizeof(char));
 800c5ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	f604 604e 	addw	r0, r4, #3662	; 0xe4e
 800c5d8:	f006 fc82 	bl	8012ee0 <memset>
	memset(gsmInstance.u32GSMHttpResponseCode,0x00,sizeof(char) * 3);
 800c5dc:	f8a4 544f 	strh.w	r5, [r4, #1103]	; 0x44f
 800c5e0:	f884 5451 	strb.w	r5, [r4, #1105]	; 0x451
	memset(gau8GSM_ATAPN, 0x00, (180 * sizeof(char)));
 800c5e4:	4e4e      	ldr	r6, [pc, #312]	; (800c720 <initGSMSIM868+0x1b4>)
 800c5e6:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 800c5ea:	464a      	mov	r2, r9
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f006 fc76 	bl	8012ee0 <memset>
	memset(gau8GSM_ATURL, 0x00, (180 * sizeof(char)));
 800c5f4:	eb06 0809 	add.w	r8, r6, r9
 800c5f8:	464a      	mov	r2, r9
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	f006 fc6f 	bl	8012ee0 <memset>
	memset(gau8GSM_SMSRecepient, 0x00, ( 180 * sizeof(char)));
 800c602:	f506 77b4 	add.w	r7, r6, #360	; 0x168
 800c606:	464a      	mov	r2, r9
 800c608:	4629      	mov	r1, r5
 800c60a:	4638      	mov	r0, r7
 800c60c:	f006 fc68 	bl	8012ee0 <memset>

	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_ATCMGS);
 800c610:	f506 7107 	add.w	r1, r6, #540	; 0x21c
 800c614:	4638      	mov	r0, r7
 800c616:	f006 fcb9 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 800c61a:	4638      	mov	r0, r7
 800c61c:	f7f3 fdf2 	bl	8000204 <strlen>
 800c620:	4b40      	ldr	r3, [pc, #256]	; (800c724 <initGSMSIM868+0x1b8>)
 800c622:	f8b3 9000 	ldrh.w	r9, [r3]
 800c626:	f827 9000 	strh.w	r9, [r7, r0]
	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_smsto);
 800c62a:	f506 710e 	add.w	r1, r6, #568	; 0x238
 800c62e:	4638      	mov	r0, r7
 800c630:	f006 fcac 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 800c634:	4638      	mov	r0, r7
 800c636:	f7f3 fde5 	bl	8000204 <strlen>
 800c63a:	f827 9000 	strh.w	r9, [r7, r0]
	//strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_ATSAPRBAPN);
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800c63e:	4630      	mov	r0, r6
 800c640:	f7f3 fde0 	bl	8000204 <strlen>
 800c644:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_apn);
 800c648:	f506 7112 	add.w	r1, r6, #584	; 0x248
 800c64c:	4630      	mov	r0, r6
 800c64e:	f006 fc9d 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800c652:	4630      	mov	r0, r6
 800c654:	f7f3 fdd6 	bl	8000204 <strlen>
 800c658:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800c65c:	f506 712b 	add.w	r1, r6, #684	; 0x2ac
 800c660:	4640      	mov	r0, r8
 800c662:	f006 fc93 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800c666:	4640      	mov	r0, r8
 800c668:	f7f3 fdcc 	bl	8000204 <strlen>
 800c66c:	f828 9000 	strh.w	r9, [r8, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 800c670:	f506 7151 	add.w	r1, r6, #836	; 0x344
 800c674:	4640      	mov	r0, r8
 800c676:	f006 fc89 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800c67a:	4640      	mov	r0, r8
 800c67c:	f7f3 fdc2 	bl	8000204 <strlen>
 800c680:	f828 9000 	strh.w	r9, [r8, r0]
	strcat(gau8GSM_ATAPN,"\r\n");
 800c684:	4630      	mov	r0, r6
 800c686:	f7f3 fdbd 	bl	8000204 <strlen>
 800c68a:	1832      	adds	r2, r6, r0
 800c68c:	4b26      	ldr	r3, [pc, #152]	; (800c728 <initGSMSIM868+0x1bc>)
 800c68e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c692:	f893 9002 	ldrb.w	r9, [r3, #2]
 800c696:	f826 a000 	strh.w	sl, [r6, r0]
 800c69a:	f882 9002 	strb.w	r9, [r2, #2]
	strcat(gau8GSM_ATURL,"\r\n");
 800c69e:	4640      	mov	r0, r8
 800c6a0:	f7f3 fdb0 	bl	8000204 <strlen>
 800c6a4:	eb08 0300 	add.w	r3, r8, r0
 800c6a8:	f828 a000 	strh.w	sl, [r8, r0]
 800c6ac:	f883 9002 	strb.w	r9, [r3, #2]
	strcat(gau8GSM_SMSRecepient,"\r\n");
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7f3 fda7 	bl	8000204 <strlen>
 800c6b6:	183b      	adds	r3, r7, r0
 800c6b8:	f827 a000 	strh.w	sl, [r7, r0]
 800c6bc:	f883 9002 	strb.w	r9, [r3, #2]

	gsmInstance.strSystemSMS.u8NewMessage = FALSE;
 800c6c0:	f241 136e 	movw	r3, #4462	; 0x116e
 800c6c4:	54e5      	strb	r5, [r4, r3]
	gsmInstance.enmcurrentTask = enmGSMTASK_RESET;
 800c6c6:	f884 5e3e 	strb.w	r5, [r4, #3646]	; 0xe3e
	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 800c6ca:	f884 5e40 	strb.w	r5, [r4, #3648]	; 0xe40
	gsmInstance.u8isConnected = FALSE;
 800c6ce:	f884 5e19 	strb.w	r5, [r4, #3609]	; 0xe19
	gsmInstance.u8GSM_Response_Character_Counter = 0;
 800c6d2:	f8c4 5e38 	str.w	r5, [r4, #3640]	; 0xe38
	gsmInstance.u8gsmRegistrationStatus = FALSE;
 800c6d6:	f884 5e17 	strb.w	r5, [r4, #3607]	; 0xe17
	gsmInstance.u8gsmSIMReadyStatus = FALSE;
 800c6da:	f884 5e16 	strb.w	r5, [r4, #3606]	; 0xe16
	gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 800c6de:	2305      	movs	r3, #5
 800c6e0:	f884 3e18 	strb.w	r3, [r4, #3608]	; 0xe18
	gsmInstance.u8AttemptFota = FALSE;
 800c6e4:	f884 5e1b 	strb.w	r5, [r4, #3611]	; 0xe1b
	gsmInstance.u32GSMTimer = ONE_SEC;
 800c6e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6ec:	f8c4 3e20 	str.w	r3, [r4, #3616]	; 0xe20
	gu32GSMHangTimer = THREE_MIN;
 800c6f0:	4b0e      	ldr	r3, [pc, #56]	; (800c72c <initGSMSIM868+0x1c0>)
 800c6f2:	4a0f      	ldr	r2, [pc, #60]	; (800c730 <initGSMSIM868+0x1c4>)
 800c6f4:	601a      	str	r2, [r3, #0]
	gu32GSMRestartTimer = FIVE_MIN;
 800c6f6:	4b0f      	ldr	r3, [pc, #60]	; (800c734 <initGSMSIM868+0x1c8>)
 800c6f8:	4a0f      	ldr	r2, [pc, #60]	; (800c738 <initGSMSIM868+0x1cc>)
 800c6fa:	601a      	str	r2, [r3, #0]
	gsmInstance.u32GSMHeartbeatTimer = 0;
 800c6fc:	f8c4 5e2c 	str.w	r5, [r4, #3628]	; 0xe2c
	gsmInstance.u8IllegalHttpResponseCounter = 0;
 800c700:	f884 5e1d 	strb.w	r5, [r4, #3613]	; 0xe1d
	gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800c704:	f884 5e3c 	strb.w	r5, [r4, #3644]	; 0xe3c
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATE0;
 800c708:	2301      	movs	r3, #1
 800c70a:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
	gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800c70e:	f884 3e3d 	strb.w	r3, [r4, #3645]	; 0xe3d
	gu8FlagNoTerminate = 1;
 800c712:	f886 33da 	strb.w	r3, [r6, #986]	; 0x3da
}
 800c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71a:	bf00      	nop
 800c71c:	2000c164 	.word	0x2000c164
 800c720:	20000010 	.word	0x20000010
 800c724:	0801bd38 	.word	0x0801bd38
 800c728:	0801bd58 	.word	0x0801bd58
 800c72c:	20004440 	.word	0x20004440
 800c730:	0002bf20 	.word	0x0002bf20
 800c734:	200029ac 	.word	0x200029ac
 800c738:	000493e0 	.word	0x000493e0

0800c73c <updateHttpDataLength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateHttpDataLength()
{
 800c73c:	b5b0      	push	{r4, r5, r7, lr}
 800c73e:	af00      	add	r7, sp, #0
	char * tempdata = "";
	tempdata = gsmPayload.data[gsmPayload.tail];
 800c740:	4a19      	ldr	r2, [pc, #100]	; (800c7a8 <updateHttpDataLength+0x6c>)
 800c742:	6853      	ldr	r3, [r2, #4]
 800c744:	3302      	adds	r3, #2

	uint32_t payloadLength = strlen(tempdata);
 800c746:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c74a:	f7f3 fd5b 	bl	8000204 <strlen>
 800c74e:	4604      	mov	r4, r0
	char buffer[payloadLength];
 800c750:	1dc3      	adds	r3, r0, #7
 800c752:	f023 0307 	bic.w	r3, r3, #7
 800c756:	ebad 0d03 	sub.w	sp, sp, r3
	memset(buffer, 0x00, (payloadLength * sizeof(char))); /* Clear Response Buffer */
 800c75a:	4602      	mov	r2, r0
 800c75c:	2100      	movs	r1, #0
 800c75e:	4668      	mov	r0, sp
 800c760:	f006 fbbe 	bl	8012ee0 <memset>

	/* Convert Integer to ASCII ( Decimal) */
	memset(gau8GSM_ATHTTPDATACOMMAND, 0x00, ( 30 * sizeof(char)));
 800c764:	4d11      	ldr	r5, [pc, #68]	; (800c7ac <updateHttpDataLength+0x70>)
 800c766:	221e      	movs	r2, #30
 800c768:	2100      	movs	r1, #0
 800c76a:	4628      	mov	r0, r5
 800c76c:	f006 fbb8 	bl	8012ee0 <memset>
	itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
 800c770:	220a      	movs	r2, #10
 800c772:	4669      	mov	r1, sp
 800c774:	4620      	mov	r0, r4
 800c776:	f006 f943 	bl	8012a00 <itoa>
	strcat(buffer,gu8GSMDataTimeout);
 800c77a:	4668      	mov	r0, sp
 800c77c:	f7f3 fd42 	bl	8000204 <strlen>
 800c780:	4602      	mov	r2, r0
 800c782:	eb0d 0400 	add.w	r4, sp, r0
 800c786:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <updateHttpDataLength+0x74>)
 800c788:	cb03      	ldmia	r3!, {r0, r1}
 800c78a:	f84d 0002 	str.w	r0, [sp, r2]
 800c78e:	6061      	str	r1, [r4, #4]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	7223      	strb	r3, [r4, #8]
	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,(char *)gau8GSM_ATHTTPDATA);
 800c794:	4907      	ldr	r1, [pc, #28]	; (800c7b4 <updateHttpDataLength+0x78>)
 800c796:	4628      	mov	r0, r5
 800c798:	f006 fbf8 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,buffer);
 800c79c:	4669      	mov	r1, sp
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f006 fbf4 	bl	8012f8c <strcat>
}
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7a8:	2000d2d4 	.word	0x2000d2d4
 800c7ac:	20003504 	.word	0x20003504
 800c7b0:	0801bd3c 	.word	0x0801bd3c
 800c7b4:	200003ec 	.word	0x200003ec

0800c7b8 <sendSystemConfigurationSMS>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void sendSystemConfigurationSMS(void)
{
 800c7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ba:	b089      	sub	sp, #36	; 0x24
	/* Tor Signature */
	strcpy(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)KLOUDQ_SIGNATURE);
 800c7bc:	4c91      	ldr	r4, [pc, #580]	; (800ca04 <sendSystemConfigurationSMS+0x24c>)
 800c7be:	4d92      	ldr	r5, [pc, #584]	; (800ca08 <sendSystemConfigurationSMS+0x250>)
 800c7c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7c2:	6020      	str	r0, [r4, #0]
 800c7c4:	6061      	str	r1, [r4, #4]
 800c7c6:	60a2      	str	r2, [r4, #8]
 800c7c8:	60e3      	str	r3, [r4, #12]
 800c7ca:	882a      	ldrh	r2, [r5, #0]
 800c7cc:	78ab      	ldrb	r3, [r5, #2]
 800c7ce:	8222      	strh	r2, [r4, #16]
 800c7d0:	74a3      	strb	r3, [r4, #18]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Config: \r\n");
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f7f3 fd16 	bl	8000204 <strlen>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	1905      	adds	r5, r0, r4
 800c7dc:	4b8b      	ldr	r3, [pc, #556]	; (800ca0c <sendSystemConfigurationSMS+0x254>)
 800c7de:	cb03      	ldmia	r3!, {r0, r1}
 800c7e0:	5110      	str	r0, [r2, r4]
 800c7e2:	6069      	str	r1, [r5, #4]
 800c7e4:	881a      	ldrh	r2, [r3, #0]
 800c7e6:	789b      	ldrb	r3, [r3, #2]
 800c7e8:	812a      	strh	r2, [r5, #8]
 800c7ea:	72ab      	strb	r3, [r5, #10]
	/*Tor Version */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Version: \r\n");
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7f3 fd09 	bl	8000204 <strlen>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	1906      	adds	r6, r0, r4
 800c7f6:	4b86      	ldr	r3, [pc, #536]	; (800ca10 <sendSystemConfigurationSMS+0x258>)
 800c7f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7fa:	5128      	str	r0, [r5, r4]
 800c7fc:	6071      	str	r1, [r6, #4]
 800c7fe:	60b2      	str	r2, [r6, #8]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)MODEL_NUMBER);
 800c800:	4620      	mov	r0, r4
 800c802:	f7f3 fcff 	bl	8000204 <strlen>
 800c806:	4603      	mov	r3, r0
 800c808:	1905      	adds	r5, r0, r4
 800c80a:	4a82      	ldr	r2, [pc, #520]	; (800ca14 <sendSystemConfigurationSMS+0x25c>)
 800c80c:	ca03      	ldmia	r2!, {r0, r1}
 800c80e:	5118      	str	r0, [r3, r4]
 800c810:	6069      	str	r1, [r5, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c812:	4620      	mov	r0, r4
 800c814:	f7f3 fcf6 	bl	8000204 <strlen>
 800c818:	1902      	adds	r2, r0, r4
 800c81a:	4b7f      	ldr	r3, [pc, #508]	; (800ca18 <sendSystemConfigurationSMS+0x260>)
 800c81c:	881e      	ldrh	r6, [r3, #0]
 800c81e:	789d      	ldrb	r5, [r3, #2]
 800c820:	5306      	strh	r6, [r0, r4]
 800c822:	7095      	strb	r5, [r2, #2]
	/* Tor Device Id */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Id: ");
 800c824:	4620      	mov	r0, r4
 800c826:	f7f3 fced 	bl	8000204 <strlen>
 800c82a:	4603      	mov	r3, r0
 800c82c:	1901      	adds	r1, r0, r4
 800c82e:	4a7b      	ldr	r2, [pc, #492]	; (800ca1c <sendSystemConfigurationSMS+0x264>)
 800c830:	6810      	ldr	r0, [r2, #0]
 800c832:	5118      	str	r0, [r3, r4]
 800c834:	7913      	ldrb	r3, [r2, #4]
 800c836:	710b      	strb	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,buffuuid2);
 800c838:	4979      	ldr	r1, [pc, #484]	; (800ca20 <sendSystemConfigurationSMS+0x268>)
 800c83a:	4620      	mov	r0, r4
 800c83c:	f006 fba6 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,buffuuid1);
 800c840:	4978      	ldr	r1, [pc, #480]	; (800ca24 <sendSystemConfigurationSMS+0x26c>)
 800c842:	4620      	mov	r0, r4
 800c844:	f006 fba2 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,buffuuid0);
 800c848:	4977      	ldr	r1, [pc, #476]	; (800ca28 <sendSystemConfigurationSMS+0x270>)
 800c84a:	4620      	mov	r0, r4
 800c84c:	f006 fb9e 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c850:	4620      	mov	r0, r4
 800c852:	f7f3 fcd7 	bl	8000204 <strlen>
 800c856:	1903      	adds	r3, r0, r4
 800c858:	5306      	strh	r6, [r0, r4]
 800c85a:	709d      	strb	r5, [r3, #2]
	/* Tor Signal Strength in RSSI */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"RSSI: ");
 800c85c:	4620      	mov	r0, r4
 800c85e:	f7f3 fcd1 	bl	8000204 <strlen>
 800c862:	4603      	mov	r3, r0
 800c864:	1901      	adds	r1, r0, r4
 800c866:	4a71      	ldr	r2, [pc, #452]	; (800ca2c <sendSystemConfigurationSMS+0x274>)
 800c868:	6810      	ldr	r0, [r2, #0]
 800c86a:	5118      	str	r0, [r3, r4]
 800c86c:	8890      	ldrh	r0, [r2, #4]
 800c86e:	7993      	ldrb	r3, [r2, #6]
 800c870:	8088      	strh	r0, [r1, #4]
 800c872:	718b      	strb	r3, [r1, #6]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gsmInstance.agsmSignalStrength);
 800c874:	f6a4 51b8 	subw	r1, r4, #3512	; 0xdb8
 800c878:	4620      	mov	r0, r4
 800c87a:	f006 fb87 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c87e:	4620      	mov	r0, r4
 800c880:	f7f3 fcc0 	bl	8000204 <strlen>
 800c884:	1903      	adds	r3, r0, r4
 800c886:	5306      	strh	r6, [r0, r4]
 800c888:	709d      	strb	r5, [r3, #2]
	/* Tor Network IP , if connected */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"IP: ");
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7f3 fcba 	bl	8000204 <strlen>
 800c890:	4603      	mov	r3, r0
 800c892:	1901      	adds	r1, r0, r4
 800c894:	4a66      	ldr	r2, [pc, #408]	; (800ca30 <sendSystemConfigurationSMS+0x278>)
 800c896:	6810      	ldr	r0, [r2, #0]
 800c898:	5118      	str	r0, [r3, r4]
 800c89a:	7913      	ldrb	r3, [r2, #4]
 800c89c:	710b      	strb	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gsmInstance.agsmNetworkIP);
 800c89e:	f6a4 51ae 	subw	r1, r4, #3502	; 0xdae
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f006 fb72 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f7f3 fcab 	bl	8000204 <strlen>
 800c8ae:	1903      	adds	r3, r0, r4
 800c8b0:	5306      	strh	r6, [r0, r4]
 800c8b2:	709d      	strb	r5, [r3, #2]
	/* Tor Network APN */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"APN: ");
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f7f3 fca5 	bl	8000204 <strlen>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	1901      	adds	r1, r0, r4
 800c8be:	4a5d      	ldr	r2, [pc, #372]	; (800ca34 <sendSystemConfigurationSMS+0x27c>)
 800c8c0:	6810      	ldr	r0, [r2, #0]
 800c8c2:	5118      	str	r0, [r3, r4]
 800c8c4:	8893      	ldrh	r3, [r2, #4]
 800c8c6:	808b      	strh	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gau8GSM_apn);
 800c8c8:	4f5b      	ldr	r7, [pc, #364]	; (800ca38 <sendSystemConfigurationSMS+0x280>)
 800c8ca:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f006 fb5c 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f7f3 fc95 	bl	8000204 <strlen>
 800c8da:	1903      	adds	r3, r0, r4
 800c8dc:	5306      	strh	r6, [r0, r4]
 800c8de:	709d      	strb	r5, [r3, #2]
	/* Tor Server URL */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"URL: ");
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7f3 fc8f 	bl	8000204 <strlen>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	1901      	adds	r1, r0, r4
 800c8ea:	4a54      	ldr	r2, [pc, #336]	; (800ca3c <sendSystemConfigurationSMS+0x284>)
 800c8ec:	6810      	ldr	r0, [r2, #0]
 800c8ee:	5118      	str	r0, [r3, r4]
 800c8f0:	8893      	ldrh	r3, [r2, #4]
 800c8f2:	808b      	strh	r3, [r1, #4]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gau8GSM_url);
 800c8f4:	f507 7151 	add.w	r1, r7, #836	; 0x344
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f006 fb47 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c8fe:	4620      	mov	r0, r4
 800c900:	f7f3 fc80 	bl	8000204 <strlen>
 800c904:	1903      	adds	r3, r0, r4
 800c906:	5306      	strh	r6, [r0, r4]
 800c908:	709d      	strb	r5, [r3, #2]

	/* Tor Upload Frequency */
	char ontime[10];
	char offtime[10];
	itoa(gsmInstance.u32ONPayloadUploadFreq,ontime,10);
 800c90a:	f6a4 674e 	subw	r7, r4, #3662	; 0xe4e
 800c90e:	220a      	movs	r2, #10
 800c910:	a905      	add	r1, sp, #20
 800c912:	f854 0c2a 	ldr.w	r0, [r4, #-42]
 800c916:	f006 f873 	bl	8012a00 <itoa>
	itoa(gsmInstance.u32OFFPayloadUploadFreq,offtime,10);
 800c91a:	220a      	movs	r2, #10
 800c91c:	a902      	add	r1, sp, #8
 800c91e:	f854 0c26 	ldr.w	r0, [r4, #-38]
 800c922:	f006 f86d 	bl	8012a00 <itoa>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Up Freq ON: ");
 800c926:	4620      	mov	r0, r4
 800c928:	f7f3 fc6c 	bl	8000204 <strlen>
 800c92c:	4684      	mov	ip, r0
 800c92e:	eb00 0e04 	add.w	lr, r0, r4
 800c932:	4b43      	ldr	r3, [pc, #268]	; (800ca40 <sendSystemConfigurationSMS+0x288>)
 800c934:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c936:	f84c 0004 	str.w	r0, [ip, r4]
 800c93a:	f8ce 1004 	str.w	r1, [lr, #4]
 800c93e:	f8ce 2008 	str.w	r2, [lr, #8]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	f88e 300c 	strb.w	r3, [lr, #12]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,ontime);
 800c948:	a905      	add	r1, sp, #20
 800c94a:	4620      	mov	r0, r4
 800c94c:	f006 fb1e 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c950:	4620      	mov	r0, r4
 800c952:	f7f3 fc57 	bl	8000204 <strlen>
 800c956:	1903      	adds	r3, r0, r4
 800c958:	5306      	strh	r6, [r0, r4]
 800c95a:	709d      	strb	r5, [r3, #2]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Up Freq OFF: ");
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7f3 fc51 	bl	8000204 <strlen>
 800c962:	4684      	mov	ip, r0
 800c964:	eb00 0e04 	add.w	lr, r0, r4
 800c968:	4b36      	ldr	r3, [pc, #216]	; (800ca44 <sendSystemConfigurationSMS+0x28c>)
 800c96a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c96c:	f84c 0004 	str.w	r0, [ip, r4]
 800c970:	f8ce 1004 	str.w	r1, [lr, #4]
 800c974:	f8ce 2008 	str.w	r2, [lr, #8]
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	f8ae 300c 	strh.w	r3, [lr, #12]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,offtime);
 800c97e:	a902      	add	r1, sp, #8
 800c980:	4620      	mov	r0, r4
 800c982:	f006 fb03 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c986:	4620      	mov	r0, r4
 800c988:	f7f3 fc3c 	bl	8000204 <strlen>
 800c98c:	1903      	adds	r3, r0, r4
 800c98e:	5306      	strh	r6, [r0, r4]
 800c990:	709d      	strb	r5, [r3, #2]

	/* Last Known Location and time */
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"Location: ");
 800c992:	4620      	mov	r0, r4
 800c994:	f7f3 fc36 	bl	8000204 <strlen>
 800c998:	4602      	mov	r2, r0
 800c99a:	eb00 0c04 	add.w	ip, r0, r4
 800c99e:	4b2a      	ldr	r3, [pc, #168]	; (800ca48 <sendSystemConfigurationSMS+0x290>)
 800c9a0:	cb03      	ldmia	r3!, {r0, r1}
 800c9a2:	5110      	str	r0, [r2, r4]
 800c9a4:	f8cc 1004 	str.w	r1, [ip, #4]
 800c9a8:	881a      	ldrh	r2, [r3, #0]
 800c9aa:	789b      	ldrb	r3, [r3, #2]
 800c9ac:	f8ac 2008 	strh.w	r2, [ip, #8]
 800c9b0:	f88c 300a 	strb.w	r3, [ip, #10]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,gsmInstance.agpsLocationData);
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f006 fae8 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\r\n");
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f7f3 fc21 	bl	8000204 <strlen>
 800c9c2:	1903      	adds	r3, r0, r4
 800c9c4:	5306      	strh	r6, [r0, r4]
 800c9c6:	709d      	strb	r5, [r3, #2]

	/*Last HTTP Status Code */
	char httpresp[5];
	itoa(u8LastHttpResponseCode,httpresp,10);
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	4669      	mov	r1, sp
 800c9cc:	4b1f      	ldr	r3, [pc, #124]	; (800ca4c <sendSystemConfigurationSMS+0x294>)
 800c9ce:	6a18      	ldr	r0, [r3, #32]
 800c9d0:	f006 f816 	bl	8012a00 <itoa>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,(char *)"HTTP Code : ");
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f7f3 fc15 	bl	8000204 <strlen>
 800c9da:	4605      	mov	r5, r0
 800c9dc:	1906      	adds	r6, r0, r4
 800c9de:	4b1c      	ldr	r3, [pc, #112]	; (800ca50 <sendSystemConfigurationSMS+0x298>)
 800c9e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9e2:	5128      	str	r0, [r5, r4]
 800c9e4:	6071      	str	r1, [r6, #4]
 800c9e6:	60b2      	str	r2, [r6, #8]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	7333      	strb	r3, [r6, #12]
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,httpresp);
 800c9ec:	4669      	mov	r1, sp
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f006 facc 	bl	8012f8c <strcat>
	strcat(gsmInstance.strSystemSMS.agsmSMSMessageBody,"\n");
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7f3 fc05 	bl	8000204 <strlen>
 800c9fa:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <sendSystemConfigurationSMS+0x29c>)
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	5223      	strh	r3, [r4, r0]
}
 800ca00:	b009      	add	sp, #36	; 0x24
 800ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca04:	2000cfb2 	.word	0x2000cfb2
 800ca08:	0801bd48 	.word	0x0801bd48
 800ca0c:	0801bd5c 	.word	0x0801bd5c
 800ca10:	0801bd68 	.word	0x0801bd68
 800ca14:	0801bd74 	.word	0x0801bd74
 800ca18:	0801bd58 	.word	0x0801bd58
 800ca1c:	0801bd7c 	.word	0x0801bd7c
 800ca20:	20007b88 	.word	0x20007b88
 800ca24:	20007b48 	.word	0x20007b48
 800ca28:	20007b68 	.word	0x20007b68
 800ca2c:	0801bd84 	.word	0x0801bd84
 800ca30:	0801bd8c 	.word	0x0801bd8c
 800ca34:	0801bd94 	.word	0x0801bd94
 800ca38:	20000010 	.word	0x20000010
 800ca3c:	0801bd9c 	.word	0x0801bd9c
 800ca40:	0801bda4 	.word	0x0801bda4
 800ca44:	0801bdb4 	.word	0x0801bdb4
 800ca48:	0801bdc4 	.word	0x0801bdc4
 800ca4c:	20003504 	.word	0x20003504
 800ca50:	0801bdd0 	.word	0x0801bdd0
 800ca54:	0801aca0 	.word	0x0801aca0

0800ca58 <syncrtcwithNetworkTime>:
uint32_t gu32Date = 0;
uint32_t gu32Hours = 0;
uint32_t gu32Minutes = 0;
uint32_t gu32Seconds = 0;
void syncrtcwithNetworkTime(void)
{
 800ca58:	b570      	push	{r4, r5, r6, lr}

	gu32Year = (((gau8GSM_TimeStamp[0]-'0') * 10) + (gau8GSM_TimeStamp[1]-'0'));
 800ca5a:	4b3c      	ldr	r3, [pc, #240]	; (800cb4c <syncrtcwithNetworkTime+0xf4>)
 800ca5c:	f893 03fc 	ldrb.w	r0, [r3, #1020]	; 0x3fc
 800ca60:	3830      	subs	r0, #48	; 0x30
 800ca62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ca66:	f893 23fd 	ldrb.w	r2, [r3, #1021]	; 0x3fd
 800ca6a:	3a30      	subs	r2, #48	; 0x30
 800ca6c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800ca70:	4a37      	ldr	r2, [pc, #220]	; (800cb50 <syncrtcwithNetworkTime+0xf8>)
 800ca72:	6290      	str	r0, [r2, #40]	; 0x28
	gu32Month = (((gau8GSM_TimeStamp[3]-'0') * 10) + (gau8GSM_TimeStamp[4]-'0'));
 800ca74:	f893 13ff 	ldrb.w	r1, [r3, #1023]	; 0x3ff
 800ca78:	3930      	subs	r1, #48	; 0x30
 800ca7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ca7e:	f893 4400 	ldrb.w	r4, [r3, #1024]	; 0x400
 800ca82:	3c30      	subs	r4, #48	; 0x30
 800ca84:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800ca88:	62d1      	str	r1, [r2, #44]	; 0x2c
	gu32Date = (((gau8GSM_TimeStamp[6]-'0') * 10) + (gau8GSM_TimeStamp[7]-'0'));
 800ca8a:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 800ca8e:	3930      	subs	r1, #48	; 0x30
 800ca90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ca94:	f893 4403 	ldrb.w	r4, [r3, #1027]	; 0x403
 800ca98:	3c30      	subs	r4, #48	; 0x30
 800ca9a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800ca9e:	6311      	str	r1, [r2, #48]	; 0x30

	gu32Hours = (((gau8GSM_TimeStamp[9]-'0') * 10) + (gau8GSM_TimeStamp[10]-'0'));
 800caa0:	f893 1405 	ldrb.w	r1, [r3, #1029]	; 0x405
 800caa4:	3930      	subs	r1, #48	; 0x30
 800caa6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800caaa:	f893 4406 	ldrb.w	r4, [r3, #1030]	; 0x406
 800caae:	3c30      	subs	r4, #48	; 0x30
 800cab0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800cab4:	6351      	str	r1, [r2, #52]	; 0x34
	gu32Minutes = (((gau8GSM_TimeStamp[12]-'0') * 10) + (gau8GSM_TimeStamp[13]-'0'));
 800cab6:	f893 1408 	ldrb.w	r1, [r3, #1032]	; 0x408
 800caba:	3930      	subs	r1, #48	; 0x30
 800cabc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cac0:	f893 4409 	ldrb.w	r4, [r3, #1033]	; 0x409
 800cac4:	3c30      	subs	r4, #48	; 0x30
 800cac6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800caca:	6391      	str	r1, [r2, #56]	; 0x38
	gu32Seconds = (((gau8GSM_TimeStamp[15]-'0') * 10) + (gau8GSM_TimeStamp[16]-'0'));
 800cacc:	f893 140b 	ldrb.w	r1, [r3, #1035]	; 0x40b
 800cad0:	3930      	subs	r1, #48	; 0x30
 800cad2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800cad6:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800cada:	3b30      	subs	r3, #48	; 0x30
 800cadc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800cae0:	63d1      	str	r1, [r2, #60]	; 0x3c

	if((gu32Year >= 23) && (gu32Year < 80))
 800cae2:	f1a0 0317 	sub.w	r3, r0, #23
 800cae6:	2b38      	cmp	r3, #56	; 0x38
 800cae8:	d900      	bls.n	800caec <syncrtcwithNetworkTime+0x94>
		HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);

		/* Network Time Sync complete (Indicator) */
		gu32TimeSyncFlag = 1;
	}
}
 800caea:	bd70      	pop	{r4, r5, r6, pc}
		SDate1.Year = DecimalToBCD(gu32Year);
 800caec:	f005 fdd6 	bl	801269c <DecimalToBCD>
 800caf0:	4d18      	ldr	r5, [pc, #96]	; (800cb54 <syncrtcwithNetworkTime+0xfc>)
 800caf2:	70e8      	strb	r0, [r5, #3]
		SDate1.Month = DecimalToBCD(gu32Month);
 800caf4:	4c16      	ldr	r4, [pc, #88]	; (800cb50 <syncrtcwithNetworkTime+0xf8>)
 800caf6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800caf8:	f005 fdd0 	bl	801269c <DecimalToBCD>
 800cafc:	7068      	strb	r0, [r5, #1]
		SDate1.Date = DecimalToBCD(gu32Date);
 800cafe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cb00:	f005 fdcc 	bl	801269c <DecimalToBCD>
 800cb04:	70a8      	strb	r0, [r5, #2]
		STime1.Hours = DecimalToBCD(gu32Hours);
 800cb06:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cb08:	f005 fdc8 	bl	801269c <DecimalToBCD>
 800cb0c:	4e12      	ldr	r6, [pc, #72]	; (800cb58 <syncrtcwithNetworkTime+0x100>)
 800cb0e:	7030      	strb	r0, [r6, #0]
		STime1.Minutes = DecimalToBCD(gu32Minutes);
 800cb10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800cb12:	f005 fdc3 	bl	801269c <DecimalToBCD>
 800cb16:	7070      	strb	r0, [r6, #1]
		STime1.Seconds = DecimalToBCD(gu32Seconds);
 800cb18:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800cb1a:	f005 fdbf 	bl	801269c <DecimalToBCD>
 800cb1e:	70b0      	strb	r0, [r6, #2]
		strTimeUpdate.u32RefTimeHH = gu32Hours;
 800cb20:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <syncrtcwithNetworkTime+0x104>)
 800cb22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cb24:	601a      	str	r2, [r3, #0]
		strTimeUpdate.u32RefTimeMin = gu32Minutes;
 800cb26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cb28:	605a      	str	r2, [r3, #4]
		strTimeUpdate.u32RefTimeSec = gu32Seconds;
 800cb2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cb2c:	609a      	str	r2, [r3, #8]
		HAL_RTC_SetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 800cb2e:	4c0c      	ldr	r4, [pc, #48]	; (800cb60 <syncrtcwithNetworkTime+0x108>)
 800cb30:	2201      	movs	r2, #1
 800cb32:	4631      	mov	r1, r6
 800cb34:	4620      	mov	r0, r4
 800cb36:	f7f7 ffe5 	bl	8004b04 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f7f8 f85f 	bl	8004c02 <HAL_RTC_SetDate>
		gu32TimeSyncFlag = 1;
 800cb44:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <syncrtcwithNetworkTime+0x10c>)
 800cb46:	2201      	movs	r2, #1
 800cb48:	601a      	str	r2, [r3, #0]
}
 800cb4a:	e7ce      	b.n	800caea <syncrtcwithNetworkTime+0x92>
 800cb4c:	20000010 	.word	0x20000010
 800cb50:	20003504 	.word	0x20003504
 800cb54:	2000f0f4 	.word	0x2000f0f4
 800cb58:	2000f0f8 	.word	0x2000f0f8
 800cb5c:	200043a0 	.word	0x200043a0
 800cb60:	2000f10c 	.word	0x2000f10c
 800cb64:	2000439c 	.word	0x2000439c

0800cb68 <initHTTPURLforRemoteConfig>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initHTTPURLforRemoteConfig(void )
{
 800cb68:	b570      	push	{r4, r5, r6, lr}
	memset(gau8GSM_ATURL, 0, sizeof(gau8GSM_ATURL) * sizeof(char));
 800cb6a:	4d1a      	ldr	r5, [pc, #104]	; (800cbd4 <initHTTPURLforRemoteConfig+0x6c>)
 800cb6c:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 800cb70:	22b4      	movs	r2, #180	; 0xb4
 800cb72:	2100      	movs	r1, #0
 800cb74:	4620      	mov	r0, r4
 800cb76:	f006 f9b3 	bl	8012ee0 <memset>
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800cb7a:	f505 712b 	add.w	r1, r5, #684	; 0x2ac
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f006 fa20 	bl	8012fc4 <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800cb84:	4620      	mov	r0, r4
 800cb86:	f7f3 fb3d 	bl	8000204 <strlen>
 800cb8a:	4b13      	ldr	r3, [pc, #76]	; (800cbd8 <initHTTPURLforRemoteConfig+0x70>)
 800cb8c:	881e      	ldrh	r6, [r3, #0]
 800cb8e:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8RemoteConfigurationURL);
 800cb90:	f505 6183 	add.w	r1, r5, #1048	; 0x418
 800cb94:	4620      	mov	r0, r4
 800cb96:	f006 f9f9 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"?id=");
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f7f3 fb32 	bl	8000204 <strlen>
 800cba0:	4603      	mov	r3, r0
 800cba2:	1821      	adds	r1, r4, r0
 800cba4:	4a0d      	ldr	r2, [pc, #52]	; (800cbdc <initHTTPURLforRemoteConfig+0x74>)
 800cba6:	6810      	ldr	r0, [r2, #0]
 800cba8:	50e0      	str	r0, [r4, r3]
 800cbaa:	7913      	ldrb	r3, [r2, #4]
 800cbac:	710b      	strb	r3, [r1, #4]
	strcat((char *)gau8GSM_ATURL,(char *)dinfo);
 800cbae:	490c      	ldr	r1, [pc, #48]	; (800cbe0 <initHTTPURLforRemoteConfig+0x78>)
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f006 f9eb 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7f3 fb24 	bl	8000204 <strlen>
 800cbbc:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f7f3 fb20 	bl	8000204 <strlen>
 800cbc4:	1822      	adds	r2, r4, r0
 800cbc6:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <initHTTPURLforRemoteConfig+0x7c>)
 800cbc8:	8819      	ldrh	r1, [r3, #0]
 800cbca:	789b      	ldrb	r3, [r3, #2]
 800cbcc:	5221      	strh	r1, [r4, r0]
 800cbce:	7093      	strb	r3, [r2, #2]
}
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20000010 	.word	0x20000010
 800cbd8:	0801bd38 	.word	0x0801bd38
 800cbdc:	0801bde4 	.word	0x0801bde4
 800cbe0:	20007ac4 	.word	0x20007ac4
 800cbe4:	0801bd58 	.word	0x0801bd58

0800cbe8 <restoreHTTPURLforData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void restoreHTTPURLforData(void)
{
 800cbe8:	b570      	push	{r4, r5, r6, lr}
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800cbea:	4d10      	ldr	r5, [pc, #64]	; (800cc2c <restoreHTTPURLforData+0x44>)
 800cbec:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 800cbf0:	f505 712b 	add.w	r1, r5, #684	; 0x2ac
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f006 f9e5 	bl	8012fc4 <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7f3 fb02 	bl	8000204 <strlen>
 800cc00:	4b0b      	ldr	r3, [pc, #44]	; (800cc30 <restoreHTTPURLforData+0x48>)
 800cc02:	881e      	ldrh	r6, [r3, #0]
 800cc04:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 800cc06:	f505 7151 	add.w	r1, r5, #836	; 0x344
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f006 f9be 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800cc10:	4620      	mov	r0, r4
 800cc12:	f7f3 faf7 	bl	8000204 <strlen>
 800cc16:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f7f3 faf3 	bl	8000204 <strlen>
 800cc1e:	1822      	adds	r2, r4, r0
 800cc20:	4b04      	ldr	r3, [pc, #16]	; (800cc34 <restoreHTTPURLforData+0x4c>)
 800cc22:	8819      	ldrh	r1, [r3, #0]
 800cc24:	789b      	ldrb	r3, [r3, #2]
 800cc26:	5221      	strh	r1, [r4, r0]
 800cc28:	7093      	strb	r3, [r2, #2]
}
 800cc2a:	bd70      	pop	{r4, r5, r6, pc}
 800cc2c:	20000010 	.word	0x20000010
 800cc30:	0801bd38 	.word	0x0801bd38
 800cc34:	0801bd58 	.word	0x0801bd58

0800cc38 <updateNetworkAPN>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateNetworkAPN(void)
{
 800cc38:	b570      	push	{r4, r5, r6, lr}
	memset(gau8GSM_NewSetAPN, 0x00, sizeof(gau8GSM_NewSetAPN) * sizeof(char));
 800cc3a:	4c12      	ldr	r4, [pc, #72]	; (800cc84 <updateNetworkAPN+0x4c>)
 800cc3c:	2232      	movs	r2, #50	; 0x32
 800cc3e:	2100      	movs	r1, #0
 800cc40:	4620      	mov	r0, r4
 800cc42:	f006 f94d 	bl	8012ee0 <memset>
	//gau8GSM_NewSetAPN
	strcpy((char *)gau8GSM_NewSetAPN,(char *)gau8GSM_ATSETAPN);
 800cc46:	4e10      	ldr	r6, [pc, #64]	; (800cc88 <updateNetworkAPN+0x50>)
 800cc48:	f506 6196 	add.w	r1, r6, #1200	; 0x4b0
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f006 f9b9 	bl	8012fc4 <strcpy>
	strcat((char *)gau8GSM_NewSetAPN,(char *)"\"");
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7f3 fad6 	bl	8000204 <strlen>
 800cc58:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <updateNetworkAPN+0x54>)
 800cc5a:	881d      	ldrh	r5, [r3, #0]
 800cc5c:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_NewSetAPN,(char *)gau8GSM4G_apn);
 800cc5e:	f206 41c4 	addw	r1, r6, #1220	; 0x4c4
 800cc62:	4620      	mov	r0, r4
 800cc64:	f006 f992 	bl	8012f8c <strcat>
	strcat((char *)gau8GSM_NewSetAPN,(char *)"\"");
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f7f3 facb 	bl	8000204 <strlen>
 800cc6e:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_NewSetAPN,"\r\n");
 800cc70:	4620      	mov	r0, r4
 800cc72:	f7f3 fac7 	bl	8000204 <strlen>
 800cc76:	1822      	adds	r2, r4, r0
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <updateNetworkAPN+0x58>)
 800cc7a:	8819      	ldrh	r1, [r3, #0]
 800cc7c:	789b      	ldrb	r3, [r3, #2]
 800cc7e:	5221      	strh	r1, [r4, r0]
 800cc80:	7093      	strb	r3, [r2, #2]
}
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
 800cc84:	20003544 	.word	0x20003544
 800cc88:	20000010 	.word	0x20000010
 800cc8c:	0801bd38 	.word	0x0801bd38
 800cc90:	0801bd58 	.word	0x0801bd58

0800cc94 <updateHTTPReadLength>:
*******************************************************************************/
#define FOTAFILECHUNKSIZEBYTES	(1024)
uint32_t updateHTTPReadLength(uint32_t ConfigFileSizeBytes)
{

	if(ConfigFileSizeBytes != 0)
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f000 8088 	beq.w	800cdaa <updateHTTPReadLength+0x116>
{
 800cc9a:	b570      	push	{r4, r5, r6, lr}
	{
		/* Start of File */
		if(u32ConfigFileBaseAddress == 0)
 800cc9c:	4a43      	ldr	r2, [pc, #268]	; (800cdac <updateHTTPReadLength+0x118>)
 800cc9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	d041      	beq.n	800cd28 <updateHTTPReadLength+0x94>
			u32ConfigFileRemainingBytes = (ConfigFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
			itoa(FOTAFILECHUNKSIZEBYTES,ConfigbufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
			itoa(u32ConfigFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
		}

		strcpy(gau8GSM_ATHTTPREAD,(char *)"AT+HTTPREAD=");
 800cca4:	4d42      	ldr	r5, [pc, #264]	; (800cdb0 <updateHTTPReadLength+0x11c>)
 800cca6:	4b43      	ldr	r3, [pc, #268]	; (800cdb4 <updateHTTPReadLength+0x120>)
 800cca8:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800ccac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ccae:	c407      	stmia	r4!, {r0, r1, r2}
 800ccb0:	7023      	strb	r3, [r4, #0]
		memset(buffer,0x00,sizeof(char) * sizeof(buffer));
 800ccb2:	f205 5254 	addw	r2, r5, #1364	; 0x554
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
 800ccbc:	f8a5 3558 	strh.w	r3, [r5, #1368]	; 0x558

		if(u32ConfigFileBaseAddress < u32ConfigFileChunkCounter)
 800ccc0:	4b3a      	ldr	r3, [pc, #232]	; (800cdac <updateHTTPReadLength+0x118>)
 800ccc2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ccc4:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ccc6:	4284      	cmp	r4, r0
 800ccc8:	d343      	bcc.n	800cd52 <updateHTTPReadLength+0xbe>
			gsmInstance.gu32RemoteConfigSizeinBytes = FOTAFILECHUNKSIZEBYTES;
			return 2;
		}
		else
		{
			itoa(u32ConfigFileChunkCounter * 1024,buffer,PAYLOAD_DATA_STRING_RADIX);
 800ccca:	4d39      	ldr	r5, [pc, #228]	; (800cdb0 <updateHTTPReadLength+0x11c>)
 800cccc:	f205 5654 	addw	r6, r5, #1364	; 0x554
 800ccd0:	220a      	movs	r2, #10
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	4090      	lsls	r0, r2
 800ccd6:	f005 fe93 	bl	8012a00 <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 800ccda:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800ccde:	4631      	mov	r1, r6
 800cce0:	4620      	mov	r0, r4
 800cce2:	f006 f953 	bl	8012f8c <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7f3 fa8c 	bl	8000204 <strlen>
 800ccec:	4b32      	ldr	r3, [pc, #200]	; (800cdb8 <updateHTTPReadLength+0x124>)
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)bufferRemBytes); /* Byte(s) Chunk to read*/
 800ccf2:	f505 61a6 	add.w	r1, r5, #1328	; 0x530
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f006 f948 	bl	8012f8c <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7f3 fa81 	bl	8000204 <strlen>
 800cd02:	1822      	adds	r2, r4, r0
 800cd04:	4b2d      	ldr	r3, [pc, #180]	; (800cdbc <updateHTTPReadLength+0x128>)
 800cd06:	8819      	ldrh	r1, [r3, #0]
 800cd08:	789b      	ldrb	r3, [r3, #2]
 800cd0a:	5221      	strh	r1, [r4, r0]
 800cd0c:	7093      	strb	r3, [r2, #2]
			gsmInstance.gu32RemoteConfigSizeinBytes = u32ConfigFileRemainingBytes;
 800cd0e:	4b27      	ldr	r3, [pc, #156]	; (800cdac <updateHTTPReadLength+0x118>)
 800cd10:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800cd12:	4a2b      	ldr	r2, [pc, #172]	; (800cdc0 <updateHTTPReadLength+0x12c>)
 800cd14:	f8c2 1e30 	str.w	r1, [r2, #3632]	; 0xe30
			u32ConfigFileBaseAddress = 0;
 800cd18:	2200      	movs	r2, #0
 800cd1a:	675a      	str	r2, [r3, #116]	; 0x74
			u32ConfigFileChunkCounter = 0;
 800cd1c:	679a      	str	r2, [r3, #120]	; 0x78
			u32ConfigFileRemainingBytes = 0;
 800cd1e:	67da      	str	r2, [r3, #124]	; 0x7c
			u32ConfigFileReadComplete = 1;
 800cd20:	2001      	movs	r0, #1
 800cd22:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
			return 1;
		}
	}
	else
		return 0;
}
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
			u32ConfigFileChunkCounter = (ConfigFileSizeBytes / FOTAFILECHUNKSIZEBYTES);
 800cd28:	0a82      	lsrs	r2, r0, #10
 800cd2a:	4c20      	ldr	r4, [pc, #128]	; (800cdac <updateHTTPReadLength+0x118>)
 800cd2c:	67a2      	str	r2, [r4, #120]	; 0x78
			u32ConfigFileRemainingBytes = (ConfigFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
 800cd2e:	f3c0 0309 	ubfx	r3, r0, #0, #10
 800cd32:	67e3      	str	r3, [r4, #124]	; 0x7c
			itoa(FOTAFILECHUNKSIZEBYTES,ConfigbufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
 800cd34:	4d1e      	ldr	r5, [pc, #120]	; (800cdb0 <updateHTTPReadLength+0x11c>)
 800cd36:	220a      	movs	r2, #10
 800cd38:	f505 61a5 	add.w	r1, r5, #1320	; 0x528
 800cd3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd40:	f005 fe5e 	bl	8012a00 <itoa>
			itoa(u32ConfigFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
 800cd44:	220a      	movs	r2, #10
 800cd46:	f505 61a6 	add.w	r1, r5, #1328	; 0x530
 800cd4a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800cd4c:	f005 fe58 	bl	8012a00 <itoa>
 800cd50:	e7a8      	b.n	800cca4 <updateHTTPReadLength+0x10>
			itoa((u32ConfigFileBaseAddress * FOTAFILECHUNKSIZEBYTES),buffer,PAYLOAD_DATA_STRING_RADIX);
 800cd52:	4616      	mov	r6, r2
 800cd54:	220a      	movs	r2, #10
 800cd56:	4631      	mov	r1, r6
 800cd58:	fa04 f002 	lsl.w	r0, r4, r2
 800cd5c:	f005 fe50 	bl	8012a00 <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 800cd60:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800cd64:	4631      	mov	r1, r6
 800cd66:	4620      	mov	r0, r4
 800cd68:	f006 f910 	bl	8012f8c <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7f3 fa49 	bl	8000204 <strlen>
 800cd72:	4b11      	ldr	r3, [pc, #68]	; (800cdb8 <updateHTTPReadLength+0x124>)
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)ConfigbufferChunkBytes); /* Byte(s) Chunk to read*/
 800cd78:	f505 61a5 	add.w	r1, r5, #1320	; 0x528
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f006 f905 	bl	8012f8c <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 800cd82:	4620      	mov	r0, r4
 800cd84:	f7f3 fa3e 	bl	8000204 <strlen>
 800cd88:	1822      	adds	r2, r4, r0
 800cd8a:	4b0c      	ldr	r3, [pc, #48]	; (800cdbc <updateHTTPReadLength+0x128>)
 800cd8c:	8819      	ldrh	r1, [r3, #0]
 800cd8e:	789b      	ldrb	r3, [r3, #2]
 800cd90:	5221      	strh	r1, [r4, r0]
 800cd92:	7093      	strb	r3, [r2, #2]
			u32ConfigFileBaseAddress++;
 800cd94:	4a05      	ldr	r2, [pc, #20]	; (800cdac <updateHTTPReadLength+0x118>)
 800cd96:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800cd98:	3301      	adds	r3, #1
 800cd9a:	6753      	str	r3, [r2, #116]	; 0x74
			gsmInstance.gu32RemoteConfigSizeinBytes = FOTAFILECHUNKSIZEBYTES;
 800cd9c:	4b08      	ldr	r3, [pc, #32]	; (800cdc0 <updateHTTPReadLength+0x12c>)
 800cd9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cda2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
			return 2;
 800cda6:	2002      	movs	r0, #2
 800cda8:	e7bd      	b.n	800cd26 <updateHTTPReadLength+0x92>
}
 800cdaa:	4770      	bx	lr
 800cdac:	20003504 	.word	0x20003504
 800cdb0:	20000010 	.word	0x20000010
 800cdb4:	0801bdec 	.word	0x0801bdec
 800cdb8:	0801bde0 	.word	0x0801bde0
 800cdbc:	0801bd58 	.word	0x0801bd58
 800cdc0:	2000c164 	.word	0x2000c164

0800cdc4 <sendGSMCommand>:
{
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	b082      	sub	sp, #8
	switch (gsmInstance.enmGSMCommandResponseState)
 800cdc8:	4bb1      	ldr	r3, [pc, #708]	; (800d090 <sendGSMCommand+0x2cc>)
 800cdca:	f893 3e3c 	ldrb.w	r3, [r3, #3644]	; 0xe3c
 800cdce:	b12b      	cbz	r3, 800cddc <sendGSMCommand+0x18>
 800cdd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cdd4:	2a01      	cmp	r2, #1
 800cdd6:	d077      	beq.n	800cec8 <sendGSMCommand+0x104>
}
 800cdd8:	b002      	add	sp, #8
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDSEND)
 800cddc:	4bac      	ldr	r3, [pc, #688]	; (800d090 <sendGSMCommand+0x2cc>)
 800cdde:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d01b      	beq.n	800ce20 <sendGSMCommand+0x5c>
			else if(gsmInstance.enmGSMCommandState == enmGSM_CMDINPROCESS)
 800cde8:	4ba9      	ldr	r3, [pc, #676]	; (800d090 <sendGSMCommand+0x2cc>)
 800cdea:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d166      	bne.n	800cec2 <sendGSMCommand+0xfe>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800cdf4:	4ba7      	ldr	r3, [pc, #668]	; (800d094 <sendGSMCommand+0x2d0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
				if(!LL_USART_IsActiveFlag_TXE(UART4))
 800cdf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdfc:	d0ec      	beq.n	800cdd8 <sendGSMCommand+0x14>
					if(u8LoopCounter < (u8CharacterCounter))
 800cdfe:	4aa6      	ldr	r2, [pc, #664]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce00:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800ce04:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d236      	bcs.n	800ce7a <sendGSMCommand+0xb6>
						LL_USART_TransmitData8(UART4,command[u8LoopCounter++]);
 800ce0c:	4aa2      	ldr	r2, [pc, #648]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce0e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800ce12:	1c58      	adds	r0, r3, #1
 800ce14:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
 800ce18:	5cca      	ldrb	r2, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800ce1a:	4b9e      	ldr	r3, [pc, #632]	; (800d094 <sendGSMCommand+0x2d0>)
 800ce1c:	605a      	str	r2, [r3, #4]
}
 800ce1e:	e7db      	b.n	800cdd8 <sendGSMCommand+0x14>
				u8LoopCounter = 0;
 800ce20:	4b9d      	ldr	r3, [pc, #628]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 800ce28:	4b99      	ldr	r3, [pc, #612]	; (800d090 <sendGSMCommand+0x2cc>)
 800ce2a:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800ce2e:	2b15      	cmp	r3, #21
 800ce30:	d01a      	beq.n	800ce68 <sendGSMCommand+0xa4>
					command = gsmStateTableArray[gsmInstance.enmGSMCommand].atCommand;
 800ce32:	4a9a      	ldr	r2, [pc, #616]	; (800d09c <sendGSMCommand+0x2d8>)
 800ce34:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800ce38:	f8d3 255c 	ldr.w	r2, [r3, #1372]	; 0x55c
 800ce3c:	4b96      	ldr	r3, [pc, #600]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				u8CharacterCounter = strlen((const char *)command);
 800ce42:	4c95      	ldr	r4, [pc, #596]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce44:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f7f3 f9db 	bl	8000204 <strlen>
 800ce4e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				LL_USART_TransmitData8(UART4,command[u8LoopCounter++]);
 800ce52:	2301      	movs	r3, #1
 800ce54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ce58:	782a      	ldrb	r2, [r5, #0]
  USARTx->DR = Value;
 800ce5a:	4b8e      	ldr	r3, [pc, #568]	; (800d094 <sendGSMCommand+0x2d0>)
 800ce5c:	605a      	str	r2, [r3, #4]
				gsmInstance.enmGSMCommandState = enmGSM_CMDINPROCESS;
 800ce5e:	4b8c      	ldr	r3, [pc, #560]	; (800d090 <sendGSMCommand+0x2cc>)
 800ce60:	2202      	movs	r2, #2
 800ce62:	f883 2e3d 	strb.w	r2, [r3, #3645]	; 0xe3d
 800ce66:	e7b7      	b.n	800cdd8 <sendGSMCommand+0x14>
					command = gsmPayload.data[gsmPayload.tail];
 800ce68:	4a8d      	ldr	r2, [pc, #564]	; (800d0a0 <sendGSMCommand+0x2dc>)
 800ce6a:	6853      	ldr	r3, [r2, #4]
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce72:	4b89      	ldr	r3, [pc, #548]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ce78:	e7e3      	b.n	800ce42 <sendGSMCommand+0x7e>
						u8LoopCounter = 0;
 800ce7a:	4b87      	ldr	r3, [pc, #540]	; (800d098 <sendGSMCommand+0x2d4>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 800ce82:	4988      	ldr	r1, [pc, #544]	; (800d0a4 <sendGSMCommand+0x2e0>)
 800ce84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ce88:	6008      	str	r0, [r1, #0]
						u8CharacterCounter = 0;
 800ce8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						gsmInstance.enmGSMCommandResponseState = enmGSM_CHKRESPONSE;
 800ce8e:	4b80      	ldr	r3, [pc, #512]	; (800d090 <sendGSMCommand+0x2cc>)
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 2e3c 	strb.w	r2, [r3, #3644]	; 0xe3c
						gsmInstance.u32GSMResponseTimer = gsmStateTableArray[gsmInstance.enmGSMCommand].msTimeOut;
 800ce96:	f893 1e3f 	ldrb.w	r1, [r3, #3647]	; 0xe3f
 800ce9a:	4a80      	ldr	r2, [pc, #512]	; (800d09c <sendGSMCommand+0x2d8>)
 800ce9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800cea0:	f8d2 2564 	ldr.w	r2, [r2, #1380]	; 0x564
 800cea4:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
						if((gsmInstance.enmGSMCommand == enmGSMSTATE_FOTAHTTPACTION) || (gsmInstance.enmGSMCommand == enmGSMSTATE_HTTPACTION))
 800cea8:	2922      	cmp	r1, #34	; 0x22
 800ceaa:	d005      	beq.n	800ceb8 <sendGSMCommand+0xf4>
 800ceac:	2916      	cmp	r1, #22
 800ceae:	d003      	beq.n	800ceb8 <sendGSMCommand+0xf4>
							gu32FotaFileReadTimer = 0;
 800ceb0:	4b7d      	ldr	r3, [pc, #500]	; (800d0a8 <sendGSMCommand+0x2e4>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
 800ceb6:	e78f      	b.n	800cdd8 <sendGSMCommand+0x14>
							gu32FotaFileReadTimer = FIFTEEN_SEC;
 800ceb8:	4b7b      	ldr	r3, [pc, #492]	; (800d0a8 <sendGSMCommand+0x2e4>)
 800ceba:	f643 2298 	movw	r2, #15000	; 0x3a98
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	e78a      	b.n	800cdd8 <sendGSMCommand+0x14>
				initGSMSIM868();
 800cec2:	f7ff fb53 	bl	800c56c <initGSMSIM868>
 800cec6:	e787      	b.n	800cdd8 <sendGSMCommand+0x14>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 800cec8:	4b76      	ldr	r3, [pc, #472]	; (800d0a4 <sendGSMCommand+0x2e0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	b93b      	cbnz	r3, 800cede <sendGSMCommand+0x11a>
 800cece:	4b70      	ldr	r3, [pc, #448]	; (800d090 <sendGSMCommand+0x2cc>)
 800ced0:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 800ced4:	b11b      	cbz	r3, 800cede <sendGSMCommand+0x11a>
 800ced6:	4b75      	ldr	r3, [pc, #468]	; (800d0ac <sendGSMCommand+0x2e8>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d038      	beq.n	800cf50 <sendGSMCommand+0x18c>
			else if(gsmInstance.u32GSMResponseTimer == 0)
 800cede:	4b6c      	ldr	r3, [pc, #432]	; (800d090 <sendGSMCommand+0x2cc>)
 800cee0:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 800cee4:	b9fb      	cbnz	r3, 800cf26 <sendGSMCommand+0x162>
				gsmInstance.u8gsmRetryCount--;
 800cee6:	4a6a      	ldr	r2, [pc, #424]	; (800d090 <sendGSMCommand+0x2cc>)
 800cee8:	f892 3e18 	ldrb.w	r3, [r2, #3608]	; 0xe18
 800ceec:	3b01      	subs	r3, #1
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	f882 3e18 	strb.w	r3, [r2, #3608]	; 0xe18
				if(gsmInstance.u8gsmRetryCount == 0)
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f040 83b6 	bne.w	800d666 <sendGSMCommand+0x8a2>
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 800cefa:	f202 4452 	addw	r4, r2, #1106	; 0x452
 800cefe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800cf02:	2100      	movs	r1, #0
 800cf04:	4620      	mov	r0, r4
 800cf06:	f005 ffeb 	bl	8012ee0 <memset>
					if(gsmInstance.enmcurrentTask == enmGSMTASK_UPLOADDATA)
 800cf0a:	f894 39ec 	ldrb.w	r3, [r4, #2540]	; 0x9ec
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	f000 83a3 	beq.w	800d65c <sendGSMCommand+0x898>
					initGSMSIM868();
 800cf16:	f7ff fb29 	bl	800c56c <initGSMSIM868>
				gsmInstance.u32GSMResponseTimer = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	4a5c      	ldr	r2, [pc, #368]	; (800d090 <sendGSMCommand+0x2cc>)
 800cf1e:	f8c2 3e34 	str.w	r3, [r2, #3636]	; 0xe34
				u8GSMCharRcv = 0;
 800cf22:	4a62      	ldr	r2, [pc, #392]	; (800d0ac <sendGSMCommand+0x2e8>)
 800cf24:	6013      	str	r3, [r2, #0]
			if(gsmInstance.enmGSMCommand == enmGSMSTATE_HTTPACTION)
 800cf26:	4b5a      	ldr	r3, [pc, #360]	; (800d090 <sendGSMCommand+0x2cc>)
 800cf28:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800cf2c:	2b16      	cmp	r3, #22
 800cf2e:	f47f af53 	bne.w	800cdd8 <sendGSMCommand+0x14>
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800cf32:	4a5a      	ldr	r2, [pc, #360]	; (800d09c <sendGSMCommand+0x2d8>)
 800cf34:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800cf38:	f8d3 1560 	ldr.w	r1, [r3, #1376]	; 0x560
 800cf3c:	485c      	ldr	r0, [pc, #368]	; (800d0b0 <sendGSMCommand+0x2ec>)
 800cf3e:	f006 f86e 	bl	801301e <strstr>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	f43f af48 	beq.w	800cdd8 <sendGSMCommand+0x14>
					gu32FotaFileReadTimer = 0;
 800cf48:	4b57      	ldr	r3, [pc, #348]	; (800d0a8 <sendGSMCommand+0x2e4>)
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	601a      	str	r2, [r3, #0]
}
 800cf4e:	e743      	b.n	800cdd8 <sendGSMCommand+0x14>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 800cf50:	4b55      	ldr	r3, [pc, #340]	; (800d0a8 <sendGSMCommand+0x2e4>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1c2      	bne.n	800cede <sendGSMCommand+0x11a>
						,(const char *)gsmStateTableArray[gsmInstance.enmGSMCommand].atCommandResponse) != NULL)
 800cf58:	484d      	ldr	r0, [pc, #308]	; (800d090 <sendGSMCommand+0x2cc>)
 800cf5a:	f890 4e3f 	ldrb.w	r4, [r0, #3647]	; 0xe3f
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800cf5e:	4b4f      	ldr	r3, [pc, #316]	; (800d09c <sendGSMCommand+0x2d8>)
 800cf60:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800cf64:	f8d3 1560 	ldr.w	r1, [r3, #1376]	; 0x560
 800cf68:	f200 4052 	addw	r0, r0, #1106	; 0x452
 800cf6c:	f006 f857 	bl	801301e <strstr>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	f000 833d 	beq.w	800d5f0 <sendGSMCommand+0x82c>
					switch(gsmInstance.enmGSMCommand)
 800cf76:	2c23      	cmp	r4, #35	; 0x23
 800cf78:	f200 830b 	bhi.w	800d592 <sendGSMCommand+0x7ce>
 800cf7c:	e8df f014 	tbh	[pc, r4, lsl #1]
 800cf80:	004d0024 	.word	0x004d0024
 800cf84:	005200de 	.word	0x005200de
 800cf88:	00780073 	.word	0x00780073
 800cf8c:	0082007d 	.word	0x0082007d
 800cf90:	00cf00a0 	.word	0x00cf00a0
 800cf94:	00d900d4 	.word	0x00d900d4
 800cf98:	00ed00e8 	.word	0x00ed00e8
 800cf9c:	010400ff 	.word	0x010400ff
 800cfa0:	01d80109 	.word	0x01d80109
 800cfa4:	0121011c 	.word	0x0121011c
 800cfa8:	01520128 	.word	0x01520128
 800cfac:	01dd0157 	.word	0x01dd0157
 800cfb0:	022800e3 	.word	0x022800e3
 800cfb4:	02540223 	.word	0x02540223
 800cfb8:	0028026a 	.word	0x0028026a
 800cfbc:	0283026f 	.word	0x0283026f
 800cfc0:	028d0288 	.word	0x028d0288
 800cfc4:	02e00292 	.word	0x02e00292
							gsmInstance.u8IncrementGsmState = TRUE;
 800cfc8:	4b31      	ldr	r3, [pc, #196]	; (800d090 <sendGSMCommand+0x2cc>)
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800cfd0:	4b2f      	ldr	r3, [pc, #188]	; (800d090 <sendGSMCommand+0x2cc>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800cfd8:	2101      	movs	r1, #1
 800cfda:	f883 1e3d 	strb.w	r1, [r3, #3645]	; 0xe3d
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800cfde:	f883 2e3c 	strb.w	r2, [r3, #3644]	; 0xe3c
					gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 800cfe2:	2105      	movs	r1, #5
 800cfe4:	f883 1e18 	strb.w	r1, [r3, #3608]	; 0xe18
					gsmInstance.u32GSMResponseTimer = 0;
 800cfe8:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
					u8GSMCharRcv = 0;
 800cfec:	492f      	ldr	r1, [pc, #188]	; (800d0ac <sendGSMCommand+0x2e8>)
 800cfee:	600a      	str	r2, [r1, #0]
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800cff0:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					if(gsmInstance.enmGSMCommand != enmGSMSTATE_READFILE)
 800cff4:	f893 4e3f 	ldrb.w	r4, [r3, #3647]	; 0xe3f
 800cff8:	2c23      	cmp	r4, #35	; 0x23
 800cffa:	f040 82f1 	bne.w	800d5e0 <sendGSMCommand+0x81c>
					if(gsmInstance.u8IncrementGsmState == TRUE)
 800cffe:	4b24      	ldr	r3, [pc, #144]	; (800d090 <sendGSMCommand+0x2cc>)
 800d000:	f893 3e1c 	ldrb.w	r3, [r3, #3612]	; 0xe1c
 800d004:	2b01      	cmp	r3, #1
 800d006:	d18e      	bne.n	800cf26 <sendGSMCommand+0x162>
						gsmInstance.enmGSMCommand++;
 800d008:	4b21      	ldr	r3, [pc, #132]	; (800d090 <sendGSMCommand+0x2cc>)
 800d00a:	3401      	adds	r4, #1
 800d00c:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
						gsmInstance.u32GSMTimer = ONE_SEC;
 800d010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d014:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800d018:	e785      	b.n	800cf26 <sendGSMCommand+0x162>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d01a:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <sendGSMCommand+0x2cc>)
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d022:	e7d5      	b.n	800cfd0 <sendGSMCommand+0x20c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d024:	4e22      	ldr	r6, [pc, #136]	; (800d0b0 <sendGSMCommand+0x2ec>)
 800d026:	4923      	ldr	r1, [pc, #140]	; (800d0b4 <sendGSMCommand+0x2f0>)
 800d028:	4630      	mov	r0, r6
 800d02a:	f005 fff8 	bl	801301e <strstr>
 800d02e:	4604      	mov	r4, r0
								memset(gau8GSM_TimeStamp,0x00,(sizeof(char ) * strlen(gau8GSM_TimeStamp)));
 800d030:	4d21      	ldr	r5, [pc, #132]	; (800d0b8 <sendGSMCommand+0x2f4>)
 800d032:	4628      	mov	r0, r5
 800d034:	f7f3 f8e6 	bl	8000204 <strlen>
 800d038:	4602      	mov	r2, r0
 800d03a:	2100      	movs	r1, #0
 800d03c:	4628      	mov	r0, r5
 800d03e:	f005 ff4f 	bl	8012ee0 <memset>
								memcpy( gau8GSM_TimeStamp, &strLoc[8], strlen(strtok(&strLoc[8],"\r")));
 800d042:	3408      	adds	r4, #8
 800d044:	491d      	ldr	r1, [pc, #116]	; (800d0bc <sendGSMCommand+0x2f8>)
 800d046:	4620      	mov	r0, r4
 800d048:	f006 fe34 	bl	8013cb4 <strtok>
 800d04c:	f7f3 f8da 	bl	8000204 <strlen>
 800d050:	4602      	mov	r2, r0
 800d052:	4621      	mov	r1, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f005 ff35 	bl	8012ec4 <memcpy>
								syncrtcwithNetworkTime();
 800d05a:	f7ff fcfd 	bl	800ca58 <syncrtcwithNetworkTime>
								gsmInstance.u8IncrementGsmState = TRUE;
 800d05e:	2301      	movs	r3, #1
 800d060:	f886 39ca 	strb.w	r3, [r6, #2506]	; 0x9ca
							break;
 800d064:	e7b4      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d066:	4b0a      	ldr	r3, [pc, #40]	; (800d090 <sendGSMCommand+0x2cc>)
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d06e:	e7af      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <sendGSMCommand+0x2cc>)
 800d072:	2201      	movs	r2, #1
 800d074:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d078:	e7aa      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d07a:	4b05      	ldr	r3, [pc, #20]	; (800d090 <sendGSMCommand+0x2cc>)
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d082:	e7a5      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d084:	4b02      	ldr	r3, [pc, #8]	; (800d090 <sendGSMCommand+0x2cc>)
 800d086:	2201      	movs	r2, #1
 800d088:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d08c:	e7a0      	b.n	800cfd0 <sendGSMCommand+0x20c>
 800d08e:	bf00      	nop
 800d090:	2000c164 	.word	0x2000c164
 800d094:	40004c00 	.word	0x40004c00
 800d098:	20003504 	.word	0x20003504
 800d09c:	20000010 	.word	0x20000010
 800d0a0:	2000d2d4 	.word	0x2000d2d4
 800d0a4:	2000443c 	.word	0x2000443c
 800d0a8:	20004450 	.word	0x20004450
 800d0ac:	20004260 	.word	0x20004260
 800d0b0:	2000c5b6 	.word	0x2000c5b6
 800d0b4:	0801bdfc 	.word	0x0801bdfc
 800d0b8:	2000040c 	.word	0x2000040c
 800d0bc:	0801be04 	.word	0x0801be04
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d0c0:	4cc6      	ldr	r4, [pc, #792]	; (800d3dc <sendGSMCommand+0x618>)
 800d0c2:	49c7      	ldr	r1, [pc, #796]	; (800d3e0 <sendGSMCommand+0x61c>)
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f005 ffaa 	bl	801301e <strstr>
								memcpy(gsmInstance.agsmSignalStrength, &strLoc[6], strlen(strtok(strLoc,"\r")));
 800d0ca:	1d85      	adds	r5, r0, #6
 800d0cc:	49c5      	ldr	r1, [pc, #788]	; (800d3e4 <sendGSMCommand+0x620>)
 800d0ce:	f006 fdf1 	bl	8013cb4 <strtok>
 800d0d2:	f7f3 f897 	bl	8000204 <strlen>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f5a4 706f 	sub.w	r0, r4, #956	; 0x3bc
 800d0de:	f005 fef1 	bl	8012ec4 <memcpy>
								if(gsmInstance.enmcurrentTask == enmGSMTASK_ISALIVE)
 800d0e2:	f894 39ec 	ldrb.w	r3, [r4, #2540]	; 0x9ec
 800d0e6:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b06      	cmp	r3, #6
 800d0ee:	d004      	beq.n	800d0fa <sendGSMCommand+0x336>
									gsmInstance.u8IncrementGsmState = TRUE;
 800d0f0:	4bbd      	ldr	r3, [pc, #756]	; (800d3e8 <sendGSMCommand+0x624>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 800d0f8:	e76a      	b.n	800cfd0 <sendGSMCommand+0x20c>
									gsmInstance.u32GSMHeartbeatTimer = ONE_MIN;
 800d0fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 800d0fe:	f8c4 2e2c 	str.w	r2, [r4, #3628]	; 0xe2c
									gsmInstance.u32GSMTimer = FIVE_SEC;
 800d102:	f241 3288 	movw	r2, #5000	; 0x1388
 800d106:	f8c4 2e20 	str.w	r2, [r4, #3616]	; 0xe20
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d10a:	2203      	movs	r2, #3
 800d10c:	f884 2e3e 	strb.w	r2, [r4, #3646]	; 0xe3e
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d110:	2214      	movs	r2, #20
 800d112:	f884 2e3f 	strb.w	r2, [r4, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = FALSE;
 800d116:	2200      	movs	r2, #0
 800d118:	f884 2e1c 	strb.w	r2, [r4, #3612]	; 0xe1c
 800d11c:	e758      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d11e:	4bb2      	ldr	r3, [pc, #712]	; (800d3e8 <sendGSMCommand+0x624>)
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d126:	e753      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d128:	4baf      	ldr	r3, [pc, #700]	; (800d3e8 <sendGSMCommand+0x624>)
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d130:	e74e      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d132:	4bad      	ldr	r3, [pc, #692]	; (800d3e8 <sendGSMCommand+0x624>)
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d13a:	e749      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d13c:	4baa      	ldr	r3, [pc, #680]	; (800d3e8 <sendGSMCommand+0x624>)
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d144:	e744      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d146:	4ba8      	ldr	r3, [pc, #672]	; (800d3e8 <sendGSMCommand+0x624>)
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d14e:	e73f      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d150:	4ba5      	ldr	r3, [pc, #660]	; (800d3e8 <sendGSMCommand+0x624>)
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d158:	e73a      	b.n	800cfd0 <sendGSMCommand+0x20c>
							if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d15a:	49a4      	ldr	r1, [pc, #656]	; (800d3ec <sendGSMCommand+0x628>)
 800d15c:	489f      	ldr	r0, [pc, #636]	; (800d3dc <sendGSMCommand+0x618>)
 800d15e:	f005 ff5e 	bl	801301e <strstr>
 800d162:	b138      	cbz	r0, 800d174 <sendGSMCommand+0x3b0>
								gsmInstance.u8IncrementGsmState = FALSE;
 800d164:	4ba0      	ldr	r3, [pc, #640]	; (800d3e8 <sendGSMCommand+0x624>)
 800d166:	2200      	movs	r2, #0
 800d168:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
								gsmInstance.enmGSMCommand += 2;
 800d16c:	3402      	adds	r4, #2
 800d16e:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
 800d172:	e72d      	b.n	800cfd0 <sendGSMCommand+0x20c>
								gsmInstance.u8IncrementGsmState = TRUE;
 800d174:	4b9c      	ldr	r3, [pc, #624]	; (800d3e8 <sendGSMCommand+0x624>)
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 800d17c:	e728      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d17e:	4b9a      	ldr	r3, [pc, #616]	; (800d3e8 <sendGSMCommand+0x624>)
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d186:	e723      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d188:	4b97      	ldr	r3, [pc, #604]	; (800d3e8 <sendGSMCommand+0x624>)
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d190:	e71e      	b.n	800cfd0 <sendGSMCommand+0x20c>
							if(gu8FlagNoTerminate == 1)
 800d192:	4b97      	ldr	r3, [pc, #604]	; (800d3f0 <sendGSMCommand+0x62c>)
 800d194:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d004      	beq.n	800d1a6 <sendGSMCommand+0x3e2>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d19c:	4b92      	ldr	r3, [pc, #584]	; (800d3e8 <sendGSMCommand+0x624>)
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d1a4:	e714      	b.n	800cfd0 <sendGSMCommand+0x20c>
								gu8FlagNoTerminate = 0;
 800d1a6:	4b92      	ldr	r3, [pc, #584]	; (800d3f0 <sendGSMCommand+0x62c>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
								gsmInstance.enmGSMCommand++;
 800d1ae:	3401      	adds	r4, #1
 800d1b0:	4b8d      	ldr	r3, [pc, #564]	; (800d3e8 <sendGSMCommand+0x624>)
 800d1b2:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
 800d1b6:	e7f1      	b.n	800d19c <sendGSMCommand+0x3d8>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d1b8:	4b8b      	ldr	r3, [pc, #556]	; (800d3e8 <sendGSMCommand+0x624>)
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d1c0:	e706      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8HTTPInitStatus = TRUE;
 800d1c2:	4b89      	ldr	r3, [pc, #548]	; (800d3e8 <sendGSMCommand+0x624>)
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2e1a 	strb.w	r2, [r3, #3610]	; 0xe1a
							gsmInstance.u8IncrementGsmState = TRUE;
 800d1ca:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d1ce:	e6ff      	b.n	800cfd0 <sendGSMCommand+0x20c>
							memcpy(gsmInstance.agsmCommandResponse[gsmInstance.enmGSMCommand],
 800d1d0:	231e      	movs	r3, #30
 800d1d2:	fb03 f304 	mul.w	r3, r3, r4
 800d1d6:	33c0      	adds	r3, #192	; 0xc0
 800d1d8:	4a83      	ldr	r2, [pc, #524]	; (800d3e8 <sendGSMCommand+0x624>)
 800d1da:	4413      	add	r3, r2
 800d1dc:	f8d2 4452 	ldr.w	r4, [r2, #1106]	; 0x452
 800d1e0:	f8d2 0456 	ldr.w	r0, [r2, #1110]	; 0x456
 800d1e4:	f8d2 145a 	ldr.w	r1, [r2, #1114]	; 0x45a
 800d1e8:	f8d2 545e 	ldr.w	r5, [r2, #1118]	; 0x45e
 800d1ec:	f8c3 4003 	str.w	r4, [r3, #3]
 800d1f0:	f8c3 0007 	str.w	r0, [r3, #7]
 800d1f4:	f8c3 100b 	str.w	r1, [r3, #11]
 800d1f8:	f8c3 500f 	str.w	r5, [r3, #15]
 800d1fc:	f8d2 4462 	ldr.w	r4, [r2, #1122]	; 0x462
 800d200:	f8d2 0466 	ldr.w	r0, [r2, #1126]	; 0x466
 800d204:	f8d2 146a 	ldr.w	r1, [r2, #1130]	; 0x46a
 800d208:	f8c3 4013 	str.w	r4, [r3, #19]
 800d20c:	f8c3 0017 	str.w	r0, [r3, #23]
 800d210:	f8c3 101b 	str.w	r1, [r3, #27]
 800d214:	f8b2 146e 	ldrh.w	r1, [r2, #1134]	; 0x46e
 800d218:	f8a3 101f 	strh.w	r1, [r3, #31]
							gsmInstance.u8IncrementGsmState = TRUE;
 800d21c:	2301      	movs	r3, #1
 800d21e:	f882 3e1c 	strb.w	r3, [r2, #3612]	; 0xe1c
							break;
 800d222:	e6d5      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d224:	4b70      	ldr	r3, [pc, #448]	; (800d3e8 <sendGSMCommand+0x624>)
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d22c:	e6d0      	b.n	800cfd0 <sendGSMCommand+0x20c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d22e:	4c6b      	ldr	r4, [pc, #428]	; (800d3dc <sendGSMCommand+0x618>)
 800d230:	4970      	ldr	r1, [pc, #448]	; (800d3f4 <sendGSMCommand+0x630>)
 800d232:	4620      	mov	r0, r4
 800d234:	f005 fef3 	bl	801301e <strstr>
							memcpy(gsmInstance.u32GSMHttpResponseCode, (char *)&strLoc[4], 3);
 800d238:	4603      	mov	r3, r0
 800d23a:	f833 2f04 	ldrh.w	r2, [r3, #4]!
 800d23e:	789b      	ldrb	r3, [r3, #2]
 800d240:	f824 2c03 	strh.w	r2, [r4, #-3]
 800d244:	f804 3c01 	strb.w	r3, [r4, #-1]
							switch(atoi(gsmInstance.u32GSMHttpResponseCode))
 800d248:	1ee0      	subs	r0, r4, #3
 800d24a:	f005 fb99 	bl	8012980 <atoi>
 800d24e:	28c8      	cmp	r0, #200	; 0xc8
 800d250:	d014      	beq.n	800d27c <sendGSMCommand+0x4b8>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800d252:	4c69      	ldr	r4, [pc, #420]	; (800d3f8 <sendGSMCommand+0x634>)
 800d254:	4620      	mov	r0, r4
 800d256:	f005 fb93 	bl	8012980 <atoi>
 800d25a:	4b68      	ldr	r3, [pc, #416]	; (800d3fc <sendGSMCommand+0x638>)
 800d25c:	6218      	str	r0, [r3, #32]
									gsmInstance.u8IllegalHttpResponseCounter++;
 800d25e:	f894 39ce 	ldrb.w	r3, [r4, #2510]	; 0x9ce
 800d262:	3301      	adds	r3, #1
 800d264:	b2db      	uxtb	r3, r3
 800d266:	f884 39ce 	strb.w	r3, [r4, #2510]	; 0x9ce
									if(gsmInstance.u8IllegalHttpResponseCounter >= MAX_HTTP_ATTEMPTS)
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d951      	bls.n	800d312 <sendGSMCommand+0x54e>
										initGSMSIM868();
 800d26e:	f7ff f97d 	bl	800c56c <initGSMSIM868>
										gu8CheckSMS = TRUE;
 800d272:	4b62      	ldr	r3, [pc, #392]	; (800d3fc <sendGSMCommand+0x638>)
 800d274:	2201      	movs	r2, #1
 800d276:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
										break;
 800d27a:	e6a9      	b.n	800cfd0 <sendGSMCommand+0x20c>
								dequeue(&gsmPayload);
 800d27c:	4860      	ldr	r0, [pc, #384]	; (800d400 <sendGSMCommand+0x63c>)
 800d27e:	f002 fc97 	bl	800fbb0 <dequeue>
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 800d282:	f2a4 4052 	subw	r0, r4, #1106	; 0x452
 800d286:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d28a:	f8c0 3e20 	str.w	r3, [r0, #3616]	; 0xe20
								gu8HttpPayloadFlag = 0;
 800d28e:	4c5b      	ldr	r4, [pc, #364]	; (800d3fc <sendGSMCommand+0x638>)
 800d290:	2300      	movs	r3, #0
 800d292:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d296:	2214      	movs	r2, #20
 800d298:	f880 2e3f 	strb.w	r2, [r0, #3647]	; 0xe3f
								gsmInstance.u8IncrementGsmState = FALSE;
 800d29c:	f880 3e1c 	strb.w	r3, [r0, #3612]	; 0xe1c
								u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800d2a0:	f200 404f 	addw	r0, r0, #1103	; 0x44f
 800d2a4:	f005 fb6c 	bl	8012980 <atoi>
 800d2a8:	6220      	str	r0, [r4, #32]
								HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800d2aa:	2120      	movs	r1, #32
 800d2ac:	4855      	ldr	r0, [pc, #340]	; (800d404 <sendGSMCommand+0x640>)
 800d2ae:	f7f5 fd99 	bl	8002de4 <HAL_GPIO_TogglePin>
								gu32GSMRestartTimer = FIVE_MIN;
 800d2b2:	4b55      	ldr	r3, [pc, #340]	; (800d408 <sendGSMCommand+0x644>)
 800d2b4:	4a55      	ldr	r2, [pc, #340]	; (800d40c <sendGSMCommand+0x648>)
 800d2b6:	601a      	str	r2, [r3, #0]
								if(FlashStr.bitFlagSFlashData == 1)
 800d2b8:	4a55      	ldr	r2, [pc, #340]	; (800d410 <sendGSMCommand+0x64c>)
 800d2ba:	f242 134c 	movw	r3, #8524	; 0x214c
 800d2be:	5cd3      	ldrb	r3, [r2, r3]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f43f ae85 	beq.w	800cfd0 <sendGSMCommand+0x20c>
									memset(strI2cEeprom.pu8SFlashReadMemLocAddress, 0, sizeof(strI2cEeprom.pu8SFlashReadMemLocAddress)*sizeof(char));
 800d2c6:	4b53      	ldr	r3, [pc, #332]	; (800d414 <sendGSMCommand+0x650>)
 800d2c8:	2500      	movs	r5, #0
 800d2ca:	f883 5ce1 	strb.w	r5, [r3, #3297]	; 0xce1
									strI2cEeprom.pu8SFlashReadMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashReadAddress >> 24);
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	6852      	ldr	r2, [r2, #4]
 800d2d2:	0e11      	lsrs	r1, r2, #24
 800d2d4:	f883 1ce0 	strb.w	r1, [r3, #3296]	; 0xce0
									strI2cEeprom.pu8SFlashReadMemLocAddress[2] = (uint8_t)(FlashStr.u32FlashReadAddress >> 16);
 800d2d8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800d2dc:	f883 1cdf 	strb.w	r1, [r3, #3295]	; 0xcdf
									strI2cEeprom.pu8SFlashReadMemLocAddress[1] = (uint8_t)(FlashStr.u32FlashReadAddress >> 8);
 800d2e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d2e4:	f883 1cde 	strb.w	r1, [r3, #3294]	; 0xcde
									strI2cEeprom.pu8SFlashReadMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashReadAddress);
 800d2e8:	f883 2cdd 	strb.w	r2, [r3, #3293]	; 0xcdd
									HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 292,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashReadMemLocAddress,4);
 800d2ec:	2204      	movs	r2, #4
 800d2ee:	9201      	str	r2, [sp, #4]
 800d2f0:	f603 43dd 	addw	r3, r3, #3293	; 0xcdd
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	2310      	movs	r3, #16
 800d2f8:	f44f 7292 	mov.w	r2, #292	; 0x124
 800d2fc:	21a0      	movs	r1, #160	; 0xa0
 800d2fe:	4846      	ldr	r0, [pc, #280]	; (800d418 <sendGSMCommand+0x654>)
 800d300:	f7f5 ffee 	bl	80032e0 <HAL_I2C_Mem_Write_IT>
									HAL_Delay(10);
 800d304:	200a      	movs	r0, #10
 800d306:	f7f3 fee1 	bl	80010cc <HAL_Delay>
									FlashStr.bitFlagSFlashData = 0;
 800d30a:	f242 134c 	movw	r3, #8524	; 0x214c
 800d30e:	54e5      	strb	r5, [r4, r3]
 800d310:	e65e      	b.n	800cfd0 <sendGSMCommand+0x20c>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800d312:	4c39      	ldr	r4, [pc, #228]	; (800d3f8 <sendGSMCommand+0x634>)
 800d314:	4620      	mov	r0, r4
 800d316:	f005 fb33 	bl	8012980 <atoi>
 800d31a:	4b38      	ldr	r3, [pc, #224]	; (800d3fc <sendGSMCommand+0x638>)
 800d31c:	6218      	str	r0, [r3, #32]
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d31e:	2214      	movs	r2, #20
 800d320:	f884 29f0 	strb.w	r2, [r4, #2544]	; 0x9f0
									gsmInstance.u32GSMResponseTimer = 0;
 800d324:	2200      	movs	r2, #0
 800d326:	f8c4 29e5 	str.w	r2, [r4, #2533]	; 0x9e5
									gsmInstance.u8IncrementGsmState = FALSE;
 800d32a:	f884 29cd 	strb.w	r2, [r4, #2509]	; 0x9cd
								break;
 800d32e:	e64f      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d330:	4b2d      	ldr	r3, [pc, #180]	; (800d3e8 <sendGSMCommand+0x624>)
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d338:	e64a      	b.n	800cfd0 <sendGSMCommand+0x20c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d33a:	4c28      	ldr	r4, [pc, #160]	; (800d3dc <sendGSMCommand+0x618>)
 800d33c:	4937      	ldr	r1, [pc, #220]	; (800d41c <sendGSMCommand+0x658>)
 800d33e:	4620      	mov	r0, r4
 800d340:	f005 fe6d 	bl	801301e <strstr>
 800d344:	4605      	mov	r5, r0
							memset(gsmInstance.agpsLocationData,0x00, strlen(gsmInstance.agpsLocationData));
 800d346:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7f2 ff5a 	bl	8000204 <strlen>
 800d350:	4602      	mov	r2, r0
 800d352:	2100      	movs	r1, #0
 800d354:	4620      	mov	r0, r4
 800d356:	f005 fdc3 	bl	8012ee0 <memset>
							memcpy(gsmInstance.agpsLocationData, (char *)&strLoc[11], strlen(strtok(strLoc,"\r")));//strlen(strtok(strLoc,"\r\n")));
 800d35a:	f105 060b 	add.w	r6, r5, #11
 800d35e:	4921      	ldr	r1, [pc, #132]	; (800d3e4 <sendGSMCommand+0x620>)
 800d360:	4628      	mov	r0, r5
 800d362:	f006 fca7 	bl	8013cb4 <strtok>
 800d366:	f7f2 ff4d 	bl	8000204 <strlen>
 800d36a:	4602      	mov	r2, r0
 800d36c:	4631      	mov	r1, r6
 800d36e:	4620      	mov	r0, r4
 800d370:	f005 fda8 	bl	8012ec4 <memcpy>
							gsmInstance.u8IncrementGsmState = FALSE;
 800d374:	2300      	movs	r3, #0
 800d376:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
							if(strlen(gsmInstance.agpsLocationData) < 10)
 800d37a:	4620      	mov	r0, r4
 800d37c:	f7f2 ff42 	bl	8000204 <strlen>
 800d380:	2809      	cmp	r0, #9
 800d382:	d80e      	bhi.n	800d3a2 <sendGSMCommand+0x5de>
								u32GPSTimeSyncFlag = FALSE;
 800d384:	4b1d      	ldr	r3, [pc, #116]	; (800d3fc <sendGSMCommand+0x638>)
 800d386:	2200      	movs	r2, #0
 800d388:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
							if(gu32GSMConfigCheckTimer == 0)
 800d38c:	4b24      	ldr	r3, [pc, #144]	; (800d420 <sendGSMCommand+0x65c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	b163      	cbz	r3, 800d3ac <sendGSMCommand+0x5e8>
								gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d392:	4b15      	ldr	r3, [pc, #84]	; (800d3e8 <sendGSMCommand+0x624>)
 800d394:	2203      	movs	r2, #3
 800d396:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d39a:	2214      	movs	r2, #20
 800d39c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 800d3a0:	e616      	b.n	800cfd0 <sendGSMCommand+0x20c>
								u32GPSTimeSyncFlag = TRUE;
 800d3a2:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <sendGSMCommand+0x638>)
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800d3aa:	e7ef      	b.n	800d38c <sendGSMCommand+0x5c8>
								gu32GSMConfigCheckTimer = (THIRTY_MIN * 2);//TWENTY_MIN ;
 800d3ac:	4b1c      	ldr	r3, [pc, #112]	; (800d420 <sendGSMCommand+0x65c>)
 800d3ae:	4a1d      	ldr	r2, [pc, #116]	; (800d424 <sendGSMCommand+0x660>)
 800d3b0:	601a      	str	r2, [r3, #0]
								initHTTPURLforRemoteConfig();
 800d3b2:	f7ff fbd9 	bl	800cb68 <initHTTPURLforRemoteConfig>
								gsmInstance.enmcurrentTask = enmGSMTASK_DOWNLOADFOTAFILE;
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <sendGSMCommand+0x624>)
 800d3b8:	2208      	movs	r2, #8
 800d3ba:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
								gsmInstance.enmGSMCommand = enmGSMSTATE_HTTPTERMCONFIG;
 800d3be:	221f      	movs	r2, #31
 800d3c0:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 800d3c4:	e604      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d3c6:	4b08      	ldr	r3, [pc, #32]	; (800d3e8 <sendGSMCommand+0x624>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d3ce:	e5ff      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <sendGSMCommand+0x624>)
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d3d8:	e5fa      	b.n	800cfd0 <sendGSMCommand+0x20c>
 800d3da:	bf00      	nop
 800d3dc:	2000c5b6 	.word	0x2000c5b6
 800d3e0:	0801be08 	.word	0x0801be08
 800d3e4:	0801be04 	.word	0x0801be04
 800d3e8:	2000c164 	.word	0x2000c164
 800d3ec:	0801be10 	.word	0x0801be10
 800d3f0:	20000010 	.word	0x20000010
 800d3f4:	0801bd88 	.word	0x0801bd88
 800d3f8:	2000c5b3 	.word	0x2000c5b3
 800d3fc:	20003504 	.word	0x20003504
 800d400:	2000d2d4 	.word	0x2000d2d4
 800d404:	40020c00 	.word	0x40020c00
 800d408:	200029ac 	.word	0x200029ac
 800d40c:	000493e0 	.word	0x000493e0
 800d410:	2000f154 	.word	0x2000f154
 800d414:	20007bb8 	.word	0x20007bb8
 800d418:	2000d304 	.word	0x2000d304
 800d41c:	0801be1c 	.word	0x0801be1c
 800d420:	200029b0 	.word	0x200029b0
 800d424:	0036ee80 	.word	0x0036ee80
							gsmInstance.u32GSMHeartbeatTimer = FIVE_SEC;
 800d428:	4b98      	ldr	r3, [pc, #608]	; (800d68c <sendGSMCommand+0x8c8>)
 800d42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d42e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
							gsmInstance.u32GSMTimer = ONE_SEC;
 800d432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d436:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
							gsmInstance.enmGSMCommand = enmGSMSTATE_ATCSQ;
 800d43a:	2208      	movs	r2, #8
 800d43c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
							gsmInstance.enmcurrentTask = enmGSMTASK_ISALIVE;
 800d440:	2206      	movs	r2, #6
 800d442:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
							gsmInstance.u8IncrementGsmState = FALSE;
 800d446:	2200      	movs	r2, #0
 800d448:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							gu8SendSMS = FALSE;
 800d44c:	4b90      	ldr	r3, [pc, #576]	; (800d690 <sendGSMCommand+0x8cc>)
 800d44e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							break;
 800d452:	e5bd      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d454:	4b8d      	ldr	r3, [pc, #564]	; (800d68c <sendGSMCommand+0x8c8>)
 800d456:	2201      	movs	r2, #1
 800d458:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d45c:	e5b8      	b.n	800cfd0 <sendGSMCommand+0x20c>
							sendSystemConfigurationSMS();
 800d45e:	f7ff f9ab 	bl	800c7b8 <sendSystemConfigurationSMS>
							gsmInstance.enmcurrentTask = enmGSMTASK_SENDSMS;
 800d462:	4c8a      	ldr	r4, [pc, #552]	; (800d68c <sendGSMCommand+0x8c8>)
 800d464:	2305      	movs	r3, #5
 800d466:	f884 3e3e 	strb.w	r3, [r4, #3646]	; 0xe3e
							gsmInstance.enmGSMCommand = enmGSMSTATE_CMGF;
 800d46a:	2318      	movs	r3, #24
 800d46c:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
							memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 800d470:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d474:	2100      	movs	r1, #0
 800d476:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800d47a:	f005 fd31 	bl	8012ee0 <memset>
							gsmInstance.u8IncrementGsmState = FALSE;
 800d47e:	2300      	movs	r3, #0
 800d480:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
							break;
 800d484:	e5a4      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d486:	4b81      	ldr	r3, [pc, #516]	; (800d68c <sendGSMCommand+0x8c8>)
 800d488:	2201      	movs	r2, #1
 800d48a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d48e:	e59f      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d490:	4b7e      	ldr	r3, [pc, #504]	; (800d68c <sendGSMCommand+0x8c8>)
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d498:	e59a      	b.n	800cfd0 <sendGSMCommand+0x20c>
							gsmInstance.u8IncrementGsmState = TRUE;
 800d49a:	4b7c      	ldr	r3, [pc, #496]	; (800d68c <sendGSMCommand+0x8c8>)
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 800d4a2:	e595      	b.n	800cfd0 <sendGSMCommand+0x20c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 800d4a4:	497b      	ldr	r1, [pc, #492]	; (800d694 <sendGSMCommand+0x8d0>)
 800d4a6:	487c      	ldr	r0, [pc, #496]	; (800d698 <sendGSMCommand+0x8d4>)
 800d4a8:	f005 fdb9 	bl	801301e <strstr>
								if(strLoc != NULL)
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d03b      	beq.n	800d52a <sendGSMCommand+0x766>
									gu32GSMHangTimer = THREE_MIN;
 800d4b2:	4b7a      	ldr	r3, [pc, #488]	; (800d69c <sendGSMCommand+0x8d8>)
 800d4b4:	4a7a      	ldr	r2, [pc, #488]	; (800d6a0 <sendGSMCommand+0x8dc>)
 800d4b6:	601a      	str	r2, [r3, #0]
									memset(gau32RemoteConfigSizeinBytes,0x00, strlen(gau32RemoteConfigSizeinBytes));
 800d4b8:	4c7a      	ldr	r4, [pc, #488]	; (800d6a4 <sendGSMCommand+0x8e0>)
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f7f2 fea2 	bl	8000204 <strlen>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f005 fd0b 	bl	8012ee0 <memset>
									memcpy(gau32RemoteConfigSizeinBytes, &strLoc[4], strlen(strtok(&strLoc[4],"\r\n")));
 800d4ca:	3504      	adds	r5, #4
 800d4cc:	4976      	ldr	r1, [pc, #472]	; (800d6a8 <sendGSMCommand+0x8e4>)
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f006 fbf0 	bl	8013cb4 <strtok>
 800d4d4:	f7f2 fe96 	bl	8000204 <strlen>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	4629      	mov	r1, r5
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f005 fcf1 	bl	8012ec4 <memcpy>
									gu32RemoteConfigSizeinBytes = strlen(gau32RemoteConfigSizeinBytes);
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f7f2 fe8e 	bl	8000204 <strlen>
 800d4e8:	4b69      	ldr	r3, [pc, #420]	; (800d690 <sendGSMCommand+0x8cc>)
 800d4ea:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
									gsmInstance.gu32RemoteConfigSizeinBytes = atoi(gau32RemoteConfigSizeinBytes);
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f005 fa46 	bl	8012980 <atoi>
 800d4f4:	4b65      	ldr	r3, [pc, #404]	; (800d68c <sendGSMCommand+0x8c8>)
 800d4f6:	f8c3 0e30 	str.w	r0, [r3, #3632]	; 0xe30
									if(gsmInstance.gu32RemoteConfigSizeinBytes <= (MAX_RMT_CONFIG_SIZE_BYTES))
 800d4fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800d4fe:	4298      	cmp	r0, r3
 800d500:	d807      	bhi.n	800d512 <sendGSMCommand+0x74e>
										gu32AttemptFota = TRUE;
 800d502:	4b63      	ldr	r3, [pc, #396]	; (800d690 <sendGSMCommand+0x8cc>)
 800d504:	2201      	movs	r2, #1
 800d506:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
										if(gsmInstance.gu32RemoteConfigSizeinBytes != 0)
 800d50a:	b148      	cbz	r0, 800d520 <sendGSMCommand+0x75c>
											updateHTTPReadLength(gsmInstance.gu32RemoteConfigSizeinBytes);
 800d50c:	f7ff fbc2 	bl	800cc94 <updateHTTPReadLength>
 800d510:	e006      	b.n	800d520 <sendGSMCommand+0x75c>
										gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d512:	4b5e      	ldr	r3, [pc, #376]	; (800d68c <sendGSMCommand+0x8c8>)
 800d514:	2203      	movs	r2, #3
 800d516:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d51a:	2214      	movs	r2, #20
 800d51c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = TRUE;
 800d520:	4b5a      	ldr	r3, [pc, #360]	; (800d68c <sendGSMCommand+0x8c8>)
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 800d528:	e552      	b.n	800cfd0 <sendGSMCommand+0x20c>
									gsmInstance.u8IncrementGsmState = FALSE;
 800d52a:	4b58      	ldr	r3, [pc, #352]	; (800d68c <sendGSMCommand+0x8c8>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d532:	2203      	movs	r2, #3
 800d534:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d538:	2214      	movs	r2, #20
 800d53a:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 800d53e:	e547      	b.n	800cfd0 <sendGSMCommand+0x20c>
									char *strloc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"(");
 800d540:	4c55      	ldr	r4, [pc, #340]	; (800d698 <sendGSMCommand+0x8d4>)
 800d542:	2128      	movs	r1, #40	; 0x28
 800d544:	4620      	mov	r0, r4
 800d546:	f005 fd30 	bl	8012faa <strchr>
 800d54a:	4605      	mov	r5, r0
									memset(gau8ConfigData,0x00,sizeof(gau8ConfigData));//
 800d54c:	4e57      	ldr	r6, [pc, #348]	; (800d6ac <sendGSMCommand+0x8e8>)
 800d54e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d552:	2100      	movs	r1, #0
 800d554:	4630      	mov	r0, r6
 800d556:	f005 fcc3 	bl	8012ee0 <memset>
									memcpy(gau8ConfigData, (char *)strloc, gsmInstance.gu32RemoteConfigSizeinBytes);
 800d55a:	f8d4 29de 	ldr.w	r2, [r4, #2526]	; 0x9de
 800d55e:	4629      	mov	r1, r5
 800d560:	4630      	mov	r0, r6
 800d562:	f005 fcaf 	bl	8012ec4 <memcpy>
									restoreHTTPURLforData();
 800d566:	f7ff fb3f 	bl	800cbe8 <restoreHTTPURLforData>
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d56a:	2303      	movs	r3, #3
 800d56c:	f884 39ec 	strb.w	r3, [r4, #2540]	; 0x9ec
									gsmInstance.enmGSMCommand = enmGSMSTATE_HTTPTERM;
 800d570:	2311      	movs	r3, #17
 800d572:	f884 39ed 	strb.w	r3, [r4, #2541]	; 0x9ed
									HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	// LED ON
 800d576:	2200      	movs	r2, #0
 800d578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d57c:	484c      	ldr	r0, [pc, #304]	; (800d6b0 <sendGSMCommand+0x8ec>)
 800d57e:	f7f5 fc2b 	bl	8002dd8 <HAL_GPIO_WritePin>
									gsmInstance.u8IncrementGsmState = FALSE;
 800d582:	2300      	movs	r3, #0
 800d584:	f884 39ca 	strb.w	r3, [r4, #2506]	; 0x9ca
									gu32NewConfigAvailable = TRUE;
 800d588:	4b41      	ldr	r3, [pc, #260]	; (800d690 <sendGSMCommand+0x8cc>)
 800d58a:	2201      	movs	r2, #1
 800d58c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
							break;
 800d590:	e51e      	b.n	800cfd0 <sendGSMCommand+0x20c>
							memcpy(gsmInstance.agsmCommandResponse[gsmInstance.enmGSMCommand], (char *)&gsmInstance.as8GSM_Response_Buff, 30);
 800d592:	231e      	movs	r3, #30
 800d594:	fb03 f304 	mul.w	r3, r3, r4
 800d598:	33c0      	adds	r3, #192	; 0xc0
 800d59a:	4a3c      	ldr	r2, [pc, #240]	; (800d68c <sendGSMCommand+0x8c8>)
 800d59c:	4413      	add	r3, r2
 800d59e:	f8d2 4452 	ldr.w	r4, [r2, #1106]	; 0x452
 800d5a2:	f8d2 0456 	ldr.w	r0, [r2, #1110]	; 0x456
 800d5a6:	f8d2 145a 	ldr.w	r1, [r2, #1114]	; 0x45a
 800d5aa:	f8d2 545e 	ldr.w	r5, [r2, #1118]	; 0x45e
 800d5ae:	f8c3 4003 	str.w	r4, [r3, #3]
 800d5b2:	f8c3 0007 	str.w	r0, [r3, #7]
 800d5b6:	f8c3 100b 	str.w	r1, [r3, #11]
 800d5ba:	f8c3 500f 	str.w	r5, [r3, #15]
 800d5be:	f8d2 4462 	ldr.w	r4, [r2, #1122]	; 0x462
 800d5c2:	f8d2 0466 	ldr.w	r0, [r2, #1126]	; 0x466
 800d5c6:	f8d2 146a 	ldr.w	r1, [r2, #1130]	; 0x46a
 800d5ca:	f8c3 4013 	str.w	r4, [r3, #19]
 800d5ce:	f8c3 0017 	str.w	r0, [r3, #23]
 800d5d2:	f8c3 101b 	str.w	r1, [r3, #27]
 800d5d6:	f8b2 246e 	ldrh.w	r2, [r2, #1134]	; 0x46e
 800d5da:	f8a3 201f 	strh.w	r2, [r3, #31]
							break;
 800d5de:	e4f7      	b.n	800cfd0 <sendGSMCommand+0x20c>
						memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 800d5e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	f203 4052 	addw	r0, r3, #1106	; 0x452
 800d5ea:	f005 fc79 	bl	8012ee0 <memset>
 800d5ee:	e506      	b.n	800cffe <sendGSMCommand+0x23a>
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800d5f0:	4826      	ldr	r0, [pc, #152]	; (800d68c <sendGSMCommand+0x8c8>)
 800d5f2:	2500      	movs	r5, #0
 800d5f4:	f8c0 5e38 	str.w	r5, [r0, #3640]	; 0xe38
					gsmInstance.enmGSMCommandResponseState = enmGSM_CMDSEND;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f880 3e3c 	strb.w	r3, [r0, #3644]	; 0xe3c
					memcpy(gsmInstance.agsmCommandResponse[gsmInstance.enmGSMCommand], (char *)&gsmInstance.as8GSM_Response_Buff, 30);
 800d5fe:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	33c0      	adds	r3, #192	; 0xc0
 800d606:	4403      	add	r3, r0
 800d608:	f8d0 4452 	ldr.w	r4, [r0, #1106]	; 0x452
 800d60c:	f8d0 1456 	ldr.w	r1, [r0, #1110]	; 0x456
 800d610:	f8d0 245a 	ldr.w	r2, [r0, #1114]	; 0x45a
 800d614:	f8d0 645e 	ldr.w	r6, [r0, #1118]	; 0x45e
 800d618:	f8c3 4003 	str.w	r4, [r3, #3]
 800d61c:	f8c3 1007 	str.w	r1, [r3, #7]
 800d620:	f8c3 200b 	str.w	r2, [r3, #11]
 800d624:	f8c3 600f 	str.w	r6, [r3, #15]
 800d628:	f8d0 4462 	ldr.w	r4, [r0, #1122]	; 0x462
 800d62c:	f8d0 1466 	ldr.w	r1, [r0, #1126]	; 0x466
 800d630:	f8d0 246a 	ldr.w	r2, [r0, #1130]	; 0x46a
 800d634:	f8c3 4013 	str.w	r4, [r3, #19]
 800d638:	f8c3 1017 	str.w	r1, [r3, #23]
 800d63c:	f8c3 201b 	str.w	r2, [r3, #27]
 800d640:	f8b0 246e 	ldrh.w	r2, [r0, #1134]	; 0x46e
 800d644:	f8a3 201f 	strh.w	r2, [r3, #31]
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 800d648:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d64c:	4629      	mov	r1, r5
 800d64e:	f200 4052 	addw	r0, r0, #1106	; 0x452
 800d652:	f005 fc45 	bl	8012ee0 <memset>
					u8GSMCharRcv = 0;
 800d656:	4b17      	ldr	r3, [pc, #92]	; (800d6b4 <sendGSMCommand+0x8f0>)
 800d658:	601d      	str	r5, [r3, #0]
 800d65a:	e464      	b.n	800cf26 <sendGSMCommand+0x162>
						gu8CheckSMS = TRUE;
 800d65c:	4b0c      	ldr	r3, [pc, #48]	; (800d690 <sendGSMCommand+0x8cc>)
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800d664:	e457      	b.n	800cf16 <sendGSMCommand+0x152>
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800d666:	4c09      	ldr	r4, [pc, #36]	; (800d68c <sendGSMCommand+0x8c8>)
 800d668:	2301      	movs	r3, #1
 800d66a:	f884 3e3d 	strb.w	r3, [r4, #3645]	; 0xe3d
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800d66e:	2100      	movs	r1, #0
 800d670:	f884 1e3c 	strb.w	r1, [r4, #3644]	; 0xe3c
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 800d674:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d678:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800d67c:	f005 fc30 	bl	8012ee0 <memset>
					gsmInstance.u32GSMTimer = ONE_SEC;
 800d680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d684:	f8c4 3e20 	str.w	r3, [r4, #3616]	; 0xe20
 800d688:	e447      	b.n	800cf1a <sendGSMCommand+0x156>
 800d68a:	bf00      	nop
 800d68c:	2000c164 	.word	0x2000c164
 800d690:	20003504 	.word	0x20003504
 800d694:	0801be28 	.word	0x0801be28
 800d698:	2000c5b6 	.word	0x2000c5b6
 800d69c:	20004440 	.word	0x20004440
 800d6a0:	0002bf20 	.word	0x0002bf20
 800d6a4:	2000083c 	.word	0x2000083c
 800d6a8:	0801bd58 	.word	0x0801bd58
 800d6ac:	2000b994 	.word	0x2000b994
 800d6b0:	40020c00 	.word	0x40020c00
 800d6b4:	20004260 	.word	0x20004260

0800d6b8 <operateGSMSIM868>:
	if(gsmInstance.u32GSMTimer != 0)
 800d6b8:	4b9b      	ldr	r3, [pc, #620]	; (800d928 <operateGSMSIM868+0x270>)
 800d6ba:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f040 8131 	bne.w	800d926 <operateGSMSIM868+0x26e>
{
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
	switch(gsmInstance.enmcurrentTask)
 800d6ca:	4b97      	ldr	r3, [pc, #604]	; (800d928 <operateGSMSIM868+0x270>)
 800d6cc:	f893 3e3e 	ldrb.w	r3, [r3, #3646]	; 0xe3e
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b09      	cmp	r3, #9
 800d6d4:	f200 8124 	bhi.w	800d920 <operateGSMSIM868+0x268>
 800d6d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d6dc:	0030000a 	.word	0x0030000a
 800d6e0:	00c400b2 	.word	0x00c400b2
 800d6e4:	00940076 	.word	0x00940076
 800d6e8:	010a0064 	.word	0x010a0064
 800d6ec:	011a010d 	.word	0x011a010d
			if(gsmInstance.enmGSMPwrState == enmGSM_PWRNOTSTARTED)
 800d6f0:	4b8d      	ldr	r3, [pc, #564]	; (800d928 <operateGSMSIM868+0x270>)
 800d6f2:	f893 3e40 	ldrb.w	r3, [r3, #3648]	; 0xe40
 800d6f6:	b19b      	cbz	r3, 800d720 <operateGSMSIM868+0x68>
			else if(gsmInstance.enmGSMPwrState == enmGSM_PWRSTARTED)
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	f040 80ad 	bne.w	800d858 <operateGSMSIM868+0x1a0>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 800d6fe:	2200      	movs	r2, #0
 800d700:	2180      	movs	r1, #128	; 0x80
 800d702:	488a      	ldr	r0, [pc, #552]	; (800d92c <operateGSMSIM868+0x274>)
 800d704:	f7f5 fb68 	bl	8002dd8 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = TWO_SEC;
 800d708:	4b87      	ldr	r3, [pc, #540]	; (800d928 <operateGSMSIM868+0x270>)
 800d70a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d70e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
				gsmInstance.enmcurrentTask = enmGSMTASK_INITMODULE;
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.enmGSMPwrState = enmGSM_PWRCOMPLETED;
 800d718:	2202      	movs	r2, #2
 800d71a:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 800d71e:	e09b      	b.n	800d858 <operateGSMSIM868+0x1a0>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_SET);
 800d720:	2201      	movs	r2, #1
 800d722:	2180      	movs	r1, #128	; 0x80
 800d724:	4881      	ldr	r0, [pc, #516]	; (800d92c <operateGSMSIM868+0x274>)
 800d726:	f7f5 fb57 	bl	8002dd8 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = FIVE_SEC;
 800d72a:	4b7f      	ldr	r3, [pc, #508]	; (800d928 <operateGSMSIM868+0x270>)
 800d72c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d730:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
				gsmInstance.enmGSMPwrState = enmGSM_PWRSTARTED;
 800d734:	2201      	movs	r2, #1
 800d736:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 800d73a:	e08d      	b.n	800d858 <operateGSMSIM868+0x1a0>
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDTIMEOUT)
 800d73c:	4b7a      	ldr	r3, [pc, #488]	; (800d928 <operateGSMSIM868+0x270>)
 800d73e:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b05      	cmp	r3, #5
 800d746:	d011      	beq.n	800d76c <operateGSMSIM868+0xb4>
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATACOMMAND)
 800d748:	4b77      	ldr	r3, [pc, #476]	; (800d928 <operateGSMSIM868+0x270>)
 800d74a:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800d74e:	2b14      	cmp	r3, #20
 800d750:	d11b      	bne.n	800d78a <operateGSMSIM868+0xd2>
					if(gu8CheckSMS == TRUE)
 800d752:	4b77      	ldr	r3, [pc, #476]	; (800d930 <operateGSMSIM868+0x278>)
 800d754:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d00a      	beq.n	800d772 <operateGSMSIM868+0xba>
						gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800d75c:	4b72      	ldr	r3, [pc, #456]	; (800d928 <operateGSMSIM868+0x270>)
 800d75e:	2217      	movs	r2, #23
 800d760:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800d764:	2202      	movs	r2, #2
 800d766:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
 800d76a:	e075      	b.n	800d858 <operateGSMSIM868+0x1a0>
				initGSMSIM868();
 800d76c:	f7fe fefe 	bl	800c56c <initGSMSIM868>
 800d770:	e072      	b.n	800d858 <operateGSMSIM868+0x1a0>
						gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d772:	4b6d      	ldr	r3, [pc, #436]	; (800d928 <operateGSMSIM868+0x270>)
 800d774:	2203      	movs	r2, #3
 800d776:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
						gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d77a:	2214      	movs	r2, #20
 800d77c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
						gu8CheckSMS = FALSE;
 800d780:	4b6b      	ldr	r3, [pc, #428]	; (800d930 <operateGSMSIM868+0x278>)
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800d788:	e066      	b.n	800d858 <operateGSMSIM868+0x1a0>
					sendGSMCommand(gsmInstance);
 800d78a:	4c67      	ldr	r4, [pc, #412]	; (800d928 <operateGSMSIM868+0x270>)
 800d78c:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d790:	f104 0110 	add.w	r1, r4, #16
 800d794:	4668      	mov	r0, sp
 800d796:	f005 fb95 	bl	8012ec4 <memcpy>
 800d79a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d79e:	f7ff fb11 	bl	800cdc4 <sendGSMCommand>
 800d7a2:	e059      	b.n	800d858 <operateGSMSIM868+0x1a0>
			if(gsmInstance.u32GSMHeartbeatTimer == 0)
 800d7a4:	4b60      	ldr	r3, [pc, #384]	; (800d928 <operateGSMSIM868+0x270>)
 800d7a6:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	; 0xe2c
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d154      	bne.n	800d858 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800d7ae:	4c5e      	ldr	r4, [pc, #376]	; (800d928 <operateGSMSIM868+0x270>)
 800d7b0:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d7b4:	f104 0110 	add.w	r1, r4, #16
 800d7b8:	4668      	mov	r0, sp
 800d7ba:	f005 fb83 	bl	8012ec4 <memcpy>
 800d7be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d7c2:	f7ff faff 	bl	800cdc4 <sendGSMCommand>
 800d7c6:	e047      	b.n	800d858 <operateGSMSIM868+0x1a0>
			if(gu8ReadSMS == TRUE)
 800d7c8:	4b59      	ldr	r3, [pc, #356]	; (800d930 <operateGSMSIM868+0x278>)
 800d7ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d00b      	beq.n	800d7ea <operateGSMSIM868+0x132>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800d7d2:	4b55      	ldr	r3, [pc, #340]	; (800d928 <operateGSMSIM868+0x270>)
 800d7d4:	2217      	movs	r2, #23
 800d7d6:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800d7da:	2202      	movs	r2, #2
 800d7dc:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.u32GSMTimer = TWO_SEC;
 800d7e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d7e4:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800d7e8:	e036      	b.n	800d858 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800d7ea:	4c4f      	ldr	r4, [pc, #316]	; (800d928 <operateGSMSIM868+0x270>)
 800d7ec:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d7f0:	f104 0110 	add.w	r1, r4, #16
 800d7f4:	4668      	mov	r0, sp
 800d7f6:	f005 fb65 	bl	8012ec4 <memcpy>
 800d7fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d7fe:	f7ff fae1 	bl	800cdc4 <sendGSMCommand>
 800d802:	e029      	b.n	800d858 <operateGSMSIM868+0x1a0>
			if(gu8SendSMS == TRUE)
 800d804:	4b4a      	ldr	r3, [pc, #296]	; (800d930 <operateGSMSIM868+0x278>)
 800d806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d00b      	beq.n	800d826 <operateGSMSIM868+0x16e>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800d80e:	4b46      	ldr	r3, [pc, #280]	; (800d928 <operateGSMSIM868+0x270>)
 800d810:	2217      	movs	r2, #23
 800d812:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800d816:	2202      	movs	r2, #2
 800d818:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.u32GSMTimer = TWO_SEC;
 800d81c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d820:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 800d824:	e018      	b.n	800d858 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800d826:	4c40      	ldr	r4, [pc, #256]	; (800d928 <operateGSMSIM868+0x270>)
 800d828:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d82c:	f104 0110 	add.w	r1, r4, #16
 800d830:	4668      	mov	r0, sp
 800d832:	f005 fb47 	bl	8012ec4 <memcpy>
 800d836:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d83a:	f7ff fac3 	bl	800cdc4 <sendGSMCommand>
 800d83e:	e00b      	b.n	800d858 <operateGSMSIM868+0x1a0>
			sendGSMCommand(gsmInstance);
 800d840:	4c39      	ldr	r4, [pc, #228]	; (800d928 <operateGSMSIM868+0x270>)
 800d842:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d846:	f104 0110 	add.w	r1, r4, #16
 800d84a:	4668      	mov	r0, sp
 800d84c:	f005 fb3a 	bl	8012ec4 <memcpy>
 800d850:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d854:	f7ff fab6 	bl	800cdc4 <sendGSMCommand>
	gu32GSMHangTimer = THREE_MIN;
 800d858:	4b36      	ldr	r3, [pc, #216]	; (800d934 <operateGSMSIM868+0x27c>)
 800d85a:	4a37      	ldr	r2, [pc, #220]	; (800d938 <operateGSMSIM868+0x280>)
 800d85c:	601a      	str	r2, [r3, #0]
}
 800d85e:	f50d 5d8b 	add.w	sp, sp, #4448	; 0x1160
 800d862:	bd10      	pop	{r4, pc}
			if((isQueueEmpty(&gsmPayload) == FALSE )&& (gsmPayload.data[gsmPayload.tail] != NULL))
 800d864:	4835      	ldr	r0, [pc, #212]	; (800d93c <operateGSMSIM868+0x284>)
 800d866:	f002 f9d3 	bl	800fc10 <isQueueEmpty>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d138      	bne.n	800d8e0 <operateGSMSIM868+0x228>
 800d86e:	4a33      	ldr	r2, [pc, #204]	; (800d93c <operateGSMSIM868+0x284>)
 800d870:	6853      	ldr	r3, [r2, #4]
 800d872:	3302      	adds	r3, #2
 800d874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d878:	b393      	cbz	r3, 800d8e0 <operateGSMSIM868+0x228>
				if(gu32GSMConfigCheckTimer == 0)
 800d87a:	4b31      	ldr	r3, [pc, #196]	; (800d940 <operateGSMSIM868+0x288>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	b933      	cbnz	r3, 800d88e <operateGSMSIM868+0x1d6>
					gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800d880:	4b29      	ldr	r3, [pc, #164]	; (800d928 <operateGSMSIM868+0x270>)
 800d882:	2217      	movs	r2, #23
 800d884:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
					gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800d888:	2202      	movs	r2, #2
 800d88a:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATACOMMAND))
 800d88e:	4b28      	ldr	r3, [pc, #160]	; (800d930 <operateGSMSIM868+0x278>)
 800d890:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d894:	b923      	cbnz	r3, 800d8a0 <operateGSMSIM868+0x1e8>
 800d896:	4a24      	ldr	r2, [pc, #144]	; (800d928 <operateGSMSIM868+0x270>)
 800d898:	f892 2e3f 	ldrb.w	r2, [r2, #3647]	; 0xe3f
 800d89c:	2a14      	cmp	r2, #20
 800d89e:	d013      	beq.n	800d8c8 <operateGSMSIM868+0x210>
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d104      	bne.n	800d8ae <operateGSMSIM868+0x1f6>
 800d8a4:	4b20      	ldr	r3, [pc, #128]	; (800d928 <operateGSMSIM868+0x270>)
 800d8a6:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800d8aa:	2b15      	cmp	r3, #21
 800d8ac:	d013      	beq.n	800d8d6 <operateGSMSIM868+0x21e>
					sendGSMCommand(gsmInstance);
 800d8ae:	4c1e      	ldr	r4, [pc, #120]	; (800d928 <operateGSMSIM868+0x270>)
 800d8b0:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d8b4:	f104 0110 	add.w	r1, r4, #16
 800d8b8:	4668      	mov	r0, sp
 800d8ba:	f005 fb03 	bl	8012ec4 <memcpy>
 800d8be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d8c2:	f7ff fa7f 	bl	800cdc4 <sendGSMCommand>
 800d8c6:	e7c7      	b.n	800d858 <operateGSMSIM868+0x1a0>
					updateHttpDataLength();
 800d8c8:	f7fe ff38 	bl	800c73c <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 800d8cc:	4b18      	ldr	r3, [pc, #96]	; (800d930 <operateGSMSIM868+0x278>)
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800d8d4:	e7c0      	b.n	800d858 <operateGSMSIM868+0x1a0>
					gu8HttpPayloadFlag = 0;
 800d8d6:	4b16      	ldr	r3, [pc, #88]	; (800d930 <operateGSMSIM868+0x278>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800d8de:	e7bb      	b.n	800d858 <operateGSMSIM868+0x1a0>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSINFO;
 800d8e0:	4b11      	ldr	r3, [pc, #68]	; (800d928 <operateGSMSIM868+0x270>)
 800d8e2:	2217      	movs	r2, #23
 800d8e4:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
 800d8ee:	e7b3      	b.n	800d858 <operateGSMSIM868+0x1a0>
			initGSMSIM868();
 800d8f0:	f7fe fe3c 	bl	800c56c <initGSMSIM868>
			break;
 800d8f4:	e7b0      	b.n	800d858 <operateGSMSIM868+0x1a0>
				sendGSMCommand(gsmInstance);
 800d8f6:	4c0c      	ldr	r4, [pc, #48]	; (800d928 <operateGSMSIM868+0x270>)
 800d8f8:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800d8fc:	f104 0110 	add.w	r1, r4, #16
 800d900:	4668      	mov	r0, sp
 800d902:	f005 fadf 	bl	8012ec4 <memcpy>
 800d906:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d90a:	f7ff fa5b 	bl	800cdc4 <sendGSMCommand>
			break;
 800d90e:	e7a3      	b.n	800d858 <operateGSMSIM868+0x1a0>
			gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800d910:	4b05      	ldr	r3, [pc, #20]	; (800d928 <operateGSMSIM868+0x270>)
 800d912:	2203      	movs	r2, #3
 800d914:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
			gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
 800d918:	2214      	movs	r2, #20
 800d91a:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
			break;
 800d91e:	e79b      	b.n	800d858 <operateGSMSIM868+0x1a0>
			initGSMSIM868();
 800d920:	f7fe fe24 	bl	800c56c <initGSMSIM868>
			break;
 800d924:	e798      	b.n	800d858 <operateGSMSIM868+0x1a0>
 800d926:	4770      	bx	lr
 800d928:	2000c164 	.word	0x2000c164
 800d92c:	40020c00 	.word	0x40020c00
 800d930:	20003504 	.word	0x20003504
 800d934:	20004440 	.word	0x20004440
 800d938:	0002bf20 	.word	0x0002bf20
 800d93c:	2000d2d4 	.word	0x2000d2d4
 800d940:	200029b0 	.word	0x200029b0

0800d944 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800d944:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800d946:	4813      	ldr	r0, [pc, #76]	; (800d994 <MX_I2C1_Init+0x50>)
 800d948:	4b13      	ldr	r3, [pc, #76]	; (800d998 <MX_I2C1_Init+0x54>)
 800d94a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d94c:	4b13      	ldr	r3, [pc, #76]	; (800d99c <MX_I2C1_Init+0x58>)
 800d94e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d950:	2300      	movs	r3, #0
 800d952:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d954:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d95a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d95c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d95e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d960:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d962:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d964:	f7f5 fbe8 	bl	8003138 <HAL_I2C_Init>
 800d968:	b950      	cbnz	r0, 800d980 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d96a:	2100      	movs	r1, #0
 800d96c:	4809      	ldr	r0, [pc, #36]	; (800d994 <MX_I2C1_Init+0x50>)
 800d96e:	f7f6 fb2d 	bl	8003fcc <HAL_I2CEx_ConfigAnalogFilter>
 800d972:	b940      	cbnz	r0, 800d986 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800d974:	2100      	movs	r1, #0
 800d976:	4807      	ldr	r0, [pc, #28]	; (800d994 <MX_I2C1_Init+0x50>)
 800d978:	f7f6 fb4a 	bl	8004010 <HAL_I2CEx_ConfigDigitalFilter>
 800d97c:	b930      	cbnz	r0, 800d98c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 800d97e:	bd08      	pop	{r3, pc}
    Error_Handler();
 800d980:	f000 fbd4 	bl	800e12c <Error_Handler>
 800d984:	e7f1      	b.n	800d96a <MX_I2C1_Init+0x26>
    Error_Handler();
 800d986:	f000 fbd1 	bl	800e12c <Error_Handler>
 800d98a:	e7f3      	b.n	800d974 <MX_I2C1_Init+0x30>
    Error_Handler();
 800d98c:	f000 fbce 	bl	800e12c <Error_Handler>
}
 800d990:	e7f5      	b.n	800d97e <MX_I2C1_Init+0x3a>
 800d992:	bf00      	nop
 800d994:	2000d304 	.word	0x2000d304
 800d998:	40005400 	.word	0x40005400
 800d99c:	000186a0 	.word	0x000186a0

0800d9a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800d9a0:	b530      	push	{r4, r5, lr}
 800d9a2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	9303      	str	r3, [sp, #12]
 800d9a8:	9304      	str	r3, [sp, #16]
 800d9aa:	9305      	str	r3, [sp, #20]
 800d9ac:	9306      	str	r3, [sp, #24]
 800d9ae:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800d9b0:	6802      	ldr	r2, [r0, #0]
 800d9b2:	4b1d      	ldr	r3, [pc, #116]	; (800da28 <HAL_I2C_MspInit+0x88>)
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d001      	beq.n	800d9bc <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800d9b8:	b009      	add	sp, #36	; 0x24
 800d9ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9bc:	2400      	movs	r4, #0
 800d9be:	9401      	str	r4, [sp, #4]
 800d9c0:	4d1a      	ldr	r5, [pc, #104]	; (800da2c <HAL_I2C_MspInit+0x8c>)
 800d9c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d9c4:	f043 0302 	orr.w	r3, r3, #2
 800d9c8:	632b      	str	r3, [r5, #48]	; 0x30
 800d9ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d9cc:	f003 0302 	and.w	r3, r3, #2
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d9d4:	23c0      	movs	r3, #192	; 0xc0
 800d9d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d9d8:	2312      	movs	r3, #18
 800d9da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9e8:	a903      	add	r1, sp, #12
 800d9ea:	4811      	ldr	r0, [pc, #68]	; (800da30 <HAL_I2C_MspInit+0x90>)
 800d9ec:	f7f5 f902 	bl	8002bf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d9f0:	9402      	str	r4, [sp, #8]
 800d9f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800d9f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9f8:	642b      	str	r3, [r5, #64]	; 0x40
 800d9fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800d9fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da00:	9302      	str	r3, [sp, #8]
 800da02:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800da04:	4622      	mov	r2, r4
 800da06:	4621      	mov	r1, r4
 800da08:	201f      	movs	r0, #31
 800da0a:	f7f3 ff9f 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800da0e:	201f      	movs	r0, #31
 800da10:	f7f3 ffd0 	bl	80019b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800da14:	4622      	mov	r2, r4
 800da16:	4621      	mov	r1, r4
 800da18:	2020      	movs	r0, #32
 800da1a:	f7f3 ff97 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800da1e:	2020      	movs	r0, #32
 800da20:	f7f3 ffc8 	bl	80019b4 <HAL_NVIC_EnableIRQ>
}
 800da24:	e7c8      	b.n	800d9b8 <HAL_I2C_MspInit+0x18>
 800da26:	bf00      	nop
 800da28:	40005400 	.word	0x40005400
 800da2c:	40023800 	.word	0x40023800
 800da30:	40020400 	.word	0x40020400

0800da34 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800da34:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
 800da36:	4807      	ldr	r0, [pc, #28]	; (800da54 <MX_IWDG_Init+0x20>)
 800da38:	4b07      	ldr	r3, [pc, #28]	; (800da58 <MX_IWDG_Init+0x24>)
 800da3a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800da3c:	2306      	movs	r3, #6
 800da3e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 800da40:	f640 73ff 	movw	r3, #4095	; 0xfff
 800da44:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800da46:	f7f6 fb04 	bl	8004052 <HAL_IWDG_Init>
 800da4a:	b900      	cbnz	r0, 800da4e <MX_IWDG_Init+0x1a>
  {
    Error_Handler();
  }

}
 800da4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800da4e:	f000 fb6d 	bl	800e12c <Error_Handler>
}
 800da52:	e7fb      	b.n	800da4c <MX_IWDG_Init+0x18>
 800da54:	2000d358 	.word	0x2000d358
 800da58:	40003000 	.word	0x40003000

0800da5c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800da5c:	b510      	push	{r4, lr}
 800da5e:	b084      	sub	sp, #16
//  GATEWAY_ADDRESS[1] = 168;
//  GATEWAY_ADDRESS[2] = 0;
//  GATEWAY_ADDRESS[3] = 1;

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800da60:	f7f8 f929 	bl	8005cb6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800da64:	4b30      	ldr	r3, [pc, #192]	; (800db28 <MX_LWIP_Init+0xcc>)
 800da66:	7819      	ldrb	r1, [r3, #0]
 800da68:	785a      	ldrb	r2, [r3, #1]
 800da6a:	0412      	lsls	r2, r2, #16
 800da6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800da70:	7899      	ldrb	r1, [r3, #2]
 800da72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800da76:	78d8      	ldrb	r0, [r3, #3]
 800da78:	4302      	orrs	r2, r0
 800da7a:	0211      	lsls	r1, r2, #8
 800da7c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800da80:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800da84:	0a10      	lsrs	r0, r2, #8
 800da86:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800da8a:	4301      	orrs	r1, r0
 800da8c:	ea41 6212 	orr.w	r2, r1, r2, lsr #24
 800da90:	4926      	ldr	r1, [pc, #152]	; (800db2c <MX_LWIP_Init+0xd0>)
 800da92:	600a      	str	r2, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800da94:	7918      	ldrb	r0, [r3, #4]
 800da96:	795a      	ldrb	r2, [r3, #5]
 800da98:	0412      	lsls	r2, r2, #16
 800da9a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800da9e:	7998      	ldrb	r0, [r3, #6]
 800daa0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800daa4:	79dc      	ldrb	r4, [r3, #7]
 800daa6:	4322      	orrs	r2, r4
 800daa8:	0210      	lsls	r0, r2, #8
 800daaa:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800daae:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800dab2:	0a14      	lsrs	r4, r2, #8
 800dab4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800dab8:	4320      	orrs	r0, r4
 800daba:	ea40 6012 	orr.w	r0, r0, r2, lsr #24
 800dabe:	4a1c      	ldr	r2, [pc, #112]	; (800db30 <MX_LWIP_Init+0xd4>)
 800dac0:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dac2:	7a1c      	ldrb	r4, [r3, #8]
 800dac4:	7a58      	ldrb	r0, [r3, #9]
 800dac6:	0400      	lsls	r0, r0, #16
 800dac8:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800dacc:	7a9c      	ldrb	r4, [r3, #10]
 800dace:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800dad2:	7adc      	ldrb	r4, [r3, #11]
 800dad4:	ea40 0304 	orr.w	r3, r0, r4
 800dad8:	0218      	lsls	r0, r3, #8
 800dada:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800dade:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800dae2:	0a1c      	lsrs	r4, r3, #8
 800dae4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800dae8:	4320      	orrs	r0, r4
 800daea:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800daee:	4b11      	ldr	r3, [pc, #68]	; (800db34 <MX_LWIP_Init+0xd8>)
 800daf0:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800daf2:	4c11      	ldr	r4, [pc, #68]	; (800db38 <MX_LWIP_Init+0xdc>)
 800daf4:	4811      	ldr	r0, [pc, #68]	; (800db3c <MX_LWIP_Init+0xe0>)
 800daf6:	9002      	str	r0, [sp, #8]
 800daf8:	4811      	ldr	r0, [pc, #68]	; (800db40 <MX_LWIP_Init+0xe4>)
 800dafa:	9001      	str	r0, [sp, #4]
 800dafc:	2000      	movs	r0, #0
 800dafe:	9000      	str	r0, [sp, #0]
 800db00:	4620      	mov	r0, r4
 800db02:	f7f8 fbcb 	bl	800629c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800db06:	4620      	mov	r0, r4
 800db08:	f7f8 fc0a 	bl	8006320 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800db0c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800db10:	f013 0f04 	tst.w	r3, #4
 800db14:	d004      	beq.n	800db20 <MX_LWIP_Init+0xc4>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800db16:	4620      	mov	r0, r4
 800db18:	f7f8 fc08 	bl	800632c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800db1c:	b004      	add	sp, #16
 800db1e:	bd10      	pop	{r4, pc}
    netif_set_down(&gnetif);
 800db20:	4805      	ldr	r0, [pc, #20]	; (800db38 <MX_LWIP_Init+0xdc>)
 800db22:	f7f8 fc15 	bl	8006350 <netif_set_down>
}
 800db26:	e7f9      	b.n	800db1c <MX_LWIP_Init+0xc0>
 800db28:	20000c3c 	.word	0x20000c3c
 800db2c:	2000d394 	.word	0x2000d394
 800db30:	2000d398 	.word	0x2000d398
 800db34:	2000d39c 	.word	0x2000d39c
 800db38:	2000d364 	.word	0x2000d364
 800db3c:	0800bd1d 	.word	0x0800bd1d
 800db40:	0800c3e1 	.word	0x0800c3e1

0800db44 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800db44:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800db46:	4803      	ldr	r0, [pc, #12]	; (800db54 <MX_LWIP_Process+0x10>)
 800db48:	f7fe fc3a 	bl	800c3c0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800db4c:	f7fc fbe2 	bl	800a314 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800db50:	bd08      	pop	{r3, pc}
 800db52:	bf00      	nop
 800db54:	2000d364 	.word	0x2000d364

0800db58 <SystemClock_Config_Ext>:
/**
  * @brief System Clock Configuration on External Crystal
  * @retval None
  */
void SystemClock_Config_Ext(void)
{
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800db5c:	2530      	movs	r5, #48	; 0x30
 800db5e:	462a      	mov	r2, r5
 800db60:	2100      	movs	r1, #0
 800db62:	a814      	add	r0, sp, #80	; 0x50
 800db64:	f005 f9bc 	bl	8012ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800db68:	2400      	movs	r4, #0
 800db6a:	940f      	str	r4, [sp, #60]	; 0x3c
 800db6c:	9410      	str	r4, [sp, #64]	; 0x40
 800db6e:	9411      	str	r4, [sp, #68]	; 0x44
 800db70:	9412      	str	r4, [sp, #72]	; 0x48
 800db72:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db74:	462a      	mov	r2, r5
 800db76:	4621      	mov	r1, r4
 800db78:	a803      	add	r0, sp, #12
 800db7a:	f005 f9b1 	bl	8012ee0 <memset>



  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800db7e:	9401      	str	r4, [sp, #4]
 800db80:	4b22      	ldr	r3, [pc, #136]	; (800dc0c <SystemClock_Config_Ext+0xb4>)
 800db82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800db88:	641a      	str	r2, [r3, #64]	; 0x40
 800db8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800db94:	9402      	str	r4, [sp, #8]
 800db96:	4b1e      	ldr	r3, [pc, #120]	; (800dc10 <SystemClock_Config_Ext+0xb8>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dba6:	9302      	str	r3, [sp, #8]
 800dba8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800dbaa:	2309      	movs	r3, #9
 800dbac:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dbae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dbb2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dbb8:	2502      	movs	r5, #2
 800dbba:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dbbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dbc0:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800dbc2:	260f      	movs	r6, #15
 800dbc4:	961c      	str	r6, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 216;
 800dbc6:	23d8      	movs	r3, #216	; 0xd8
 800dbc8:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dbca:	951e      	str	r5, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800dbcc:	2304      	movs	r3, #4
 800dbce:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dbd0:	a814      	add	r0, sp, #80	; 0x50
 800dbd2:	f7f6 faa9 	bl	8004128 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800dbd6:	f7f6 fa67 	bl	80040a8 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dbda:	960f      	str	r6, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dbdc:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dbde:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dbe0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800dbe4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dbe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbea:	9313      	str	r3, [sp, #76]	; 0x4c



  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dbec:	2105      	movs	r1, #5
 800dbee:	a80f      	add	r0, sp, #60	; 0x3c
 800dbf0:	f7f6 fcbc 	bl	800456c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800dbf4:	2320      	movs	r3, #32
 800dbf6:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800dbf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbfc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dbfe:	a803      	add	r0, sp, #12
 800dc00:	f7f6 fd78 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800dc04:	f7f6 fc5c 	bl	80044c0 <HAL_RCC_EnableCSS>
}
 800dc08:	b020      	add	sp, #128	; 0x80
 800dc0a:	bd70      	pop	{r4, r5, r6, pc}
 800dc0c:	40023800 	.word	0x40023800
 800dc10:	40007000 	.word	0x40007000

0800dc14 <main>:
{
 800dc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc18:	b082      	sub	sp, #8
  HAL_Init();
 800dc1a:	f7f3 fa2b 	bl	8001074 <HAL_Init>
  SystemClock_Config_Ext();
 800dc1e:	f7ff ff9b 	bl	800db58 <SystemClock_Config_Ext>
  getLastKnownConfiguration();
 800dc22:	f002 ffdb 	bl	8010bdc <getLastKnownConfiguration>
  MX_GPIO_Init();
 800dc26:	f7fe fc03 	bl	800c430 <MX_GPIO_Init>
  MX_DMA_Init();
 800dc2a:	f7fe f9f3 	bl	800c014 <MX_DMA_Init>
  MX_IWDG_Init();
 800dc2e:	f7ff ff01 	bl	800da34 <MX_IWDG_Init>
  MX_TIM7_Init();
 800dc32:	f004 f831 	bl	8011c98 <MX_TIM7_Init>
  MX_UART4_Init();
 800dc36:	f004 f877 	bl	8011d28 <MX_UART4_Init>
  MX_RTC_Init();
 800dc3a:	f003 f9c9 	bl	8010fd0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800dc3e:	f004 f901 	bl	8011e44 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800dc42:	f7fe f8f7 	bl	800be34 <MX_ADC1_Init>
  MX_LWIP_Init();
 800dc46:	f7ff ff09 	bl	800da5c <MX_LWIP_Init>
  MX_I2C1_Init();
 800dc4a:	f7ff fe7b 	bl	800d944 <MX_I2C1_Init>
  MX_SPI1_Init();
 800dc4e:	f003 fe63 	bl	8011918 <MX_SPI1_Init>
  HAL_ETH_WritePHYRegister(&heth, PHY_AUTONEGOTIATION, 1);
 800dc52:	2201      	movs	r2, #1
 800dc54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc58:	48a8      	ldr	r0, [pc, #672]	; (800defc <main+0x2e8>)
 800dc5a:	f7f4 fbd0 	bl	80023fe <HAL_ETH_WritePHYRegister>
  updateDeviceSignature();
 800dc5e:	f7fe f98d 	bl	800bf7c <updateDeviceSignature>
	HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 800dc62:	4ca7      	ldr	r4, [pc, #668]	; (800df00 <main+0x2ec>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7f5 f8b4 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET);
 800dc70:	2201      	movs	r2, #1
 800dc72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc76:	4620      	mov	r0, r4
 800dc78:	f7f5 f8ae 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800dc7c:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 800dc80:	2200      	movs	r2, #0
 800dc82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc86:	4620      	mov	r0, r4
 800dc88:	f7f5 f8a6 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2140      	movs	r1, #64	; 0x40
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7f5 f8a1 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800dc96:	2200      	movs	r2, #0
 800dc98:	2120      	movs	r1, #32
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7f5 f89c 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 800dca0:	2200      	movs	r2, #0
 800dca2:	2180      	movs	r1, #128	; 0x80
 800dca4:	4620      	mov	r0, r4
 800dca6:	f7f5 f897 	bl	8002dd8 <HAL_GPIO_WritePin>
	setupModbus();
 800dcaa:	f000 fef7 	bl	800ea9c <setupModbus>
	setupModbusRTU();
 800dcae:	f000 fd57 	bl	800e760 <setupModbusRTU>
	if(gu32UploadTimeSupply == 0)
 800dcb2:	4b94      	ldr	r3, [pc, #592]	; (800df04 <main+0x2f0>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	b91b      	cbnz	r3, 800dcc0 <main+0xac>
		gu32UploadTimeSupply = ONE_MIN;//THIRTY_SEC;//TWO_MIN;
 800dcb8:	4b92      	ldr	r3, [pc, #584]	; (800df04 <main+0x2f0>)
 800dcba:	f64e 2260 	movw	r2, #60000	; 0xea60
 800dcbe:	601a      	str	r2, [r3, #0]
	if(gu32UploadTimeBatt == 0)
 800dcc0:	4b91      	ldr	r3, [pc, #580]	; (800df08 <main+0x2f4>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	b913      	cbnz	r3, 800dccc <main+0xb8>
		gu32UploadTimeBatt = FIVE_MIN;
 800dcc6:	4b90      	ldr	r3, [pc, #576]	; (800df08 <main+0x2f4>)
 800dcc8:	4a90      	ldr	r2, [pc, #576]	; (800df0c <main+0x2f8>)
 800dcca:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800dccc:	4a90      	ldr	r2, [pc, #576]	; (800df10 <main+0x2fc>)
 800dcce:	68d3      	ldr	r3, [r2, #12]
 800dcd0:	f043 0320 	orr.w	r3, r3, #32
 800dcd4:	60d3      	str	r3, [r2, #12]
 800dcd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dcda:	68d3      	ldr	r3, [r2, #12]
 800dcdc:	f043 0320 	orr.w	r3, r3, #32
 800dce0:	60d3      	str	r3, [r2, #12]
	if(HAL_TIM_Base_Start_IT(&htim7)!= HAL_OK)
 800dce2:	488c      	ldr	r0, [pc, #560]	; (800df14 <main+0x300>)
 800dce4:	f7f7 fca6 	bl	8005634 <HAL_TIM_Base_Start_IT>
	updateNetworkAPN();
 800dce8:	f7fe ffa6 	bl	800cc38 <updateNetworkAPN>
	gu32TempPayloadQueueEnqueue = ONE_MIN;
 800dcec:	4b8a      	ldr	r3, [pc, #552]	; (800df18 <main+0x304>)
 800dcee:	f64e 2260 	movw	r2, #60000	; 0xea60
 800dcf2:	601a      	str	r2, [r3, #0]
	memset(gau8TempMBPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimit);
 800dcf4:	4b89      	ldr	r3, [pc, #548]	; (800df1c <main+0x308>)
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	4889      	ldr	r0, [pc, #548]	; (800df20 <main+0x30c>)
 800dcfc:	f005 f8f0 	bl	8012ee0 <memset>
	memset(gau8TempMBRTUPayloadString,0x00,sizeof(char) * gu32MBDataByteCounterLimitRTU);
 800dd00:	4b88      	ldr	r3, [pc, #544]	; (800df24 <main+0x310>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	2100      	movs	r1, #0
 800dd06:	4888      	ldr	r0, [pc, #544]	; (800df28 <main+0x314>)
 800dd08:	f005 f8ea 	bl	8012ee0 <memset>
	if(HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDRESS,292,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashReadMemLocAddress, 4) != HAL_OK)
 800dd0c:	2304      	movs	r3, #4
 800dd0e:	9301      	str	r3, [sp, #4]
 800dd10:	4b86      	ldr	r3, [pc, #536]	; (800df2c <main+0x318>)
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	2310      	movs	r3, #16
 800dd16:	f44f 7292 	mov.w	r2, #292	; 0x124
 800dd1a:	21a0      	movs	r1, #160	; 0xa0
 800dd1c:	4884      	ldr	r0, [pc, #528]	; (800df30 <main+0x31c>)
 800dd1e:	f7f5 fb51 	bl	80033c4 <HAL_I2C_Mem_Read_IT>
 800dd22:	b370      	cbz	r0, 800dd82 <main+0x16e>
	if(HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDRESS,288,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashWriteMemLocAddress, 4) != HAL_OK)
 800dd24:	2304      	movs	r3, #4
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	4b82      	ldr	r3, [pc, #520]	; (800df34 <main+0x320>)
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	2310      	movs	r3, #16
 800dd2e:	f44f 7290 	mov.w	r2, #288	; 0x120
 800dd32:	21a0      	movs	r1, #160	; 0xa0
 800dd34:	487e      	ldr	r0, [pc, #504]	; (800df30 <main+0x31c>)
 800dd36:	f7f5 fb45 	bl	80033c4 <HAL_I2C_Mem_Read_IT>
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d04a      	beq.n	800ddd4 <main+0x1c0>
	FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 800dd3e:	4b7e      	ldr	r3, [pc, #504]	; (800df38 <main+0x324>)
 800dd40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dd44:	611a      	str	r2, [r3, #16]
	FlashStr.bitFlagQueueDataWrite = 0;
 800dd46:	f242 124e 	movw	r2, #8526	; 0x214e
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	5499      	strb	r1, [r3, r2]
	if(HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDRESS,296,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8STimeStampBackup, 6) != HAL_OK)
 800dd4e:	2306      	movs	r3, #6
 800dd50:	9301      	str	r3, [sp, #4]
 800dd52:	4b7a      	ldr	r3, [pc, #488]	; (800df3c <main+0x328>)
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	2310      	movs	r3, #16
 800dd58:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dd5c:	21a0      	movs	r1, #160	; 0xa0
 800dd5e:	4874      	ldr	r0, [pc, #464]	; (800df30 <main+0x31c>)
 800dd60:	f7f5 fb30 	bl	80033c4 <HAL_I2C_Mem_Read_IT>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d056      	beq.n	800de16 <main+0x202>
	enqueue(&gsmPayload,(char *)getSystemConfig());
 800dd68:	f001 f9a8 	bl	800f0bc <getSystemConfig>
 800dd6c:	4601      	mov	r1, r0
 800dd6e:	4874      	ldr	r0, [pc, #464]	; (800df40 <main+0x32c>)
 800dd70:	f001 fee4 	bl	800fb3c <enqueue>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);	// LED OFF
 800dd74:	2201      	movs	r2, #1
 800dd76:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd7a:	4872      	ldr	r0, [pc, #456]	; (800df44 <main+0x330>)
 800dd7c:	f7f5 f82c 	bl	8002dd8 <HAL_GPIO_WritePin>
 800dd80:	e124      	b.n	800dfcc <main+0x3b8>
		HAL_Delay(10);
 800dd82:	200a      	movs	r0, #10
 800dd84:	f7f3 f9a2 	bl	80010cc <HAL_Delay>
		strI2cEeprom.u32RdSFlashReadMemLocAddress = strI2cEeprom.pu8SFlashReadMemLocAddress[3] << 24;
 800dd88:	4a6f      	ldr	r2, [pc, #444]	; (800df48 <main+0x334>)
 800dd8a:	f892 1ce0 	ldrb.w	r1, [r2, #3296]	; 0xce0
		strI2cEeprom.u32RdSFlashReadMemLocAddress |= strI2cEeprom.pu8SFlashReadMemLocAddress[2] << 16;
 800dd8e:	f892 3cdf 	ldrb.w	r3, [r2, #3295]	; 0xcdf
 800dd92:	041b      	lsls	r3, r3, #16
 800dd94:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
		strI2cEeprom.u32RdSFlashReadMemLocAddress |= strI2cEeprom.pu8SFlashReadMemLocAddress[1] << 8;
 800dd98:	f892 1cde 	ldrb.w	r1, [r2, #3294]	; 0xcde
 800dd9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		strI2cEeprom.u32RdSFlashReadMemLocAddress |= strI2cEeprom.pu8SFlashReadMemLocAddress[0];
 800dda0:	f892 1cdd 	ldrb.w	r1, [r2, #3293]	; 0xcdd
 800dda4:	430b      	orrs	r3, r1
 800dda6:	f8c2 3cec 	str.w	r3, [r2, #3308]	; 0xcec
		if((strI2cEeprom.u32RdSFlashReadMemLocAddress == 0xFFFFFFFF) || (strI2cEeprom.u32RdSFlashReadMemLocAddress >= SFLASH_SIZE))
 800ddaa:	4a68      	ldr	r2, [pc, #416]	; (800df4c <main+0x338>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d903      	bls.n	800ddb8 <main+0x1a4>
			strI2cEeprom.u32RdSFlashReadMemLocAddress = 0;
 800ddb0:	4b65      	ldr	r3, [pc, #404]	; (800df48 <main+0x334>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		FlashStr.u32FlashReadAddress = strI2cEeprom.u32RdSFlashReadMemLocAddress;
 800ddb8:	4b63      	ldr	r3, [pc, #396]	; (800df48 <main+0x334>)
 800ddba:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 800ddbe:	4a5e      	ldr	r2, [pc, #376]	; (800df38 <main+0x324>)
 800ddc0:	6053      	str	r3, [r2, #4]
		if(FlashStr.u32FlashReadAddress != 0 && FlashStr.u32FlashReadAddress > SFLASH_UPLOAD_LENGTH)
 800ddc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d9ac      	bls.n	800dd24 <main+0x110>
			FlashStr.u32FlashReadAddress -= SFLASH_UPLOAD_LENGTH;
 800ddca:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800ddce:	4a5a      	ldr	r2, [pc, #360]	; (800df38 <main+0x324>)
 800ddd0:	6053      	str	r3, [r2, #4]
 800ddd2:	e7a7      	b.n	800dd24 <main+0x110>
		HAL_Delay(10);
 800ddd4:	200a      	movs	r0, #10
 800ddd6:	f7f3 f979 	bl	80010cc <HAL_Delay>
		strI2cEeprom.u32RdSFlashWriteMemLocAddress = strI2cEeprom.pu8SFlashWriteMemLocAddress[3] << 24;
 800ddda:	4a5b      	ldr	r2, [pc, #364]	; (800df48 <main+0x334>)
 800dddc:	f892 1cdb 	ldrb.w	r1, [r2, #3291]	; 0xcdb
		strI2cEeprom.u32RdSFlashWriteMemLocAddress |= strI2cEeprom.pu8SFlashWriteMemLocAddress[2] << 16;
 800dde0:	f892 3cda 	ldrb.w	r3, [r2, #3290]	; 0xcda
 800dde4:	041b      	lsls	r3, r3, #16
 800dde6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
		strI2cEeprom.u32RdSFlashWriteMemLocAddress |= strI2cEeprom.pu8SFlashWriteMemLocAddress[1] << 8;
 800ddea:	f892 1cd9 	ldrb.w	r1, [r2, #3289]	; 0xcd9
 800ddee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		strI2cEeprom.u32RdSFlashWriteMemLocAddress |= strI2cEeprom.pu8SFlashWriteMemLocAddress[0];
 800ddf2:	f892 1cd8 	ldrb.w	r1, [r2, #3288]	; 0xcd8
 800ddf6:	430b      	orrs	r3, r1
 800ddf8:	f8c2 3cf0 	str.w	r3, [r2, #3312]	; 0xcf0
		if((strI2cEeprom.u32RdSFlashWriteMemLocAddress == 0xFFFFFFFF) || (strI2cEeprom.u32RdSFlashWriteMemLocAddress >= SFLASH_SIZE))
 800ddfc:	4a53      	ldr	r2, [pc, #332]	; (800df4c <main+0x338>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d903      	bls.n	800de0a <main+0x1f6>
			strI2cEeprom.u32RdSFlashWriteMemLocAddress = 0;
 800de02:	4b51      	ldr	r3, [pc, #324]	; (800df48 <main+0x334>)
 800de04:	2200      	movs	r2, #0
 800de06:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		FlashStr.u32FlashWriteAddress = strI2cEeprom.u32RdSFlashWriteMemLocAddress;
 800de0a:	4b4f      	ldr	r3, [pc, #316]	; (800df48 <main+0x334>)
 800de0c:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800de10:	4b49      	ldr	r3, [pc, #292]	; (800df38 <main+0x324>)
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	e793      	b.n	800dd3e <main+0x12a>
		HAL_Delay(10);
 800de16:	200a      	movs	r0, #10
 800de18:	f7f3 f958 	bl	80010cc <HAL_Delay>
		STime1.Hours = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[3]);
 800de1c:	4c4a      	ldr	r4, [pc, #296]	; (800df48 <main+0x334>)
 800de1e:	f894 0ce5 	ldrb.w	r0, [r4, #3301]	; 0xce5
 800de22:	f004 fc3b 	bl	801269c <DecimalToBCD>
 800de26:	4d4a      	ldr	r5, [pc, #296]	; (800df50 <main+0x33c>)
 800de28:	7028      	strb	r0, [r5, #0]
		STime1.Minutes = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[4]);
 800de2a:	f894 0ce6 	ldrb.w	r0, [r4, #3302]	; 0xce6
 800de2e:	f004 fc35 	bl	801269c <DecimalToBCD>
 800de32:	7068      	strb	r0, [r5, #1]
		STime1.Seconds = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[5]);
 800de34:	f894 0ce7 	ldrb.w	r0, [r4, #3303]	; 0xce7
 800de38:	f004 fc30 	bl	801269c <DecimalToBCD>
 800de3c:	70a8      	strb	r0, [r5, #2]
		HAL_RTC_SetTime(&hrtc, &STime1, RTC_FORMAT_BCD);
 800de3e:	4f45      	ldr	r7, [pc, #276]	; (800df54 <main+0x340>)
 800de40:	2201      	movs	r2, #1
 800de42:	4629      	mov	r1, r5
 800de44:	4638      	mov	r0, r7
 800de46:	f7f6 fe5d 	bl	8004b04 <HAL_RTC_SetTime>
		year = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[2]);
 800de4a:	f894 0ce4 	ldrb.w	r0, [r4, #3300]	; 0xce4
 800de4e:	f004 fc25 	bl	801269c <DecimalToBCD>
 800de52:	b2c6      	uxtb	r6, r0
		SDate1.WeekDay = RTC_WEEKDAY_MONDAY;
 800de54:	4d40      	ldr	r5, [pc, #256]	; (800df58 <main+0x344>)
 800de56:	f04f 0801 	mov.w	r8, #1
 800de5a:	f885 8000 	strb.w	r8, [r5]
		SDate1.Month = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[1]);
 800de5e:	f894 0ce3 	ldrb.w	r0, [r4, #3299]	; 0xce3
 800de62:	f004 fc1b 	bl	801269c <DecimalToBCD>
 800de66:	7068      	strb	r0, [r5, #1]
		SDate1.Date = DecimalToBCD(strI2cEeprom.pu8STimeStampBackup[0]);
 800de68:	f894 0ce2 	ldrb.w	r0, [r4, #3298]	; 0xce2
 800de6c:	f004 fc16 	bl	801269c <DecimalToBCD>
 800de70:	70a8      	strb	r0, [r5, #2]
		SDate1.Year = year;
 800de72:	70ee      	strb	r6, [r5, #3]
		HAL_RTC_SetDate(&hrtc, &SDate1, RTC_FORMAT_BCD);
 800de74:	4642      	mov	r2, r8
 800de76:	4629      	mov	r1, r5
 800de78:	4638      	mov	r0, r7
 800de7a:	f7f6 fec2 	bl	8004c02 <HAL_RTC_SetDate>
 800de7e:	e773      	b.n	800dd68 <main+0x154>
		  bitFlagRTCBackupUpdated = 1;
 800de80:	4b36      	ldr	r3, [pc, #216]	; (800df5c <main+0x348>)
 800de82:	2201      	movs	r2, #1
 800de84:	701a      	strb	r2, [r3, #0]
		  memset(strI2cEeprom.pu8STimeStampBackup, 0x0, sizeof(strI2cEeprom.pu8STimeStampBackup));
 800de86:	4c2d      	ldr	r4, [pc, #180]	; (800df3c <main+0x328>)
 800de88:	2700      	movs	r7, #0
 800de8a:	6027      	str	r7, [r4, #0]
 800de8c:	f8c4 7003 	str.w	r7, [r4, #3]
		  HAL_RTC_GetTime(&hrtc, &STime1, RTC_FORMAT_BIN);
 800de90:	4d2f      	ldr	r5, [pc, #188]	; (800df50 <main+0x33c>)
 800de92:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800df54 <main+0x340>
 800de96:	463a      	mov	r2, r7
 800de98:	4629      	mov	r1, r5
 800de9a:	4640      	mov	r0, r8
 800de9c:	f7f6 ff27 	bl	8004cee <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &SDate1, RTC_FORMAT_BIN);
 800dea0:	4e2d      	ldr	r6, [pc, #180]	; (800df58 <main+0x344>)
 800dea2:	463a      	mov	r2, r7
 800dea4:	4631      	mov	r1, r6
 800dea6:	4640      	mov	r0, r8
 800dea8:	f7f6 ff49 	bl	8004d3e <HAL_RTC_GetDate>
		  strI2cEeprom.pu8STimeStampBackup[0] = SDate1.Date;
 800deac:	78b2      	ldrb	r2, [r6, #2]
 800deae:	f6a4 43e2 	subw	r3, r4, #3298	; 0xce2
 800deb2:	f883 2ce2 	strb.w	r2, [r3, #3298]	; 0xce2
		  strI2cEeprom.pu8STimeStampBackup[1] = SDate1.Month;
 800deb6:	7872      	ldrb	r2, [r6, #1]
 800deb8:	7062      	strb	r2, [r4, #1]
		  strI2cEeprom.pu8STimeStampBackup[2] = SDate1.Year;
 800deba:	78f2      	ldrb	r2, [r6, #3]
 800debc:	70a2      	strb	r2, [r4, #2]
		  strI2cEeprom.pu8STimeStampBackup[3] = STime1.Hours;
 800debe:	782a      	ldrb	r2, [r5, #0]
 800dec0:	70e2      	strb	r2, [r4, #3]
		  strI2cEeprom.pu8STimeStampBackup[4] = STime1.Minutes;
 800dec2:	786a      	ldrb	r2, [r5, #1]
 800dec4:	7122      	strb	r2, [r4, #4]
		  strI2cEeprom.pu8STimeStampBackup[5] = STime1.Seconds;
 800dec6:	78aa      	ldrb	r2, [r5, #2]
 800dec8:	7162      	strb	r2, [r4, #5]
		  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 296, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&strI2cEeprom.pu8STimeStampBackup, 6);
 800deca:	2306      	movs	r3, #6
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	9400      	str	r4, [sp, #0]
 800ded0:	2310      	movs	r3, #16
 800ded2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ded6:	21a0      	movs	r1, #160	; 0xa0
 800ded8:	4815      	ldr	r0, [pc, #84]	; (800df30 <main+0x31c>)
 800deda:	f7f5 fa01 	bl	80032e0 <HAL_I2C_Mem_Write_IT>
		  HAL_Delay(10);
 800dede:	200a      	movs	r0, #10
 800dee0:	f7f3 f8f4 	bl	80010cc <HAL_Delay>
 800dee4:	e095      	b.n	800e012 <main+0x3fe>
		mbTCPPoll();
 800dee6:	f000 fee5 	bl	800ecb4 <mbTCPPoll>
		updateModbusPayload();
 800deea:	f000 fe01 	bl	800eaf0 <updateModbusPayload>
 800deee:	e095      	b.n	800e01c <main+0x408>
		modbusQueryFSM();
 800def0:	f000 f96e 	bl	800e1d0 <modbusQueryFSM>
		uploadSlaveData();
 800def4:	f000 fba0 	bl	800e638 <uploadSlaveData>
 800def8:	e095      	b.n	800e026 <main+0x412>
 800defa:	bf00      	nop
 800defc:	2000a17c 	.word	0x2000a17c
 800df00:	40021000 	.word	0x40021000
 800df04:	20001ff4 	.word	0x20001ff4
 800df08:	20001ff8 	.word	0x20001ff8
 800df0c:	000493e0 	.word	0x000493e0
 800df10:	40004800 	.word	0x40004800
 800df14:	20011304 	.word	0x20011304
 800df18:	2000444c 	.word	0x2000444c
 800df1c:	20003b18 	.word	0x20003b18
 800df20:	200019f4 	.word	0x200019f4
 800df24:	20003ae0 	.word	0x20003ae0
 800df28:	200010f8 	.word	0x200010f8
 800df2c:	20008895 	.word	0x20008895
 800df30:	2000d304 	.word	0x2000d304
 800df34:	20008890 	.word	0x20008890
 800df38:	2000f154 	.word	0x2000f154
 800df3c:	2000889a 	.word	0x2000889a
 800df40:	2000d2d4 	.word	0x2000d2d4
 800df44:	40020c00 	.word	0x40020c00
 800df48:	20007bb8 	.word	0x20007bb8
 800df4c:	007ffffe 	.word	0x007ffffe
 800df50:	2000f0f8 	.word	0x2000f0f8
 800df54:	2000f10c 	.word	0x2000f10c
 800df58:	2000f0f4 	.word	0x2000f0f4
 800df5c:	20003604 	.word	0x20003604
			gu32TempPayloadQueueEnqueue = TWO_SEC;
 800df60:	4b5c      	ldr	r3, [pc, #368]	; (800e0d4 <main+0x4c0>)
 800df62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800df66:	601a      	str	r2, [r3, #0]
			++u32MBCycleCompCouter;
 800df68:	4a5b      	ldr	r2, [pc, #364]	; (800e0d8 <main+0x4c4>)
 800df6a:	6853      	ldr	r3, [r2, #4]
 800df6c:	3301      	adds	r3, #1
 800df6e:	6053      	str	r3, [r2, #4]
			if(u32MBCycleCompCouter > 20)
 800df70:	2b14      	cmp	r3, #20
 800df72:	d904      	bls.n	800df7e <main+0x36a>
				u32MB485FirstCycleComplete = 1;
 800df74:	2301      	movs	r3, #1
 800df76:	4a59      	ldr	r2, [pc, #356]	; (800e0dc <main+0x4c8>)
 800df78:	6013      	str	r3, [r2, #0]
				u32MBTCPFirstCycleComplete = 1;
 800df7a:	4a59      	ldr	r2, [pc, #356]	; (800e0e0 <main+0x4cc>)
 800df7c:	6013      	str	r3, [r2, #0]
	if(gsmInstance.u32GSMTimer > FIVE_MIN)
 800df7e:	4b59      	ldr	r3, [pc, #356]	; (800e0e4 <main+0x4d0>)
 800df80:	f8d3 2e20 	ldr.w	r2, [r3, #3616]	; 0xe20
 800df84:	4b58      	ldr	r3, [pc, #352]	; (800e0e8 <main+0x4d4>)
 800df86:	429a      	cmp	r2, r3
 800df88:	d904      	bls.n	800df94 <main+0x380>
		gsmInstance.u32GSMTimer = FOUR_SEC;
 800df8a:	4b56      	ldr	r3, [pc, #344]	; (800e0e4 <main+0x4d0>)
 800df8c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800df90:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	if(gu32GSMHangTimer == 0)
 800df94:	4b55      	ldr	r3, [pc, #340]	; (800e0ec <main+0x4d8>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d070      	beq.n	800e07e <main+0x46a>
	if(gu32GSMRestartTimer == 0)
 800df9c:	4b54      	ldr	r3, [pc, #336]	; (800e0f0 <main+0x4dc>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d06f      	beq.n	800e084 <main+0x470>
	operateGSMSIM868();
 800dfa4:	f7ff fb88 	bl	800d6b8 <operateGSMSIM868>
	if(gu32LedTimer == 0)
 800dfa8:	4b52      	ldr	r3, [pc, #328]	; (800e0f4 <main+0x4e0>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d06c      	beq.n	800e08a <main+0x476>
	if(gu32SystemResetTimer == 0)
 800dfb0:	4b51      	ldr	r3, [pc, #324]	; (800e0f8 <main+0x4e4>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 8081 	beq.w	800e0bc <main+0x4a8>
	verifyRemoteConfiguration();
 800dfba:	f002 f941 	bl	8010240 <verifyRemoteConfiguration>
	parseRemoteconfig();
 800dfbe:	f002 f9b9 	bl	8010334 <parseRemoteconfig>
	getRTCCalender();
 800dfc2:	f004 fb39 	bl	8012638 <getRTCCalender>
	HAL_IWDG_Refresh(&hiwdg);
 800dfc6:	484d      	ldr	r0, [pc, #308]	; (800e0fc <main+0x4e8>)
 800dfc8:	f7f6 f868 	bl	800409c <HAL_IWDG_Refresh>
	  updateEthLinkStatus_1();
 800dfcc:	f004 f9ce 	bl	801236c <updateEthLinkStatus_1>
	  SerialFlashFSM();
 800dfd0:	f003 f9e6 	bl	80113a0 <SerialFlashFSM>
	  if(gu32SystemResetTimer < THIRTY_SEC && FlashStr.bitFlagQueueDataWrite == 0)
 800dfd4:	4b48      	ldr	r3, [pc, #288]	; (800e0f8 <main+0x4e4>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	f247 532f 	movw	r3, #29999	; 0x752f
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d80d      	bhi.n	800dffc <main+0x3e8>
 800dfe0:	4a47      	ldr	r2, [pc, #284]	; (800e100 <main+0x4ec>)
 800dfe2:	f242 134e 	movw	r3, #8526	; 0x214e
 800dfe6:	5cd3      	ldrb	r3, [r2, r3]
 800dfe8:	b943      	cbnz	r3, 800dffc <main+0x3e8>
		  FlashStr.bitFlagQueueDataWrite = 1;
 800dfea:	4613      	mov	r3, r2
 800dfec:	2201      	movs	r2, #1
 800dfee:	f242 114e 	movw	r1, #8526	; 0x214e
 800dff2:	545a      	strb	r2, [r3, r1]
		  GSMQueueFullFlag = 1;
 800dff4:	4943      	ldr	r1, [pc, #268]	; (800e104 <main+0x4f0>)
 800dff6:	700a      	strb	r2, [r1, #0]
		  FlashStr.u8QueueWriteCounter = 0;
 800dff8:	2200      	movs	r2, #0
 800dffa:	755a      	strb	r2, [r3, #21]
	  if(gu32SystemResetTimer < THIRTY_SEC &&  bitFlagRTCBackupUpdated == 0)
 800dffc:	4b3e      	ldr	r3, [pc, #248]	; (800e0f8 <main+0x4e4>)
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	f247 532f 	movw	r3, #29999	; 0x752f
 800e004:	429a      	cmp	r2, r3
 800e006:	d804      	bhi.n	800e012 <main+0x3fe>
 800e008:	4b33      	ldr	r3, [pc, #204]	; (800e0d8 <main+0x4c4>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f43f af37 	beq.w	800de80 <main+0x26c>
	if(gu32OperateModbusTCP == 1)
 800e012:	4b3d      	ldr	r3, [pc, #244]	; (800e108 <main+0x4f4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b01      	cmp	r3, #1
 800e018:	f43f af65 	beq.w	800dee6 <main+0x2d2>
	if(gu32OperateModbus485 == 1)
 800e01c:	4b3b      	ldr	r3, [pc, #236]	; (800e10c <main+0x4f8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b01      	cmp	r3, #1
 800e022:	f43f af65 	beq.w	800def0 <main+0x2dc>
	operateadc();
 800e026:	f003 fff1 	bl	801200c <operateadc>
	if(gu32TempPayloadQueueEnqueue == 0)
 800e02a:	4b2a      	ldr	r3, [pc, #168]	; (800e0d4 <main+0x4c0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1a5      	bne.n	800df7e <main+0x36a>
		if(u32MB485FirstCycleComplete == 0 || u32MBTCPFirstCycleComplete == 0)
 800e032:	4b2a      	ldr	r3, [pc, #168]	; (800e0dc <main+0x4c8>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d092      	beq.n	800df60 <main+0x34c>
 800e03a:	4b29      	ldr	r3, [pc, #164]	; (800e0e0 <main+0x4cc>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d08e      	beq.n	800df60 <main+0x34c>
			enqueue(&gsmPayload,(char *)getSystemDataString());
 800e042:	f001 fab1 	bl	800f5a8 <getSystemDataString>
 800e046:	4601      	mov	r1, r0
 800e048:	4831      	ldr	r0, [pc, #196]	; (800e110 <main+0x4fc>)
 800e04a:	f001 fd77 	bl	800fb3c <enqueue>
			if(gu32InputSupplySwitchedAlert == TRUE)
 800e04e:	4b31      	ldr	r3, [pc, #196]	; (800e114 <main+0x500>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d00e      	beq.n	800e074 <main+0x460>
				gu32TempPayloadQueueEnqueue = gu32UploadTimeSupply;
 800e056:	4b30      	ldr	r3, [pc, #192]	; (800e118 <main+0x504>)
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	4b1e      	ldr	r3, [pc, #120]	; (800e0d4 <main+0x4c0>)
 800e05c:	601a      	str	r2, [r3, #0]
			if(gu32TempPayloadQueueEnqueue < ONE_MIN)
 800e05e:	4b1d      	ldr	r3, [pc, #116]	; (800e0d4 <main+0x4c0>)
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	f64e 235f 	movw	r3, #59999	; 0xea5f
 800e066:	429a      	cmp	r2, r3
 800e068:	d889      	bhi.n	800df7e <main+0x36a>
				gu32TempPayloadQueueEnqueue = ONE_MIN;
 800e06a:	4b1a      	ldr	r3, [pc, #104]	; (800e0d4 <main+0x4c0>)
 800e06c:	f64e 2260 	movw	r2, #60000	; 0xea60
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	e784      	b.n	800df7e <main+0x36a>
				gu32TempPayloadQueueEnqueue = gu32UploadTimeBatt; //TEN_SEC;//
 800e074:	4b29      	ldr	r3, [pc, #164]	; (800e11c <main+0x508>)
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	4b16      	ldr	r3, [pc, #88]	; (800e0d4 <main+0x4c0>)
 800e07a:	601a      	str	r2, [r3, #0]
 800e07c:	e7ef      	b.n	800e05e <main+0x44a>
		initGSMSIM868();
 800e07e:	f7fe fa75 	bl	800c56c <initGSMSIM868>
 800e082:	e78b      	b.n	800df9c <main+0x388>
		initGSMSIM868();
 800e084:	f7fe fa72 	bl	800c56c <initGSMSIM868>
 800e088:	e78c      	b.n	800dfa4 <main+0x390>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800e08a:	4c25      	ldr	r4, [pc, #148]	; (800e120 <main+0x50c>)
 800e08c:	2140      	movs	r1, #64	; 0x40
 800e08e:	4620      	mov	r0, r4
 800e090:	f7f4 fea8 	bl	8002de4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port,HEARTBEAT_Pin);
 800e094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e098:	4620      	mov	r0, r4
 800e09a:	f7f4 fea3 	bl	8002de4 <HAL_GPIO_TogglePin>
		gu32LedTimer = ONE_SEC; // FIVE_SEC; // HUNDRED_MS; //
 800e09e:	4b15      	ldr	r3, [pc, #84]	; (800e0f4 <main+0x4e0>)
 800e0a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0a4:	601a      	str	r2, [r3, #0]
		if(gu32InputSupplySwitchedAlert == FALSE)
 800e0a6:	4b1b      	ldr	r3, [pc, #108]	; (800e114 <main+0x500>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	b913      	cbnz	r3, 800e0b2 <main+0x49e>
			gu32LedTimer = ONE_SEC;
 800e0ac:	4b11      	ldr	r3, [pc, #68]	; (800e0f4 <main+0x4e0>)
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	e77e      	b.n	800dfb0 <main+0x39c>
			gu32LedTimer = FIVE_SEC;
 800e0b2:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <main+0x4e0>)
 800e0b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	e779      	b.n	800dfb0 <main+0x39c>
		gu32ExtWatchDogResetTimer = TWO_MIN;
 800e0bc:	4b19      	ldr	r3, [pc, #100]	; (800e124 <main+0x510>)
 800e0be:	4a1a      	ldr	r2, [pc, #104]	; (800e128 <main+0x514>)
 800e0c0:	601a      	str	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 800e0c2:	480e      	ldr	r0, [pc, #56]	; (800e0fc <main+0x4e8>)
 800e0c4:	f7f5 ffea 	bl	800409c <HAL_IWDG_Refresh>
			if(gu32ExtWatchDogResetTimer == 0)
 800e0c8:	4b16      	ldr	r3, [pc, #88]	; (800e124 <main+0x510>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1f8      	bne.n	800e0c2 <main+0x4ae>
				while(1) // Alternate for external watch dog
 800e0d0:	e7fe      	b.n	800e0d0 <main+0x4bc>
 800e0d2:	bf00      	nop
 800e0d4:	2000444c 	.word	0x2000444c
 800e0d8:	20003604 	.word	0x20003604
 800e0dc:	20003614 	.word	0x20003614
 800e0e0:	20003ff4 	.word	0x20003ff4
 800e0e4:	2000c164 	.word	0x2000c164
 800e0e8:	000493e0 	.word	0x000493e0
 800e0ec:	20004440 	.word	0x20004440
 800e0f0:	200029ac 	.word	0x200029ac
 800e0f4:	20004464 	.word	0x20004464
 800e0f8:	200029b8 	.word	0x200029b8
 800e0fc:	2000d358 	.word	0x2000d358
 800e100:	2000f154 	.word	0x2000f154
 800e104:	20004270 	.word	0x20004270
 800e108:	20002954 	.word	0x20002954
 800e10c:	20002934 	.word	0x20002934
 800e110:	2000d2d4 	.word	0x2000d2d4
 800e114:	2000428c 	.word	0x2000428c
 800e118:	20001ff4 	.word	0x20001ff4
 800e11c:	20001ff8 	.word	0x20001ff8
 800e120:	40020c00 	.word	0x40020c00
 800e124:	200029bc 	.word	0x200029bc
 800e128:	0001d4c0 	.word	0x0001d4c0

0800e12c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e12c:	4770      	bx	lr

0800e12e <modbusCRC16>:
* <hr>
*
*******************************************************************************/

uint16_t modbusCRC16(uint8_t * data , uint8_t length)
{
 800e12e:	b430      	push	{r4, r5}
 800e130:	4605      	mov	r5, r0
	uint16_t crc = 0xFFFF;

	  for (int pos = 0; pos < length; pos++)
 800e132:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
 800e134:	f64f 70ff 	movw	r0, #65535	; 0xffff
	  for (int pos = 0; pos < length; pos++)
 800e138:	e00b      	b.n	800e152 <modbusCRC16+0x24>
	      {
	        crc >>= 1;                    	// Shift right and XOR 0xA001
	        crc ^= 0xA001;
	      }
	      else                            	// Else LSB is not set
	        crc >>= 1;                    	// Just shift right
 800e13a:	0840      	lsrs	r0, r0, #1
	    for (int i = 8; i != 0; i--)  		// Loop over each bit
 800e13c:	3b01      	subs	r3, #1
 800e13e:	b13b      	cbz	r3, 800e150 <modbusCRC16+0x22>
	      if ((crc & 0x0001) != 0) 			// If the LSB is set
 800e140:	f010 0f01 	tst.w	r0, #1
 800e144:	d0f9      	beq.n	800e13a <modbusCRC16+0xc>
	        crc ^= 0xA001;
 800e146:	f24a 0201 	movw	r2, #40961	; 0xa001
 800e14a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
 800e14e:	e7f5      	b.n	800e13c <modbusCRC16+0xe>
	  for (int pos = 0; pos < length; pos++)
 800e150:	3401      	adds	r4, #1
 800e152:	42a1      	cmp	r1, r4
 800e154:	dd03      	ble.n	800e15e <modbusCRC16+0x30>
	    crc ^= (uint16_t)data[pos];         // XOR byte into least sig. byte of crc
 800e156:	5d2b      	ldrb	r3, [r5, r4]
 800e158:	4058      	eors	r0, r3
	    for (int i = 8; i != 0; i--)  		// Loop over each bit
 800e15a:	2308      	movs	r3, #8
 800e15c:	e7ef      	b.n	800e13e <modbusCRC16+0x10>
	    }
	  }
	  return crc;
}
 800e15e:	bc30      	pop	{r4, r5}
 800e160:	4770      	bx	lr
	...

0800e164 <updateModbusQueryFrameRTU>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateModbusQueryFrameRTU(strctModbusMaster *master)
{
 800e164:	b510      	push	{r4, lr}
 800e166:	4604      	mov	r4, r0
	uint16_t crc ;
	/* Form Query Frame String */
	master->u8QueryFrame[0] = master->u8MBSlave_Address;
 800e168:	7803      	ldrb	r3, [r0, #0]
 800e16a:	7043      	strb	r3, [r0, #1]
	master->u8QueryFrame[1] = gu32MBRTUClientFuncCode[u8MBQueryRegisterAddressCounter];
 800e16c:	4b0d      	ldr	r3, [pc, #52]	; (800e1a4 <updateModbusQueryFrameRTU+0x40>)
 800e16e:	781a      	ldrb	r2, [r3, #0]
 800e170:	4b0d      	ldr	r3, [pc, #52]	; (800e1a8 <updateModbusQueryFrameRTU+0x44>)
 800e172:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e176:	7081      	strb	r1, [r0, #2]
	master->u8QueryFrame[2] = ((gu32MBRTUClientAddress[u8MBQueryRegisterAddressCounter] - MB_ADDRESS_DEREF) >> 8);
 800e178:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e17c:	6a1a      	ldr	r2, [r3, #32]
 800e17e:	3a01      	subs	r2, #1
 800e180:	0a12      	lsrs	r2, r2, #8
 800e182:	70c2      	strb	r2, [r0, #3]
	master->u8QueryFrame[3] = ((gu32MBRTUClientAddress[u8MBQueryRegisterAddressCounter] - MB_ADDRESS_DEREF)& 0xFF);
 800e184:	6a1a      	ldr	r2, [r3, #32]
 800e186:	3a01      	subs	r2, #1
 800e188:	7102      	strb	r2, [r0, #4]
	master->u8QueryFrame[4] = (gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter] >> 8);
 800e18a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e18c:	0a12      	lsrs	r2, r2, #8
 800e18e:	7142      	strb	r2, [r0, #5]
	master->u8QueryFrame[5] = (gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter] & 0xFF);
 800e190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e192:	7183      	strb	r3, [r0, #6]
	crc = modbusCRC16(master->u8QueryFrame , 6);
 800e194:	2106      	movs	r1, #6
 800e196:	3001      	adds	r0, #1
 800e198:	f7ff ffc9 	bl	800e12e <modbusCRC16>
	master->u8QueryFrame[6] = crc;
 800e19c:	71e0      	strb	r0, [r4, #7]
	master->u8QueryFrame[7] = (crc >> 8);
 800e19e:	0a00      	lsrs	r0, r0, #8
 800e1a0:	7220      	strb	r0, [r4, #8]
	/* End of Query Frame */
}
 800e1a2:	bd10      	pop	{r4, pc}
 800e1a4:	20003610 	.word	0x20003610
 800e1a8:	20000c48 	.word	0x20000c48

0800e1ac <resetModbusPort>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void resetModbusPort()
{
 800e1ac:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 800e1ae:	4c07      	ldr	r4, [pc, #28]	; (800e1cc <resetModbusPort+0x20>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7f4 fe0e 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET);
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f7f4 fe08 	bl	8002dd8 <HAL_GPIO_WritePin>
}
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	bf00      	nop
 800e1cc:	40021000 	.word	0x40021000

0800e1d0 <modbusQueryFSM>:
{
 800e1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1d2:	b0a1      	sub	sp, #132	; 0x84
	switch(modbusState)
 800e1d4:	4b94      	ldr	r3, [pc, #592]	; (800e428 <modbusQueryFSM+0x258>)
 800e1d6:	785b      	ldrb	r3, [r3, #1]
 800e1d8:	2b05      	cmp	r3, #5
 800e1da:	f200 821e 	bhi.w	800e61a <modbusQueryFSM+0x44a>
 800e1de:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e1e2:	0006      	.short	0x0006
 800e1e4:	0052021a 	.word	0x0052021a
 800e1e8:	01d6019b 	.word	0x01d6019b
 800e1ec:	007c      	.short	0x007c
			if(master.u32PollDelay == 0)
 800e1ee:	4b8f      	ldr	r3, [pc, #572]	; (800e42c <modbusQueryFSM+0x25c>)
 800e1f0:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 820e 	bne.w	800e616 <modbusQueryFSM+0x446>
				if(u32MB485OperationStatus == 1)
 800e1fa:	4b8d      	ldr	r3, [pc, #564]	; (800e430 <modbusQueryFSM+0x260>)
 800e1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	f040 8209 	bne.w	800e616 <modbusQueryFSM+0x446>
					HAL_GPIO_WritePin(MB_DE_GPIO_Port,MB_DE_Pin,GPIO_PIN_SET); // DE -> High
 800e204:	4c8b      	ldr	r4, [pc, #556]	; (800e434 <modbusQueryFSM+0x264>)
 800e206:	2201      	movs	r2, #1
 800e208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e20c:	4620      	mov	r0, r4
 800e20e:	f7f4 fde3 	bl	8002dd8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_SET); // ~RE -> HIGH
 800e212:	2201      	movs	r2, #1
 800e214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e218:	4620      	mov	r0, r4
 800e21a:	f7f4 fddd 	bl	8002dd8 <HAL_GPIO_WritePin>
					memset(master.u8SlaveResponseArray, 0x00, 260 * sizeof(int32_t));
 800e21e:	4c86      	ldr	r4, [pc, #536]	; (800e438 <modbusQueryFSM+0x268>)
 800e220:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800e224:	2100      	movs	r1, #0
 800e226:	4620      	mov	r0, r4
 800e228:	f004 fe5a 	bl	8012ee0 <memset>
					master.u8MBResponseCharacterCounter = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	f884 3514 	strb.w	r3, [r4, #1300]	; 0x514
					if(u8MBQueryRegisterAddressCounter >= (master.u16NoRegisterstoFetch))
 800e232:	4b7d      	ldr	r3, [pc, #500]	; (800e428 <modbusQueryFSM+0x258>)
 800e234:	781a      	ldrb	r2, [r3, #0]
 800e236:	f8b4 3826 	ldrh.w	r3, [r4, #2086]	; 0x826
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d309      	bcc.n	800e252 <modbusQueryFSM+0x82>
						u32MB485OperationStatus = 2;
 800e23e:	4b7c      	ldr	r3, [pc, #496]	; (800e430 <modbusQueryFSM+0x260>)
 800e240:	2202      	movs	r2, #2
 800e242:	661a      	str	r2, [r3, #96]	; 0x60
						u32MB485FirstCycleComplete = 1;
 800e244:	4b78      	ldr	r3, [pc, #480]	; (800e428 <modbusQueryFSM+0x258>)
 800e246:	2201      	movs	r2, #1
 800e248:	605a      	str	r2, [r3, #4]
						u8MBQueryRegisterAddressCounter = 0;
 800e24a:	2200      	movs	r2, #0
 800e24c:	701a      	strb	r2, [r3, #0]
						gu32MBRTUDataByteCounter = 0;
 800e24e:	609a      	str	r2, [r3, #8]
						break;
 800e250:	e1e1      	b.n	800e616 <modbusQueryFSM+0x446>
						updateModbusQueryFrameRTU(&master);
 800e252:	4c76      	ldr	r4, [pc, #472]	; (800e42c <modbusQueryFSM+0x25c>)
 800e254:	4620      	mov	r0, r4
 800e256:	f7ff ff85 	bl	800e164 <updateModbusQueryFrameRTU>
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e25a:	4b78      	ldr	r3, [pc, #480]	; (800e43c <modbusQueryFSM+0x26c>)
 800e25c:	68da      	ldr	r2, [r3, #12]
 800e25e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e262:	60da      	str	r2, [r3, #12]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800e264:	68da      	ldr	r2, [r3, #12]
 800e266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e26a:	60da      	str	r2, [r3, #12]
					u8MBQueryCharacterCounter = 0;
 800e26c:	4a6e      	ldr	r2, [pc, #440]	; (800e428 <modbusQueryFSM+0x258>)
 800e26e:	2100      	movs	r1, #0
 800e270:	7311      	strb	r1, [r2, #12]
					LL_USART_TransmitData8(USART3,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 800e272:	7b10      	ldrb	r0, [r2, #12]
 800e274:	1c41      	adds	r1, r0, #1
 800e276:	b2c9      	uxtb	r1, r1
 800e278:	7311      	strb	r1, [r2, #12]
 800e27a:	4404      	add	r4, r0
 800e27c:	7861      	ldrb	r1, [r4, #1]
  USARTx->DR = Value;
 800e27e:	6059      	str	r1, [r3, #4]
					modbusState = enmMODBUS_SEND_QUERY;
 800e280:	2301      	movs	r3, #1
 800e282:	7053      	strb	r3, [r2, #1]
 800e284:	e1c7      	b.n	800e616 <modbusQueryFSM+0x446>
			if(master.u32PollDelay == 0)
 800e286:	4b69      	ldr	r3, [pc, #420]	; (800e42c <modbusQueryFSM+0x25c>)
 800e288:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f040 81c2 	bne.w	800e616 <modbusQueryFSM+0x446>
				if(gu8MBResponseFlag == 1)
 800e292:	4b65      	ldr	r3, [pc, #404]	; (800e428 <modbusQueryFSM+0x258>)
 800e294:	7b5b      	ldrb	r3, [r3, #13]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d008      	beq.n	800e2ac <modbusQueryFSM+0xdc>
					if(gu32ModbusResponseTimeout == 0)
 800e29a:	4b63      	ldr	r3, [pc, #396]	; (800e428 <modbusQueryFSM+0x258>)
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 81b9 	bne.w	800e616 <modbusQueryFSM+0x446>
						modbusState = enmMODBUS_RESPONSE_TIMEOUT;
 800e2a4:	4b60      	ldr	r3, [pc, #384]	; (800e428 <modbusQueryFSM+0x258>)
 800e2a6:	2204      	movs	r2, #4
 800e2a8:	705a      	strb	r2, [r3, #1]
 800e2aa:	e1b4      	b.n	800e616 <modbusQueryFSM+0x446>
					if((gu32ModbusFrameEndTimer == 0) && (gu32ModbusResponseTimeout != 0))
 800e2ac:	4b5e      	ldr	r3, [pc, #376]	; (800e428 <modbusQueryFSM+0x258>)
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	b943      	cbnz	r3, 800e2c4 <modbusQueryFSM+0xf4>
 800e2b2:	4b5d      	ldr	r3, [pc, #372]	; (800e428 <modbusQueryFSM+0x258>)
 800e2b4:	695b      	ldr	r3, [r3, #20]
 800e2b6:	b12b      	cbz	r3, 800e2c4 <modbusQueryFSM+0xf4>
						modbusState = enmMODBUS_PARSE_RESPONSE;
 800e2b8:	4b5b      	ldr	r3, [pc, #364]	; (800e428 <modbusQueryFSM+0x258>)
 800e2ba:	2205      	movs	r2, #5
 800e2bc:	705a      	strb	r2, [r3, #1]
						gu8MBResponseFlag = 0;
 800e2be:	2200      	movs	r2, #0
 800e2c0:	735a      	strb	r2, [r3, #13]
 800e2c2:	e1a8      	b.n	800e616 <modbusQueryFSM+0x446>
					else if(gu32ModbusResponseTimeout == 0)
 800e2c4:	4b58      	ldr	r3, [pc, #352]	; (800e428 <modbusQueryFSM+0x258>)
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f040 81a4 	bne.w	800e616 <modbusQueryFSM+0x446>
						modbusState = enmMODBUS_PARSE_RESPONSE;//enmMODBUS_RESPONSE_TIMEOUT;//enmMODBUS_PARSE_RESPONSE;
 800e2ce:	4b56      	ldr	r3, [pc, #344]	; (800e428 <modbusQueryFSM+0x258>)
 800e2d0:	2205      	movs	r2, #5
 800e2d2:	705a      	strb	r2, [r3, #1]
						gu8MBResponseFlag = 0;
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	735a      	strb	r2, [r3, #13]
 800e2d8:	e19d      	b.n	800e616 <modbusQueryFSM+0x446>
				gu32ModbusIP485Reset = 0;
 800e2da:	4b53      	ldr	r3, [pc, #332]	; (800e428 <modbusQueryFSM+0x258>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	619a      	str	r2, [r3, #24]
				if(master.u8SlaveResponseArray[0] == gu32MBRTUClientFuncCode[u8MBQueryRegisterAddressCounter])
 800e2e0:	4a52      	ldr	r2, [pc, #328]	; (800e42c <modbusQueryFSM+0x25c>)
 800e2e2:	68d6      	ldr	r6, [r2, #12]
 800e2e4:	781d      	ldrb	r5, [r3, #0]
 800e2e6:	462c      	mov	r4, r5
 800e2e8:	4b51      	ldr	r3, [pc, #324]	; (800e430 <modbusQueryFSM+0x260>)
 800e2ea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2ee:	429e      	cmp	r6, r3
 800e2f0:	d007      	beq.n	800e302 <modbusQueryFSM+0x132>
				else if((master.u8SlaveResponseArray[0] & 0x80) == 0x80)
 800e2f2:	f016 0f80 	tst.w	r6, #128	; 0x80
 800e2f6:	f040 810d 	bne.w	800e514 <modbusQueryFSM+0x344>
					modbusState = enmMODBUS_RETRY_QUERY;
 800e2fa:	4b4b      	ldr	r3, [pc, #300]	; (800e428 <modbusQueryFSM+0x258>)
 800e2fc:	2203      	movs	r2, #3
 800e2fe:	705a      	strb	r2, [r3, #1]
 800e300:	e101      	b.n	800e506 <modbusQueryFSM+0x336>
					uint8_t u8TempCRCArray[125]= {0};
 800e302:	2400      	movs	r4, #0
 800e304:	9400      	str	r4, [sp, #0]
 800e306:	2279      	movs	r2, #121	; 0x79
 800e308:	4621      	mov	r1, r4
 800e30a:	a801      	add	r0, sp, #4
 800e30c:	f004 fde8 	bl	8012ee0 <memset>
					uint8_t u8MBNoDataBytesRx = (uint8_t)master.u8SlaveResponseArray[1];
 800e310:	4b46      	ldr	r3, [pc, #280]	; (800e42c <modbusQueryFSM+0x25c>)
 800e312:	691f      	ldr	r7, [r3, #16]
 800e314:	b2f8      	uxtb	r0, r7
					u8TempCRCArray[0]=master.u8MBSlave_Address;       // ID
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	f88d 3000 	strb.w	r3, [sp]
					u8TempCRCArray[1]=master.u8SlaveResponseArray[0]; // FC
 800e31c:	f88d 6001 	strb.w	r6, [sp, #1]
					u8TempCRCArray[2]=master.u8SlaveResponseArray[1]; // No of Bytes
 800e320:	f88d 0002 	strb.w	r0, [sp, #2]
					for(u8CrcLoopCounter = 0 ; u8CrcLoopCounter < u8MBNoDataBytesRx ;u8CrcLoopCounter ++ )
 800e324:	4621      	mov	r1, r4
 800e326:	e00b      	b.n	800e340 <modbusQueryFSM+0x170>
						u8TempCRCArray[3 + u8CrcLoopCounter] = master.u8SlaveResponseArray[2 + u8CrcLoopCounter];
 800e328:	1d0a      	adds	r2, r1, #4
 800e32a:	4b40      	ldr	r3, [pc, #256]	; (800e42c <modbusQueryFSM+0x25c>)
 800e32c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e330:	685a      	ldr	r2, [r3, #4]
 800e332:	1ccb      	adds	r3, r1, #3
 800e334:	ac20      	add	r4, sp, #128	; 0x80
 800e336:	4423      	add	r3, r4
 800e338:	f803 2c80 	strb.w	r2, [r3, #-128]
					for(u8CrcLoopCounter = 0 ; u8CrcLoopCounter < u8MBNoDataBytesRx ;u8CrcLoopCounter ++ )
 800e33c:	3101      	adds	r1, #1
 800e33e:	b2c9      	uxtb	r1, r1
 800e340:	4281      	cmp	r1, r0
 800e342:	d3f1      	bcc.n	800e328 <modbusQueryFSM+0x158>
					u16TempCRC = modbusCRC16(u8TempCRCArray,3 + u8CrcLoopCounter);
 800e344:	3103      	adds	r1, #3
 800e346:	b2c9      	uxtb	r1, r1
 800e348:	4668      	mov	r0, sp
 800e34a:	f7ff fef0 	bl	800e12e <modbusCRC16>
					uint8_t u8CRCHi = master.u8SlaveResponseArray[u8MBNoDataBytesRx + 2 ];    // CRC High Location
 800e34e:	b2ff      	uxtb	r7, r7
 800e350:	4a36      	ldr	r2, [pc, #216]	; (800e42c <modbusQueryFSM+0x25c>)
 800e352:	1d3b      	adds	r3, r7, #4
 800e354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e358:	791b      	ldrb	r3, [r3, #4]
					uint8_t u8CRCLow = master.u8SlaveResponseArray[u8MBNoDataBytesRx + 3];    // CRC Low Location
 800e35a:	1d79      	adds	r1, r7, #5
 800e35c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e360:	6852      	ldr	r2, [r2, #4]
					uint16_t u16ReceivedCRC =  (u8CRCLow<<8)|u8CRCHi;
 800e362:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e366:	b29b      	uxth	r3, r3
					if(u16ReceivedCRC == u16TempCRC)
 800e368:	4298      	cmp	r0, r3
 800e36a:	d003      	beq.n	800e374 <modbusQueryFSM+0x1a4>
						modbusState = enmMODBUS_RETRY_QUERY;
 800e36c:	4b2e      	ldr	r3, [pc, #184]	; (800e428 <modbusQueryFSM+0x258>)
 800e36e:	2203      	movs	r2, #3
 800e370:	705a      	strb	r2, [r3, #1]
 800e372:	e0c8      	b.n	800e506 <modbusQueryFSM+0x336>
						gu32MBRTUClientConnectedFlag = 1; /* Indicates Response Received form client in payload .*/
 800e374:	4b2c      	ldr	r3, [pc, #176]	; (800e428 <modbusQueryFSM+0x258>)
 800e376:	2201      	movs	r2, #1
 800e378:	61da      	str	r2, [r3, #28]
						if(master.u8SlaveResponseArray[0] == 1)
 800e37a:	4296      	cmp	r6, r2
 800e37c:	d01a      	beq.n	800e3b4 <modbusQueryFSM+0x1e4>
							if(u8MBNoDataBytesRx == (2 * gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter]))
 800e37e:	4b2c      	ldr	r3, [pc, #176]	; (800e430 <modbusQueryFSM+0x260>)
 800e380:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800e384:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e386:	ebb7 0f40 	cmp.w	r7, r0, lsl #1
 800e38a:	d05b      	beq.n	800e444 <modbusQueryFSM+0x274>
								gu32MBRTUDataByteCounter += gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];
 800e38c:	4a26      	ldr	r2, [pc, #152]	; (800e428 <modbusQueryFSM+0x258>)
 800e38e:	6893      	ldr	r3, [r2, #8]
 800e390:	4403      	add	r3, r0
 800e392:	6093      	str	r3, [r2, #8]
						master.u8MBResponseStatus[u8MBQueryRegisterAddressCounter++] = 0;
 800e394:	4c24      	ldr	r4, [pc, #144]	; (800e428 <modbusQueryFSM+0x258>)
 800e396:	1c6b      	adds	r3, r5, #1
 800e398:	7023      	strb	r3, [r4, #0]
 800e39a:	4f24      	ldr	r7, [pc, #144]	; (800e42c <modbusQueryFSM+0x25c>)
 800e39c:	443d      	add	r5, r7
 800e39e:	2600      	movs	r6, #0
 800e3a0:	f885 6523 	strb.w	r6, [r5, #1315]	; 0x523
						resetModbusPort();
 800e3a4:	f7ff ff02 	bl	800e1ac <resetModbusPort>
						master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800e3a8:	4b25      	ldr	r3, [pc, #148]	; (800e440 <modbusQueryFSM+0x270>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f8c7 3e4c 	str.w	r3, [r7, #3660]	; 0xe4c
						modbusState = enmMODBUS_IDLE;
 800e3b0:	7066      	strb	r6, [r4, #1]
 800e3b2:	e0a8      	b.n	800e506 <modbusQueryFSM+0x336>
							for(LoopCounter = 0; LoopCounter < u8MBNoDataBytesRx; LoopCounter++)
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	428f      	cmp	r7, r1
 800e3b8:	d913      	bls.n	800e3e2 <modbusQueryFSM+0x212>
								master.u32SlaveData[gu32MBRTUDataByteCounter] = master.u8SlaveResponseArray[2 + LoopCounter];
 800e3ba:	4b1b      	ldr	r3, [pc, #108]	; (800e428 <modbusQueryFSM+0x258>)
 800e3bc:	6898      	ldr	r0, [r3, #8]
 800e3be:	4a1b      	ldr	r2, [pc, #108]	; (800e42c <modbusQueryFSM+0x25c>)
 800e3c0:	1d0c      	adds	r4, r1, #4
 800e3c2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e3c6:	6864      	ldr	r4, [r4, #4]
 800e3c8:	f200 268e 	addw	r6, r0, #654	; 0x28e
 800e3cc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e3d0:	6054      	str	r4, [r2, #4]
								gu32MBRTUDataStatus[gu32MBRTUDataByteCounter++] = 2;
 800e3d2:	1c42      	adds	r2, r0, #1
 800e3d4:	609a      	str	r2, [r3, #8]
 800e3d6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e3da:	2202      	movs	r2, #2
 800e3dc:	621a      	str	r2, [r3, #32]
							for(LoopCounter = 0; LoopCounter < u8MBNoDataBytesRx; LoopCounter++)
 800e3de:	3101      	adds	r1, #1
 800e3e0:	e7e9      	b.n	800e3b6 <modbusQueryFSM+0x1e6>
							if(u8MBNoDataBytesRx != gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter])
 800e3e2:	4a13      	ldr	r2, [pc, #76]	; (800e430 <modbusQueryFSM+0x260>)
 800e3e4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e3e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e3ea:	4297      	cmp	r7, r2
 800e3ec:	d0d2      	beq.n	800e394 <modbusQueryFSM+0x1c4>
								gu32MBRTUDataByteCounter += (gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter] - u8MBNoDataBytesRx);
 800e3ee:	1bd3      	subs	r3, r2, r7
 800e3f0:	490d      	ldr	r1, [pc, #52]	; (800e428 <modbusQueryFSM+0x258>)
 800e3f2:	688a      	ldr	r2, [r1, #8]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	608b      	str	r3, [r1, #8]
 800e3f8:	e7cc      	b.n	800e394 <modbusQueryFSM+0x1c4>
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800e3fa:	490c      	ldr	r1, [pc, #48]	; (800e42c <modbusQueryFSM+0x25c>)
 800e3fc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800e400:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] +256 ;
 800e404:	3303      	adds	r3, #3
 800e406:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e40a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e40e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800e412:	4c05      	ldr	r4, [pc, #20]	; (800e428 <modbusQueryFSM+0x258>)
 800e414:	68a4      	ldr	r4, [r4, #8]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] +256 ;
 800e416:	f503 7380 	add.w	r3, r3, #256	; 0x100
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800e41a:	f204 248e 	addw	r4, r4, #654	; 0x28e
 800e41e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e422:	604b      	str	r3, [r1, #4]
 800e424:	e02e      	b.n	800e484 <modbusQueryFSM+0x2b4>
 800e426:	bf00      	nop
 800e428:	20003610 	.word	0x20003610
 800e42c:	2000d3a0 	.word	0x2000d3a0
 800e430:	20000c48 	.word	0x20000c48
 800e434:	40021000 	.word	0x40021000
 800e438:	2000d3ac 	.word	0x2000d3ac
 800e43c:	40004800 	.word	0x40004800
 800e440:	20002004 	.word	0x20002004
								for(u32LoopCounter = 0; u32LoopCounter < gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];u32LoopCounter++)
 800e444:	2200      	movs	r2, #0
 800e446:	4290      	cmp	r0, r2
 800e448:	d9a4      	bls.n	800e394 <modbusQueryFSM+0x1c4>
									if((int32_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter)] < 0)
 800e44a:	3201      	adds	r2, #1
 800e44c:	0053      	lsls	r3, r2, #1
 800e44e:	1c9c      	adds	r4, r3, #2
 800e450:	4974      	ldr	r1, [pc, #464]	; (800e624 <modbusQueryFSM+0x454>)
 800e452:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e456:	6849      	ldr	r1, [r1, #4]
 800e458:	2900      	cmp	r1, #0
 800e45a:	dbce      	blt.n	800e3fa <modbusQueryFSM+0x22a>
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800e45c:	4971      	ldr	r1, [pc, #452]	; (800e624 <modbusQueryFSM+0x454>)
 800e45e:	1c9c      	adds	r4, r3, #2
 800e460:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800e464:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] ;
 800e468:	3303      	adds	r3, #3
 800e46a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e46e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800e472:	4c6d      	ldr	r4, [pc, #436]	; (800e628 <modbusQueryFSM+0x458>)
 800e474:	68a4      	ldr	r4, [r4, #8]
																						 + (int16_t)master.u8SlaveResponseArray[2 + (2 * u32LoopCounter) + 1] ;
 800e476:	eb03 2306 	add.w	r3, r3, r6, lsl #8
										master.u32SlaveData[gu32MBRTUDataByteCounter] = ((int16_t)master.u8SlaveResponseArray[2 + (2* u32LoopCounter)] << 8)
 800e47a:	f204 248e 	addw	r4, r4, #654	; 0x28e
 800e47e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e482:	604b      	str	r3, [r1, #4]
									if(master.u32SlaveData[gu32MBRTUDataByteCounter] > 32768)
 800e484:	4b68      	ldr	r3, [pc, #416]	; (800e628 <modbusQueryFSM+0x458>)
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	f203 248e 	addw	r4, r3, #654	; 0x28e
 800e48c:	4965      	ldr	r1, [pc, #404]	; (800e624 <modbusQueryFSM+0x454>)
 800e48e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e492:	6849      	ldr	r1, [r1, #4]
 800e494:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800e498:	d905      	bls.n	800e4a6 <modbusQueryFSM+0x2d6>
										master.u32SlaveData[gu32MBRTUDataByteCounter] = master.u32SlaveData[gu32MBRTUDataByteCounter] - 65536;
 800e49a:	f5a1 3180 	sub.w	r1, r1, #65536	; 0x10000
 800e49e:	4e61      	ldr	r6, [pc, #388]	; (800e624 <modbusQueryFSM+0x454>)
 800e4a0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800e4a4:	6061      	str	r1, [r4, #4]
									gu32MBRTUDataStatus[gu32MBRTUDataByteCounter] = 0;
 800e4a6:	4960      	ldr	r1, [pc, #384]	; (800e628 <modbusQueryFSM+0x458>)
 800e4a8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800e4ac:	2600      	movs	r6, #0
 800e4ae:	6226      	str	r6, [r4, #32]
									gu32MBRTUDataByteCounter++;
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	608b      	str	r3, [r1, #8]
									if(gu32MBRTUDataByteCounter >= gu32MBDataByteCounterLimitRTU)
 800e4b4:	f8d1 14d0 	ldr.w	r1, [r1, #1232]	; 0x4d0
 800e4b8:	428b      	cmp	r3, r1
 800e4ba:	d3c4      	bcc.n	800e446 <modbusQueryFSM+0x276>
										gu32MBRTUDataByteCounter = 0;
 800e4bc:	4b5a      	ldr	r3, [pc, #360]	; (800e628 <modbusQueryFSM+0x458>)
 800e4be:	609e      	str	r6, [r3, #8]
 800e4c0:	e7c1      	b.n	800e446 <modbusQueryFSM+0x276>
						master.u32SlaveData[gu32MBRTUDataByteCounter] = master.u8SlaveResponseArray[1] ;
 800e4c2:	4b59      	ldr	r3, [pc, #356]	; (800e628 <modbusQueryFSM+0x458>)
 800e4c4:	6899      	ldr	r1, [r3, #8]
 800e4c6:	4a57      	ldr	r2, [pc, #348]	; (800e624 <modbusQueryFSM+0x454>)
 800e4c8:	6916      	ldr	r6, [r2, #16]
 800e4ca:	f201 278e 	addw	r7, r1, #654	; 0x28e
 800e4ce:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800e4d2:	6056      	str	r6, [r2, #4]
						gu32MBRTUDataStatus[gu32MBRTUDataByteCounter++] = 1;
 800e4d4:	1c4a      	adds	r2, r1, #1
 800e4d6:	609a      	str	r2, [r3, #8]
 800e4d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e4dc:	2201      	movs	r2, #1
 800e4de:	621a      	str	r2, [r3, #32]
					for(u32TempLoopCounter = 0; u32TempLoopCounter < gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];u32TempLoopCounter++)
 800e4e0:	4410      	add	r0, r2
 800e4e2:	4b52      	ldr	r3, [pc, #328]	; (800e62c <modbusQueryFSM+0x45c>)
 800e4e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ea:	4283      	cmp	r3, r0
 800e4ec:	d8e9      	bhi.n	800e4c2 <modbusQueryFSM+0x2f2>
					u8MBQueryRegisterAddressCounter++;
 800e4ee:	4c4e      	ldr	r4, [pc, #312]	; (800e628 <modbusQueryFSM+0x458>)
 800e4f0:	3501      	adds	r5, #1
 800e4f2:	7025      	strb	r5, [r4, #0]
					resetModbusPort();
 800e4f4:	f7ff fe5a 	bl	800e1ac <resetModbusPort>
					master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800e4f8:	4b4d      	ldr	r3, [pc, #308]	; (800e630 <modbusQueryFSM+0x460>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	4b49      	ldr	r3, [pc, #292]	; (800e624 <modbusQueryFSM+0x454>)
 800e4fe:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
					modbusState = enmMODBUS_IDLE;
 800e502:	2300      	movs	r3, #0
 800e504:	7063      	strb	r3, [r4, #1]
				memset(master.u8SlaveResponseArray,0x00,sizeof(master.u8SlaveResponseArray));
 800e506:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800e50a:	2100      	movs	r1, #0
 800e50c:	4849      	ldr	r0, [pc, #292]	; (800e634 <modbusQueryFSM+0x464>)
 800e50e:	f004 fce7 	bl	8012ee0 <memset>
			break;
 800e512:	e080      	b.n	800e616 <modbusQueryFSM+0x446>
					for(u32TempLoopCounter = 0; u32TempLoopCounter < gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];u32TempLoopCounter++)
 800e514:	2000      	movs	r0, #0
 800e516:	e7e4      	b.n	800e4e2 <modbusQueryFSM+0x312>
			if(master.u8MBNoQueryAttempts > MB_485_QUERY_RETRY_ATTEMPTS)
 800e518:	4b42      	ldr	r3, [pc, #264]	; (800e624 <modbusQueryFSM+0x454>)
 800e51a:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d930      	bls.n	800e584 <modbusQueryFSM+0x3b4>
				gu32MBRTUDataByteCounter += gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];
 800e522:	4b41      	ldr	r3, [pc, #260]	; (800e628 <modbusQueryFSM+0x458>)
 800e524:	781a      	ldrb	r2, [r3, #0]
 800e526:	4941      	ldr	r1, [pc, #260]	; (800e62c <modbusQueryFSM+0x45c>)
 800e528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e52c:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800e52e:	6899      	ldr	r1, [r3, #8]
 800e530:	4401      	add	r1, r0
 800e532:	6099      	str	r1, [r3, #8]
				u8MBQueryRegisterAddressCounter++;
 800e534:	3201      	adds	r2, #1
 800e536:	701a      	strb	r2, [r3, #0]
				gu32MBRTUClientConnectedFlag = 0;
 800e538:	2200      	movs	r2, #0
 800e53a:	61da      	str	r2, [r3, #28]
				master.u8MBNoQueryAttempts = 0;
 800e53c:	4b39      	ldr	r3, [pc, #228]	; (800e624 <modbusQueryFSM+0x454>)
 800e53e:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
			if(u8MBQueryRegisterAddressCounter > master.u16NoRegisterstoFetch)
 800e542:	4b39      	ldr	r3, [pc, #228]	; (800e628 <modbusQueryFSM+0x458>)
 800e544:	781a      	ldrb	r2, [r3, #0]
 800e546:	4b37      	ldr	r3, [pc, #220]	; (800e624 <modbusQueryFSM+0x454>)
 800e548:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d909      	bls.n	800e564 <modbusQueryFSM+0x394>
				gu32MBRTUDataByteCounter = 0;
 800e550:	4b35      	ldr	r3, [pc, #212]	; (800e628 <modbusQueryFSM+0x458>)
 800e552:	2200      	movs	r2, #0
 800e554:	609a      	str	r2, [r3, #8]
				u8MBQueryRegisterAddressCounter = 0;
 800e556:	701a      	strb	r2, [r3, #0]
				gu32MBRTUClientConnectedFlag = 0;
 800e558:	61da      	str	r2, [r3, #28]
				u32MB485OperationStatus = 2;
 800e55a:	4a34      	ldr	r2, [pc, #208]	; (800e62c <modbusQueryFSM+0x45c>)
 800e55c:	2102      	movs	r1, #2
 800e55e:	6611      	str	r1, [r2, #96]	; 0x60
				u32MB485FirstCycleComplete = 1;
 800e560:	2201      	movs	r2, #1
 800e562:	605a      	str	r2, [r3, #4]
			resetModbusPort();
 800e564:	f7ff fe22 	bl	800e1ac <resetModbusPort>
			master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800e568:	482e      	ldr	r0, [pc, #184]	; (800e624 <modbusQueryFSM+0x454>)
 800e56a:	4b31      	ldr	r3, [pc, #196]	; (800e630 <modbusQueryFSM+0x460>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f8c0 3e4c 	str.w	r3, [r0, #3660]	; 0xe4c
			modbusState = enmMODBUS_IDLE;
 800e572:	2100      	movs	r1, #0
 800e574:	4b2c      	ldr	r3, [pc, #176]	; (800e628 <modbusQueryFSM+0x458>)
 800e576:	7059      	strb	r1, [r3, #1]
			memset(master.u8SlaveResponseArray,0x00,sizeof(master.u8SlaveResponseArray));
 800e578:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800e57c:	300c      	adds	r0, #12
 800e57e:	f004 fcaf 	bl	8012ee0 <memset>
			break;
 800e582:	e048      	b.n	800e616 <modbusQueryFSM+0x446>
				master.u8MBNoQueryAttempts++;
 800e584:	3301      	adds	r3, #1
 800e586:	4a27      	ldr	r2, [pc, #156]	; (800e624 <modbusQueryFSM+0x454>)
 800e588:	f882 3522 	strb.w	r3, [r2, #1314]	; 0x522
 800e58c:	e7d9      	b.n	800e542 <modbusQueryFSM+0x372>
			uint32_t temploopcountrt = gu32MBRTUDataByteCounter;
 800e58e:	4a26      	ldr	r2, [pc, #152]	; (800e628 <modbusQueryFSM+0x458>)
 800e590:	6893      	ldr	r3, [r2, #8]
			gu32MBRTUDataByteCounter += gu32MBRTUClientNoofPoints[u8MBQueryRegisterAddressCounter];
 800e592:	7814      	ldrb	r4, [r2, #0]
 800e594:	4925      	ldr	r1, [pc, #148]	; (800e62c <modbusQueryFSM+0x45c>)
 800e596:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e59a:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800e59c:	4418      	add	r0, r3
 800e59e:	6090      	str	r0, [r2, #8]
			for(iteratorrt = temploopcountrt ; iteratorrt < gu32MBRTUDataByteCounter ; iteratorrt++)
 800e5a0:	e007      	b.n	800e5b2 <modbusQueryFSM+0x3e2>
				master.u32SlaveData[iteratorrt] = 0;
 800e5a2:	f203 218e 	addw	r1, r3, #654	; 0x28e
 800e5a6:	4a1f      	ldr	r2, [pc, #124]	; (800e624 <modbusQueryFSM+0x454>)
 800e5a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	6051      	str	r1, [r2, #4]
			for(iteratorrt = temploopcountrt ; iteratorrt < gu32MBRTUDataByteCounter ; iteratorrt++)
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	4298      	cmp	r0, r3
 800e5b4:	d90b      	bls.n	800e5ce <modbusQueryFSM+0x3fe>
				if(gu32MBRTUDataStatus[iteratorrt] == 1)
 800e5b6:	4a1c      	ldr	r2, [pc, #112]	; (800e628 <modbusQueryFSM+0x458>)
 800e5b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e5bc:	6a12      	ldr	r2, [r2, #32]
 800e5be:	2a01      	cmp	r2, #1
 800e5c0:	d1ef      	bne.n	800e5a2 <modbusQueryFSM+0x3d2>
					gu32MBRTUDataStatus[iteratorrt] = 0;
 800e5c2:	4a19      	ldr	r2, [pc, #100]	; (800e628 <modbusQueryFSM+0x458>)
 800e5c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	6211      	str	r1, [r2, #32]
 800e5cc:	e7e9      	b.n	800e5a2 <modbusQueryFSM+0x3d2>
			if(u8MBQueryRegisterAddressCounter >= (master.u16NoRegisterstoFetch))
 800e5ce:	b2a4      	uxth	r4, r4
 800e5d0:	4b14      	ldr	r3, [pc, #80]	; (800e624 <modbusQueryFSM+0x454>)
 800e5d2:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
 800e5d6:	429c      	cmp	r4, r3
 800e5d8:	d308      	bcc.n	800e5ec <modbusQueryFSM+0x41c>
				u8MBQueryRegisterAddressCounter = 0;
 800e5da:	4b13      	ldr	r3, [pc, #76]	; (800e628 <modbusQueryFSM+0x458>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	701a      	strb	r2, [r3, #0]
				gu32MBRTUClientConnectedFlag = 0; // 13/12/22 getting late
 800e5e0:	61da      	str	r2, [r3, #28]
				gu32MBRTUDataByteCounter = 0;
 800e5e2:	609a      	str	r2, [r3, #8]
				u32MB485OperationStatus = 2;
 800e5e4:	4911      	ldr	r1, [pc, #68]	; (800e62c <modbusQueryFSM+0x45c>)
 800e5e6:	2002      	movs	r0, #2
 800e5e8:	6608      	str	r0, [r1, #96]	; 0x60
				gu8MBResponseFlag = 0;
 800e5ea:	735a      	strb	r2, [r3, #13]
			gu32ModbusIP485Reset++;
 800e5ec:	4c0e      	ldr	r4, [pc, #56]	; (800e628 <modbusQueryFSM+0x458>)
 800e5ee:	69a3      	ldr	r3, [r4, #24]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	61a3      	str	r3, [r4, #24]
			resetModbusPort();
 800e5f4:	f7ff fdda 	bl	800e1ac <resetModbusPort>
			master.u32PollDelay = gu32Modbus485PollingTime;//ONE_SEC;
 800e5f8:	480a      	ldr	r0, [pc, #40]	; (800e624 <modbusQueryFSM+0x454>)
 800e5fa:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <modbusQueryFSM+0x460>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f8c0 3e4c 	str.w	r3, [r0, #3660]	; 0xe4c
			modbusState = enmMODBUS_IDLE;
 800e602:	2100      	movs	r1, #0
 800e604:	7061      	strb	r1, [r4, #1]
			memset(master.u8SlaveResponseArray,0x00,sizeof(master.u8SlaveResponseArray));
 800e606:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800e60a:	300c      	adds	r0, #12
 800e60c:	f004 fc68 	bl	8012ee0 <memset>
			u8MBQueryRegisterAddressCounter++;
 800e610:	7823      	ldrb	r3, [r4, #0]
 800e612:	3301      	adds	r3, #1
 800e614:	7023      	strb	r3, [r4, #0]
}
 800e616:	b021      	add	sp, #132	; 0x84
 800e618:	bdf0      	pop	{r4, r5, r6, r7, pc}
			modbusState = enmMODBUS_IDLE;
 800e61a:	4b03      	ldr	r3, [pc, #12]	; (800e628 <modbusQueryFSM+0x458>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	705a      	strb	r2, [r3, #1]
}
 800e620:	e7f9      	b.n	800e616 <modbusQueryFSM+0x446>
 800e622:	bf00      	nop
 800e624:	2000d3a0 	.word	0x2000d3a0
 800e628:	20003610 	.word	0x20003610
 800e62c:	20000c48 	.word	0x20000c48
 800e630:	20002004 	.word	0x20002004
 800e634:	2000d3ac 	.word	0x2000d3ac

0800e638 <uploadSlaveData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void uploadSlaveData(void)
{
 800e638:	b530      	push	{r4, r5, lr}
 800e63a:	b083      	sub	sp, #12
	static int32_t value;
	char buffer[6];

//	if(u32MB485OperationStatus == 2)
//	{
		value = master.u32SlaveData[Loopcounter];    // Signed Integer
 800e63c:	4a42      	ldr	r2, [pc, #264]	; (800e748 <uploadSlaveData+0x110>)
 800e63e:	f8d2 44d4 	ldr.w	r4, [r2, #1236]	; 0x4d4
 800e642:	f204 218e 	addw	r1, r4, #654	; 0x28e
 800e646:	4b41      	ldr	r3, [pc, #260]	; (800e74c <uploadSlaveData+0x114>)
 800e648:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e64c:	685d      	ldr	r5, [r3, #4]
 800e64e:	f8c2 54d8 	str.w	r5, [r2, #1240]	; 0x4d8
		if(Loopcounter == 0)
 800e652:	b364      	cbz	r4, 800e6ae <uploadSlaveData+0x76>
		{
			memset(gau8MBPayloadStringRT, 0x00, (1100 * sizeof(char)));
		}
		if(Loopcounter < gu32MBDataByteCounterLimitRTU)
 800e654:	4b3c      	ldr	r3, [pc, #240]	; (800e748 <uploadSlaveData+0x110>)
 800e656:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800e65a:	429c      	cmp	r4, r3
 800e65c:	d264      	bcs.n	800e728 <uploadSlaveData+0xf0>
		{
			/* Append Data to GSM Payload */
			if(gu32MBRTUDataStatus[Loopcounter] == 1)
 800e65e:	4b3a      	ldr	r3, [pc, #232]	; (800e748 <uploadSlaveData+0x110>)
 800e660:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e664:	6a23      	ldr	r3, [r4, #32]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d028      	beq.n	800e6bc <uploadSlaveData+0x84>
				memset(buffer, 0x00, (6 * sizeof(char)));
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   				  // Decimal String
				strcat(gau8MBPayloadStringRT,buffer);
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
			}
			else if(gu32MBRTUDataStatus[Loopcounter] == 2)
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d147      	bne.n	800e6fe <uploadSlaveData+0xc6>
			{
				/* Coil Data .Represent in binary .
				 * */
				if(value < 0)
 800e66e:	2d00      	cmp	r5, #0
 800e670:	db3f      	blt.n	800e6f2 <uploadSlaveData+0xba>
					value += 256;

				memset(buffer, 0x00, (6 * sizeof(char)));
 800e672:	2300      	movs	r3, #0
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	f8ad 3004 	strh.w	r3, [sp, #4]
				itoa(value,buffer,10);
 800e67a:	220a      	movs	r2, #10
 800e67c:	4669      	mov	r1, sp
 800e67e:	4b32      	ldr	r3, [pc, #200]	; (800e748 <uploadSlaveData+0x110>)
 800e680:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 800e684:	f004 f9bc 	bl	8012a00 <itoa>
				strcat(gau8MBPayloadStringRT,buffer);
 800e688:	4c31      	ldr	r4, [pc, #196]	; (800e750 <uploadSlaveData+0x118>)
 800e68a:	4669      	mov	r1, sp
 800e68c:	4620      	mov	r0, r4
 800e68e:	f004 fc7d 	bl	8012f8c <strcat>
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
 800e692:	4620      	mov	r0, r4
 800e694:	f7f1 fdb6 	bl	8000204 <strlen>
 800e698:	4b2e      	ldr	r3, [pc, #184]	; (800e754 <uploadSlaveData+0x11c>)
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	5223      	strh	r3, [r4, r0]
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
			}
			//master.u32SlaveData[Loopcounter] = 0;
			/*Added on 20-1-2020 */
			//gu32MBRTUDataStatus[Loopcounter] = 0;
			Loopcounter++;
 800e69e:	4a2a      	ldr	r2, [pc, #168]	; (800e748 <uploadSlaveData+0x110>)
 800e6a0:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	f8c2 34d4 	str.w	r3, [r2, #1236]	; 0x4d4
			//memset(gau8MBPayloadStringRT,0x00,1100 * sizeof(char));
			Loopcounter = 0;
			//gu32MBRTUDataByteCounter = 0;
		}
//	}
}
 800e6aa:	b003      	add	sp, #12
 800e6ac:	bd30      	pop	{r4, r5, pc}
			memset(gau8MBPayloadStringRT, 0x00, (1100 * sizeof(char)));
 800e6ae:	f240 424c 	movw	r2, #1100	; 0x44c
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	4826      	ldr	r0, [pc, #152]	; (800e750 <uploadSlaveData+0x118>)
 800e6b6:	f004 fc13 	bl	8012ee0 <memset>
 800e6ba:	e7cb      	b.n	800e654 <uploadSlaveData+0x1c>
				strcat(gau8MBPayloadStringRT,"E");
 800e6bc:	4c24      	ldr	r4, [pc, #144]	; (800e750 <uploadSlaveData+0x118>)
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7f1 fda0 	bl	8000204 <strlen>
 800e6c4:	4b24      	ldr	r3, [pc, #144]	; (800e758 <uploadSlaveData+0x120>)
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	5223      	strh	r3, [r4, r0]
				memset(buffer, 0x00, (6 * sizeof(char)));
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	f8ad 3004 	strh.w	r3, [sp, #4]
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   				  // Decimal String
 800e6d2:	220a      	movs	r2, #10
 800e6d4:	4669      	mov	r1, sp
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	f004 f992 	bl	8012a00 <itoa>
				strcat(gau8MBPayloadStringRT,buffer);
 800e6dc:	4669      	mov	r1, sp
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f004 fc54 	bl	8012f8c <strcat>
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f7f1 fd8d 	bl	8000204 <strlen>
 800e6ea:	4b1a      	ldr	r3, [pc, #104]	; (800e754 <uploadSlaveData+0x11c>)
 800e6ec:	881b      	ldrh	r3, [r3, #0]
 800e6ee:	5223      	strh	r3, [r4, r0]
 800e6f0:	e7d5      	b.n	800e69e <uploadSlaveData+0x66>
					value += 256;
 800e6f2:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <uploadSlaveData+0x110>)
 800e6f8:	f8c3 54d8 	str.w	r5, [r3, #1240]	; 0x4d8
 800e6fc:	e7b9      	b.n	800e672 <uploadSlaveData+0x3a>
				memset(buffer, 0x00, (6 * sizeof(char)));
 800e6fe:	2300      	movs	r3, #0
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	f8ad 3004 	strh.w	r3, [sp, #4]
				itoa(value,buffer,MB_PAYLOAD_RADIX);
 800e706:	220a      	movs	r2, #10
 800e708:	4669      	mov	r1, sp
 800e70a:	4628      	mov	r0, r5
 800e70c:	f004 f978 	bl	8012a00 <itoa>
				strcat(gau8MBPayloadStringRT,buffer);
 800e710:	4c0f      	ldr	r4, [pc, #60]	; (800e750 <uploadSlaveData+0x118>)
 800e712:	4669      	mov	r1, sp
 800e714:	4620      	mov	r0, r4
 800e716:	f004 fc39 	bl	8012f8c <strcat>
				strcat(gau8MBPayloadStringRT,PAYLOAD_SEPARATOR);
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7f1 fd72 	bl	8000204 <strlen>
 800e720:	4b0c      	ldr	r3, [pc, #48]	; (800e754 <uploadSlaveData+0x11c>)
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	5223      	strh	r3, [r4, r0]
 800e726:	e7ba      	b.n	800e69e <uploadSlaveData+0x66>
			u32MB485OperationStatus = 1;
 800e728:	480c      	ldr	r0, [pc, #48]	; (800e75c <uploadSlaveData+0x124>)
 800e72a:	2301      	movs	r3, #1
 800e72c:	6603      	str	r3, [r0, #96]	; 0x60
			memcpy(gau8TempMBRTUPayloadString,gau8MBPayloadStringRT,sizeof(gau8MBPayloadStringRT));
 800e72e:	f240 424c 	movw	r2, #1100	; 0x44c
 800e732:	f100 0164 	add.w	r1, r0, #100	; 0x64
 800e736:	f500 6096 	add.w	r0, r0, #1200	; 0x4b0
 800e73a:	f004 fbc3 	bl	8012ec4 <memcpy>
			Loopcounter = 0;
 800e73e:	4b02      	ldr	r3, [pc, #8]	; (800e748 <uploadSlaveData+0x110>)
 800e740:	2200      	movs	r2, #0
 800e742:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
}
 800e746:	e7b0      	b.n	800e6aa <uploadSlaveData+0x72>
 800e748:	20003610 	.word	0x20003610
 800e74c:	2000d3a0 	.word	0x2000d3a0
 800e750:	20000cac 	.word	0x20000cac
 800e754:	0801bde0 	.word	0x0801bde0
 800e758:	0801be90 	.word	0x0801be90
 800e75c:	20000c48 	.word	0x20000c48

0800e760 <setupModbusRTU>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void setupModbusRTU(void)
{
 800e760:	b410      	push	{r4}
	uint32_t temp = 0;
	master.u16NoRegisterstoFetch = gu32Modbus485RegisterFetch;
 800e762:	4b12      	ldr	r3, [pc, #72]	; (800e7ac <setupModbusRTU+0x4c>)
 800e764:	881c      	ldrh	r4, [r3, #0]
 800e766:	4b12      	ldr	r3, [pc, #72]	; (800e7b0 <setupModbusRTU+0x50>)
 800e768:	f8a3 4832 	strh.w	r4, [r3, #2098]	; 0x832
	master.u8MBSlave_Address = gu32Modbus485SlaveID;
 800e76c:	4a11      	ldr	r2, [pc, #68]	; (800e7b4 <setupModbusRTU+0x54>)
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	701a      	strb	r2, [r3, #0]
	u32MB485OperationStatus = 1;
 800e772:	4a11      	ldr	r2, [pc, #68]	; (800e7b8 <setupModbusRTU+0x58>)
 800e774:	2101      	movs	r1, #1
 800e776:	6611      	str	r1, [r2, #96]	; 0x60
	master.u32PollDelay = gu32Modbus485PollingTime;
 800e778:	4a10      	ldr	r2, [pc, #64]	; (800e7bc <setupModbusRTU+0x5c>)
 800e77a:	6812      	ldr	r2, [r2, #0]
 800e77c:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c

	for(temp = 0; temp < master.u16NoRegisterstoFetch ;temp++)
 800e780:	2300      	movs	r3, #0
 800e782:	429c      	cmp	r4, r3
 800e784:	d90b      	bls.n	800e79e <setupModbusRTU+0x3e>
	{
		/*Calculates how many data values will be there in payload */
		gu32MBDataByteCounterLimitRTU += gu32MBRTUClientNoofPoints[temp];
 800e786:	4a0c      	ldr	r2, [pc, #48]	; (800e7b8 <setupModbusRTU+0x58>)
 800e788:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e78c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800e78e:	490c      	ldr	r1, [pc, #48]	; (800e7c0 <setupModbusRTU+0x60>)
 800e790:	f8d1 24d0 	ldr.w	r2, [r1, #1232]	; 0x4d0
 800e794:	4402      	add	r2, r0
 800e796:	f8c1 24d0 	str.w	r2, [r1, #1232]	; 0x4d0
	for(temp = 0; temp < master.u16NoRegisterstoFetch ;temp++)
 800e79a:	3301      	adds	r3, #1
 800e79c:	e7f1      	b.n	800e782 <setupModbusRTU+0x22>
	}
	master.u8MBNoQueryAttempts = 0;
 800e79e:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <setupModbusRTU+0x50>)
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
}
 800e7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	2000293c 	.word	0x2000293c
 800e7b0:	2000d3a0 	.word	0x2000d3a0
 800e7b4:	20002938 	.word	0x20002938
 800e7b8:	20000c48 	.word	0x20000c48
 800e7bc:	20002004 	.word	0x20002004
 800e7c0:	20003610 	.word	0x20003610

0800e7c4 <tcp_client_handle>:

	/* Extract the IP */
	//char *remIP = ipaddr_ntoa(&inIP);

	//es = *es;
	pcbTx = tpcb;
 800e7c4:	4b01      	ldr	r3, [pc, #4]	; (800e7cc <tcp_client_handle+0x8>)
 800e7c6:	6018      	str	r0, [r3, #0]

}
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	20003af8 	.word	0x20003af8

0800e7d0 <tcp_modbusclient_send>:
{
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	460f      	mov	r7, r1
  err_t wr_err = ERR_OK;
 800e7d6:	2500      	movs	r5, #0
  while ((wr_err == ERR_OK) &&
 800e7d8:	e002      	b.n	800e7e0 <tcp_modbusclient_send+0x10>
      pbuf_free(ptr);
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f7f7 fe92 	bl	8006504 <pbuf_free>
  while ((wr_err == ERR_OK) &&
 800e7e0:	b9cd      	cbnz	r5, 800e816 <tcp_modbusclient_send+0x46>
         (es->p_tx != NULL) &&
 800e7e2:	68bc      	ldr	r4, [r7, #8]
  while ((wr_err == ERR_OK) &&
 800e7e4:	b1bc      	cbz	r4, 800e816 <tcp_modbusclient_send+0x46>
         (es->p_tx->len <= tcp_sndbuf(tpcb)))
 800e7e6:	8962      	ldrh	r2, [r4, #10]
 800e7e8:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
         (es->p_tx != NULL) &&
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d812      	bhi.n	800e816 <tcp_modbusclient_send+0x46>
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	6861      	ldr	r1, [r4, #4]
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f7fa fe7d 	bl	80094f4 <tcp_write>
    if (wr_err == ERR_OK) {
 800e7fa:	4605      	mov	r5, r0
 800e7fc:	b930      	cbnz	r0, 800e80c <tcp_modbusclient_send+0x3c>
      es->p_tx = ptr->next;
 800e7fe:	6820      	ldr	r0, [r4, #0]
 800e800:	60b8      	str	r0, [r7, #8]
      if (es->p_tx != NULL) {
 800e802:	2800      	cmp	r0, #0
 800e804:	d0e9      	beq.n	800e7da <tcp_modbusclient_send+0xa>
        pbuf_ref(es->p_tx);
 800e806:	f7f8 f851 	bl	80068ac <pbuf_ref>
 800e80a:	e7e6      	b.n	800e7da <tcp_modbusclient_send+0xa>
   } else if(wr_err == ERR_MEM) {
 800e80c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e810:	d1e6      	bne.n	800e7e0 <tcp_modbusclient_send+0x10>
     es->p_tx = ptr;
 800e812:	60bc      	str	r4, [r7, #8]
 800e814:	e7e4      	b.n	800e7e0 <tcp_modbusclient_send+0x10>
}
 800e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e818 <tcp_modbusclient_sent>:
{
 800e818:	b508      	push	{r3, lr}
 800e81a:	4603      	mov	r3, r0
  if(es->p_tx != NULL)
 800e81c:	6882      	ldr	r2, [r0, #8]
 800e81e:	b11a      	cbz	r2, 800e828 <tcp_modbusclient_sent+0x10>
 800e820:	4608      	mov	r0, r1
    tcp_modbusclient_send(tpcb, es);
 800e822:	4619      	mov	r1, r3
 800e824:	f7ff ffd4 	bl	800e7d0 <tcp_modbusclient_send>
}
 800e828:	2000      	movs	r0, #0
 800e82a:	bd08      	pop	{r3, pc}

0800e82c <tcp_modbusclient_connection_close>:
{
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4604      	mov	r4, r0
 800e830:	460d      	mov	r5, r1
  tcp_recv(tpcb, NULL);
 800e832:	2100      	movs	r1, #0
 800e834:	f7f8 fb1a 	bl	8006e6c <tcp_recv>
  tcp_sent(tpcb, NULL);
 800e838:	2100      	movs	r1, #0
 800e83a:	4620      	mov	r0, r4
 800e83c:	f7f8 fb30 	bl	8006ea0 <tcp_sent>
  tcp_poll(tpcb, NULL,0);
 800e840:	2200      	movs	r2, #0
 800e842:	4611      	mov	r1, r2
 800e844:	4620      	mov	r0, r4
 800e846:	f7f8 fb5d 	bl	8006f04 <tcp_poll>
  if (es != NULL) {
 800e84a:	b115      	cbz	r5, 800e852 <tcp_modbusclient_connection_close+0x26>
    mem_free(es);
 800e84c:	4628      	mov	r0, r5
 800e84e:	f7f7 fac9 	bl	8005de4 <mem_free>
  gu32MBConnected = 0;
 800e852:	4b04      	ldr	r3, [pc, #16]	; (800e864 <tcp_modbusclient_connection_close+0x38>)
 800e854:	2200      	movs	r2, #0
 800e856:	605a      	str	r2, [r3, #4]
  gu32MBOperateFlag = 0;
 800e858:	609a      	str	r2, [r3, #8]
  tcp_close(tpcb);
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7f8 fe8e 	bl	800757c <tcp_close>
}
 800e860:	bd38      	pop	{r3, r4, r5, pc}
 800e862:	bf00      	nop
 800e864:	20003af8 	.word	0x20003af8

0800e868 <tcp_modbusclient_poll>:
{
 800e868:	b508      	push	{r3, lr}
 800e86a:	460b      	mov	r3, r1
  if (es != NULL) {
 800e86c:	b188      	cbz	r0, 800e892 <tcp_modbusclient_poll+0x2a>
 800e86e:	4601      	mov	r1, r0
    if (es->p_tx != NULL) {
 800e870:	6882      	ldr	r2, [r0, #8]
 800e872:	b122      	cbz	r2, 800e87e <tcp_modbusclient_poll+0x16>
      tcp_modbusclient_send(tpcb, es);
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff ffab 	bl	800e7d0 <tcp_modbusclient_send>
    ret_err = ERR_OK;
 800e87a:	2000      	movs	r0, #0
}
 800e87c:	bd08      	pop	{r3, pc}
      if (es->state == ES_CLOSING) {
 800e87e:	7802      	ldrb	r2, [r0, #0]
 800e880:	2a03      	cmp	r2, #3
 800e882:	d001      	beq.n	800e888 <tcp_modbusclient_poll+0x20>
    ret_err = ERR_OK;
 800e884:	2000      	movs	r0, #0
 800e886:	e7f9      	b.n	800e87c <tcp_modbusclient_poll+0x14>
        tcp_modbusclient_connection_close(tpcb, es);
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff ffcf 	bl	800e82c <tcp_modbusclient_connection_close>
    ret_err = ERR_OK;
 800e88e:	2000      	movs	r0, #0
 800e890:	e7f4      	b.n	800e87c <tcp_modbusclient_poll+0x14>
    tcp_abort(tpcb);
 800e892:	4608      	mov	r0, r1
 800e894:	f7f8 ff94 	bl	80077c0 <tcp_abort>
    ret_err = ERR_ABRT;
 800e898:	f06f 000c 	mvn.w	r0, #12
 800e89c:	e7ee      	b.n	800e87c <tcp_modbusclient_poll+0x14>
	...

0800e8a0 <tcp_modbusclient_recv>:
{
 800e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a2:	460f      	mov	r7, r1
 800e8a4:	4615      	mov	r5, r2
 800e8a6:	461c      	mov	r4, r3
  LWIP_ASSERT("arg != NULL",arg != NULL);
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	b188      	cbz	r0, 800e8d0 <tcp_modbusclient_recv+0x30>
  if (p == NULL) {
 800e8ac:	b1c5      	cbz	r5, 800e8e0 <tcp_modbusclient_recv+0x40>
  else if (err != ERR_OK) {
 800e8ae:	bb3c      	cbnz	r4, 800e900 <tcp_modbusclient_recv+0x60>
  } else if(es->state == ES_CONNECTED) {
 800e8b0:	7833      	ldrb	r3, [r6, #0]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d13a      	bne.n	800e92c <tcp_modbusclient_recv+0x8c>
	  if(gu32MBClientConnectedFlag == 1)
 800e8b6:	4b22      	ldr	r3, [pc, #136]	; (800e940 <tcp_modbusclient_recv+0xa0>)
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d025      	beq.n	800e90a <tcp_modbusclient_recv+0x6a>
	  tcp_recved(tpcb, p->tot_len);
 800e8be:	8929      	ldrh	r1, [r5, #8]
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7f8 fa63 	bl	8006d8c <tcp_recved>
	  pbuf_free(p);
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f7f7 fe1c 	bl	8006504 <pbuf_free>
	  ret_err = ERR_OK;
 800e8cc:	4620      	mov	r0, r4
}
 800e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("arg != NULL",arg != NULL);
 800e8d0:	4b1c      	ldr	r3, [pc, #112]	; (800e944 <tcp_modbusclient_recv+0xa4>)
 800e8d2:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 800e8d6:	491c      	ldr	r1, [pc, #112]	; (800e948 <tcp_modbusclient_recv+0xa8>)
 800e8d8:	481c      	ldr	r0, [pc, #112]	; (800e94c <tcp_modbusclient_recv+0xac>)
 800e8da:	f004 fb15 	bl	8012f08 <printf>
 800e8de:	e7e5      	b.n	800e8ac <tcp_modbusclient_recv+0xc>
    es->state = ES_CLOSING;
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	7033      	strb	r3, [r6, #0]
    if (es->p_tx == NULL) {
 800e8e4:	68b3      	ldr	r3, [r6, #8]
 800e8e6:	b12b      	cbz	r3, 800e8f4 <tcp_modbusclient_recv+0x54>
      tcp_modbusclient_send(tpcb, es);
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	4638      	mov	r0, r7
 800e8ec:	f7ff ff70 	bl	800e7d0 <tcp_modbusclient_send>
    ret_err = ERR_OK;
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	e7ec      	b.n	800e8ce <tcp_modbusclient_recv+0x2e>
       tcp_modbusclient_connection_close(tpcb, es);
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	f7ff ff98 	bl	800e82c <tcp_modbusclient_connection_close>
    ret_err = ERR_OK;
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e7e6      	b.n	800e8ce <tcp_modbusclient_recv+0x2e>
      pbuf_free(p);
 800e900:	4628      	mov	r0, r5
 800e902:	f7f7 fdff 	bl	8006504 <pbuf_free>
    ret_err = err;
 800e906:	4620      	mov	r0, r4
 800e908:	e7e1      	b.n	800e8ce <tcp_modbusclient_recv+0x2e>
		  memcpy(strMbClient.s8SlaveResponseArray,p->payload,p->tot_len);
 800e90a:	892a      	ldrh	r2, [r5, #8]
 800e90c:	6869      	ldr	r1, [r5, #4]
 800e90e:	4810      	ldr	r0, [pc, #64]	; (800e950 <tcp_modbusclient_recv+0xb0>)
 800e910:	f004 fad8 	bl	8012ec4 <memcpy>
		  enmMBCurrentState = enmMB_RESPONSERECEIVED;
 800e914:	4b0f      	ldr	r3, [pc, #60]	; (800e954 <tcp_modbusclient_recv+0xb4>)
 800e916:	2204      	movs	r2, #4
 800e918:	701a      	strb	r2, [r3, #0]
		  gu32MBConnected = 1;
 800e91a:	4b09      	ldr	r3, [pc, #36]	; (800e940 <tcp_modbusclient_recv+0xa0>)
 800e91c:	2201      	movs	r2, #1
 800e91e:	605a      	str	r2, [r3, #4]
		  gu32MBOperateFlag = 1;
 800e920:	609a      	str	r2, [r3, #8]
		  tcp_client_handle(tpcb, es);
 800e922:	4631      	mov	r1, r6
 800e924:	4638      	mov	r0, r7
 800e926:	f7ff ff4d 	bl	800e7c4 <tcp_client_handle>
 800e92a:	e7c8      	b.n	800e8be <tcp_modbusclient_recv+0x1e>
    tcp_recved(tpcb, p->tot_len);
 800e92c:	8929      	ldrh	r1, [r5, #8]
 800e92e:	4638      	mov	r0, r7
 800e930:	f7f8 fa2c 	bl	8006d8c <tcp_recved>
    pbuf_free(p);
 800e934:	4628      	mov	r0, r5
 800e936:	f7f7 fde5 	bl	8006504 <pbuf_free>
    ret_err = ERR_OK;
 800e93a:	4620      	mov	r0, r4
 800e93c:	e7c7      	b.n	800e8ce <tcp_modbusclient_recv+0x2e>
 800e93e:	bf00      	nop
 800e940:	20003af8 	.word	0x20003af8
 800e944:	0801be94 	.word	0x0801be94
 800e948:	0801bea8 	.word	0x0801bea8
 800e94c:	0801a38c 	.word	0x0801a38c
 800e950:	2000e37c 	.word	0x2000e37c
 800e954:	20001544 	.word	0x20001544

0800e958 <updateModbusQueryFrame>:
	strMbClient.u32QueryFrame[0] = (MB_TCP_TID >> 8);
 800e958:	4b1e      	ldr	r3, [pc, #120]	; (800e9d4 <updateModbusQueryFrame+0x7c>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	f883 2020 	strb.w	r2, [r3, #32]
	strMbClient.u32QueryFrame[1] = (MB_TCP_TID & 0xFF);
 800e960:	2103      	movs	r1, #3
 800e962:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	strMbClient.u32QueryFrame[2] = (MB_TCP_PID >> 8);
 800e966:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	strMbClient.u32QueryFrame[3] = (MB_TCP_PID & 0xFF);
 800e96a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	strMbClient.u32QueryFrame[4] = (6 >> 8);
 800e96e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	strMbClient.u32QueryFrame[5] = (6 & 0xFF);
 800e972:	2206      	movs	r2, #6
 800e974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	strMbClient.u32QueryFrame[6] = (strMbClient.u32UnitId);
 800e978:	7b1a      	ldrb	r2, [r3, #12]
 800e97a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	strMbClient.u32QueryFrame[7] = gu32MBTCPClientFuncCode[message_count];
 800e97e:	4a16      	ldr	r2, [pc, #88]	; (800e9d8 <updateModbusQueryFrame+0x80>)
 800e980:	6910      	ldr	r0, [r2, #16]
 800e982:	4916      	ldr	r1, [pc, #88]	; (800e9dc <updateModbusQueryFrame+0x84>)
 800e984:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800e988:	7900      	ldrb	r0, [r0, #4]
 800e98a:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
	strMbClient.u32QueryFrame[8] = ((gu32MBTCPClientAddress[message_count]- MB_ADDRESS_DEREF) >> 8);
 800e98e:	6910      	ldr	r0, [r2, #16]
 800e990:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800e994:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e996:	3801      	subs	r0, #1
 800e998:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800e99c:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
	strMbClient.u32QueryFrame[9] = ((gu32MBTCPClientAddress[message_count]- MB_ADDRESS_DEREF)& 0xFF);
 800e9a0:	6910      	ldr	r0, [r2, #16]
 800e9a2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800e9a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e9a8:	3801      	subs	r0, #1
 800e9aa:	b2c0      	uxtb	r0, r0
 800e9ac:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
	strMbClient.u32QueryFrame[10] = ((gu32MBTCPClientNoofPoints[message_count]) >> 8);
 800e9b0:	6910      	ldr	r0, [r2, #16]
 800e9b2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800e9b6:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800e9ba:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
	strMbClient.u32QueryFrame[11] = ((gu32MBTCPClientNoofPoints[message_count])& 0xFF);
 800e9be:	6910      	ldr	r0, [r2, #16]
 800e9c0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e9c4:	f891 1044 	ldrb.w	r1, [r1, #68]	; 0x44
 800e9c8:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
	temp++;
 800e9cc:	6953      	ldr	r3, [r2, #20]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	6153      	str	r3, [r2, #20]
}
 800e9d2:	4770      	bx	lr
 800e9d4:	2000e288 	.word	0x2000e288
 800e9d8:	20003af8 	.word	0x20003af8
 800e9dc:	20001544 	.word	0x20001544

0800e9e0 <tcp_modbusclient_connected>:
{
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	460c      	mov	r4, r1
  if (err == ERR_OK) {
 800e9e4:	4616      	mov	r6, r2
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	d145      	bne.n	800ea76 <tcp_modbusclient_connected+0x96>
    es = (struct mbclient *)mem_malloc(sizeof(struct mbclient));
 800e9ea:	200c      	movs	r0, #12
 800e9ec:	f7f7 fad2 	bl	8005f94 <mem_malloc>
 800e9f0:	4b24      	ldr	r3, [pc, #144]	; (800ea84 <tcp_modbusclient_connected+0xa4>)
 800e9f2:	6198      	str	r0, [r3, #24]
    if (es != NULL) {
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d037      	beq.n	800ea68 <tcp_modbusclient_connected+0x88>
      es->state = ES_CONNECTED;
 800e9f8:	2701      	movs	r7, #1
 800e9fa:	7007      	strb	r7, [r0, #0]
      es->pcb = tpcb;
 800e9fc:	461d      	mov	r5, r3
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	605c      	str	r4, [r3, #4]
      updateModbusQueryFrame();
 800ea02:	f7ff ffa9 	bl	800e958 <updateModbusQueryFrame>
      gu32MBClientConnectedFlag = 1;
 800ea06:	60ef      	str	r7, [r5, #12]
      es->p_tx = pbuf_alloc(PBUF_TRANSPORT, 12 , PBUF_POOL);
 800ea08:	69af      	ldr	r7, [r5, #24]
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	210c      	movs	r1, #12
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f7f7 fddc 	bl	80065cc <pbuf_alloc>
 800ea14:	60b8      	str	r0, [r7, #8]
      if (es->p_tx) {
 800ea16:	69ab      	ldr	r3, [r5, #24]
 800ea18:	6898      	ldr	r0, [r3, #8]
 800ea1a:	b388      	cbz	r0, 800ea80 <tcp_modbusclient_connected+0xa0>
        pbuf_take(es->p_tx, (uint8_t *)strMbClient.u32QueryFrame, 12);
 800ea1c:	220c      	movs	r2, #12
 800ea1e:	491a      	ldr	r1, [pc, #104]	; (800ea88 <tcp_modbusclient_connected+0xa8>)
 800ea20:	f7f8 f878 	bl	8006b14 <pbuf_take>
        tcp_arg(tpcb, es);
 800ea24:	69a9      	ldr	r1, [r5, #24]
 800ea26:	4620      	mov	r0, r4
 800ea28:	f7f8 fa1d 	bl	8006e66 <tcp_arg>
        tcp_recv(tpcb, tcp_modbusclient_recv);
 800ea2c:	4917      	ldr	r1, [pc, #92]	; (800ea8c <tcp_modbusclient_connected+0xac>)
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f7f8 fa1c 	bl	8006e6c <tcp_recv>
        tcp_sent(tpcb, tcp_modbusclient_sent);
 800ea34:	4916      	ldr	r1, [pc, #88]	; (800ea90 <tcp_modbusclient_connected+0xb0>)
 800ea36:	4620      	mov	r0, r4
 800ea38:	f7f8 fa32 	bl	8006ea0 <tcp_sent>
        tcp_poll(tpcb, tcp_modbusclient_poll, 1); // changed from 1 21/1/2021
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	4915      	ldr	r1, [pc, #84]	; (800ea94 <tcp_modbusclient_connected+0xb4>)
 800ea40:	4620      	mov	r0, r4
 800ea42:	f7f8 fa5f 	bl	8006f04 <tcp_poll>
        tcp_client_handle(tpcb, es);
 800ea46:	69a9      	ldr	r1, [r5, #24]
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7ff febb 	bl	800e7c4 <tcp_client_handle>
        gu32MBOperateFlag = 1;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	60ab      	str	r3, [r5, #8]
        enmMBCurrentState = enmMB_CONNECTED;
 800ea52:	4b11      	ldr	r3, [pc, #68]	; (800ea98 <tcp_modbusclient_connected+0xb8>)
 800ea54:	2202      	movs	r2, #2
 800ea56:	701a      	strb	r2, [r3, #0]
        tcp_modbusclient_send(tpcb,es);
 800ea58:	69a9      	ldr	r1, [r5, #24]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f7ff feb8 	bl	800e7d0 <tcp_modbusclient_send>
        gu32MBTCPTimer = FIVE_SEC;
 800ea60:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea64:	61eb      	str	r3, [r5, #28]
        return ERR_OK;
 800ea66:	e00b      	b.n	800ea80 <tcp_modbusclient_connected+0xa0>
      tcp_modbusclient_connection_close(tpcb, es);
 800ea68:	4601      	mov	r1, r0
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f7ff fede 	bl	800e82c <tcp_modbusclient_connection_close>
      return ERR_MEM;
 800ea70:	f04f 36ff 	mov.w	r6, #4294967295
 800ea74:	e004      	b.n	800ea80 <tcp_modbusclient_connected+0xa0>
    tcp_modbusclient_connection_close(tpcb, es);
 800ea76:	4b03      	ldr	r3, [pc, #12]	; (800ea84 <tcp_modbusclient_connected+0xa4>)
 800ea78:	6999      	ldr	r1, [r3, #24]
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f7ff fed6 	bl	800e82c <tcp_modbusclient_connection_close>
}
 800ea80:	4630      	mov	r0, r6
 800ea82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea84:	20003af8 	.word	0x20003af8
 800ea88:	2000e2a8 	.word	0x2000e2a8
 800ea8c:	0800e8a1 	.word	0x0800e8a1
 800ea90:	0800e819 	.word	0x0800e819
 800ea94:	0800e869 	.word	0x0800e869
 800ea98:	20001544 	.word	0x20001544

0800ea9c <setupModbus>:
{
 800ea9c:	b410      	push	{r4}
	strMbClient.u32MBQueryCounter = 0;
 800ea9e:	4a10      	ldr	r2, [pc, #64]	; (800eae0 <setupModbus+0x44>)
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	6113      	str	r3, [r2, #16]
	strMbClient.u32NoofRegConfigured = gu32Modbus485RegisterFetch;//44;
 800eaa4:	490f      	ldr	r1, [pc, #60]	; (800eae4 <setupModbus+0x48>)
 800eaa6:	680c      	ldr	r4, [r1, #0]
 800eaa8:	f8c2 4668 	str.w	r4, [r2, #1640]	; 0x668
	for(temp = 0; temp < strMbClient.u32NoofRegConfigured ;temp++)
 800eaac:	4a0e      	ldr	r2, [pc, #56]	; (800eae8 <setupModbus+0x4c>)
 800eaae:	6153      	str	r3, [r2, #20]
 800eab0:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <setupModbus+0x4c>)
 800eab2:	695b      	ldr	r3, [r3, #20]
 800eab4:	429c      	cmp	r4, r3
 800eab6:	d90a      	bls.n	800eace <setupModbus+0x32>
		gu32MBDataByteCounterLimit += gu32MBTCPClientNoofPoints[temp];
 800eab8:	4a0c      	ldr	r2, [pc, #48]	; (800eaec <setupModbus+0x50>)
 800eaba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eabe:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800eac0:	4a09      	ldr	r2, [pc, #36]	; (800eae8 <setupModbus+0x4c>)
 800eac2:	6a11      	ldr	r1, [r2, #32]
 800eac4:	4401      	add	r1, r0
 800eac6:	6211      	str	r1, [r2, #32]
	for(temp = 0; temp < strMbClient.u32NoofRegConfigured ;temp++)
 800eac8:	3301      	adds	r3, #1
 800eaca:	6153      	str	r3, [r2, #20]
 800eacc:	e7f0      	b.n	800eab0 <setupModbus+0x14>
	strMbClient.u32MBNoQueryAttempts = 0;
 800eace:	4b04      	ldr	r3, [pc, #16]	; (800eae0 <setupModbus+0x44>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	609a      	str	r2, [r3, #8]
	strMbClient.u32UnitId = 1;
 800ead4:	2201      	movs	r2, #1
 800ead6:	60da      	str	r2, [r3, #12]
}
 800ead8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	2000e288 	.word	0x2000e288
 800eae4:	2000293c 	.word	0x2000293c
 800eae8:	20003af8 	.word	0x20003af8
 800eaec:	20001544 	.word	0x20001544

0800eaf0 <updateModbusPayload>:
{
 800eaf0:	b570      	push	{r4, r5, r6, lr}
		value = strMbClient.u32SlaveData[RegisterCounter];    // Signed Integer
 800eaf2:	4a47      	ldr	r2, [pc, #284]	; (800ec10 <updateModbusPayload+0x120>)
 800eaf4:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800eaf6:	f104 0194 	add.w	r1, r4, #148	; 0x94
 800eafa:	4b46      	ldr	r3, [pc, #280]	; (800ec14 <updateModbusPayload+0x124>)
 800eafc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800eb00:	685d      	ldr	r5, [r3, #4]
 800eb02:	6295      	str	r5, [r2, #40]	; 0x28
		if(RegisterCounter == 0)
 800eb04:	b354      	cbz	r4, 800eb5c <updateModbusPayload+0x6c>
		if(RegisterCounter < (gu32MBDataByteCounterLimit))
 800eb06:	4b42      	ldr	r3, [pc, #264]	; (800ec10 <updateModbusPayload+0x120>)
 800eb08:	6a1b      	ldr	r3, [r3, #32]
 800eb0a:	429c      	cmp	r4, r3
 800eb0c:	d26a      	bcs.n	800ebe4 <updateModbusPayload+0xf4>
			if(gu32MBTCPDataStatus[RegisterCounter] == 1)
 800eb0e:	4b40      	ldr	r3, [pc, #256]	; (800ec10 <updateModbusPayload+0x120>)
 800eb10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d027      	beq.n	800eb6a <updateModbusPayload+0x7a>
			else if(gu32MBTCPDataStatus[RegisterCounter] == 2)
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d149      	bne.n	800ebb2 <updateModbusPayload+0xc2>
				if(value < 0)
 800eb1e:	2d00      	cmp	r5, #0
 800eb20:	db42      	blt.n	800eba8 <updateModbusPayload+0xb8>
				memset(buffer, 0x00, (6 * sizeof(char)));
 800eb22:	4b3b      	ldr	r3, [pc, #236]	; (800ec10 <updateModbusPayload+0x120>)
 800eb24:	f203 45dc 	addw	r5, r3, #1244	; 0x4dc
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
 800eb2e:	f8a3 24e0 	strh.w	r2, [r3, #1248]	; 0x4e0
				itoa(value,buffer,10);	   	   				  // decimal String
 800eb32:	220a      	movs	r2, #10
 800eb34:	4629      	mov	r1, r5
 800eb36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800eb38:	f003 ff62 	bl	8012a00 <itoa>
				strcat(gau8MBPayloadString,buffer);
 800eb3c:	4c36      	ldr	r4, [pc, #216]	; (800ec18 <updateModbusPayload+0x128>)
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4620      	mov	r0, r4
 800eb42:	f004 fa23 	bl	8012f8c <strcat>
				strcat(gau8MBPayloadString,PAYLOAD_SEPARATOR);
 800eb46:	4620      	mov	r0, r4
 800eb48:	f7f1 fb5c 	bl	8000204 <strlen>
 800eb4c:	4b33      	ldr	r3, [pc, #204]	; (800ec1c <updateModbusPayload+0x12c>)
 800eb4e:	881b      	ldrh	r3, [r3, #0]
 800eb50:	5223      	strh	r3, [r4, r0]
			RegisterCounter++;
 800eb52:	4a2f      	ldr	r2, [pc, #188]	; (800ec10 <updateModbusPayload+0x120>)
 800eb54:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800eb56:	3301      	adds	r3, #1
 800eb58:	6253      	str	r3, [r2, #36]	; 0x24
}
 800eb5a:	bd70      	pop	{r4, r5, r6, pc}
			memset(gau8MBPayloadString, 0x00, (1100 * sizeof(char)));
 800eb5c:	f240 424c 	movw	r2, #1100	; 0x44c
 800eb60:	2100      	movs	r1, #0
 800eb62:	482d      	ldr	r0, [pc, #180]	; (800ec18 <updateModbusPayload+0x128>)
 800eb64:	f004 f9bc 	bl	8012ee0 <memset>
 800eb68:	e7cd      	b.n	800eb06 <updateModbusPayload+0x16>
				strcat(gau8MBPayloadString,"E");
 800eb6a:	4c2b      	ldr	r4, [pc, #172]	; (800ec18 <updateModbusPayload+0x128>)
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f7f1 fb49 	bl	8000204 <strlen>
 800eb72:	4b2b      	ldr	r3, [pc, #172]	; (800ec20 <updateModbusPayload+0x130>)
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	5223      	strh	r3, [r4, r0]
				memset(buffer, 0x00, (6 * sizeof(char)));
 800eb78:	4a25      	ldr	r2, [pc, #148]	; (800ec10 <updateModbusPayload+0x120>)
 800eb7a:	f202 46dc 	addw	r6, r2, #1244	; 0x4dc
 800eb7e:	2300      	movs	r3, #0
 800eb80:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
 800eb84:	f8a2 34e0 	strh.w	r3, [r2, #1248]	; 0x4e0
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   				  // Decimal String
 800eb88:	220a      	movs	r2, #10
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f003 ff37 	bl	8012a00 <itoa>
				strcat(gau8MBPayloadString,buffer);
 800eb92:	4631      	mov	r1, r6
 800eb94:	4620      	mov	r0, r4
 800eb96:	f004 f9f9 	bl	8012f8c <strcat>
				strcat(gau8MBPayloadString,PAYLOAD_SEPARATOR);
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7f1 fb32 	bl	8000204 <strlen>
 800eba0:	4b1e      	ldr	r3, [pc, #120]	; (800ec1c <updateModbusPayload+0x12c>)
 800eba2:	881b      	ldrh	r3, [r3, #0]
 800eba4:	5223      	strh	r3, [r4, r0]
 800eba6:	e7d4      	b.n	800eb52 <updateModbusPayload+0x62>
					value += 256;
 800eba8:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800ebac:	4b18      	ldr	r3, [pc, #96]	; (800ec10 <updateModbusPayload+0x120>)
 800ebae:	629d      	str	r5, [r3, #40]	; 0x28
 800ebb0:	e7b7      	b.n	800eb22 <updateModbusPayload+0x32>
				memset(buffer, 0x00, (6 * sizeof(char)));
 800ebb2:	4a17      	ldr	r2, [pc, #92]	; (800ec10 <updateModbusPayload+0x120>)
 800ebb4:	f202 46dc 	addw	r6, r2, #1244	; 0x4dc
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
 800ebbe:	f8a2 34e0 	strh.w	r3, [r2, #1248]	; 0x4e0
				itoa(value,buffer,MB_PAYLOAD_RADIX);	   	   			// Decimal String
 800ebc2:	220a      	movs	r2, #10
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f003 ff1a 	bl	8012a00 <itoa>
				strcat(gau8MBPayloadString,buffer);
 800ebcc:	4c12      	ldr	r4, [pc, #72]	; (800ec18 <updateModbusPayload+0x128>)
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f004 f9db 	bl	8012f8c <strcat>
				strcat(gau8MBPayloadString,PAYLOAD_SEPARATOR);
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f7f1 fb14 	bl	8000204 <strlen>
 800ebdc:	4b0f      	ldr	r3, [pc, #60]	; (800ec1c <updateModbusPayload+0x12c>)
 800ebde:	881b      	ldrh	r3, [r3, #0]
 800ebe0:	5223      	strh	r3, [r4, r0]
 800ebe2:	e7b6      	b.n	800eb52 <updateModbusPayload+0x62>
			memcpy(gau8TempMBPayloadString,gau8MBPayloadString,sizeof(gau8MBPayloadString));
 800ebe4:	480f      	ldr	r0, [pc, #60]	; (800ec24 <updateModbusPayload+0x134>)
 800ebe6:	f240 424c 	movw	r2, #1100	; 0x44c
 800ebea:	f100 0164 	add.w	r1, r0, #100	; 0x64
 800ebee:	f500 6096 	add.w	r0, r0, #1200	; 0x4b0
 800ebf2:	f004 f967 	bl	8012ec4 <memcpy>
			if(gu32MBProcessPayloadFlag)
 800ebf6:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <updateModbusPayload+0x120>)
 800ebf8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800ebfc:	b11b      	cbz	r3, 800ec06 <updateModbusPayload+0x116>
				gu32MBProcessPayloadFlag = 0;
 800ebfe:	4b04      	ldr	r3, [pc, #16]	; (800ec10 <updateModbusPayload+0x120>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
			RegisterCounter = 0;
 800ec06:	4b02      	ldr	r3, [pc, #8]	; (800ec10 <updateModbusPayload+0x120>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ec0c:	e7a5      	b.n	800eb5a <updateModbusPayload+0x6a>
 800ec0e:	bf00      	nop
 800ec10:	20003af8 	.word	0x20003af8
 800ec14:	2000e288 	.word	0x2000e288
 800ec18:	200015a8 	.word	0x200015a8
 800ec1c:	0801bde0 	.word	0x0801bde0
 800ec20:	0801be90 	.word	0x0801be90
 800ec24:	20001544 	.word	0x20001544

0800ec28 <tcp_modbusclient_connect>:
	if(gu32MBOperateFlag)
 800ec28:	4b1d      	ldr	r3, [pc, #116]	; (800eca0 <tcp_modbusclient_connect+0x78>)
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	b103      	cbz	r3, 800ec30 <tcp_modbusclient_connect+0x8>
 800ec2e:	4770      	bx	lr
{
 800ec30:	b510      	push	{r4, lr}
 800ec32:	b082      	sub	sp, #8
  	pcbTx = tcp_new();
 800ec34:	f7f8 feaa 	bl	800798c <tcp_new>
 800ec38:	4b19      	ldr	r3, [pc, #100]	; (800eca0 <tcp_modbusclient_connect+0x78>)
 800ec3a:	6018      	str	r0, [r3, #0]
	if (pcbTx != NULL)
 800ec3c:	b350      	cbz	r0, 800ec94 <tcp_modbusclient_connect+0x6c>
		IP4_ADDR( &DestIPaddr, IP_ADDRESS_DESTI[0], IP_ADDRESS_DESTI[1], IP_ADDRESS_DESTI[2], IP_ADDRESS_DESTI[3]);
 800ec3e:	4a19      	ldr	r2, [pc, #100]	; (800eca4 <tcp_modbusclient_connect+0x7c>)
 800ec40:	7811      	ldrb	r1, [r2, #0]
 800ec42:	7853      	ldrb	r3, [r2, #1]
 800ec44:	041b      	lsls	r3, r3, #16
 800ec46:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ec4a:	7891      	ldrb	r1, [r2, #2]
 800ec4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ec50:	78d1      	ldrb	r1, [r2, #3]
 800ec52:	430b      	orrs	r3, r1
 800ec54:	021a      	lsls	r2, r3, #8
 800ec56:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ec5a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ec5e:	0a19      	lsrs	r1, r3, #8
 800ec60:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800ec64:	430a      	orrs	r2, r1
 800ec66:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800ec6a:	9301      	str	r3, [sp, #4]
		tcp_err(pcbTx, tcp_modbusclient_error);
 800ec6c:	490e      	ldr	r1, [pc, #56]	; (800eca8 <tcp_modbusclient_connect+0x80>)
 800ec6e:	f7f8 f92f 	bl	8006ed0 <tcp_err>
	  gu32MBClientConnectedFlag = 0;
 800ec72:	4c0b      	ldr	r4, [pc, #44]	; (800eca0 <tcp_modbusclient_connect+0x78>)
 800ec74:	2300      	movs	r3, #0
 800ec76:	60e3      	str	r3, [r4, #12]
	  err = tcp_connect(pcbTx,&DestIPaddr,gu32ModbusTCPPort,tcp_modbusclient_connected); //502
 800ec78:	4b0c      	ldr	r3, [pc, #48]	; (800ecac <tcp_modbusclient_connect+0x84>)
 800ec7a:	4a0d      	ldr	r2, [pc, #52]	; (800ecb0 <tcp_modbusclient_connect+0x88>)
 800ec7c:	8812      	ldrh	r2, [r2, #0]
 800ec7e:	a901      	add	r1, sp, #4
 800ec80:	6820      	ldr	r0, [r4, #0]
 800ec82:	f7f8 fea5 	bl	80079d0 <tcp_connect>
 800ec86:	f884 04e8 	strb.w	r0, [r4, #1256]	; 0x4e8
	  if(err != ERR_OK)
 800ec8a:	b928      	cbnz	r0, 800ec98 <tcp_modbusclient_connect+0x70>
		gu32MBTCPTimer = THREE_SEC;
 800ec8c:	4b04      	ldr	r3, [pc, #16]	; (800eca0 <tcp_modbusclient_connect+0x78>)
 800ec8e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ec92:	61da      	str	r2, [r3, #28]
}
 800ec94:	b002      	add	sp, #8
 800ec96:	bd10      	pop	{r4, pc}
		Error_Handler();
 800ec98:	f7ff fa48 	bl	800e12c <Error_Handler>
 800ec9c:	e7fa      	b.n	800ec94 <tcp_modbusclient_connect+0x6c>
 800ec9e:	bf00      	nop
 800eca0:	20003af8 	.word	0x20003af8
 800eca4:	20002944 	.word	0x20002944
 800eca8:	0800f0a5 	.word	0x0800f0a5
 800ecac:	0800e9e1 	.word	0x0800e9e1
 800ecb0:	20002948 	.word	0x20002948

0800ecb4 <mbTCPPoll>:
	if( (gu32MBPOLLTimer != 0  || (gu32MBProcessPayloadFlag == 1) ||(gu32EthLinkAlert == 1)))//gu32EthLinkAlert == 1 gu32MBProcessPayloadFlag  ||
 800ecb4:	4bb2      	ldr	r3, [pc, #712]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ecb6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f040 81d6 	bne.w	800f06c <mbTCPPoll+0x3b8>
 800ecc0:	4aaf      	ldr	r2, [pc, #700]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ecc2:	f8d2 24e4 	ldr.w	r2, [r2, #1252]	; 0x4e4
 800ecc6:	2a01      	cmp	r2, #1
 800ecc8:	f000 81d0 	beq.w	800f06c <mbTCPPoll+0x3b8>
 800eccc:	4aad      	ldr	r2, [pc, #692]	; (800ef84 <mbTCPPoll+0x2d0>)
 800ecce:	6812      	ldr	r2, [r2, #0]
 800ecd0:	2a01      	cmp	r2, #1
 800ecd2:	f000 81cb 	beq.w	800f06c <mbTCPPoll+0x3b8>
{
 800ecd6:	b570      	push	{r4, r5, r6, lr}
	switch(enmMBCurrentState)
 800ecd8:	4aab      	ldr	r2, [pc, #684]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ecda:	7812      	ldrb	r2, [r2, #0]
 800ecdc:	2a06      	cmp	r2, #6
 800ecde:	f200 81c1 	bhi.w	800f064 <mbTCPPoll+0x3b0>
 800ece2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ece6:	0007      	.short	0x0007
 800ece8:	0030000b 	.word	0x0030000b
 800ecec:	00400038 	.word	0x00400038
 800ecf0:	01af015d 	.word	0x01af015d
			enmMBCurrentState = enmMB_CONNECTING;
 800ecf4:	4ba4      	ldr	r3, [pc, #656]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	701a      	strb	r2, [r3, #0]
}
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
			if(gu32MBConnected == 0)
 800ecfc:	4ba0      	ldr	r3, [pc, #640]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	b92b      	cbnz	r3, 800ed0e <mbTCPPoll+0x5a>
				tcp_modbusclient_connect();
 800ed02:	f7ff ff91 	bl	800ec28 <tcp_modbusclient_connect>
			enmMBCurrentState = enmMB_CONNECTED;
 800ed06:	4ba0      	ldr	r3, [pc, #640]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ed08:	2202      	movs	r2, #2
 800ed0a:	701a      	strb	r2, [r3, #0]
		break;
 800ed0c:	e7f5      	b.n	800ecfa <mbTCPPoll+0x46>
				updateModbusQueryFrame();
 800ed0e:	f7ff fe23 	bl	800e958 <updateModbusQueryFrame>
				es->p_tx = pbuf_alloc(PBUF_TRANSPORT, 12 , PBUF_POOL);
 800ed12:	4c9b      	ldr	r4, [pc, #620]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ed14:	69a5      	ldr	r5, [r4, #24]
 800ed16:	2203      	movs	r2, #3
 800ed18:	210c      	movs	r1, #12
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	f7f7 fc56 	bl	80065cc <pbuf_alloc>
 800ed20:	60a8      	str	r0, [r5, #8]
				pbuf_take(es->p_tx, (char*)strMbClient.u32QueryFrame, 12);
 800ed22:	69a3      	ldr	r3, [r4, #24]
 800ed24:	220c      	movs	r2, #12
 800ed26:	4999      	ldr	r1, [pc, #612]	; (800ef8c <mbTCPPoll+0x2d8>)
 800ed28:	6898      	ldr	r0, [r3, #8]
 800ed2a:	f7f7 fef3 	bl	8006b14 <pbuf_take>
				tcp_modbusclient_send(pcbTx, es);
 800ed2e:	69a1      	ldr	r1, [r4, #24]
 800ed30:	6820      	ldr	r0, [r4, #0]
 800ed32:	f7ff fd4d 	bl	800e7d0 <tcp_modbusclient_send>
				pbuf_free(es->p_tx);
 800ed36:	69a3      	ldr	r3, [r4, #24]
 800ed38:	6898      	ldr	r0, [r3, #8]
 800ed3a:	f7f7 fbe3 	bl	8006504 <pbuf_free>
				gu32MBTCPTimer = THREE_SEC;
 800ed3e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ed42:	61e3      	str	r3, [r4, #28]
 800ed44:	e7df      	b.n	800ed06 <mbTCPPoll+0x52>
			if(gu32MBTCPTimer == 0)
 800ed46:	4b8e      	ldr	r3, [pc, #568]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1d5      	bne.n	800ecfa <mbTCPPoll+0x46>
				enmMBCurrentState = enmMB_RESPONSETIMEOUT;
 800ed4e:	4b8e      	ldr	r3, [pc, #568]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ed50:	2205      	movs	r2, #5
 800ed52:	701a      	strb	r2, [r3, #0]
 800ed54:	e7d1      	b.n	800ecfa <mbTCPPoll+0x46>
			 if(gu32MBTCPTimer == 0)
 800ed56:	4b8a      	ldr	r3, [pc, #552]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ed58:	69db      	ldr	r3, [r3, #28]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1cd      	bne.n	800ecfa <mbTCPPoll+0x46>
				enmMBCurrentState = enmMB_RESPONSETIMEOUT;
 800ed5e:	4b8a      	ldr	r3, [pc, #552]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ed60:	2205      	movs	r2, #5
 800ed62:	701a      	strb	r2, [r3, #0]
 800ed64:	e7c9      	b.n	800ecfa <mbTCPPoll+0x46>
			if(gu32MBOperateFlag)
 800ed66:	4a86      	ldr	r2, [pc, #536]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ed68:	6892      	ldr	r2, [r2, #8]
 800ed6a:	2a00      	cmp	r2, #0
 800ed6c:	d0c5      	beq.n	800ecfa <mbTCPPoll+0x46>
				gu32ModbusIP485Reset = 0;
 800ed6e:	4a88      	ldr	r2, [pc, #544]	; (800ef90 <mbTCPPoll+0x2dc>)
 800ed70:	2100      	movs	r1, #0
 800ed72:	6011      	str	r1, [r2, #0]
				if((((uint16_t)strMbClient.s8SlaveResponseArray[0] << 8) + strMbClient.s8SlaveResponseArray[1])
 800ed74:	4887      	ldr	r0, [pc, #540]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ed76:	f990 20f4 	ldrsb.w	r2, [r0, #244]	; 0xf4
 800ed7a:	b291      	uxth	r1, r2
 800ed7c:	f990 20f5 	ldrsb.w	r2, [r0, #245]	; 0xf5
 800ed80:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800ed84:	2a03      	cmp	r2, #3
 800ed86:	d024      	beq.n	800edd2 <mbTCPPoll+0x11e>
				gu32MBOperateFlag = 0;
 800ed88:	4b7d      	ldr	r3, [pc, #500]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	609a      	str	r2, [r3, #8]
				enmMBCurrentState = enmMB_CONNECTING;
 800ed8e:	4a7e      	ldr	r2, [pc, #504]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ed90:	2101      	movs	r1, #1
 800ed92:	7011      	strb	r1, [r2, #0]
				message_count++;
 800ed94:	691a      	ldr	r2, [r3, #16]
 800ed96:	440a      	add	r2, r1
 800ed98:	611a      	str	r2, [r3, #16]
				if(message_count >= strMbClient.u32NoofRegConfigured)
 800ed9a:	4a7e      	ldr	r2, [pc, #504]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ed9c:	f8d2 2668 	ldr.w	r2, [r2, #1640]	; 0x668
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d809      	bhi.n	800edba <mbTCPPoll+0x106>
					message_count = 0;
 800eda6:	4b76      	ldr	r3, [pc, #472]	; (800ef80 <mbTCPPoll+0x2cc>)
 800eda8:	2100      	movs	r1, #0
 800edaa:	6119      	str	r1, [r3, #16]
					gu32MBProcessPayloadFlag = 1;
 800edac:	2201      	movs	r2, #1
 800edae:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
					gu32MBDataByteCounter = 0;
 800edb2:	f8c3 14f8 	str.w	r1, [r3, #1272]	; 0x4f8
					u32MBTCPFirstCycleComplete = 1;
 800edb6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
				gu32MBPOLLTimer = gu32ModbusTCPPollingTime;
 800edba:	4b77      	ldr	r3, [pc, #476]	; (800ef98 <mbTCPPoll+0x2e4>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	4b70      	ldr	r3, [pc, #448]	; (800ef80 <mbTCPPoll+0x2cc>)
 800edc0:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
				memset(strMbClient.s8SlaveResponseArray,0x00,sizeof(strMbClient.s8SlaveResponseArray));
 800edc4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800edc8:	2100      	movs	r1, #0
 800edca:	4874      	ldr	r0, [pc, #464]	; (800ef9c <mbTCPPoll+0x2e8>)
 800edcc:	f004 f888 	bl	8012ee0 <memset>
 800edd0:	e793      	b.n	800ecfa <mbTCPPoll+0x46>
					if((((uint16_t)strMbClient.s8SlaveResponseArray[2] << 8) + strMbClient.s8SlaveResponseArray[3])
 800edd2:	f990 20f6 	ldrsb.w	r2, [r0, #246]	; 0xf6
 800edd6:	b291      	uxth	r1, r2
 800edd8:	f990 20f7 	ldrsb.w	r2, [r0, #247]	; 0xf7
 800eddc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800ede0:	2a00      	cmp	r2, #0
 800ede2:	d1d1      	bne.n	800ed88 <mbTCPPoll+0xd4>
						gu32PayloadLength = ((uint32_t)strMbClient.s8SlaveResponseArray[4] << 8)
 800ede4:	4602      	mov	r2, r0
 800ede6:	f990 00f8 	ldrsb.w	r0, [r0, #248]	; 0xf8
								+ strMbClient.s8SlaveResponseArray[5];
 800edea:	f992 10f9 	ldrsb.w	r1, [r2, #249]	; 0xf9
 800edee:	eb01 2100 	add.w	r1, r1, r0, lsl #8
						gu32PayloadLength = ((uint32_t)strMbClient.s8SlaveResponseArray[4] << 8)
 800edf2:	4863      	ldr	r0, [pc, #396]	; (800ef80 <mbTCPPoll+0x2cc>)
 800edf4:	f8c0 14f0 	str.w	r1, [r0, #1264]	; 0x4f0
						if(strMbClient.s8SlaveResponseArray[6] == strMbClient.u32UnitId)
 800edf8:	f992 10fa 	ldrsb.w	r1, [r2, #250]	; 0xfa
 800edfc:	68d2      	ldr	r2, [r2, #12]
 800edfe:	4291      	cmp	r1, r2
 800ee00:	d1c2      	bne.n	800ed88 <mbTCPPoll+0xd4>
							if(strMbClient.s8SlaveResponseArray[7] == gu32MBTCPClientFuncCode[message_count])
 800ee02:	4a64      	ldr	r2, [pc, #400]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ee04:	f992 20fb 	ldrsb.w	r2, [r2, #251]	; 0xfb
 800ee08:	6900      	ldr	r0, [r0, #16]
 800ee0a:	495f      	ldr	r1, [pc, #380]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ee0c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ee10:	6849      	ldr	r1, [r1, #4]
 800ee12:	428a      	cmp	r2, r1
 800ee14:	d002      	beq.n	800ee1c <mbTCPPoll+0x168>
							else if((strMbClient.s8SlaveResponseArray[7] & 0x80 ) == 0x80)
 800ee16:	2a00      	cmp	r2, #0
 800ee18:	dab6      	bge.n	800ed88 <mbTCPPoll+0xd4>
 800ee1a:	e0a8      	b.n	800ef6e <mbTCPPoll+0x2ba>
								gu32MBDataLengthBytes = ((uint8_t)strMbClient.s8SlaveResponseArray[8]);
 800ee1c:	495d      	ldr	r1, [pc, #372]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ee1e:	f891 10fc 	ldrb.w	r1, [r1, #252]	; 0xfc
 800ee22:	4857      	ldr	r0, [pc, #348]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ee24:	f8c0 14f4 	str.w	r1, [r0, #1268]	; 0x4f4
								if(strMbClient.s8SlaveResponseArray[7] == 1)
 800ee28:	2a01      	cmp	r2, #1
 800ee2a:	d02a      	beq.n	800ee82 <mbTCPPoll+0x1ce>
									if(gu32MBDataLengthBytes == (2 * gu32MBTCPClientNoofPoints[message_count]))
 800ee2c:	4a54      	ldr	r2, [pc, #336]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ee2e:	6910      	ldr	r0, [r2, #16]
 800ee30:	4a55      	ldr	r2, [pc, #340]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ee32:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ee36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ee38:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 800ee3c:	d04f      	beq.n	800eede <mbTCPPoll+0x22a>
										gu32MBDataByteCounter += gu32MBTCPClientNoofPoints[message_count];
 800ee3e:	4b50      	ldr	r3, [pc, #320]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ee40:	6919      	ldr	r1, [r3, #16]
 800ee42:	4a51      	ldr	r2, [pc, #324]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ee44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ee48:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800ee4a:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	; 0x4f8
 800ee4e:	440a      	add	r2, r1
 800ee50:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800ee54:	e798      	b.n	800ed88 <mbTCPPoll+0xd4>
										strMbClient.u32SlaveData[gu32MBDataByteCounter] = strMbClient.s8SlaveResponseArray[9 + LoopCounter];
 800ee56:	f103 0509 	add.w	r5, r3, #9
 800ee5a:	4a49      	ldr	r2, [pc, #292]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ee5c:	f8d2 44f8 	ldr.w	r4, [r2, #1272]	; 0x4f8
 800ee60:	484c      	ldr	r0, [pc, #304]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ee62:	4405      	add	r5, r0
 800ee64:	f995 50f4 	ldrsb.w	r5, [r5, #244]	; 0xf4
 800ee68:	f104 0694 	add.w	r6, r4, #148	; 0x94
 800ee6c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800ee70:	6045      	str	r5, [r0, #4]
										gu32MBTCPDataStatus[gu32MBDataByteCounter++] = 2;
 800ee72:	1c60      	adds	r0, r4, #1
 800ee74:	f8c2 04f8 	str.w	r0, [r2, #1272]	; 0x4f8
 800ee78:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ee7c:	2002      	movs	r0, #2
 800ee7e:	62d0      	str	r0, [r2, #44]	; 0x2c
									for(LoopCounter = 0; LoopCounter < gu32MBDataLengthBytes; LoopCounter++)
 800ee80:	3301      	adds	r3, #1
 800ee82:	4299      	cmp	r1, r3
 800ee84:	d8e7      	bhi.n	800ee56 <mbTCPPoll+0x1a2>
									if(gu32MBDataLengthBytes != gu32MBTCPClientNoofPoints[message_count])
 800ee86:	4b3e      	ldr	r3, [pc, #248]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ee88:	691a      	ldr	r2, [r3, #16]
 800ee8a:	4b3f      	ldr	r3, [pc, #252]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ee8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ee90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee92:	4299      	cmp	r1, r3
 800ee94:	f43f af78 	beq.w	800ed88 <mbTCPPoll+0xd4>
										gu32MBDataByteCounter += (gu32MBTCPClientNoofPoints[message_count] - gu32MBDataLengthBytes);
 800ee98:	4b39      	ldr	r3, [pc, #228]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ee9a:	6918      	ldr	r0, [r3, #16]
 800ee9c:	4a3a      	ldr	r2, [pc, #232]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ee9e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800eea2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800eea4:	1a51      	subs	r1, r2, r1
 800eea6:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	; 0x4f8
 800eeaa:	440a      	add	r2, r1
 800eeac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800eeb0:	e76a      	b.n	800ed88 <mbTCPPoll+0xd4>
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 800eeb2:	0058      	lsls	r0, r3, #1
 800eeb4:	3009      	adds	r0, #9
 800eeb6:	4937      	ldr	r1, [pc, #220]	; (800ef94 <mbTCPPoll+0x2e0>)
 800eeb8:	4408      	add	r0, r1
 800eeba:	f990 00f4 	ldrsb.w	r0, [r0, #244]	; 0xf4
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] + 256 ;
 800eebe:	440a      	add	r2, r1
 800eec0:	f992 20f4 	ldrsb.w	r2, [r2, #244]	; 0xf4
 800eec4:	eb02 2200 	add.w	r2, r2, r0, lsl #8
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 800eec8:	482d      	ldr	r0, [pc, #180]	; (800ef80 <mbTCPPoll+0x2cc>)
 800eeca:	f8d0 04f8 	ldr.w	r0, [r0, #1272]	; 0x4f8
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] + 256 ;
 800eece:	f502 7280 	add.w	r2, r2, #256	; 0x100
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 800eed2:	3094      	adds	r0, #148	; 0x94
 800eed4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eed8:	604a      	str	r2, [r1, #4]
 800eeda:	e024      	b.n	800ef26 <mbTCPPoll+0x272>
										for(u32LoopCounter = 0; u32LoopCounter < gu32MBTCPClientNoofPoints[message_count];u32LoopCounter++)
 800eedc:	3301      	adds	r3, #1
 800eede:	4a28      	ldr	r2, [pc, #160]	; (800ef80 <mbTCPPoll+0x2cc>)
 800eee0:	6911      	ldr	r1, [r2, #16]
 800eee2:	4a29      	ldr	r2, [pc, #164]	; (800ef88 <mbTCPPoll+0x2d4>)
 800eee4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800eee8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800eeea:	429a      	cmp	r2, r3
 800eeec:	f67f af4c 	bls.w	800ed88 <mbTCPPoll+0xd4>
											if((int32_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] < 0)
 800eef0:	1d58      	adds	r0, r3, #5
 800eef2:	0042      	lsls	r2, r0, #1
 800eef4:	4927      	ldr	r1, [pc, #156]	; (800ef94 <mbTCPPoll+0x2e0>)
 800eef6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800eefa:	f991 10f4 	ldrsb.w	r1, [r1, #244]	; 0xf4
 800eefe:	2900      	cmp	r1, #0
 800ef00:	dbd7      	blt.n	800eeb2 <mbTCPPoll+0x1fe>
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 800ef02:	0058      	lsls	r0, r3, #1
 800ef04:	3009      	adds	r0, #9
 800ef06:	4923      	ldr	r1, [pc, #140]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ef08:	4408      	add	r0, r1
 800ef0a:	f990 40f4 	ldrsb.w	r4, [r0, #244]	; 0xf4
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] ;
 800ef0e:	440a      	add	r2, r1
 800ef10:	f992 20f4 	ldrsb.w	r2, [r2, #244]	; 0xf4
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 800ef14:	481a      	ldr	r0, [pc, #104]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ef16:	f8d0 04f8 	ldr.w	r0, [r0, #1272]	; 0x4f8
																								 + (int16_t)strMbClient.s8SlaveResponseArray[9 + (2 * u32LoopCounter) + 1] ;
 800ef1a:	eb02 2204 	add.w	r2, r2, r4, lsl #8
												strMbClient.u32SlaveData[gu32MBDataByteCounter] = ((int16_t)strMbClient.s8SlaveResponseArray[9 + (2* u32LoopCounter)] << 8)
 800ef1e:	3094      	adds	r0, #148	; 0x94
 800ef20:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ef24:	604a      	str	r2, [r1, #4]
											gu32MBTCPDataStatus[gu32MBDataByteCounter] = 0;
 800ef26:	4916      	ldr	r1, [pc, #88]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ef28:	f8d1 24f8 	ldr.w	r2, [r1, #1272]	; 0x4f8
 800ef2c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800ef30:	2400      	movs	r4, #0
 800ef32:	62c4      	str	r4, [r0, #44]	; 0x2c
											gu32MBDataByteCounter++;
 800ef34:	3201      	adds	r2, #1
 800ef36:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
											if(gu32MBDataByteCounter >= gu32MBDataByteCounterLimit)
 800ef3a:	6a09      	ldr	r1, [r1, #32]
 800ef3c:	428a      	cmp	r2, r1
 800ef3e:	d3cd      	bcc.n	800eedc <mbTCPPoll+0x228>
												gu32MBDataByteCounter = 0;
 800ef40:	4a0f      	ldr	r2, [pc, #60]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ef42:	f8c2 44f8 	str.w	r4, [r2, #1272]	; 0x4f8
 800ef46:	e7c9      	b.n	800eedc <mbTCPPoll+0x228>
									strMbClient.u32SlaveData[gu32MBDataByteCounter] = strMbClient.s8SlaveResponseArray[8] ;
 800ef48:	4a0d      	ldr	r2, [pc, #52]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ef4a:	f8d2 04f8 	ldr.w	r0, [r2, #1272]	; 0x4f8
 800ef4e:	4911      	ldr	r1, [pc, #68]	; (800ef94 <mbTCPPoll+0x2e0>)
 800ef50:	f991 40fc 	ldrsb.w	r4, [r1, #252]	; 0xfc
 800ef54:	f100 0594 	add.w	r5, r0, #148	; 0x94
 800ef58:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800ef5c:	604c      	str	r4, [r1, #4]
									gu32MBTCPDataStatus[gu32MBDataByteCounter++] = 1;
 800ef5e:	1c41      	adds	r1, r0, #1
 800ef60:	f8c2 14f8 	str.w	r1, [r2, #1272]	; 0x4f8
 800ef64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ef68:	2101      	movs	r1, #1
 800ef6a:	62d1      	str	r1, [r2, #44]	; 0x2c
								for(u32TempLoopCounter = 0; u32TempLoopCounter < gu32MBTCPClientNoofPoints[message_count];u32TempLoopCounter++)
 800ef6c:	440b      	add	r3, r1
 800ef6e:	4a04      	ldr	r2, [pc, #16]	; (800ef80 <mbTCPPoll+0x2cc>)
 800ef70:	6911      	ldr	r1, [r2, #16]
 800ef72:	4a05      	ldr	r2, [pc, #20]	; (800ef88 <mbTCPPoll+0x2d4>)
 800ef74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ef78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d8e4      	bhi.n	800ef48 <mbTCPPoll+0x294>
 800ef7e:	e703      	b.n	800ed88 <mbTCPPoll+0xd4>
 800ef80:	20003af8 	.word	0x20003af8
 800ef84:	2000296c 	.word	0x2000296c
 800ef88:	20001544 	.word	0x20001544
 800ef8c:	2000e2a8 	.word	0x2000e2a8
 800ef90:	20003628 	.word	0x20003628
 800ef94:	2000e288 	.word	0x2000e288
 800ef98:	20002068 	.word	0x20002068
 800ef9c:	2000e37c 	.word	0x2000e37c
			strMbClient.u32MBNoQueryAttempts++;
 800efa0:	4a33      	ldr	r2, [pc, #204]	; (800f070 <mbTCPPoll+0x3bc>)
 800efa2:	6893      	ldr	r3, [r2, #8]
 800efa4:	3301      	adds	r3, #1
 800efa6:	6093      	str	r3, [r2, #8]
			if(strMbClient.u32MBNoQueryAttempts > 3)
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	d941      	bls.n	800f030 <mbTCPPoll+0x37c>
				gu32ModbusIP485Reset++;
 800efac:	4a31      	ldr	r2, [pc, #196]	; (800f074 <mbTCPPoll+0x3c0>)
 800efae:	6813      	ldr	r3, [r2, #0]
 800efb0:	3301      	adds	r3, #1
 800efb2:	6013      	str	r3, [r2, #0]
				uint32_t temploopcounttcp = gu32MBDataByteCounter;
 800efb4:	4a30      	ldr	r2, [pc, #192]	; (800f078 <mbTCPPoll+0x3c4>)
 800efb6:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
				gu32MBDataByteCounter += gu32MBTCPClientNoofPoints[message_count];
 800efba:	6910      	ldr	r0, [r2, #16]
 800efbc:	492f      	ldr	r1, [pc, #188]	; (800f07c <mbTCPPoll+0x3c8>)
 800efbe:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800efc2:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800efc4:	4418      	add	r0, r3
 800efc6:	f8c2 04f8 	str.w	r0, [r2, #1272]	; 0x4f8
				for(iteratortcp = temploopcounttcp ; iteratortcp < gu32MBDataByteCounter ; iteratortcp++)
 800efca:	e007      	b.n	800efdc <mbTCPPoll+0x328>
					strMbClient.u32SlaveData[iteratortcp] = 0;
 800efcc:	f103 0194 	add.w	r1, r3, #148	; 0x94
 800efd0:	4a27      	ldr	r2, [pc, #156]	; (800f070 <mbTCPPoll+0x3bc>)
 800efd2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800efd6:	2100      	movs	r1, #0
 800efd8:	6051      	str	r1, [r2, #4]
				for(iteratortcp = temploopcounttcp ; iteratortcp < gu32MBDataByteCounter ; iteratortcp++)
 800efda:	3301      	adds	r3, #1
 800efdc:	4298      	cmp	r0, r3
 800efde:	d90b      	bls.n	800eff8 <mbTCPPoll+0x344>
					if(gu32MBTCPDataStatus[iteratortcp] == 1)
 800efe0:	4a25      	ldr	r2, [pc, #148]	; (800f078 <mbTCPPoll+0x3c4>)
 800efe2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800efe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800efe8:	2a01      	cmp	r2, #1
 800efea:	d1ef      	bne.n	800efcc <mbTCPPoll+0x318>
						gu32MBTCPDataStatus[iteratortcp] = 0;
 800efec:	4a22      	ldr	r2, [pc, #136]	; (800f078 <mbTCPPoll+0x3c4>)
 800efee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eff2:	2100      	movs	r1, #0
 800eff4:	62d1      	str	r1, [r2, #44]	; 0x2c
 800eff6:	e7e9      	b.n	800efcc <mbTCPPoll+0x318>
				strMbClient.u32MBNoQueryAttempts = 0;
 800eff8:	491d      	ldr	r1, [pc, #116]	; (800f070 <mbTCPPoll+0x3bc>)
 800effa:	2300      	movs	r3, #0
 800effc:	608b      	str	r3, [r1, #8]
				message_count++;
 800effe:	4b1e      	ldr	r3, [pc, #120]	; (800f078 <mbTCPPoll+0x3c4>)
 800f000:	691a      	ldr	r2, [r3, #16]
 800f002:	3201      	adds	r2, #1
 800f004:	611a      	str	r2, [r3, #16]
				if(message_count >= strMbClient.u32NoofRegConfigured)
 800f006:	f8d1 2668 	ldr.w	r2, [r1, #1640]	; 0x668
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d80f      	bhi.n	800f030 <mbTCPPoll+0x37c>
					message_count = 0;
 800f010:	4b19      	ldr	r3, [pc, #100]	; (800f078 <mbTCPPoll+0x3c4>)
 800f012:	2200      	movs	r2, #0
 800f014:	611a      	str	r2, [r3, #16]
					gu32MBProcessPayloadFlag = 1;
 800f016:	2001      	movs	r0, #1
 800f018:	f8c3 04e4 	str.w	r0, [r3, #1252]	; 0x4e4
					gu32MBNotResponding++;
 800f01c:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
 800f020:	4401      	add	r1, r0
 800f022:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
					gu32MBDataByteCounter = 0;
 800f026:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
					gu32MBClientConnectedFlag = 0;
 800f02a:	60da      	str	r2, [r3, #12]
					u32MBTCPFirstCycleComplete = 1;
 800f02c:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
			enmMBCurrentState = enmMB_CONNECTING;//enmMB_CLOSECLIENT;
 800f030:	4b12      	ldr	r3, [pc, #72]	; (800f07c <mbTCPPoll+0x3c8>)
 800f032:	2201      	movs	r2, #1
 800f034:	701a      	strb	r2, [r3, #0]
			memset(strMbClient.s8SlaveResponseArray,0x00,sizeof(strMbClient.s8SlaveResponseArray));
 800f036:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f03a:	2100      	movs	r1, #0
 800f03c:	4810      	ldr	r0, [pc, #64]	; (800f080 <mbTCPPoll+0x3cc>)
 800f03e:	f003 ff4f 	bl	8012ee0 <memset>
			break;
 800f042:	e65a      	b.n	800ecfa <mbTCPPoll+0x46>
			gu32MBConnected = 0;
 800f044:	4c0c      	ldr	r4, [pc, #48]	; (800f078 <mbTCPPoll+0x3c4>)
 800f046:	2500      	movs	r5, #0
 800f048:	6065      	str	r5, [r4, #4]
			tcp_modbusclient_connection_close(pcbTx, es);
 800f04a:	69a1      	ldr	r1, [r4, #24]
 800f04c:	6820      	ldr	r0, [r4, #0]
 800f04e:	f7ff fbed 	bl	800e82c <tcp_modbusclient_connection_close>
			enmMBCurrentState = enmMB_CONNECTING;
 800f052:	4b0a      	ldr	r3, [pc, #40]	; (800f07c <mbTCPPoll+0x3c8>)
 800f054:	2201      	movs	r2, #1
 800f056:	701a      	strb	r2, [r3, #0]
			gu32MBOperateFlag = 0;
 800f058:	60a5      	str	r5, [r4, #8]
			gu32MBPOLLTimer = gu32ModbusTCPPollingTime;
 800f05a:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <mbTCPPoll+0x3d0>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
			break;
 800f062:	e64a      	b.n	800ecfa <mbTCPPoll+0x46>
			enmMBCurrentState = enmMB_CONNECTING;
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <mbTCPPoll+0x3c8>)
 800f066:	2201      	movs	r2, #1
 800f068:	701a      	strb	r2, [r3, #0]
		break;
 800f06a:	e646      	b.n	800ecfa <mbTCPPoll+0x46>
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	2000e288 	.word	0x2000e288
 800f074:	20003628 	.word	0x20003628
 800f078:	20003af8 	.word	0x20003af8
 800f07c:	20001544 	.word	0x20001544
 800f080:	2000e37c 	.word	0x2000e37c
 800f084:	20002068 	.word	0x20002068

0800f088 <tcp_connection_terminate>:

void tcp_connection_terminate(void)
{
 800f088:	b508      	push	{r3, lr}
	gu32MBConnected = 0;
 800f08a:	4b05      	ldr	r3, [pc, #20]	; (800f0a0 <tcp_connection_terminate+0x18>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	605a      	str	r2, [r3, #4]
	gu32MBOperateFlag = 0;
 800f090:	609a      	str	r2, [r3, #8]
	if(pcbTx!= NULL)
 800f092:	6818      	ldr	r0, [r3, #0]
 800f094:	b110      	cbz	r0, 800f09c <tcp_connection_terminate+0x14>
		tcp_modbusclient_connection_close(pcbTx, es);
 800f096:	6999      	ldr	r1, [r3, #24]
 800f098:	f7ff fbc8 	bl	800e82c <tcp_modbusclient_connection_close>
}
 800f09c:	bd08      	pop	{r3, pc}
 800f09e:	bf00      	nop
 800f0a0:	20003af8 	.word	0x20003af8

0800f0a4 <tcp_modbusclient_error>:
{
 800f0a4:	b508      	push	{r3, lr}
	tcp_connection_terminate(); // added on 17/12/22 was missing
 800f0a6:	f7ff ffef 	bl	800f088 <tcp_connection_terminate>
	tcp_modbusclient_connect();
 800f0aa:	f7ff fdbd 	bl	800ec28 <tcp_modbusclient_connect>
	gu32MBClientConnectedFlag = 0;
 800f0ae:	4b02      	ldr	r3, [pc, #8]	; (800f0b8 <tcp_modbusclient_error+0x14>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	60da      	str	r2, [r3, #12]
}
 800f0b4:	bd08      	pop	{r3, pc}
 800f0b6:	bf00      	nop
 800f0b8:	20003af8 	.word	0x20003af8

0800f0bc <getSystemConfig>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
char * getSystemConfig(void)
{
 800f0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0be:	b08f      	sub	sp, #60	; 0x3c
	char * systemConfig = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800f0c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f0c4:	f003 fc9e 	bl	8012a04 <malloc>
 800f0c8:	4604      	mov	r4, r0
	getrtcStamp();
 800f0ca:	f003 fafd 	bl	80126c8 <getrtcStamp>
	if(systemConfig != NULL)
 800f0ce:	2c00      	cmp	r4, #0
 800f0d0:	f000 80fd 	beq.w	800f2ce <getSystemConfig+0x212>
	{
		memset(systemConfig,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800f0d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f0d8:	2100      	movs	r1, #0
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f003 ff00 	bl	8012ee0 <memset>
		char temp_array[50];

		/* Start of Frame */
		strcpy((char *)systemConfig,(char * )START_OF_FRAME);
 800f0e0:	4b7c      	ldr	r3, [pc, #496]	; (800f2d4 <getSystemConfig+0x218>)
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	8023      	strh	r3, [r4, #0]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f7f1 f88c 	bl	8000204 <strlen>
 800f0ec:	4b7a      	ldr	r3, [pc, #488]	; (800f2d8 <getSystemConfig+0x21c>)
 800f0ee:	881d      	ldrh	r5, [r3, #0]
 800f0f0:	5225      	strh	r5, [r4, r0]

		/* Device UUID */
		strcat((char *)systemConfig,(char * )dinfo);
 800f0f2:	497a      	ldr	r1, [pc, #488]	; (800f2dc <getSystemConfig+0x220>)
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f003 ff49 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )"_Conf");
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f7f1 f882 	bl	8000204 <strlen>
 800f100:	4603      	mov	r3, r0
 800f102:	1821      	adds	r1, r4, r0
 800f104:	4a76      	ldr	r2, [pc, #472]	; (800f2e0 <getSystemConfig+0x224>)
 800f106:	6810      	ldr	r0, [r2, #0]
 800f108:	50e0      	str	r0, [r4, r3]
 800f10a:	8893      	ldrh	r3, [r2, #4]
 800f10c:	808b      	strh	r3, [r1, #4]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f10e:	4620      	mov	r0, r4
 800f110:	f7f1 f878 	bl	8000204 <strlen>
 800f114:	5225      	strh	r5, [r4, r0]

		/* Model Number */
		strcat((char *)systemConfig,(char * )MODEL_NUMBER);
 800f116:	4620      	mov	r0, r4
 800f118:	f7f1 f874 	bl	8000204 <strlen>
 800f11c:	4603      	mov	r3, r0
 800f11e:	1826      	adds	r6, r4, r0
 800f120:	4a70      	ldr	r2, [pc, #448]	; (800f2e4 <getSystemConfig+0x228>)
 800f122:	ca03      	ldmia	r2!, {r0, r1}
 800f124:	50e0      	str	r0, [r4, r3]
 800f126:	6071      	str	r1, [r6, #4]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f128:	4620      	mov	r0, r4
 800f12a:	f7f1 f86b 	bl	8000204 <strlen>
 800f12e:	5225      	strh	r5, [r4, r0]

		/* Local Time Stamp */
		strcat((char *)systemConfig,(char * )gau8Date);
 800f130:	496d      	ldr	r1, [pc, #436]	; (800f2e8 <getSystemConfig+0x22c>)
 800f132:	4620      	mov	r0, r4
 800f134:	f003 ff2a 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )RTC_DATESEPARATOR);
 800f138:	4620      	mov	r0, r4
 800f13a:	f7f1 f863 	bl	8000204 <strlen>
 800f13e:	4b6b      	ldr	r3, [pc, #428]	; (800f2ec <getSystemConfig+0x230>)
 800f140:	881e      	ldrh	r6, [r3, #0]
 800f142:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Month);
 800f144:	496a      	ldr	r1, [pc, #424]	; (800f2f0 <getSystemConfig+0x234>)
 800f146:	4620      	mov	r0, r4
 800f148:	f003 ff20 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )RTC_DATESEPARATOR);
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7f1 f859 	bl	8000204 <strlen>
 800f152:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Year);
 800f154:	4967      	ldr	r1, [pc, #412]	; (800f2f4 <getSystemConfig+0x238>)
 800f156:	4620      	mov	r0, r4
 800f158:	f003 ff18 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )RTC_PARAM_SEPARATOR);
 800f15c:	4620      	mov	r0, r4
 800f15e:	f7f1 f851 	bl	8000204 <strlen>
 800f162:	4b65      	ldr	r3, [pc, #404]	; (800f2f8 <getSystemConfig+0x23c>)
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Hour);
 800f168:	4964      	ldr	r1, [pc, #400]	; (800f2fc <getSystemConfig+0x240>)
 800f16a:	4620      	mov	r0, r4
 800f16c:	f003 ff0e 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )RTC_TIMESEPARATOR);
 800f170:	4620      	mov	r0, r4
 800f172:	f7f1 f847 	bl	8000204 <strlen>
 800f176:	4b62      	ldr	r3, [pc, #392]	; (800f300 <getSystemConfig+0x244>)
 800f178:	881e      	ldrh	r6, [r3, #0]
 800f17a:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Minutes);
 800f17c:	4961      	ldr	r1, [pc, #388]	; (800f304 <getSystemConfig+0x248>)
 800f17e:	4620      	mov	r0, r4
 800f180:	f003 ff04 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )RTC_TIMESEPARATOR);
 800f184:	4620      	mov	r0, r4
 800f186:	f7f1 f83d 	bl	8000204 <strlen>
 800f18a:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8Seconds);
 800f18c:	495e      	ldr	r1, [pc, #376]	; (800f308 <getSystemConfig+0x24c>)
 800f18e:	4620      	mov	r0, r4
 800f190:	f003 fefc 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f194:	4620      	mov	r0, r4
 800f196:	f7f1 f835 	bl	8000204 <strlen>
 800f19a:	5225      	strh	r5, [r4, r0]

		/* Firmware Version*/
		strcat((char *)systemConfig,(char * )FIRMWARE_VER);
 800f19c:	4620      	mov	r0, r4
 800f19e:	f7f1 f831 	bl	8000204 <strlen>
 800f1a2:	4684      	mov	ip, r0
 800f1a4:	1827      	adds	r7, r4, r0
 800f1a6:	4e59      	ldr	r6, [pc, #356]	; (800f30c <getSystemConfig+0x250>)
 800f1a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f1aa:	f844 000c 	str.w	r0, [r4, ip]
 800f1ae:	6079      	str	r1, [r7, #4]
 800f1b0:	60ba      	str	r2, [r7, #8]
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	ce03      	ldmia	r6!, {r0, r1}
 800f1b6:	6138      	str	r0, [r7, #16]
 800f1b8:	6179      	str	r1, [r7, #20]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f7f1 f822 	bl	8000204 <strlen>
 800f1c0:	5225      	strh	r5, [r4, r0]

		strcat((char *)systemConfig,(char * )"SystemConfig :");
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7f1 f81e 	bl	8000204 <strlen>
 800f1c8:	4607      	mov	r7, r0
 800f1ca:	1826      	adds	r6, r4, r0
 800f1cc:	4b50      	ldr	r3, [pc, #320]	; (800f310 <getSystemConfig+0x254>)
 800f1ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1d0:	51e0      	str	r0, [r4, r7]
 800f1d2:	6071      	str	r1, [r6, #4]
 800f1d4:	60b2      	str	r2, [r6, #8]
 800f1d6:	881a      	ldrh	r2, [r3, #0]
 800f1d8:	789b      	ldrb	r3, [r3, #2]
 800f1da:	81b2      	strh	r2, [r6, #12]
 800f1dc:	73b3      	strb	r3, [r6, #14]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f7f1 f810 	bl	8000204 <strlen>
 800f1e4:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemConfig,(char * )gau8LastKnownConfiguration);
 800f1e6:	494b      	ldr	r1, [pc, #300]	; (800f314 <getSystemConfig+0x258>)
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f003 fecf 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f7f1 f808 	bl	8000204 <strlen>
 800f1f4:	5225      	strh	r5, [r4, r0]

		/* Config Error */
		memset(temp_array, 0, sizeof(temp_array));
 800f1f6:	2732      	movs	r7, #50	; 0x32
 800f1f8:	463a      	mov	r2, r7
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	a801      	add	r0, sp, #4
 800f1fe:	f003 fe6f 	bl	8012ee0 <memset>
		itoa(gu32ConfigNetworkErrorDatabase, temp_array, 10);
 800f202:	220a      	movs	r2, #10
 800f204:	a901      	add	r1, sp, #4
 800f206:	4b44      	ldr	r3, [pc, #272]	; (800f318 <getSystemConfig+0x25c>)
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	f003 fbf9 	bl	8012a00 <itoa>
		strcat((char *)systemConfig,(char * )"NetworkErr ");
 800f20e:	4620      	mov	r0, r4
 800f210:	f7f0 fff8 	bl	8000204 <strlen>
 800f214:	4606      	mov	r6, r0
 800f216:	eb04 0c00 	add.w	ip, r4, r0
 800f21a:	4b40      	ldr	r3, [pc, #256]	; (800f31c <getSystemConfig+0x260>)
 800f21c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f21e:	51a0      	str	r0, [r4, r6]
 800f220:	f8cc 1004 	str.w	r1, [ip, #4]
 800f224:	f8cc 2008 	str.w	r2, [ip, #8]
		strcat((char *)systemConfig,(char * )temp_array);
 800f228:	a901      	add	r1, sp, #4
 800f22a:	4620      	mov	r0, r4
 800f22c:	f003 feae 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f230:	4620      	mov	r0, r4
 800f232:	f7f0 ffe7 	bl	8000204 <strlen>
 800f236:	5225      	strh	r5, [r4, r0]

		memset(temp_array, 0, sizeof(temp_array));
 800f238:	463a      	mov	r2, r7
 800f23a:	2100      	movs	r1, #0
 800f23c:	a801      	add	r0, sp, #4
 800f23e:	f003 fe4f 	bl	8012ee0 <memset>
		itoa(gu32ConfigModbus485ErrorDatabase, temp_array, 10);
 800f242:	220a      	movs	r2, #10
 800f244:	a901      	add	r1, sp, #4
 800f246:	4b36      	ldr	r3, [pc, #216]	; (800f320 <getSystemConfig+0x264>)
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	f003 fbd9 	bl	8012a00 <itoa>
		strcat((char *)systemConfig,(char * )"485Err ");
 800f24e:	4620      	mov	r0, r4
 800f250:	f7f0 ffd8 	bl	8000204 <strlen>
 800f254:	4603      	mov	r3, r0
 800f256:	1826      	adds	r6, r4, r0
 800f258:	4a32      	ldr	r2, [pc, #200]	; (800f324 <getSystemConfig+0x268>)
 800f25a:	ca03      	ldmia	r2!, {r0, r1}
 800f25c:	50e0      	str	r0, [r4, r3]
 800f25e:	6071      	str	r1, [r6, #4]
		strcat((char *)systemConfig,(char * )temp_array);
 800f260:	a901      	add	r1, sp, #4
 800f262:	4620      	mov	r0, r4
 800f264:	f003 fe92 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f268:	4620      	mov	r0, r4
 800f26a:	f7f0 ffcb 	bl	8000204 <strlen>
 800f26e:	5225      	strh	r5, [r4, r0]

		memset(temp_array, 0, sizeof(temp_array));
 800f270:	463a      	mov	r2, r7
 800f272:	2100      	movs	r1, #0
 800f274:	a801      	add	r0, sp, #4
 800f276:	f003 fe33 	bl	8012ee0 <memset>
		itoa(gu32ConfigModbusTCPErrorDatabase, temp_array, 10);
 800f27a:	220a      	movs	r2, #10
 800f27c:	a901      	add	r1, sp, #4
 800f27e:	4b2a      	ldr	r3, [pc, #168]	; (800f328 <getSystemConfig+0x26c>)
 800f280:	6818      	ldr	r0, [r3, #0]
 800f282:	f003 fbbd 	bl	8012a00 <itoa>
		strcat((char *)systemConfig,(char * )"MBTCPErr ");
 800f286:	4620      	mov	r0, r4
 800f288:	f7f0 ffbc 	bl	8000204 <strlen>
 800f28c:	4602      	mov	r2, r0
 800f28e:	1826      	adds	r6, r4, r0
 800f290:	4b26      	ldr	r3, [pc, #152]	; (800f32c <getSystemConfig+0x270>)
 800f292:	cb03      	ldmia	r3!, {r0, r1}
 800f294:	50a0      	str	r0, [r4, r2]
 800f296:	6071      	str	r1, [r6, #4]
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	8133      	strh	r3, [r6, #8]
		strcat((char *)systemConfig,(char * )temp_array);
 800f29c:	a901      	add	r1, sp, #4
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f003 fe74 	bl	8012f8c <strcat>
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7f0 ffad 	bl	8000204 <strlen>
 800f2aa:	5225      	strh	r5, [r4, r0]

		strcat((char *)systemConfig,(char * )"0,0");	// Added for buffer identification
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f7f0 ffa9 	bl	8000204 <strlen>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	4a1e      	ldr	r2, [pc, #120]	; (800f330 <getSystemConfig+0x274>)
 800f2b6:	6810      	ldr	r0, [r2, #0]
 800f2b8:	50e0      	str	r0, [r4, r3]
		strcat((char *)systemConfig,(char * )PAYLOAD_SEPARATOR);
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f7f0 ffa2 	bl	8000204 <strlen>
 800f2c0:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemConfig,(char * )END_OF_FRAME);
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f7f0 ff9e 	bl	8000204 <strlen>
 800f2c8:	4b1a      	ldr	r3, [pc, #104]	; (800f334 <getSystemConfig+0x278>)
 800f2ca:	881b      	ldrh	r3, [r3, #0]
 800f2cc:	5223      	strh	r3, [r4, r0]

		return systemConfig;
	}
	else
		return NULL;
}
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	b00f      	add	sp, #60	; 0x3c
 800f2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d4:	0801beb4 	.word	0x0801beb4
 800f2d8:	0801bde0 	.word	0x0801bde0
 800f2dc:	20007ac4 	.word	0x20007ac4
 800f2e0:	0801beb8 	.word	0x0801beb8
 800f2e4:	0801bd74 	.word	0x0801bd74
 800f2e8:	20002988 	.word	0x20002988
 800f2ec:	0801bec0 	.word	0x0801bec0
 800f2f0:	20002980 	.word	0x20002980
 800f2f4:	20002978 	.word	0x20002978
 800f2f8:	0801bdc0 	.word	0x0801bdc0
 800f2fc:	20002990 	.word	0x20002990
 800f300:	0801be4c 	.word	0x0801be4c
 800f304:	20002998 	.word	0x20002998
 800f308:	200029a0 	.word	0x200029a0
 800f30c:	0801bec4 	.word	0x0801bec4
 800f310:	0801bedc 	.word	0x0801bedc
 800f314:	2000e924 	.word	0x2000e924
 800f318:	2000402c 	.word	0x2000402c
 800f31c:	0801beec 	.word	0x0801beec
 800f320:	20004194 	.word	0x20004194
 800f324:	0801bef8 	.word	0x0801bef8
 800f328:	200041c0 	.word	0x200041c0
 800f32c:	0801bf00 	.word	0x0801bf00
 800f330:	0801bf80 	.word	0x0801bf80
 800f334:	0801bf0c 	.word	0x0801bf0c

0800f338 <updateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateInputVoltage(void)
{
 800f338:	b510      	push	{r4, lr}
	sprintf(gcSystemSupplyVoltage,"%.2f",gfInputSupplyVoltage);
 800f33a:	4b0b      	ldr	r3, [pc, #44]	; (800f368 <updateInputVoltage+0x30>)
 800f33c:	6818      	ldr	r0, [r3, #0]
 800f33e:	f7f1 f923 	bl	8000588 <__aeabi_f2d>
 800f342:	4602      	mov	r2, r0
 800f344:	460b      	mov	r3, r1
 800f346:	4c09      	ldr	r4, [pc, #36]	; (800f36c <updateInputVoltage+0x34>)
 800f348:	4621      	mov	r1, r4
 800f34a:	4809      	ldr	r0, [pc, #36]	; (800f370 <updateInputVoltage+0x38>)
 800f34c:	f003 fdfe 	bl	8012f4c <sprintf>
	sprintf(gcBatterySupplyVoltage,"%.2f",gfBatteryVoltage);
 800f350:	4b08      	ldr	r3, [pc, #32]	; (800f374 <updateInputVoltage+0x3c>)
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	f7f1 f918 	bl	8000588 <__aeabi_f2d>
 800f358:	4602      	mov	r2, r0
 800f35a:	460b      	mov	r3, r1
 800f35c:	4621      	mov	r1, r4
 800f35e:	4806      	ldr	r0, [pc, #24]	; (800f378 <updateInputVoltage+0x40>)
 800f360:	f003 fdf4 	bl	8012f4c <sprintf>
}
 800f364:	bd10      	pop	{r4, pc}
 800f366:	bf00      	nop
 800f368:	20004284 	.word	0x20004284
 800f36c:	0801bf10 	.word	0x0801bf10
 800f370:	2000e910 	.word	0x2000e910
 800f374:	20004288 	.word	0x20004288
 800f378:	2000e8fc 	.word	0x2000e8fc

0800f37c <formatGPSSring>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void formatGPSSring(void)
{
 800f37c:	b570      	push	{r4, r5, r6, lr}
	/*Formulate Lat and Lon in standard format
		 * 1830.101 = 18 + (30.101094/60) = 18.5016849
		 * 7348.878 = 73 + (48.877697 /60) = 73.8146 */

	char *configptr = strtok(agpsLastLocationData, ",");
 800f37e:	4984      	ldr	r1, [pc, #528]	; (800f590 <formatGPSSring+0x214>)
 800f380:	4884      	ldr	r0, [pc, #528]	; (800f594 <formatGPSSring+0x218>)
 800f382:	f004 fc97 	bl	8013cb4 <strtok>
 800f386:	4604      	mov	r4, r0
	gu32ExtractGPSParamCounter = 0;
 800f388:	4b83      	ldr	r3, [pc, #524]	; (800f598 <formatGPSSring+0x21c>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	601a      	str	r2, [r3, #0]

	while(gu32ExtractGPSParamCounter != 9) //reference : while(configptr != NULL)
 800f38e:	e045      	b.n	800f41c <formatGPSSring+0xa0>
	{
		switch(gu32ExtractGPSParamCounter)
		{
			case 0:
				/* Lat  */
				strcpy(gu32GPSLat,configptr);
 800f390:	4d80      	ldr	r5, [pc, #512]	; (800f594 <formatGPSSring+0x218>)
 800f392:	4621      	mov	r1, r4
 800f394:	f105 0098 	add.w	r0, r5, #152	; 0x98
 800f398:	f003 fe14 	bl	8012fc4 <strcpy>
				templat = atof(&gu32GPSLat[2]);
 800f39c:	f105 009a 	add.w	r0, r5, #154	; 0x9a
 800f3a0:	f003 faeb 	bl	801297a <atof>
 800f3a4:	ec51 0b10 	vmov	r0, r1, d0
 800f3a8:	f7f1 fc3e 	bl	8000c28 <__aeabi_d2f>
 800f3ac:	ee06 0a90 	vmov	s13, r0
				templat /= 60;
 800f3b0:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800f59c <formatGPSSring+0x220>
 800f3b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				templat += (((gu32GPSLat[0]-'0') * 10) + (gu32GPSLat[1]-'0'));
 800f3b8:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
 800f3bc:	3b30      	subs	r3, #48	; 0x30
 800f3be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f3c2:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800f3c6:	3b30      	subs	r3, #48	; 0x30
 800f3c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f3cc:	ee07 3a90 	vmov	s15, r3
 800f3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3d8:	4b6f      	ldr	r3, [pc, #444]	; (800f598 <formatGPSSring+0x21c>)
 800f3da:	edc3 7a01 	vstr	s15, [r3, #4]
				sprintf(gu32GPSLatformatted,"%.7f",templat);
 800f3de:	ee17 0a90 	vmov	r0, s15
 800f3e2:	f7f1 f8d1 	bl	8000588 <__aeabi_f2d>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
 800f3ee:	496c      	ldr	r1, [pc, #432]	; (800f5a0 <formatGPSSring+0x224>)
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f003 fdab 	bl	8012f4c <sprintf>
				memset(agpsLastLocationDataFormatted,0x00,150);
 800f3f6:	35b8      	adds	r5, #184	; 0xb8
 800f3f8:	2296      	movs	r2, #150	; 0x96
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f003 fd6f 	bl	8012ee0 <memset>
				strcpy(agpsLastLocationDataFormatted,gu32GPSLatformatted);
 800f402:	4631      	mov	r1, r6
 800f404:	4628      	mov	r0, r5
 800f406:	f003 fddd 	bl	8012fc4 <strcpy>

			default:

				break;
		}
		if(gu32ExtractGPSParamCounter != 9)
 800f40a:	4b63      	ldr	r3, [pc, #396]	; (800f598 <formatGPSSring+0x21c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2b09      	cmp	r3, #9
 800f410:	f040 80b7 	bne.w	800f582 <formatGPSSring+0x206>
			configptr = strtok(NULL, ",");

		gu32ExtractGPSParamCounter++;
 800f414:	4a60      	ldr	r2, [pc, #384]	; (800f598 <formatGPSSring+0x21c>)
 800f416:	6813      	ldr	r3, [r2, #0]
 800f418:	3301      	adds	r3, #1
 800f41a:	6013      	str	r3, [r2, #0]
	while(gu32ExtractGPSParamCounter != 9) //reference : while(configptr != NULL)
 800f41c:	4b5e      	ldr	r3, [pc, #376]	; (800f598 <formatGPSSring+0x21c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b09      	cmp	r3, #9
 800f422:	f000 80b4 	beq.w	800f58e <formatGPSSring+0x212>
		switch(gu32ExtractGPSParamCounter)
 800f426:	2b08      	cmp	r3, #8
 800f428:	d8ef      	bhi.n	800f40a <formatGPSSring+0x8e>
 800f42a:	a201      	add	r2, pc, #4	; (adr r2, 800f430 <formatGPSSring+0xb4>)
 800f42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f430:	0800f391 	.word	0x0800f391
 800f434:	0800f455 	.word	0x0800f455
 800f438:	0800f475 	.word	0x0800f475
 800f43c:	0800f4f3 	.word	0x0800f4f3
 800f440:	0800f50b 	.word	0x0800f50b
 800f444:	0800f523 	.word	0x0800f523
 800f448:	0800f53b 	.word	0x0800f53b
 800f44c:	0800f553 	.word	0x0800f553
 800f450:	0800f56b 	.word	0x0800f56b
				strcat(agpsLastLocationDataFormatted,",");
 800f454:	4d53      	ldr	r5, [pc, #332]	; (800f5a4 <formatGPSSring+0x228>)
 800f456:	4628      	mov	r0, r5
 800f458:	f7f0 fed4 	bl	8000204 <strlen>
 800f45c:	4b4c      	ldr	r3, [pc, #304]	; (800f590 <formatGPSSring+0x214>)
 800f45e:	881e      	ldrh	r6, [r3, #0]
 800f460:	522e      	strh	r6, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f462:	4621      	mov	r1, r4
 800f464:	4628      	mov	r0, r5
 800f466:	f003 fd91 	bl	8012f8c <strcat>
				strcat(agpsLastLocationDataFormatted,",");
 800f46a:	4628      	mov	r0, r5
 800f46c:	f7f0 feca 	bl	8000204 <strlen>
 800f470:	522e      	strh	r6, [r5, r0]
				break;
 800f472:	e7ca      	b.n	800f40a <formatGPSSring+0x8e>
				strcpy(gu32GPSLon,configptr);
 800f474:	4d47      	ldr	r5, [pc, #284]	; (800f594 <formatGPSSring+0x218>)
 800f476:	4621      	mov	r1, r4
 800f478:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 800f47c:	f003 fda2 	bl	8012fc4 <strcpy>
				templon = atof(&gu32GPSLon[3]);
 800f480:	f205 1053 	addw	r0, r5, #339	; 0x153
 800f484:	f003 fa79 	bl	801297a <atof>
 800f488:	ec51 0b10 	vmov	r0, r1, d0
 800f48c:	f7f1 fbcc 	bl	8000c28 <__aeabi_d2f>
 800f490:	ee06 0a90 	vmov	s13, r0
				templon /= 60;
 800f494:	eddf 7a41 	vldr	s15, [pc, #260]	; 800f59c <formatGPSSring+0x220>
 800f498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				templon += (((gu32GPSLon[0]- '0') * 100 )+ ((gu32GPSLon[1]-'0') * 10) +(gu32GPSLon[2]-'0'));
 800f49c:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
 800f4a0:	3b30      	subs	r3, #48	; 0x30
 800f4a2:	f895 2151 	ldrb.w	r2, [r5, #337]	; 0x151
 800f4a6:	3a30      	subs	r2, #48	; 0x30
 800f4a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f4ac:	0052      	lsls	r2, r2, #1
 800f4ae:	2164      	movs	r1, #100	; 0x64
 800f4b0:	fb01 2303 	mla	r3, r1, r3, r2
 800f4b4:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
 800f4b8:	3a30      	subs	r2, #48	; 0x30
 800f4ba:	4413      	add	r3, r2
 800f4bc:	ee07 3a90 	vmov	s15, r3
 800f4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4c8:	4b33      	ldr	r3, [pc, #204]	; (800f598 <formatGPSSring+0x21c>)
 800f4ca:	edc3 7a02 	vstr	s15, [r3, #8]
				sprintf(gu32GPSLonformatted,"%.7f",templon);
 800f4ce:	ee17 0a90 	vmov	r0, s15
 800f4d2:	f7f1 f859 	bl	8000588 <__aeabi_f2d>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	f505 76b0 	add.w	r6, r5, #352	; 0x160
 800f4de:	4930      	ldr	r1, [pc, #192]	; (800f5a0 <formatGPSSring+0x224>)
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f003 fd33 	bl	8012f4c <sprintf>
				strcat(agpsLastLocationDataFormatted,gu32GPSLonformatted);
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 800f4ec:	f003 fd4e 	bl	8012f8c <strcat>
				break;
 800f4f0:	e78b      	b.n	800f40a <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f4f2:	4d2c      	ldr	r5, [pc, #176]	; (800f5a4 <formatGPSSring+0x228>)
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f7f0 fe85 	bl	8000204 <strlen>
 800f4fa:	4b25      	ldr	r3, [pc, #148]	; (800f590 <formatGPSSring+0x214>)
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f500:	4621      	mov	r1, r4
 800f502:	4628      	mov	r0, r5
 800f504:	f003 fd42 	bl	8012f8c <strcat>
				break;
 800f508:	e77f      	b.n	800f40a <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f50a:	4d26      	ldr	r5, [pc, #152]	; (800f5a4 <formatGPSSring+0x228>)
 800f50c:	4628      	mov	r0, r5
 800f50e:	f7f0 fe79 	bl	8000204 <strlen>
 800f512:	4b1f      	ldr	r3, [pc, #124]	; (800f590 <formatGPSSring+0x214>)
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f518:	4621      	mov	r1, r4
 800f51a:	4628      	mov	r0, r5
 800f51c:	f003 fd36 	bl	8012f8c <strcat>
				break;
 800f520:	e773      	b.n	800f40a <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f522:	4d20      	ldr	r5, [pc, #128]	; (800f5a4 <formatGPSSring+0x228>)
 800f524:	4628      	mov	r0, r5
 800f526:	f7f0 fe6d 	bl	8000204 <strlen>
 800f52a:	4b19      	ldr	r3, [pc, #100]	; (800f590 <formatGPSSring+0x214>)
 800f52c:	881b      	ldrh	r3, [r3, #0]
 800f52e:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f530:	4621      	mov	r1, r4
 800f532:	4628      	mov	r0, r5
 800f534:	f003 fd2a 	bl	8012f8c <strcat>
				break;
 800f538:	e767      	b.n	800f40a <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f53a:	4d1a      	ldr	r5, [pc, #104]	; (800f5a4 <formatGPSSring+0x228>)
 800f53c:	4628      	mov	r0, r5
 800f53e:	f7f0 fe61 	bl	8000204 <strlen>
 800f542:	4b13      	ldr	r3, [pc, #76]	; (800f590 <formatGPSSring+0x214>)
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f548:	4621      	mov	r1, r4
 800f54a:	4628      	mov	r0, r5
 800f54c:	f003 fd1e 	bl	8012f8c <strcat>
				break;
 800f550:	e75b      	b.n	800f40a <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f552:	4d14      	ldr	r5, [pc, #80]	; (800f5a4 <formatGPSSring+0x228>)
 800f554:	4628      	mov	r0, r5
 800f556:	f7f0 fe55 	bl	8000204 <strlen>
 800f55a:	4b0d      	ldr	r3, [pc, #52]	; (800f590 <formatGPSSring+0x214>)
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f560:	4621      	mov	r1, r4
 800f562:	4628      	mov	r0, r5
 800f564:	f003 fd12 	bl	8012f8c <strcat>
				break;
 800f568:	e74f      	b.n	800f40a <formatGPSSring+0x8e>
				strcat(agpsLastLocationDataFormatted,",");
 800f56a:	4d0e      	ldr	r5, [pc, #56]	; (800f5a4 <formatGPSSring+0x228>)
 800f56c:	4628      	mov	r0, r5
 800f56e:	f7f0 fe49 	bl	8000204 <strlen>
 800f572:	4b07      	ldr	r3, [pc, #28]	; (800f590 <formatGPSSring+0x214>)
 800f574:	881b      	ldrh	r3, [r3, #0]
 800f576:	522b      	strh	r3, [r5, r0]
				strcat(agpsLastLocationDataFormatted,configptr);
 800f578:	4621      	mov	r1, r4
 800f57a:	4628      	mov	r0, r5
 800f57c:	f003 fd06 	bl	8012f8c <strcat>
				break;
 800f580:	e743      	b.n	800f40a <formatGPSSring+0x8e>
			configptr = strtok(NULL, ",");
 800f582:	4903      	ldr	r1, [pc, #12]	; (800f590 <formatGPSSring+0x214>)
 800f584:	2000      	movs	r0, #0
 800f586:	f004 fb95 	bl	8013cb4 <strtok>
 800f58a:	4604      	mov	r4, r0
 800f58c:	e742      	b.n	800f414 <formatGPSSring+0x98>

	}
}
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
 800f590:	0801bde0 	.word	0x0801bde0
 800f594:	20001e40 	.word	0x20001e40
 800f598:	20004010 	.word	0x20004010
 800f59c:	42700000 	.word	0x42700000
 800f5a0:	0801bf18 	.word	0x0801bf18
 800f5a4:	20001ef8 	.word	0x20001ef8

0800f5a8 <getSystemDataString>:
{
 800f5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5aa:	b08f      	sub	sp, #60	; 0x3c
	char * systemPayload = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800f5ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f5b0:	f003 fa28 	bl	8012a04 <malloc>
 800f5b4:	4604      	mov	r4, r0
	getrtcStamp();
 800f5b6:	f003 f887 	bl	80126c8 <getrtcStamp>
	updateInputVoltage();
 800f5ba:	f7ff febd 	bl	800f338 <updateInputVoltage>
	itoa(gu32EthLinkAlert,gacEthernetLinkStatus,10);
 800f5be:	220a      	movs	r2, #10
 800f5c0:	4990      	ldr	r1, [pc, #576]	; (800f804 <getSystemDataString+0x25c>)
 800f5c2:	4b91      	ldr	r3, [pc, #580]	; (800f808 <getSystemDataString+0x260>)
 800f5c4:	6818      	ldr	r0, [r3, #0]
 800f5c6:	f003 fa1b 	bl	8012a00 <itoa>
	itoa(gu32MBDataByteCounterLimit,gacMBDataPoints,10);
 800f5ca:	220a      	movs	r2, #10
 800f5cc:	498f      	ldr	r1, [pc, #572]	; (800f80c <getSystemDataString+0x264>)
 800f5ce:	4b90      	ldr	r3, [pc, #576]	; (800f810 <getSystemDataString+0x268>)
 800f5d0:	6818      	ldr	r0, [r3, #0]
 800f5d2:	f003 fa15 	bl	8012a00 <itoa>
	itoa(gu32MBDataByteCounterLimitRTU,gacMBDataPointsRTU,10);
 800f5d6:	220a      	movs	r2, #10
 800f5d8:	498e      	ldr	r1, [pc, #568]	; (800f814 <getSystemDataString+0x26c>)
 800f5da:	4b8f      	ldr	r3, [pc, #572]	; (800f818 <getSystemDataString+0x270>)
 800f5dc:	6818      	ldr	r0, [r3, #0]
 800f5de:	f003 fa0f 	bl	8012a00 <itoa>
	itoa(gu32MBClientConnectedFlag,gacModbusStatus,10);
 800f5e2:	4b8e      	ldr	r3, [pc, #568]	; (800f81c <getSystemDataString+0x274>)
 800f5e4:	6818      	ldr	r0, [r3, #0]
 800f5e6:	4d8e      	ldr	r5, [pc, #568]	; (800f820 <getSystemDataString+0x278>)
 800f5e8:	220a      	movs	r2, #10
 800f5ea:	f105 010c 	add.w	r1, r5, #12
 800f5ee:	f003 fa07 	bl	8012a00 <itoa>
	itoa(gu32MBRTUClientConnectedFlag,gacModbusStatusRTU,10);// gu8MBResponseFlag
 800f5f2:	4b8c      	ldr	r3, [pc, #560]	; (800f824 <getSystemDataString+0x27c>)
 800f5f4:	6818      	ldr	r0, [r3, #0]
 800f5f6:	220a      	movs	r2, #10
 800f5f8:	f105 0110 	add.w	r1, r5, #16
 800f5fc:	f003 fa00 	bl	8012a00 <itoa>
	if(strlen(gsmInstance.agpsLocationData) > 10)
 800f600:	4889      	ldr	r0, [pc, #548]	; (800f828 <getSystemDataString+0x280>)
 800f602:	f7f0 fdff 	bl	8000204 <strlen>
 800f606:	280a      	cmp	r0, #10
 800f608:	d812      	bhi.n	800f630 <getSystemDataString+0x88>
	if(systemPayload != NULL)
 800f60a:	b174      	cbz	r4, 800f62a <getSystemDataString+0x82>
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800f60c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f610:	2100      	movs	r1, #0
 800f612:	4620      	mov	r0, r4
 800f614:	f003 fc64 	bl	8012ee0 <memset>
		if(gu32OperateModbusTCP == 1)
 800f618:	4b84      	ldr	r3, [pc, #528]	; (800f82c <getSystemDataString+0x284>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d00f      	beq.n	800f640 <getSystemDataString+0x98>
		if(gu32OperateModbus485 == 1)
 800f620:	4b83      	ldr	r3, [pc, #524]	; (800f830 <getSystemDataString+0x288>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b01      	cmp	r3, #1
 800f626:	f000 8133 	beq.w	800f890 <getSystemDataString+0x2e8>
}
 800f62a:	4620      	mov	r0, r4
 800f62c:	b00f      	add	sp, #60	; 0x3c
 800f62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(agpsLastLocationData,gsmInstance.agpsLocationData,strlen(gsmInstance.agpsLocationData));
 800f630:	4602      	mov	r2, r0
 800f632:	497d      	ldr	r1, [pc, #500]	; (800f828 <getSystemDataString+0x280>)
 800f634:	487f      	ldr	r0, [pc, #508]	; (800f834 <getSystemDataString+0x28c>)
 800f636:	f003 fc45 	bl	8012ec4 <memcpy>
		formatGPSSring();
 800f63a:	f7ff fe9f 	bl	800f37c <formatGPSSring>
 800f63e:	e7e4      	b.n	800f60a <getSystemDataString+0x62>
			strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 800f640:	4b7d      	ldr	r3, [pc, #500]	; (800f838 <getSystemDataString+0x290>)
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	8023      	strh	r3, [r4, #0]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f646:	4620      	mov	r0, r4
 800f648:	f7f0 fddc 	bl	8000204 <strlen>
 800f64c:	4b7b      	ldr	r3, [pc, #492]	; (800f83c <getSystemDataString+0x294>)
 800f64e:	881e      	ldrh	r6, [r3, #0]
 800f650:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )dinfo);
 800f652:	497b      	ldr	r1, [pc, #492]	; (800f840 <getSystemDataString+0x298>)
 800f654:	4620      	mov	r0, r4
 800f656:	f003 fc99 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7f0 fdd2 	bl	8000204 <strlen>
 800f660:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 800f662:	4620      	mov	r0, r4
 800f664:	f7f0 fdce 	bl	8000204 <strlen>
 800f668:	4603      	mov	r3, r0
 800f66a:	1825      	adds	r5, r4, r0
 800f66c:	4a75      	ldr	r2, [pc, #468]	; (800f844 <getSystemDataString+0x29c>)
 800f66e:	ca03      	ldmia	r2!, {r0, r1}
 800f670:	50e0      	str	r0, [r4, r3]
 800f672:	6069      	str	r1, [r5, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f674:	4620      	mov	r0, r4
 800f676:	f7f0 fdc5 	bl	8000204 <strlen>
 800f67a:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )aShowDateStamp);
 800f67c:	4972      	ldr	r1, [pc, #456]	; (800f848 <getSystemDataString+0x2a0>)
 800f67e:	4620      	mov	r0, r4
 800f680:	f003 fc84 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )" ");
 800f684:	4620      	mov	r0, r4
 800f686:	f7f0 fdbd 	bl	8000204 <strlen>
 800f68a:	4b70      	ldr	r3, [pc, #448]	; (800f84c <getSystemDataString+0x2a4>)
 800f68c:	881b      	ldrh	r3, [r3, #0]
 800f68e:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )aShowTimeStamp);
 800f690:	496f      	ldr	r1, [pc, #444]	; (800f850 <getSystemDataString+0x2a8>)
 800f692:	4620      	mov	r0, r4
 800f694:	f003 fc7a 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f698:	4620      	mov	r0, r4
 800f69a:	f7f0 fdb3 	bl	8000204 <strlen>
 800f69e:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f7f0 fdaf 	bl	8000204 <strlen>
 800f6a6:	4684      	mov	ip, r0
 800f6a8:	1827      	adds	r7, r4, r0
 800f6aa:	4d6a      	ldr	r5, [pc, #424]	; (800f854 <getSystemDataString+0x2ac>)
 800f6ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6ae:	f844 000c 	str.w	r0, [r4, ip]
 800f6b2:	6079      	str	r1, [r7, #4]
 800f6b4:	60ba      	str	r2, [r7, #8]
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	cd03      	ldmia	r5!, {r0, r1}
 800f6ba:	6138      	str	r0, [r7, #16]
 800f6bc:	6179      	str	r1, [r7, #20]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7f0 fda0 	bl	8000204 <strlen>
 800f6c4:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gacEthernetLinkStatus);
 800f6c6:	494f      	ldr	r1, [pc, #316]	; (800f804 <getSystemDataString+0x25c>)
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f003 fc5f 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f7f0 fd98 	bl	8000204 <strlen>
 800f6d4:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gacMBDataPoints);
 800f6d6:	494d      	ldr	r1, [pc, #308]	; (800f80c <getSystemDataString+0x264>)
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f003 fc57 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f7f0 fd90 	bl	8000204 <strlen>
 800f6e4:	5226      	strh	r6, [r4, r0]
			if((float)gfInputSupplyVoltage < 9.00f)
 800f6e6:	4b5c      	ldr	r3, [pc, #368]	; (800f858 <getSystemDataString+0x2b0>)
 800f6e8:	ed93 7a00 	vldr	s14, [r3]
 800f6ec:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 800f6f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f8:	d571      	bpl.n	800f7de <getSystemDataString+0x236>
				strcat((char *)systemPayload,(char * )gcBatterySupplyVoltage);
 800f6fa:	4958      	ldr	r1, [pc, #352]	; (800f85c <getSystemDataString+0x2b4>)
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f003 fc45 	bl	8012f8c <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f702:	4620      	mov	r0, r4
 800f704:	f7f0 fd7e 	bl	8000204 <strlen>
 800f708:	4b4c      	ldr	r3, [pc, #304]	; (800f83c <getSystemDataString+0x294>)
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gacModbusStatus);
 800f70e:	4954      	ldr	r1, [pc, #336]	; (800f860 <getSystemDataString+0x2b8>)
 800f710:	4620      	mov	r0, r4
 800f712:	f003 fc3b 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f716:	4620      	mov	r0, r4
 800f718:	f7f0 fd74 	bl	8000204 <strlen>
 800f71c:	4b47      	ldr	r3, [pc, #284]	; (800f83c <getSystemDataString+0x294>)
 800f71e:	881d      	ldrh	r5, [r3, #0]
 800f720:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,"IP,");
 800f722:	4620      	mov	r0, r4
 800f724:	f7f0 fd6e 	bl	8000204 <strlen>
 800f728:	4603      	mov	r3, r0
 800f72a:	4a4e      	ldr	r2, [pc, #312]	; (800f864 <getSystemDataString+0x2bc>)
 800f72c:	6810      	ldr	r0, [r2, #0]
 800f72e:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f730:	4620      	mov	r0, r4
 800f732:	f7f0 fd67 	bl	8000204 <strlen>
 800f736:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )agpsLastLocationDataFormatted);
 800f738:	494b      	ldr	r1, [pc, #300]	; (800f868 <getSystemDataString+0x2c0>)
 800f73a:	4620      	mov	r0, r4
 800f73c:	f003 fc26 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f740:	4620      	mov	r0, r4
 800f742:	f7f0 fd5f 	bl	8000204 <strlen>
 800f746:	5225      	strh	r5, [r4, r0]
			if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 800f748:	4b37      	ldr	r3, [pc, #220]	; (800f828 <getSystemDataString+0x280>)
 800f74a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d050      	beq.n	800f7f4 <getSystemDataString+0x24c>
				strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 800f752:	4946      	ldr	r1, [pc, #280]	; (800f86c <getSystemDataString+0x2c4>)
 800f754:	4620      	mov	r0, r4
 800f756:	f003 fc19 	bl	8012f8c <strcat>
			u32TempVar = gu32GSMConfigCheckTimer / 1000;
 800f75a:	4b45      	ldr	r3, [pc, #276]	; (800f870 <getSystemDataString+0x2c8>)
 800f75c:	681d      	ldr	r5, [r3, #0]
 800f75e:	4b45      	ldr	r3, [pc, #276]	; (800f874 <getSystemDataString+0x2cc>)
 800f760:	fba3 3505 	umull	r3, r5, r3, r5
 800f764:	09ad      	lsrs	r5, r5, #6
 800f766:	4b44      	ldr	r3, [pc, #272]	; (800f878 <getSystemDataString+0x2d0>)
 800f768:	601d      	str	r5, [r3, #0]
			memset(temp_array, 0, sizeof(temp_array));
 800f76a:	2232      	movs	r2, #50	; 0x32
 800f76c:	2100      	movs	r1, #0
 800f76e:	a801      	add	r0, sp, #4
 800f770:	f003 fbb6 	bl	8012ee0 <memset>
			itoa(u32TempVar, temp_array, 10);
 800f774:	220a      	movs	r2, #10
 800f776:	a901      	add	r1, sp, #4
 800f778:	4628      	mov	r0, r5
 800f77a:	f003 f941 	bl	8012a00 <itoa>
			strcat((char *)systemPayload,(char * )",ConfigCheckTime:  ");
 800f77e:	4620      	mov	r0, r4
 800f780:	f7f0 fd40 	bl	8000204 <strlen>
 800f784:	4607      	mov	r7, r0
 800f786:	1826      	adds	r6, r4, r0
 800f788:	4d3c      	ldr	r5, [pc, #240]	; (800f87c <getSystemDataString+0x2d4>)
 800f78a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f78c:	51e0      	str	r0, [r4, r7]
 800f78e:	6071      	str	r1, [r6, #4]
 800f790:	60b2      	str	r2, [r6, #8]
 800f792:	60f3      	str	r3, [r6, #12]
 800f794:	6828      	ldr	r0, [r5, #0]
 800f796:	6130      	str	r0, [r6, #16]
			strcat((char *)systemPayload,(char * )temp_array);
 800f798:	a901      	add	r1, sp, #4
 800f79a:	4620      	mov	r0, r4
 800f79c:	f003 fbf6 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f7f0 fd2f 	bl	8000204 <strlen>
 800f7a6:	4b25      	ldr	r3, [pc, #148]	; (800f83c <getSystemDataString+0x294>)
 800f7a8:	881d      	ldrh	r5, [r3, #0]
 800f7aa:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,gau8TempMBPayloadString);
 800f7ac:	4934      	ldr	r1, [pc, #208]	; (800f880 <getSystemDataString+0x2d8>)
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f003 fbec 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )"0,0");	// Added for buffer identification
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f7f0 fd25 	bl	8000204 <strlen>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	4a31      	ldr	r2, [pc, #196]	; (800f884 <getSystemDataString+0x2dc>)
 800f7be:	6810      	ldr	r0, [r2, #0]
 800f7c0:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f7f0 fd1e 	bl	8000204 <strlen>
 800f7c8:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )END_OF_FRAME);
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f7f0 fd1a 	bl	8000204 <strlen>
 800f7d0:	4b2d      	ldr	r3, [pc, #180]	; (800f888 <getSystemDataString+0x2e0>)
 800f7d2:	881b      	ldrh	r3, [r3, #0]
 800f7d4:	5223      	strh	r3, [r4, r0]
			gu32TempLoopCounter = 0;
 800f7d6:	4b12      	ldr	r3, [pc, #72]	; (800f820 <getSystemDataString+0x278>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	615a      	str	r2, [r3, #20]
 800f7dc:	e720      	b.n	800f620 <getSystemDataString+0x78>
				strcat((char *)systemPayload,(char * )gcSystemSupplyVoltage);
 800f7de:	492b      	ldr	r1, [pc, #172]	; (800f88c <getSystemDataString+0x2e4>)
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	f003 fbd3 	bl	8012f8c <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f7f0 fd0c 	bl	8000204 <strlen>
 800f7ec:	4b13      	ldr	r3, [pc, #76]	; (800f83c <getSystemDataString+0x294>)
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	5223      	strh	r3, [r4, r0]
 800f7f2:	e78c      	b.n	800f70e <getSystemDataString+0x166>
				strcat((char *)systemPayload,gpu8Norssi);
 800f7f4:	4b0f      	ldr	r3, [pc, #60]	; (800f834 <getSystemDataString+0x28c>)
 800f7f6:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f003 fbc6 	bl	8012f8c <strcat>
 800f800:	e7ab      	b.n	800f75a <getSystemDataString+0x1b2>
 800f802:	bf00      	nop
 800f804:	2000e920 	.word	0x2000e920
 800f808:	2000296c 	.word	0x2000296c
 800f80c:	2000e918 	.word	0x2000e918
 800f810:	20003b18 	.word	0x20003b18
 800f814:	2000e908 	.word	0x2000e908
 800f818:	20003ae0 	.word	0x20003ae0
 800f81c:	20003b04 	.word	0x20003b04
 800f820:	20004010 	.word	0x20004010
 800f824:	2000362c 	.word	0x2000362c
 800f828:	2000c164 	.word	0x2000c164
 800f82c:	20002954 	.word	0x20002954
 800f830:	20002934 	.word	0x20002934
 800f834:	20001e40 	.word	0x20001e40
 800f838:	0801beb4 	.word	0x0801beb4
 800f83c:	0801bde0 	.word	0x0801bde0
 800f840:	20007ac4 	.word	0x20007ac4
 800f844:	0801bd74 	.word	0x0801bd74
 800f848:	20004368 	.word	0x20004368
 800f84c:	0801bdc0 	.word	0x0801bdc0
 800f850:	20004334 	.word	0x20004334
 800f854:	0801bec4 	.word	0x0801bec4
 800f858:	20004284 	.word	0x20004284
 800f85c:	2000e8fc 	.word	0x2000e8fc
 800f860:	2000401c 	.word	0x2000401c
 800f864:	0801bf20 	.word	0x0801bf20
 800f868:	20001ef8 	.word	0x20001ef8
 800f86c:	2000c1fa 	.word	0x2000c1fa
 800f870:	200029b0 	.word	0x200029b0
 800f874:	10624dd3 	.word	0x10624dd3
 800f878:	2000e904 	.word	0x2000e904
 800f87c:	0801bf24 	.word	0x0801bf24
 800f880:	200019f4 	.word	0x200019f4
 800f884:	0801bf80 	.word	0x0801bf80
 800f888:	0801bf0c 	.word	0x0801bf0c
 800f88c:	2000e910 	.word	0x2000e910
			strcat((char *)systemPayload,(char * )START_OF_FRAME);
 800f890:	4620      	mov	r0, r4
 800f892:	f7f0 fcb7 	bl	8000204 <strlen>
 800f896:	4b87      	ldr	r3, [pc, #540]	; (800fab4 <getSystemDataString+0x50c>)
 800f898:	881b      	ldrh	r3, [r3, #0]
 800f89a:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f89c:	4620      	mov	r0, r4
 800f89e:	f7f0 fcb1 	bl	8000204 <strlen>
 800f8a2:	4b85      	ldr	r3, [pc, #532]	; (800fab8 <getSystemDataString+0x510>)
 800f8a4:	881e      	ldrh	r6, [r3, #0]
 800f8a6:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )dinfo);
 800f8a8:	4984      	ldr	r1, [pc, #528]	; (800fabc <getSystemDataString+0x514>)
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f003 fb6e 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )"_RTU");
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f7f0 fca7 	bl	8000204 <strlen>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	1821      	adds	r1, r4, r0
 800f8ba:	4a81      	ldr	r2, [pc, #516]	; (800fac0 <getSystemDataString+0x518>)
 800f8bc:	6810      	ldr	r0, [r2, #0]
 800f8be:	50e0      	str	r0, [r4, r3]
 800f8c0:	7913      	ldrb	r3, [r2, #4]
 800f8c2:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f7f0 fc9d 	bl	8000204 <strlen>
 800f8ca:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f7f0 fc99 	bl	8000204 <strlen>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	1825      	adds	r5, r4, r0
 800f8d6:	4a7b      	ldr	r2, [pc, #492]	; (800fac4 <getSystemDataString+0x51c>)
 800f8d8:	ca03      	ldmia	r2!, {r0, r1}
 800f8da:	50e0      	str	r0, [r4, r3]
 800f8dc:	6069      	str	r1, [r5, #4]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f7f0 fc90 	bl	8000204 <strlen>
 800f8e4:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Date);
 800f8e6:	4978      	ldr	r1, [pc, #480]	; (800fac8 <getSystemDataString+0x520>)
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f003 fb4f 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f7f0 fc88 	bl	8000204 <strlen>
 800f8f4:	4b75      	ldr	r3, [pc, #468]	; (800facc <getSystemDataString+0x524>)
 800f8f6:	881d      	ldrh	r5, [r3, #0]
 800f8f8:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Month);
 800f8fa:	4975      	ldr	r1, [pc, #468]	; (800fad0 <getSystemDataString+0x528>)
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f003 fb45 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )RTC_DATESEPARATOR);
 800f902:	4620      	mov	r0, r4
 800f904:	f7f0 fc7e 	bl	8000204 <strlen>
 800f908:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Year);
 800f90a:	4972      	ldr	r1, [pc, #456]	; (800fad4 <getSystemDataString+0x52c>)
 800f90c:	4620      	mov	r0, r4
 800f90e:	f003 fb3d 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )RTC_PARAM_SEPARATOR);
 800f912:	4620      	mov	r0, r4
 800f914:	f7f0 fc76 	bl	8000204 <strlen>
 800f918:	4b6f      	ldr	r3, [pc, #444]	; (800fad8 <getSystemDataString+0x530>)
 800f91a:	881b      	ldrh	r3, [r3, #0]
 800f91c:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Hour);
 800f91e:	496f      	ldr	r1, [pc, #444]	; (800fadc <getSystemDataString+0x534>)
 800f920:	4620      	mov	r0, r4
 800f922:	f003 fb33 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 800f926:	4620      	mov	r0, r4
 800f928:	f7f0 fc6c 	bl	8000204 <strlen>
 800f92c:	4b6c      	ldr	r3, [pc, #432]	; (800fae0 <getSystemDataString+0x538>)
 800f92e:	881d      	ldrh	r5, [r3, #0]
 800f930:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Minutes);
 800f932:	496c      	ldr	r1, [pc, #432]	; (800fae4 <getSystemDataString+0x53c>)
 800f934:	4620      	mov	r0, r4
 800f936:	f003 fb29 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )RTC_TIMESEPARATOR);
 800f93a:	4620      	mov	r0, r4
 800f93c:	f7f0 fc62 	bl	8000204 <strlen>
 800f940:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )gau8Seconds);
 800f942:	4969      	ldr	r1, [pc, #420]	; (800fae8 <getSystemDataString+0x540>)
 800f944:	4620      	mov	r0, r4
 800f946:	f003 fb21 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f94a:	4620      	mov	r0, r4
 800f94c:	f7f0 fc5a 	bl	8000204 <strlen>
 800f950:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 800f952:	4620      	mov	r0, r4
 800f954:	f7f0 fc56 	bl	8000204 <strlen>
 800f958:	4684      	mov	ip, r0
 800f95a:	1827      	adds	r7, r4, r0
 800f95c:	4d63      	ldr	r5, [pc, #396]	; (800faec <getSystemDataString+0x544>)
 800f95e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f960:	f844 000c 	str.w	r0, [r4, ip]
 800f964:	6079      	str	r1, [r7, #4]
 800f966:	60ba      	str	r2, [r7, #8]
 800f968:	60fb      	str	r3, [r7, #12]
 800f96a:	cd03      	ldmia	r5!, {r0, r1}
 800f96c:	6138      	str	r0, [r7, #16]
 800f96e:	6179      	str	r1, [r7, #20]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f970:	4620      	mov	r0, r4
 800f972:	f7f0 fc47 	bl	8000204 <strlen>
 800f976:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gacEthernetLinkStatus);
 800f978:	495d      	ldr	r1, [pc, #372]	; (800faf0 <getSystemDataString+0x548>)
 800f97a:	4620      	mov	r0, r4
 800f97c:	f003 fb06 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f980:	4620      	mov	r0, r4
 800f982:	f7f0 fc3f 	bl	8000204 <strlen>
 800f986:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gacMBDataPointsRTU);
 800f988:	495a      	ldr	r1, [pc, #360]	; (800faf4 <getSystemDataString+0x54c>)
 800f98a:	4620      	mov	r0, r4
 800f98c:	f003 fafe 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f990:	4620      	mov	r0, r4
 800f992:	f7f0 fc37 	bl	8000204 <strlen>
 800f996:	5226      	strh	r6, [r4, r0]
			if((float)gfInputSupplyVoltage < 9.00f)
 800f998:	4b57      	ldr	r3, [pc, #348]	; (800faf8 <getSystemDataString+0x550>)
 800f99a:	ed93 7a00 	vldr	s14, [r3]
 800f99e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 800f9a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9aa:	d571      	bpl.n	800fa90 <getSystemDataString+0x4e8>
				strcat((char *)systemPayload,(char * )gcBatterySupplyVoltage);
 800f9ac:	4953      	ldr	r1, [pc, #332]	; (800fafc <getSystemDataString+0x554>)
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f003 faec 	bl	8012f8c <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f7f0 fc25 	bl	8000204 <strlen>
 800f9ba:	4b3f      	ldr	r3, [pc, #252]	; (800fab8 <getSystemDataString+0x510>)
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	5223      	strh	r3, [r4, r0]
			strcat((char *)systemPayload,(char * )gacModbusStatusRTU);
 800f9c0:	494f      	ldr	r1, [pc, #316]	; (800fb00 <getSystemDataString+0x558>)
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f003 fae2 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f7f0 fc1b 	bl	8000204 <strlen>
 800f9ce:	4b3a      	ldr	r3, [pc, #232]	; (800fab8 <getSystemDataString+0x510>)
 800f9d0:	881d      	ldrh	r5, [r3, #0]
 800f9d2:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,"RT,");
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f7f0 fc15 	bl	8000204 <strlen>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	4a49      	ldr	r2, [pc, #292]	; (800fb04 <getSystemDataString+0x55c>)
 800f9de:	6810      	ldr	r0, [r2, #0]
 800f9e0:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f7f0 fc0e 	bl	8000204 <strlen>
 800f9e8:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )agpsLastLocationDataFormatted);
 800f9ea:	4947      	ldr	r1, [pc, #284]	; (800fb08 <getSystemDataString+0x560>)
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f003 facd 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f7f0 fc06 	bl	8000204 <strlen>
 800f9f8:	5225      	strh	r5, [r4, r0]
			if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 800f9fa:	4b44      	ldr	r3, [pc, #272]	; (800fb0c <getSystemDataString+0x564>)
 800f9fc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d050      	beq.n	800faa6 <getSystemDataString+0x4fe>
				strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 800fa04:	4942      	ldr	r1, [pc, #264]	; (800fb10 <getSystemDataString+0x568>)
 800fa06:	4620      	mov	r0, r4
 800fa08:	f003 fac0 	bl	8012f8c <strcat>
			u32TempVar = gu32GSMConfigCheckTimer / 1000;
 800fa0c:	4b41      	ldr	r3, [pc, #260]	; (800fb14 <getSystemDataString+0x56c>)
 800fa0e:	681d      	ldr	r5, [r3, #0]
 800fa10:	4b41      	ldr	r3, [pc, #260]	; (800fb18 <getSystemDataString+0x570>)
 800fa12:	fba3 3505 	umull	r3, r5, r3, r5
 800fa16:	09ad      	lsrs	r5, r5, #6
 800fa18:	4b40      	ldr	r3, [pc, #256]	; (800fb1c <getSystemDataString+0x574>)
 800fa1a:	601d      	str	r5, [r3, #0]
			memset(temp_array, 0, sizeof(temp_array));
 800fa1c:	2232      	movs	r2, #50	; 0x32
 800fa1e:	2100      	movs	r1, #0
 800fa20:	a801      	add	r0, sp, #4
 800fa22:	f003 fa5d 	bl	8012ee0 <memset>
			itoa(u32TempVar, temp_array, 10);
 800fa26:	220a      	movs	r2, #10
 800fa28:	a901      	add	r1, sp, #4
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f002 ffe8 	bl	8012a00 <itoa>
			strcat((char *)systemPayload,(char * )",ConfigCheckTime ");
 800fa30:	4620      	mov	r0, r4
 800fa32:	f7f0 fbe7 	bl	8000204 <strlen>
 800fa36:	4607      	mov	r7, r0
 800fa38:	1826      	adds	r6, r4, r0
 800fa3a:	4d39      	ldr	r5, [pc, #228]	; (800fb20 <getSystemDataString+0x578>)
 800fa3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa3e:	51e0      	str	r0, [r4, r7]
 800fa40:	6071      	str	r1, [r6, #4]
 800fa42:	60b2      	str	r2, [r6, #8]
 800fa44:	60f3      	str	r3, [r6, #12]
 800fa46:	882b      	ldrh	r3, [r5, #0]
 800fa48:	8233      	strh	r3, [r6, #16]
			strcat((char *)systemPayload,(char * )temp_array);
 800fa4a:	a901      	add	r1, sp, #4
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f003 fa9d 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800fa52:	4620      	mov	r0, r4
 800fa54:	f7f0 fbd6 	bl	8000204 <strlen>
 800fa58:	4b17      	ldr	r3, [pc, #92]	; (800fab8 <getSystemDataString+0x510>)
 800fa5a:	881d      	ldrh	r5, [r3, #0]
 800fa5c:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,gau8TempMBRTUPayloadString);
 800fa5e:	4931      	ldr	r1, [pc, #196]	; (800fb24 <getSystemDataString+0x57c>)
 800fa60:	4620      	mov	r0, r4
 800fa62:	f003 fa93 	bl	8012f8c <strcat>
			strcat((char *)systemPayload,(char * )"0,0");	// Added for buffer identification
 800fa66:	4620      	mov	r0, r4
 800fa68:	f7f0 fbcc 	bl	8000204 <strlen>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	4a2e      	ldr	r2, [pc, #184]	; (800fb28 <getSystemDataString+0x580>)
 800fa70:	6810      	ldr	r0, [r2, #0]
 800fa72:	50e0      	str	r0, [r4, r3]
			strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800fa74:	4620      	mov	r0, r4
 800fa76:	f7f0 fbc5 	bl	8000204 <strlen>
 800fa7a:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char * )END_OF_FRAME);
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f7f0 fbc1 	bl	8000204 <strlen>
 800fa82:	4b2a      	ldr	r3, [pc, #168]	; (800fb2c <getSystemDataString+0x584>)
 800fa84:	881b      	ldrh	r3, [r3, #0]
 800fa86:	5223      	strh	r3, [r4, r0]
			gu32TempLoopCounter = 0;
 800fa88:	4b29      	ldr	r3, [pc, #164]	; (800fb30 <getSystemDataString+0x588>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	615a      	str	r2, [r3, #20]
		return systemPayload;
 800fa8e:	e5cc      	b.n	800f62a <getSystemDataString+0x82>
				strcat((char *)systemPayload,(char * )gcSystemSupplyVoltage);
 800fa90:	4928      	ldr	r1, [pc, #160]	; (800fb34 <getSystemDataString+0x58c>)
 800fa92:	4620      	mov	r0, r4
 800fa94:	f003 fa7a 	bl	8012f8c <strcat>
				strcat((char *)systemPayload,(char * )PAYLOAD_SEPARATOR);
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f7f0 fbb3 	bl	8000204 <strlen>
 800fa9e:	4b06      	ldr	r3, [pc, #24]	; (800fab8 <getSystemDataString+0x510>)
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	5223      	strh	r3, [r4, r0]
 800faa4:	e78c      	b.n	800f9c0 <getSystemDataString+0x418>
				strcat((char *)systemPayload,gpu8Norssi);
 800faa6:	4b24      	ldr	r3, [pc, #144]	; (800fb38 <getSystemDataString+0x590>)
 800faa8:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 800faac:	4620      	mov	r0, r4
 800faae:	f003 fa6d 	bl	8012f8c <strcat>
 800fab2:	e7ab      	b.n	800fa0c <getSystemDataString+0x464>
 800fab4:	0801beb4 	.word	0x0801beb4
 800fab8:	0801bde0 	.word	0x0801bde0
 800fabc:	20007ac4 	.word	0x20007ac4
 800fac0:	0801bf38 	.word	0x0801bf38
 800fac4:	0801bd74 	.word	0x0801bd74
 800fac8:	20002988 	.word	0x20002988
 800facc:	0801bec0 	.word	0x0801bec0
 800fad0:	20002980 	.word	0x20002980
 800fad4:	20002978 	.word	0x20002978
 800fad8:	0801bdc0 	.word	0x0801bdc0
 800fadc:	20002990 	.word	0x20002990
 800fae0:	0801be4c 	.word	0x0801be4c
 800fae4:	20002998 	.word	0x20002998
 800fae8:	200029a0 	.word	0x200029a0
 800faec:	0801bec4 	.word	0x0801bec4
 800faf0:	2000e920 	.word	0x2000e920
 800faf4:	2000e908 	.word	0x2000e908
 800faf8:	20004284 	.word	0x20004284
 800fafc:	2000e8fc 	.word	0x2000e8fc
 800fb00:	20004020 	.word	0x20004020
 800fb04:	0801bf40 	.word	0x0801bf40
 800fb08:	20001ef8 	.word	0x20001ef8
 800fb0c:	2000c164 	.word	0x2000c164
 800fb10:	2000c1fa 	.word	0x2000c1fa
 800fb14:	200029b0 	.word	0x200029b0
 800fb18:	10624dd3 	.word	0x10624dd3
 800fb1c:	2000e904 	.word	0x2000e904
 800fb20:	0801bf44 	.word	0x0801bf44
 800fb24:	200010f8 	.word	0x200010f8
 800fb28:	0801bf80 	.word	0x0801bf80
 800fb2c:	0801bf0c 	.word	0x0801bf0c
 800fb30:	20004010 	.word	0x20004010
 800fb34:	2000e910 	.word	0x2000e910
 800fb38:	20001e40 	.word	0x20001e40

0800fb3c <enqueue>:
* <hr>
*
*******************************************************************************/
void enqueue(strctQUEUE * queue,char * data)
{
	if(data != NULL)
 800fb3c:	b381      	cbz	r1, 800fba0 <enqueue+0x64>
{
 800fb3e:	b570      	push	{r4, r5, r6, lr}
 800fb40:	4604      	mov	r4, r0
 800fb42:	460d      	mov	r5, r1
	{
		if(queue->head >= (MAX_QUEUE_SIZE))
 800fb44:	6803      	ldr	r3, [r0, #0]
 800fb46:	2b09      	cmp	r3, #9
 800fb48:	dd01      	ble.n	800fb4e <enqueue+0x12>
		{
			/*Queue Overflow */
//			queue->head = 0;
			/* Added For Buffer */
			queue->head = MAX_QUEUE_SIZE - 1;
 800fb4a:	2309      	movs	r3, #9
 800fb4c:	6003      	str	r3, [r0, #0]
		}
		/* If queue has data overwrite it */
		if(queue->data[queue->head] != NULL)
 800fb4e:	6823      	ldr	r3, [r4, #0]
 800fb50:	3302      	adds	r3, #2
 800fb52:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fb56:	b1e3      	cbz	r3, 800fb92 <enqueue+0x56>
		{
			GSMQueueFullFlag = 1;
 800fb58:	4b12      	ldr	r3, [pc, #72]	; (800fba4 <enqueue+0x68>)
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	701a      	strb	r2, [r3, #0]
			memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 800fb5e:	4e12      	ldr	r6, [pc, #72]	; (800fba8 <enqueue+0x6c>)
 800fb60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800fb64:	2100      	movs	r1, #0
 800fb66:	4630      	mov	r0, r6
 800fb68:	f003 f9ba 	bl	8012ee0 <memset>
			strcpy((char *)FlashStr.cSFlashWriteData,(char *)gsmPayload.data[gsmPayload.head]);
 800fb6c:	4a0f      	ldr	r2, [pc, #60]	; (800fbac <enqueue+0x70>)
 800fb6e:	6813      	ldr	r3, [r2, #0]
 800fb70:	3302      	adds	r3, #2
 800fb72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb76:	4630      	mov	r0, r6
 800fb78:	f003 fa24 	bl	8012fc4 <strcpy>
			free(queue->data[queue->head]);
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	3302      	adds	r3, #2
 800fb80:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800fb84:	f002 ff46 	bl	8012a14 <free>
			queue->data[queue->head] = NULL;
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	3302      	adds	r3, #2
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		}
		queue->data[queue->head]= data;
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	1c9a      	adds	r2, r3, #2
 800fb96:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
		queue->head++;
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	6023      	str	r3, [r4, #0]
	else
	{
		/* Log Error */
		//Error_Callback(enmERROR_ENQUEUE);
	}
}
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	20004270 	.word	0x20004270
 800fba8:	200108da 	.word	0x200108da
 800fbac:	2000d2d4 	.word	0x2000d2d4

0800fbb0 <dequeue>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void dequeue(strctQUEUE * queue)
{
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	4604      	mov	r4, r0
	/* After data is uploaded free the pointer in queue->data */
    if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 800fbb4:	6843      	ldr	r3, [r0, #4]
 800fbb6:	b90b      	cbnz	r3, 800fbbc <dequeue+0xc>
 800fbb8:	6802      	ldr	r2, [r0, #0]
 800fbba:	b112      	cbz	r2, 800fbc2 <dequeue+0x12>
 800fbbc:	6822      	ldr	r2, [r4, #0]
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d10e      	bne.n	800fbe0 <dequeue+0x30>
    {
       // printf("Queue is Empty \n");
    	if(queue->data[queue->tail] != NULL)
 800fbc2:	3302      	adds	r3, #2
 800fbc4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800fbc8:	b130      	cbz	r0, 800fbd8 <dequeue+0x28>
    	{
            free(queue->data[queue->tail]);
 800fbca:	f002 ff23 	bl	8012a14 <free>
            queue->data[queue->tail] = NULL;
 800fbce:	6863      	ldr	r3, [r4, #4]
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    	}
    	queue->tail = 0;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	6063      	str	r3, [r4, #4]
    	queue->head = 0;
 800fbdc:	6023      	str	r3, [r4, #0]
        	queue->tail = 0;
        	queue->head = 0;
        }
        if(queue->tail > (MAX_QUEUE_SIZE-1)) queue->tail=0;
    }
}
 800fbde:	bd10      	pop	{r4, pc}
        free(queue->data[queue->tail]);
 800fbe0:	3302      	adds	r3, #2
 800fbe2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800fbe6:	f002 ff15 	bl	8012a14 <free>
        queue->data[queue->tail] = NULL;
 800fbea:	6863      	ldr	r3, [r4, #4]
 800fbec:	1c9a      	adds	r2, r3, #2
 800fbee:	2100      	movs	r1, #0
 800fbf0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
        queue->tail++;
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	6063      	str	r3, [r4, #4]
        if(queue->tail == queue->head)
 800fbf8:	6822      	ldr	r2, [r4, #0]
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d005      	beq.n	800fc0a <dequeue+0x5a>
        if(queue->tail > (MAX_QUEUE_SIZE-1)) queue->tail=0;
 800fbfe:	6863      	ldr	r3, [r4, #4]
 800fc00:	2b09      	cmp	r3, #9
 800fc02:	ddec      	ble.n	800fbde <dequeue+0x2e>
 800fc04:	2300      	movs	r3, #0
 800fc06:	6063      	str	r3, [r4, #4]
}
 800fc08:	e7e9      	b.n	800fbde <dequeue+0x2e>
        	queue->tail = 0;
 800fc0a:	6061      	str	r1, [r4, #4]
        	queue->head = 0;
 800fc0c:	6021      	str	r1, [r4, #0]
 800fc0e:	e7f6      	b.n	800fbfe <dequeue+0x4e>

0800fc10 <isQueueEmpty>:
* <hr>
*
*******************************************************************************/
uint32_t isQueueEmpty(strctQUEUE * queue)
{
	return((queue->head) == (queue->tail));
 800fc10:	6802      	ldr	r2, [r0, #0]
 800fc12:	6840      	ldr	r0, [r0, #4]
}
 800fc14:	4282      	cmp	r2, r0
 800fc16:	bf14      	ite	ne
 800fc18:	2000      	movne	r0, #0
 800fc1a:	2001      	moveq	r0, #1
 800fc1c:	4770      	bx	lr
	...

0800fc20 <verifyNetworkConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyNetworkConfigData(void)
{
 800fc20:	b510      	push	{r4, lr}
	/*Log Errors Related to */
	if(atoi(gau8ConfigNewtorkIsEnabled) > 2)
 800fc22:	4858      	ldr	r0, [pc, #352]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc24:	f002 feac 	bl	8012980 <atoi>
 800fc28:	2802      	cmp	r0, #2
 800fc2a:	dd62      	ble.n	800fcf2 <verifyNetworkConfigData+0xd2>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWISENABLED);
 800fc2c:	4a55      	ldr	r2, [pc, #340]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc2e:	6853      	ldr	r3, [r2, #4]
 800fc30:	f043 0302 	orr.w	r3, r3, #2
 800fc34:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWISENABLED);

	if(strlen(gau8ConfigNewtorkServerURL) > 150)
 800fc36:	4854      	ldr	r0, [pc, #336]	; (800fd88 <verifyNetworkConfigData+0x168>)
 800fc38:	f7f0 fae4 	bl	8000204 <strlen>
 800fc3c:	2896      	cmp	r0, #150	; 0x96
 800fc3e:	d95e      	bls.n	800fcfe <verifyNetworkConfigData+0xde>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSERURLLEN);
 800fc40:	4a50      	ldr	r2, [pc, #320]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc42:	6853      	ldr	r3, [r2, #4]
 800fc44:	f043 0304 	orr.w	r3, r3, #4
 800fc48:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSERURLLEN);

	if(strlen(gau8ConfigNewtorkConfigURL) > 150)
 800fc4a:	4850      	ldr	r0, [pc, #320]	; (800fd8c <verifyNetworkConfigData+0x16c>)
 800fc4c:	f7f0 fada 	bl	8000204 <strlen>
 800fc50:	2896      	cmp	r0, #150	; 0x96
 800fc52:	d95a      	bls.n	800fd0a <verifyNetworkConfigData+0xea>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFURLLEN);
 800fc54:	4a4b      	ldr	r2, [pc, #300]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc56:	6853      	ldr	r3, [r2, #4]
 800fc58:	f043 0308 	orr.w	r3, r3, #8
 800fc5c:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWCONFURLLEN);

	if(strlen(gau8ConfigNewtorkAPN) > 50)
 800fc5e:	484c      	ldr	r0, [pc, #304]	; (800fd90 <verifyNetworkConfigData+0x170>)
 800fc60:	f7f0 fad0 	bl	8000204 <strlen>
 800fc64:	2832      	cmp	r0, #50	; 0x32
 800fc66:	d956      	bls.n	800fd16 <verifyNetworkConfigData+0xf6>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWAPN);
 800fc68:	4a46      	ldr	r2, [pc, #280]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc6a:	6853      	ldr	r3, [r2, #4]
 800fc6c:	f043 0310 	orr.w	r3, r3, #16
 800fc70:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWAPN);

	if(atoi(gau8ConfigNewtorkUpFreqSupply) > 10000000)
 800fc72:	4848      	ldr	r0, [pc, #288]	; (800fd94 <verifyNetworkConfigData+0x174>)
 800fc74:	f002 fe84 	bl	8012980 <atoi>
 800fc78:	4b47      	ldr	r3, [pc, #284]	; (800fd98 <verifyNetworkConfigData+0x178>)
 800fc7a:	4298      	cmp	r0, r3
 800fc7c:	dd51      	ble.n	800fd22 <verifyNetworkConfigData+0x102>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWUPFREQSUPPLY);
 800fc7e:	4a41      	ldr	r2, [pc, #260]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc80:	6853      	ldr	r3, [r2, #4]
 800fc82:	f043 0320 	orr.w	r3, r3, #32
 800fc86:	6053      	str	r3, [r2, #4]
	{
		gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQSUPPLY);
	}

	if(atoi(gau8ConfigNewtorkUpFreqBatt) > 10000000)
 800fc88:	4844      	ldr	r0, [pc, #272]	; (800fd9c <verifyNetworkConfigData+0x17c>)
 800fc8a:	f002 fe79 	bl	8012980 <atoi>
 800fc8e:	4b42      	ldr	r3, [pc, #264]	; (800fd98 <verifyNetworkConfigData+0x178>)
 800fc90:	4298      	cmp	r0, r3
 800fc92:	dd52      	ble.n	800fd3a <verifyNetworkConfigData+0x11a>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWUPFREQBATT);
 800fc94:	4a3b      	ldr	r2, [pc, #236]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fc96:	6853      	ldr	r3, [r2, #4]
 800fc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc9c:	6053      	str	r3, [r2, #4]
	else
	{
		gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQBATT);
	}
	if(atoi(gau8ConfigNewtorkType) > 2)
 800fc9e:	4840      	ldr	r0, [pc, #256]	; (800fda0 <verifyNetworkConfigData+0x180>)
 800fca0:	f002 fe6e 	bl	8012980 <atoi>
 800fca4:	2802      	cmp	r0, #2
 800fca6:	dd54      	ble.n	800fd52 <verifyNetworkConfigData+0x132>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWTYPE);
 800fca8:	4a36      	ldr	r2, [pc, #216]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fcaa:	6853      	ldr	r3, [r2, #4]
 800fcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcb0:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWTYPE);

	if(atoi(gau8ConfigNewtorkGPSEnable) > 1)
 800fcb2:	483c      	ldr	r0, [pc, #240]	; (800fda4 <verifyNetworkConfigData+0x184>)
 800fcb4:	f002 fe64 	bl	8012980 <atoi>
 800fcb8:	2801      	cmp	r0, #1
 800fcba:	dd50      	ble.n	800fd5e <verifyNetworkConfigData+0x13e>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWGPSEN);
 800fcbc:	4a31      	ldr	r2, [pc, #196]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fcbe:	6853      	ldr	r3, [r2, #4]
 800fcc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcc4:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWGPSEN);

	if(atoi(gau8ConfigNewtorkSendData) > 1)
 800fcc6:	4838      	ldr	r0, [pc, #224]	; (800fda8 <verifyNetworkConfigData+0x188>)
 800fcc8:	f002 fe5a 	bl	8012980 <atoi>
 800fccc:	2801      	cmp	r0, #1
 800fcce:	dd4c      	ble.n	800fd6a <verifyNetworkConfigData+0x14a>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSENDDATAEN);
 800fcd0:	4a2c      	ldr	r2, [pc, #176]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fcd2:	6853      	ldr	r3, [r2, #4]
 800fcd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcd8:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATAEN);

	if(atoi(gau8ConfigNewtorkSendDataDisableTime) > 10000000)
 800fcda:	4834      	ldr	r0, [pc, #208]	; (800fdac <verifyNetworkConfigData+0x18c>)
 800fcdc:	f002 fe50 	bl	8012980 <atoi>
 800fce0:	4b2d      	ldr	r3, [pc, #180]	; (800fd98 <verifyNetworkConfigData+0x178>)
 800fce2:	4298      	cmp	r0, r3
 800fce4:	dd47      	ble.n	800fd76 <verifyNetworkConfigData+0x156>
		gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWSENDDATADISABLE);
 800fce6:	4a27      	ldr	r2, [pc, #156]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fce8:	6853      	ldr	r3, [r2, #4]
 800fcea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fcee:	6053      	str	r3, [r2, #4]
	else
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATADISABLE);

}
 800fcf0:	bd10      	pop	{r4, pc}
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWISENABLED);
 800fcf2:	4a24      	ldr	r2, [pc, #144]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fcf4:	6853      	ldr	r3, [r2, #4]
 800fcf6:	f023 0302 	bic.w	r3, r3, #2
 800fcfa:	6053      	str	r3, [r2, #4]
 800fcfc:	e79b      	b.n	800fc36 <verifyNetworkConfigData+0x16>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSERURLLEN);
 800fcfe:	4a21      	ldr	r2, [pc, #132]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd00:	6853      	ldr	r3, [r2, #4]
 800fd02:	f023 0304 	bic.w	r3, r3, #4
 800fd06:	6053      	str	r3, [r2, #4]
 800fd08:	e79f      	b.n	800fc4a <verifyNetworkConfigData+0x2a>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWCONFURLLEN);
 800fd0a:	4a1e      	ldr	r2, [pc, #120]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd0c:	6853      	ldr	r3, [r2, #4]
 800fd0e:	f023 0308 	bic.w	r3, r3, #8
 800fd12:	6053      	str	r3, [r2, #4]
 800fd14:	e7a3      	b.n	800fc5e <verifyNetworkConfigData+0x3e>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWAPN);
 800fd16:	4a1b      	ldr	r2, [pc, #108]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd18:	6853      	ldr	r3, [r2, #4]
 800fd1a:	f023 0310 	bic.w	r3, r3, #16
 800fd1e:	6053      	str	r3, [r2, #4]
 800fd20:	e7a7      	b.n	800fc72 <verifyNetworkConfigData+0x52>
		gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
 800fd22:	4c18      	ldr	r4, [pc, #96]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd24:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800fd28:	f002 fe2a 	bl	8012980 <atoi>
 800fd2c:	4b18      	ldr	r3, [pc, #96]	; (800fd90 <verifyNetworkConfigData+0x170>)
 800fd2e:	6358      	str	r0, [r3, #52]	; 0x34
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQSUPPLY);
 800fd30:	6863      	ldr	r3, [r4, #4]
 800fd32:	f023 0320 	bic.w	r3, r3, #32
 800fd36:	6063      	str	r3, [r4, #4]
 800fd38:	e7a6      	b.n	800fc88 <verifyNetworkConfigData+0x68>
		gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
 800fd3a:	4c12      	ldr	r4, [pc, #72]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd3c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800fd40:	f002 fe1e 	bl	8012980 <atoi>
 800fd44:	4b12      	ldr	r3, [pc, #72]	; (800fd90 <verifyNetworkConfigData+0x170>)
 800fd46:	6398      	str	r0, [r3, #56]	; 0x38
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWUPFREQBATT);
 800fd48:	6863      	ldr	r3, [r4, #4]
 800fd4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd4e:	6063      	str	r3, [r4, #4]
 800fd50:	e7a5      	b.n	800fc9e <verifyNetworkConfigData+0x7e>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWTYPE);
 800fd52:	4a0c      	ldr	r2, [pc, #48]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd54:	6853      	ldr	r3, [r2, #4]
 800fd56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd5a:	6053      	str	r3, [r2, #4]
 800fd5c:	e7a9      	b.n	800fcb2 <verifyNetworkConfigData+0x92>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWGPSEN);
 800fd5e:	4a09      	ldr	r2, [pc, #36]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd60:	6853      	ldr	r3, [r2, #4]
 800fd62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd66:	6053      	str	r3, [r2, #4]
 800fd68:	e7ad      	b.n	800fcc6 <verifyNetworkConfigData+0xa6>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATAEN);
 800fd6a:	4a06      	ldr	r2, [pc, #24]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd6c:	6853      	ldr	r3, [r2, #4]
 800fd6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd72:	6053      	str	r3, [r2, #4]
 800fd74:	e7b1      	b.n	800fcda <verifyNetworkConfigData+0xba>
		gu32ConfigNetworkErrorDatabase &= ~(1 << enmCONFIG_NWSENDDATADISABLE);
 800fd76:	4a03      	ldr	r2, [pc, #12]	; (800fd84 <verifyNetworkConfigData+0x164>)
 800fd78:	6853      	ldr	r3, [r2, #4]
 800fd7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd7e:	6053      	str	r3, [r2, #4]
}
 800fd80:	e7b6      	b.n	800fcf0 <verifyNetworkConfigData+0xd0>
 800fd82:	bf00      	nop
 800fd84:	20004028 	.word	0x20004028
 800fd88:	20004030 	.word	0x20004030
 800fd8c:	200040c8 	.word	0x200040c8
 800fd90:	20001fc0 	.word	0x20001fc0
 800fd94:	20004160 	.word	0x20004160
 800fd98:	00989680 	.word	0x00989680
 800fd9c:	2000416c 	.word	0x2000416c
 800fda0:	20004178 	.word	0x20004178
 800fda4:	2000417c 	.word	0x2000417c
 800fda8:	20004180 	.word	0x20004180
 800fdac:	20004184 	.word	0x20004184

0800fdb0 <verifyModbus485ConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyModbus485ConfigData(void)
{
 800fdb0:	b538      	push	{r3, r4, r5, lr}
   /* Log Errors Related to Modbus485 Configuration */
	uint32_t u32LoopCounter = 0;

	if(atoi(gau8ConfigModbus485IsEnabled) > 2)
 800fdb2:	48a5      	ldr	r0, [pc, #660]	; (8010048 <verifyModbus485ConfigData+0x298>)
 800fdb4:	f002 fde4 	bl	8012980 <atoi>
 800fdb8:	2802      	cmp	r0, #2
 800fdba:	f340 8090 	ble.w	800fede <verifyModbus485ConfigData+0x12e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ISENABLED);
 800fdbe:	4aa3      	ldr	r2, [pc, #652]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fdc0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fdc4:	f043 0302 	orr.w	r3, r3, #2
 800fdc8:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ISENABLED);

	if((atoi(gau8ConfigModbus485SlaveID) <= 0) | (atoi(gau8ConfigModbus485SlaveID) > 255)) // 1 to 255
 800fdcc:	4da0      	ldr	r5, [pc, #640]	; (8010050 <verifyModbus485ConfigData+0x2a0>)
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f002 fdd6 	bl	8012980 <atoi>
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f002 fdd2 	bl	8012980 <atoi>
 800fddc:	28ff      	cmp	r0, #255	; 0xff
 800fdde:	bfd4      	ite	le
 800fde0:	2300      	movle	r3, #0
 800fde2:	2301      	movgt	r3, #1
 800fde4:	2c00      	cmp	r4, #0
 800fde6:	bfd8      	it	le
 800fde8:	f043 0301 	orrle.w	r3, r3, #1
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d07e      	beq.n	800feee <verifyModbus485ConfigData+0x13e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485SLAVEID);
 800fdf0:	f5a5 72b8 	sub.w	r2, r5, #368	; 0x170
 800fdf4:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fdf8:	f043 0304 	orr.w	r3, r3, #4
 800fdfc:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485SLAVEID);

	if(atoi(gau8ConfigModbus485Termination) > 1)
 800fe00:	4894      	ldr	r0, [pc, #592]	; (8010054 <verifyModbus485ConfigData+0x2a4>)
 800fe02:	f002 fdbd 	bl	8012980 <atoi>
 800fe06:	2801      	cmp	r0, #1
 800fe08:	dd79      	ble.n	800fefe <verifyModbus485ConfigData+0x14e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485TERMINATE);
 800fe0a:	4a90      	ldr	r2, [pc, #576]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fe0c:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fe10:	f043 0308 	orr.w	r3, r3, #8
 800fe14:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485TERMINATE);

	if(atoi(gau8ConfigModbus485DataPoints) > CONFIG_MB485_MAXPARAMS)
 800fe18:	488f      	ldr	r0, [pc, #572]	; (8010058 <verifyModbus485ConfigData+0x2a8>)
 800fe1a:	f002 fdb1 	bl	8012980 <atoi>
 800fe1e:	2808      	cmp	r0, #8
 800fe20:	dd75      	ble.n	800ff0e <verifyModbus485ConfigData+0x15e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
 800fe22:	4a8a      	ldr	r2, [pc, #552]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fe24:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fe28:	f043 0310 	orr.w	r3, r3, #16
 800fe2c:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);

	if(atoi(gau8ConfigModbus485UARTBR) > 115200)
 800fe30:	488a      	ldr	r0, [pc, #552]	; (801005c <verifyModbus485ConfigData+0x2ac>)
 800fe32:	f002 fda5 	bl	8012980 <atoi>
 800fe36:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
 800fe3a:	dd70      	ble.n	800ff1e <verifyModbus485ConfigData+0x16e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTBR);
 800fe3c:	4a83      	ldr	r2, [pc, #524]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fe3e:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fe42:	f043 0320 	orr.w	r3, r3, #32
 800fe46:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTBR);

	if(atoi(gau8ConfigModbus485UARTStartBit) > 3)
 800fe4a:	4885      	ldr	r0, [pc, #532]	; (8010060 <verifyModbus485ConfigData+0x2b0>)
 800fe4c:	f002 fd98 	bl	8012980 <atoi>
 800fe50:	2803      	cmp	r0, #3
 800fe52:	dd6c      	ble.n	800ff2e <verifyModbus485ConfigData+0x17e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTSTARTBIT);
 800fe54:	4a7d      	ldr	r2, [pc, #500]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fe56:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fe5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe5e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTARTBIT);

	if(atoi(gau8ConfigModbus485UARTStopBit) > 3)
 800fe62:	4880      	ldr	r0, [pc, #512]	; (8010064 <verifyModbus485ConfigData+0x2b4>)
 800fe64:	f002 fd8c 	bl	8012980 <atoi>
 800fe68:	2803      	cmp	r0, #3
 800fe6a:	dd68      	ble.n	800ff3e <verifyModbus485ConfigData+0x18e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485UARTSTOPBIT);
 800fe6c:	4a77      	ldr	r2, [pc, #476]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fe6e:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fe72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe76:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	else
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(atoi(gau8ConfigModbus485PollingTime) > 1000000)
 800fe7a:	487b      	ldr	r0, [pc, #492]	; (8010068 <verifyModbus485ConfigData+0x2b8>)
 800fe7c:	f002 fd80 	bl	8012980 <atoi>
 800fe80:	4b7a      	ldr	r3, [pc, #488]	; (801006c <verifyModbus485ConfigData+0x2bc>)
 800fe82:	4298      	cmp	r0, r3
 800fe84:	dd63      	ble.n	800ff4e <verifyModbus485ConfigData+0x19e>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
 800fe86:	4a71      	ldr	r2, [pc, #452]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fe88:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fe8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fe90:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	{
		gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
	}

	if(atoi(gau8ConfigModbus485ResponseTime) > 1000000)
 800fe94:	4876      	ldr	r0, [pc, #472]	; (8010070 <verifyModbus485ConfigData+0x2c0>)
 800fe96:	f002 fd73 	bl	8012980 <atoi>
 800fe9a:	4b74      	ldr	r3, [pc, #464]	; (801006c <verifyModbus485ConfigData+0x2bc>)
 800fe9c:	4298      	cmp	r0, r3
 800fe9e:	dd64      	ble.n	800ff6a <verifyModbus485ConfigData+0x1ba>
		gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485RESPTIME);
 800fea0:	4a6a      	ldr	r2, [pc, #424]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fea2:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fea6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800feaa:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 800feae:	2400      	movs	r4, #0
	else
	{	gu32ModbusResponseTimeout = atoi(gau8ConfigModbus485ResponseTime);
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
	}
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800feb0:	4869      	ldr	r0, [pc, #420]	; (8010058 <verifyModbus485ConfigData+0x2a8>)
 800feb2:	f002 fd65 	bl	8012980 <atoi>
 800feb6:	42a0      	cmp	r0, r4
 800feb8:	d96c      	bls.n	800ff94 <verifyModbus485ConfigData+0x1e4>
	{
		if((gau32ConfigModbus485Address[u32LoopCounter] == 0) || (gau32ConfigModbus485Address[u32LoopCounter] > 65535))
 800feba:	4b6e      	ldr	r3, [pc, #440]	; (8010074 <verifyModbus485ConfigData+0x2c4>)
 800febc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fec2:	3b01      	subs	r3, #1
 800fec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fec8:	4293      	cmp	r3, r2
 800feca:	d85c      	bhi.n	800ff86 <verifyModbus485ConfigData+0x1d6>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ADDRESS);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ADDRESS);
 800fecc:	4a5f      	ldr	r2, [pc, #380]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fece:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fed2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fed6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800feda:	3401      	adds	r4, #1
 800fedc:	e7e8      	b.n	800feb0 <verifyModbus485ConfigData+0x100>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485ISENABLED);
 800fede:	4a5b      	ldr	r2, [pc, #364]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fee0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fee4:	f023 0302 	bic.w	r3, r3, #2
 800fee8:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800feec:	e76e      	b.n	800fdcc <verifyModbus485ConfigData+0x1c>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485SLAVEID);
 800feee:	4a57      	ldr	r2, [pc, #348]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fef0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fef4:	f023 0304 	bic.w	r3, r3, #4
 800fef8:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800fefc:	e780      	b.n	800fe00 <verifyModbus485ConfigData+0x50>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485TERMINATE);
 800fefe:	4a53      	ldr	r2, [pc, #332]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff00:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ff04:	f023 0308 	bic.w	r3, r3, #8
 800ff08:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800ff0c:	e784      	b.n	800fe18 <verifyModbus485ConfigData+0x68>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);
 800ff0e:	4a4f      	ldr	r2, [pc, #316]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff10:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ff14:	f023 0310 	bic.w	r3, r3, #16
 800ff18:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800ff1c:	e788      	b.n	800fe30 <verifyModbus485ConfigData+0x80>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTBR);
 800ff1e:	4a4b      	ldr	r2, [pc, #300]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff20:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ff24:	f023 0320 	bic.w	r3, r3, #32
 800ff28:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800ff2c:	e78d      	b.n	800fe4a <verifyModbus485ConfigData+0x9a>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTARTBIT);
 800ff2e:	4a47      	ldr	r2, [pc, #284]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff30:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ff34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff38:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800ff3c:	e791      	b.n	800fe62 <verifyModbus485ConfigData+0xb2>
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);
 800ff3e:	4a43      	ldr	r2, [pc, #268]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff40:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ff44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff48:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800ff4c:	e795      	b.n	800fe7a <verifyModbus485ConfigData+0xca>
		gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
 800ff4e:	4c3f      	ldr	r4, [pc, #252]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff50:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 800ff54:	f002 fd14 	bl	8012980 <atoi>
 800ff58:	4b46      	ldr	r3, [pc, #280]	; (8010074 <verifyModbus485ConfigData+0x2c4>)
 800ff5a:	6458      	str	r0, [r3, #68]	; 0x44
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 800ff5c:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ff60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff64:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 800ff68:	e794      	b.n	800fe94 <verifyModbus485ConfigData+0xe4>
	{	gu32ModbusResponseTimeout = atoi(gau8ConfigModbus485ResponseTime);
 800ff6a:	4c38      	ldr	r4, [pc, #224]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff6c:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 800ff70:	f002 fd06 	bl	8012980 <atoi>
 800ff74:	4b40      	ldr	r3, [pc, #256]	; (8010078 <verifyModbus485ConfigData+0x2c8>)
 800ff76:	6018      	str	r0, [r3, #0]
		gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
 800ff78:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ff7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff80:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 800ff84:	e793      	b.n	800feae <verifyModbus485ConfigData+0xfe>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485ADDRESS);
 800ff86:	4a31      	ldr	r2, [pc, #196]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ff88:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ff8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff90:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 800ff94:	2400      	movs	r4, #0
	}

	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800ff96:	4830      	ldr	r0, [pc, #192]	; (8010058 <verifyModbus485ConfigData+0x2a8>)
 800ff98:	f002 fcf2 	bl	8012980 <atoi>
 800ff9c:	42a0      	cmp	r0, r4
 800ff9e:	d916      	bls.n	800ffce <verifyModbus485ConfigData+0x21e>
	{
		if((gau32ConfigModbus485DFunctionCode[u32LoopCounter] == 0) || (gau32ConfigModbus485DFunctionCode[u32LoopCounter] > 5))
 800ffa0:	4b34      	ldr	r3, [pc, #208]	; (8010074 <verifyModbus485ConfigData+0x2c4>)
 800ffa2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ffa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	2b04      	cmp	r3, #4
 800ffac:	d808      	bhi.n	800ffc0 <verifyModbus485ConfigData+0x210>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485FUCNTIONCODE);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485FUCNTIONCODE);
 800ffae:	4a27      	ldr	r2, [pc, #156]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ffb0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ffb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffb8:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800ffbc:	3401      	adds	r4, #1
 800ffbe:	e7ea      	b.n	800ff96 <verifyModbus485ConfigData+0x1e6>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485FUCNTIONCODE);
 800ffc0:	4a22      	ldr	r2, [pc, #136]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ffc2:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800ffc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ffca:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
{
 800ffce:	2400      	movs	r4, #0
	}
	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800ffd0:	4821      	ldr	r0, [pc, #132]	; (8010058 <verifyModbus485ConfigData+0x2a8>)
 800ffd2:	f002 fcd5 	bl	8012980 <atoi>
 800ffd6:	42a0      	cmp	r0, r4
 800ffd8:	d917      	bls.n	801000a <verifyModbus485ConfigData+0x25a>
	{
		if((gau32ConfigModbus485NoPoints[u32LoopCounter] == 0) || (gau32ConfigModbus485NoPoints[u32LoopCounter] > 255))
 800ffda:	4b26      	ldr	r3, [pc, #152]	; (8010074 <verifyModbus485ConfigData+0x2c4>)
 800ffdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ffe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	2bfe      	cmp	r3, #254	; 0xfe
 800ffe8:	d808      	bhi.n	800fffc <verifyModbus485ConfigData+0x24c>
			 * Log Error*/
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
			break;
		}
		else
			gu32ConfigModbus485ErrorDatabase &= ~(1 << enmCONFIG_MB485DATAPOINTS);
 800ffea:	4a18      	ldr	r2, [pc, #96]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800ffec:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 800fff0:	f023 0310 	bic.w	r3, r3, #16
 800fff4:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbus485DataPoints) ; u32LoopCounter++ )
 800fff8:	3401      	adds	r4, #1
 800fffa:	e7e9      	b.n	800ffd0 <verifyModbus485ConfigData+0x220>
			gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485DATAPOINTS);
 800fffc:	4a13      	ldr	r2, [pc, #76]	; (801004c <verifyModbus485ConfigData+0x29c>)
 800fffe:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8010002:	f043 0310 	orr.w	r3, r3, #16
 8010006:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	}

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPDEVICE) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPDEVICE);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPDEVICE);
 801000a:	4810      	ldr	r0, [pc, #64]	; (801004c <verifyModbus485ConfigData+0x29c>)
 801000c:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPGATEWAY) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 8010010:	f423 43a1 	bic.w	r3, r3, #20608	; 0x5080
 8010014:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198

	if(atoi(gau8ConfigModbusTCPPORT) > 65535)
 8010018:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 801001c:	f002 fcb0 	bl	8012980 <atoi>
 8010020:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010024:	db07      	blt.n	8010036 <verifyModbus485ConfigData+0x286>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPPORT);
 8010026:	4a09      	ldr	r2, [pc, #36]	; (801004c <verifyModbus485ConfigData+0x29c>)
 8010028:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 801002c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010030:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);

}
 8010034:	bd38      	pop	{r3, r4, r5, pc}
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);
 8010036:	4a05      	ldr	r2, [pc, #20]	; (801004c <verifyModbus485ConfigData+0x29c>)
 8010038:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 801003c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010040:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8010044:	e7f6      	b.n	8010034 <verifyModbus485ConfigData+0x284>
 8010046:	bf00      	nop
 8010048:	20004190 	.word	0x20004190
 801004c:	20004028 	.word	0x20004028
 8010050:	20004198 	.word	0x20004198
 8010054:	200041a0 	.word	0x200041a0
 8010058:	200041a4 	.word	0x200041a4
 801005c:	20001ffc 	.word	0x20001ffc
 8010060:	200041a8 	.word	0x200041a8
 8010064:	200041ac 	.word	0x200041ac
 8010068:	200041b0 	.word	0x200041b0
 801006c:	000f4240 	.word	0x000f4240
 8010070:	200041b8 	.word	0x200041b8
 8010074:	20001fc0 	.word	0x20001fc0
 8010078:	20003624 	.word	0x20003624

0801007c <verifyModbusTCPConfigData>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void verifyModbusTCPConfigData(void)
{
 801007c:	b510      	push	{r4, lr}
	/* Log Errors Related to Modbus485 Configuration */
	uint32_t u32LoopCounter = 0;

	if(atoi(gau8ConfigModbusTCPIsEnabled) > 2)
 801007e:	4869      	ldr	r0, [pc, #420]	; (8010224 <verifyModbusTCPConfigData+0x1a8>)
 8010080:	f002 fc7e 	bl	8012980 <atoi>
 8010084:	2802      	cmp	r0, #2
 8010086:	dd5a      	ble.n	801013e <verifyModbusTCPConfigData+0xc2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPISENABLED);
 8010088:	4a67      	ldr	r2, [pc, #412]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 801008a:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 801008e:	f043 0302 	orr.w	r3, r3, #2
 8010092:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPISENABLED);

	if(atoi(gau8ConfigModbusTCPDataPoints) > CONFIG_MBTCP_MAXPARAMS)
 8010096:	4865      	ldr	r0, [pc, #404]	; (801022c <verifyModbusTCPConfigData+0x1b0>)
 8010098:	f002 fc72 	bl	8012980 <atoi>
 801009c:	2808      	cmp	r0, #8
 801009e:	dd56      	ble.n	801014e <verifyModbusTCPConfigData+0xd2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPDATAPOINTS);
 80100a0:	4a61      	ldr	r2, [pc, #388]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 80100a2:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80100a6:	f043 0304 	orr.w	r3, r3, #4
 80100aa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPDATAPOINTS);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPDEVICE) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPDEVICE);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPDEVICE);
 80100ae:	485e      	ldr	r0, [pc, #376]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 80100b0:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485UARTSTOPBIT);

	if(IP_IS_TYPE_V4(gau8ConfigModbusTCPIPGATEWAY) != 1)
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485POLLTIME);
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485POLLTIME);
 80100b4:	f423 43a1 	bic.w	r3, r3, #20608	; 0x5080
 80100b8:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198

	if(atoi(gau8ConfigModbusTCPPORT) > 65535)
 80100bc:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 80100c0:	f002 fc5e 	bl	8012980 <atoi>
 80100c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80100c8:	db49      	blt.n	801015e <verifyModbusTCPConfigData+0xe2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPIPPORT);
 80100ca:	4a57      	ldr	r2, [pc, #348]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 80100cc:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80100d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80100d4:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	else
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);

	/*Added on 28-1-2022 */
	if(atoi(gau8ConfigModbusTCPPollingTime) > 1000000)
 80100d8:	4855      	ldr	r0, [pc, #340]	; (8010230 <verifyModbusTCPConfigData+0x1b4>)
 80100da:	f002 fc51 	bl	8012980 <atoi>
 80100de:	4b55      	ldr	r3, [pc, #340]	; (8010234 <verifyModbusTCPConfigData+0x1b8>)
 80100e0:	4298      	cmp	r0, r3
 80100e2:	dd44      	ble.n	801016e <verifyModbusTCPConfigData+0xf2>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPPOLLTIME);
 80100e4:	4a50      	ldr	r2, [pc, #320]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 80100e6:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80100ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80100ee:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	{
		gu32ModbusTCPPollingTime = atoi(gau8ConfigModbusTCPPollingTime);
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPPOLLTIME);
	}

	if(atoi(gau8ConfigModbusTCPResponseTime) > 1000000)
 80100f2:	4851      	ldr	r0, [pc, #324]	; (8010238 <verifyModbusTCPConfigData+0x1bc>)
 80100f4:	f002 fc44 	bl	8012980 <atoi>
 80100f8:	4b4e      	ldr	r3, [pc, #312]	; (8010234 <verifyModbusTCPConfigData+0x1b8>)
 80100fa:	4298      	cmp	r0, r3
 80100fc:	dd46      	ble.n	801018c <verifyModbusTCPConfigData+0x110>
		gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MB485RESPTIME);
 80100fe:	4a4a      	ldr	r2, [pc, #296]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010100:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010108:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
{
 801010c:	2400      	movs	r4, #0
		/* Will not update this field as LWIP TCP stack requires min 3 SEC to update the state */
		//gu32ModbusTCPResponseTimeout = atoi(gau8ConfigModbusTCPResponseTime);
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
	}

	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 801010e:	4847      	ldr	r0, [pc, #284]	; (801022c <verifyModbusTCPConfigData+0x1b0>)
 8010110:	f002 fc36 	bl	8012980 <atoi>
 8010114:	4284      	cmp	r4, r0
 8010116:	d248      	bcs.n	80101aa <verifyModbusTCPConfigData+0x12e>
	{
		if((gau32ConfigModbusTCPAddress[u32LoopCounter] == 0) || (gau32ConfigModbusTCPAddress[u32LoopCounter] > 65535))
 8010118:	4b48      	ldr	r3, [pc, #288]	; (801023c <verifyModbusTCPConfigData+0x1c0>)
 801011a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801011e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010122:	3b01      	subs	r3, #1
 8010124:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010128:	4293      	cmp	r3, r2
 801012a:	d837      	bhi.n	801019c <verifyModbusTCPConfigData+0x120>
			 * Log Error*/
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPADDRESS);
			break;
		}
		else
			gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPADDRESS);
 801012c:	4a3e      	ldr	r2, [pc, #248]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 801012e:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010136:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 801013a:	3401      	adds	r4, #1
 801013c:	e7e7      	b.n	801010e <verifyModbusTCPConfigData+0x92>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPISENABLED);
 801013e:	4a3a      	ldr	r2, [pc, #232]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010140:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010144:	f023 0302 	bic.w	r3, r3, #2
 8010148:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 801014c:	e7a3      	b.n	8010096 <verifyModbusTCPConfigData+0x1a>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPDATAPOINTS);
 801014e:	4a36      	ldr	r2, [pc, #216]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010150:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010154:	f023 0304 	bic.w	r3, r3, #4
 8010158:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 801015c:	e7a7      	b.n	80100ae <verifyModbusTCPConfigData+0x32>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPIPPORT);
 801015e:	4a32      	ldr	r2, [pc, #200]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010160:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010168:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 801016c:	e7b4      	b.n	80100d8 <verifyModbusTCPConfigData+0x5c>
		gu32ModbusTCPPollingTime = atoi(gau8ConfigModbusTCPPollingTime);
 801016e:	4c2e      	ldr	r4, [pc, #184]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010170:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 8010174:	f002 fc04 	bl	8012980 <atoi>
 8010178:	4b30      	ldr	r3, [pc, #192]	; (801023c <verifyModbusTCPConfigData+0x1c0>)
 801017a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPPOLLTIME);
 801017e:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8010182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010186:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
 801018a:	e7b2      	b.n	80100f2 <verifyModbusTCPConfigData+0x76>
		gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MB485RESPTIME);
 801018c:	4a26      	ldr	r2, [pc, #152]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 801018e:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010196:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
 801019a:	e7b7      	b.n	801010c <verifyModbusTCPConfigData+0x90>
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPADDRESS);
 801019c:	4a22      	ldr	r2, [pc, #136]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 801019e:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80101a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101a6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
{
 80101aa:	2400      	movs	r4, #0
	}

	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 80101ac:	481f      	ldr	r0, [pc, #124]	; (801022c <verifyModbusTCPConfigData+0x1b0>)
 80101ae:	f002 fbe7 	bl	8012980 <atoi>
 80101b2:	4284      	cmp	r4, r0
 80101b4:	d217      	bcs.n	80101e6 <verifyModbusTCPConfigData+0x16a>
	{
		if((gau32ConfigModbusTCPDFunctionCode[u32LoopCounter] == 0) || (gau32ConfigModbusTCPDFunctionCode[u32LoopCounter] > 5))
 80101b6:	4b21      	ldr	r3, [pc, #132]	; (801023c <verifyModbusTCPConfigData+0x1c0>)
 80101b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80101c0:	3b01      	subs	r3, #1
 80101c2:	2b04      	cmp	r3, #4
 80101c4:	d808      	bhi.n	80101d8 <verifyModbusTCPConfigData+0x15c>
			 * Log Error*/
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPFUNCTIONCODE);
			break;
		}
		else
			gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPFUNCTIONCODE);
 80101c6:	4a18      	ldr	r2, [pc, #96]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 80101c8:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80101cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80101d0:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 80101d4:	3401      	adds	r4, #1
 80101d6:	e7e9      	b.n	80101ac <verifyModbusTCPConfigData+0x130>
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPFUNCTIONCODE);
 80101d8:	4a13      	ldr	r2, [pc, #76]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 80101da:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 80101de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101e2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
{
 80101e6:	2400      	movs	r4, #0
	}
	u32LoopCounter = 0;
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 80101e8:	4810      	ldr	r0, [pc, #64]	; (801022c <verifyModbusTCPConfigData+0x1b0>)
 80101ea:	f002 fbc9 	bl	8012980 <atoi>
 80101ee:	4284      	cmp	r4, r0
 80101f0:	d217      	bcs.n	8010222 <verifyModbusTCPConfigData+0x1a6>
	{
		if((gau32ConfigModbusTCPNoPoints[u32LoopCounter] == 0) || (gau32ConfigModbusTCPNoPoints[u32LoopCounter] > 255))
 80101f2:	4b12      	ldr	r3, [pc, #72]	; (801023c <verifyModbusTCPConfigData+0x1c0>)
 80101f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80101fc:	3b01      	subs	r3, #1
 80101fe:	2bfe      	cmp	r3, #254	; 0xfe
 8010200:	d808      	bhi.n	8010214 <verifyModbusTCPConfigData+0x198>
			 * Log Error*/
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPDATALEN);
			break;
		}
		else
			gu32ConfigModbusTCPErrorDatabase &= ~(1 << enmCONFIG_MBTCPDATALEN);
 8010202:	4a09      	ldr	r2, [pc, #36]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010204:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801020c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	for(u32LoopCounter = 0 ; u32LoopCounter < atoi(gau8ConfigModbusTCPDataPoints) ; u32LoopCounter++ )
 8010210:	3401      	adds	r4, #1
 8010212:	e7e9      	b.n	80101e8 <verifyModbusTCPConfigData+0x16c>
			gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPDATALEN);
 8010214:	4a04      	ldr	r2, [pc, #16]	; (8010228 <verifyModbusTCPConfigData+0x1ac>)
 8010216:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 801021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801021e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	}
}
 8010222:	bd10      	pop	{r4, pc}
 8010224:	200041cc 	.word	0x200041cc
 8010228:	20004028 	.word	0x20004028
 801022c:	200041d0 	.word	0x200041d0
 8010230:	200041d4 	.word	0x200041d4
 8010234:	000f4240 	.word	0x000f4240
 8010238:	200041dc 	.word	0x200041dc
 801023c:	20001fc0 	.word	0x20001fc0

08010240 <verifyRemoteConfiguration>:
{
 8010240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gu32NewConfigAvailable == TRUE)
 8010242:	4b30      	ldr	r3, [pc, #192]	; (8010304 <verifyRemoteConfiguration+0xc4>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d003      	beq.n	8010252 <verifyRemoteConfiguration+0x12>
	gu32NewConfigAvailable = FALSE;
 801024a:	4b2e      	ldr	r3, [pc, #184]	; (8010304 <verifyRemoteConfiguration+0xc4>)
 801024c:	2200      	movs	r2, #0
 801024e:	601a      	str	r2, [r3, #0]
}
 8010250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sof = strstr(gau8ConfigData,"(,");
 8010252:	4d2d      	ldr	r5, [pc, #180]	; (8010308 <verifyRemoteConfiguration+0xc8>)
 8010254:	492d      	ldr	r1, [pc, #180]	; (801030c <verifyRemoteConfiguration+0xcc>)
 8010256:	4628      	mov	r0, r5
 8010258:	f002 fee1 	bl	801301e <strstr>
 801025c:	4606      	mov	r6, r0
 801025e:	4c2c      	ldr	r4, [pc, #176]	; (8010310 <verifyRemoteConfiguration+0xd0>)
 8010260:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
		eof = strstr(gau8ConfigData,",)");
 8010264:	492b      	ldr	r1, [pc, #172]	; (8010314 <verifyRemoteConfiguration+0xd4>)
 8010266:	4628      	mov	r0, r5
 8010268:	f002 fed9 	bl	801301e <strstr>
 801026c:	4607      	mov	r7, r0
 801026e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		nwsof = strstr(gau8ConfigData,"NS,");
 8010272:	4929      	ldr	r1, [pc, #164]	; (8010318 <verifyRemoteConfiguration+0xd8>)
 8010274:	4628      	mov	r0, r5
 8010276:	f002 fed2 	bl	801301e <strstr>
 801027a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		nweof = strstr(gau8ConfigData,",NE");
 801027e:	4927      	ldr	r1, [pc, #156]	; (801031c <verifyRemoteConfiguration+0xdc>)
 8010280:	4628      	mov	r0, r5
 8010282:	f002 fecc 	bl	801301e <strstr>
 8010286:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		mb485sof = strstr(gau8ConfigData,"MS,");
 801028a:	4925      	ldr	r1, [pc, #148]	; (8010320 <verifyRemoteConfiguration+0xe0>)
 801028c:	4628      	mov	r0, r5
 801028e:	f002 fec6 	bl	801301e <strstr>
 8010292:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
		mb485eof = strstr(gau8ConfigData,",ME");
 8010296:	4923      	ldr	r1, [pc, #140]	; (8010324 <verifyRemoteConfiguration+0xe4>)
 8010298:	4628      	mov	r0, r5
 801029a:	f002 fec0 	bl	801301e <strstr>
 801029e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
		devReset = strstr(gau8ConfigData,"!");
 80102a2:	2121      	movs	r1, #33	; 0x21
 80102a4:	4628      	mov	r0, r5
 80102a6:	f002 fe80 	bl	8012faa <strchr>
 80102aa:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		useDefaultConfig = strstr(gau8ConfigData,"^");
 80102ae:	215e      	movs	r1, #94	; 0x5e
 80102b0:	4628      	mov	r0, r5
 80102b2:	f002 fe7a 	bl	8012faa <strchr>
 80102b6:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
		getConfig = strstr(gau8ConfigData,"%");
 80102ba:	2125      	movs	r1, #37	; 0x25
 80102bc:	4628      	mov	r0, r5
 80102be:	f002 fe74 	bl	8012faa <strchr>
 80102c2:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
		if(sof != NULL)
 80102c6:	2e00      	cmp	r6, #0
 80102c8:	d0bf      	beq.n	801024a <verifyRemoteConfiguration+0xa>
			if(eof != NULL)
 80102ca:	2f00      	cmp	r7, #0
 80102cc:	d0bd      	beq.n	801024a <verifyRemoteConfiguration+0xa>
				gu32ConfigLen = eof - sof ;	// Total Config Bytes
 80102ce:	1bbf      	subs	r7, r7, r6
 80102d0:	4c15      	ldr	r4, [pc, #84]	; (8010328 <verifyRemoteConfiguration+0xe8>)
 80102d2:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
				memset(gau8RemoteDeviceID, 0, sizeof(gau8RemoteDeviceID));
 80102d6:	4d15      	ldr	r5, [pc, #84]	; (801032c <verifyRemoteConfiguration+0xec>)
 80102d8:	2228      	movs	r2, #40	; 0x28
 80102da:	2100      	movs	r1, #0
 80102dc:	4628      	mov	r0, r5
 80102de:	f002 fdff 	bl	8012ee0 <memset>
				memcpy(gau8RemoteDeviceID, sof+4, strlen(strtok(sof+4,",")));
 80102e2:	3604      	adds	r6, #4
 80102e4:	4912      	ldr	r1, [pc, #72]	; (8010330 <verifyRemoteConfiguration+0xf0>)
 80102e6:	4630      	mov	r0, r6
 80102e8:	f003 fce4 	bl	8013cb4 <strtok>
 80102ec:	f7ef ff8a 	bl	8000204 <strlen>
 80102f0:	4602      	mov	r2, r0
 80102f2:	4631      	mov	r1, r6
 80102f4:	4628      	mov	r0, r5
 80102f6:	f002 fde5 	bl	8012ec4 <memcpy>
				gu32ParseConfigAvailable = TRUE;
 80102fa:	2301      	movs	r3, #1
 80102fc:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 8010300:	e7a3      	b.n	801024a <verifyRemoteConfiguration+0xa>
 8010302:	bf00      	nop
 8010304:	200035a4 	.word	0x200035a4
 8010308:	2000b994 	.word	0x2000b994
 801030c:	0801bf84 	.word	0x0801bf84
 8010310:	20001fc0 	.word	0x20001fc0
 8010314:	0801bf88 	.word	0x0801bf88
 8010318:	0801bf8c 	.word	0x0801bf8c
 801031c:	0801bf90 	.word	0x0801bf90
 8010320:	0801bf94 	.word	0x0801bf94
 8010324:	0801bf98 	.word	0x0801bf98
 8010328:	20004028 	.word	0x20004028
 801032c:	200020f0 	.word	0x200020f0
 8010330:	0801bde0 	.word	0x0801bde0

08010334 <parseRemoteconfig>:
	if(gu32ParseConfigAvailable == TRUE)
 8010334:	4bb0      	ldr	r3, [pc, #704]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010336:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801033a:	2b01      	cmp	r3, #1
 801033c:	d000      	beq.n	8010340 <parseRemoteconfig+0xc>
 801033e:	4770      	bx	lr
{
 8010340:	b570      	push	{r4, r5, r6, lr}
		if(strcmp(dinfo,gau8RemoteDeviceID) == 0)
 8010342:	49ae      	ldr	r1, [pc, #696]	; (80105fc <parseRemoteconfig+0x2c8>)
 8010344:	48ae      	ldr	r0, [pc, #696]	; (8010600 <parseRemoteconfig+0x2cc>)
 8010346:	f7ef ff53 	bl	80001f0 <strcmp>
 801034a:	b100      	cbz	r0, 801034e <parseRemoteconfig+0x1a>
}
 801034c:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	// LED ON
 801034e:	2200      	movs	r2, #0
 8010350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010354:	48ab      	ldr	r0, [pc, #684]	; (8010604 <parseRemoteconfig+0x2d0>)
 8010356:	f7f2 fd3f 	bl	8002dd8 <HAL_GPIO_WritePin>
			if(devReset != NULL)
 801035a:	4bab      	ldr	r3, [pc, #684]	; (8010608 <parseRemoteconfig+0x2d4>)
 801035c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010360:	b15b      	cbz	r3, 801037a <parseRemoteconfig+0x46>
				HAL_Delay(1000);
 8010362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010366:	f7f0 feb1 	bl	80010cc <HAL_Delay>
				HAL_Delay(1000000);
 801036a:	4ca8      	ldr	r4, [pc, #672]	; (801060c <parseRemoteconfig+0x2d8>)
 801036c:	4620      	mov	r0, r4
 801036e:	f7f0 fead 	bl	80010cc <HAL_Delay>
				HAL_Delay(1000000);
 8010372:	4620      	mov	r0, r4
 8010374:	f7f0 feaa 	bl	80010cc <HAL_Delay>
 8010378:	e7e8      	b.n	801034c <parseRemoteconfig+0x18>
			else if(useDefaultConfig != NULL)
 801037a:	4ba3      	ldr	r3, [pc, #652]	; (8010608 <parseRemoteconfig+0x2d4>)
 801037c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8010380:	b163      	cbz	r3, 801039c <parseRemoteconfig+0x68>
				if(FLASH_If_Erase(ADDR_FLASH_SECTOR_22) != FLASHIF_OK)
 8010382:	48a3      	ldr	r0, [pc, #652]	; (8010610 <parseRemoteconfig+0x2dc>)
 8010384:	f002 f90e 	bl	80125a4 <FLASH_If_Erase>
 8010388:	2800      	cmp	r0, #0
 801038a:	d1df      	bne.n	801034c <parseRemoteconfig+0x18>
					HAL_Delay(1000000);
 801038c:	4c9f      	ldr	r4, [pc, #636]	; (801060c <parseRemoteconfig+0x2d8>)
 801038e:	4620      	mov	r0, r4
 8010390:	f7f0 fe9c 	bl	80010cc <HAL_Delay>
					HAL_Delay(1000000);
 8010394:	4620      	mov	r0, r4
 8010396:	f7f0 fe99 	bl	80010cc <HAL_Delay>
 801039a:	e7d7      	b.n	801034c <parseRemoteconfig+0x18>
			else if(getConfig != NULL)
 801039c:	4b9a      	ldr	r3, [pc, #616]	; (8010608 <parseRemoteconfig+0x2d4>)
 801039e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80103a2:	b133      	cbz	r3, 80103b2 <parseRemoteconfig+0x7e>
				enqueue(&gsmPayload,(char *)getSystemConfig());
 80103a4:	f7fe fe8a 	bl	800f0bc <getSystemConfig>
 80103a8:	4601      	mov	r1, r0
 80103aa:	489a      	ldr	r0, [pc, #616]	; (8010614 <parseRemoteconfig+0x2e0>)
 80103ac:	f7ff fbc6 	bl	800fb3c <enqueue>
 80103b0:	e7cc      	b.n	801034c <parseRemoteconfig+0x18>
				switch(enmDeviceConfigState)
 80103b2:	4b91      	ldr	r3, [pc, #580]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80103b4:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 80103b8:	2b0d      	cmp	r3, #13
 80103ba:	f200 81a2 	bhi.w	8010702 <parseRemoteconfig+0x3ce>
 80103be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80103c2:	000e      	.short	0x000e
 80103c4:	003c0032 	.word	0x003c0032
 80103c8:	00510046 	.word	0x00510046
 80103cc:	00ab005c 	.word	0x00ab005c
 80103d0:	013700e6 	.word	0x013700e6
 80103d4:	014d0142 	.word	0x014d0142
 80103d8:	01630158 	.word	0x01630158
 80103dc:	016e      	.short	0x016e
						memcpy(gau8RemoteDeviceType, sof+2, strlen(strtok(sof+2,",")));
 80103de:	4d8a      	ldr	r5, [pc, #552]	; (8010608 <parseRemoteconfig+0x2d4>)
 80103e0:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
 80103e4:	3402      	adds	r4, #2
 80103e6:	498c      	ldr	r1, [pc, #560]	; (8010618 <parseRemoteconfig+0x2e4>)
 80103e8:	4620      	mov	r0, r4
 80103ea:	f003 fc63 	bl	8013cb4 <strtok>
 80103ee:	f7ef ff09 	bl	8000204 <strlen>
 80103f2:	4602      	mov	r2, r0
 80103f4:	4e89      	ldr	r6, [pc, #548]	; (801061c <parseRemoteconfig+0x2e8>)
 80103f6:	4621      	mov	r1, r4
 80103f8:	4630      	mov	r0, r6
 80103fa:	f002 fd63 	bl	8012ec4 <memcpy>
						if(atoi(gau8RemoteDeviceType) == enmMyDeviceType)
 80103fe:	4630      	mov	r0, r6
 8010400:	f002 fabe 	bl	8012980 <atoi>
 8010404:	f895 3158 	ldrb.w	r3, [r5, #344]	; 0x158
 8010408:	4298      	cmp	r0, r3
 801040a:	d004      	beq.n	8010416 <parseRemoteconfig+0xe2>
							gu32ParseConfigAvailable = FALSE;
 801040c:	4b7a      	ldr	r3, [pc, #488]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801040e:	2200      	movs	r2, #0
 8010410:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
 8010414:	e79a      	b.n	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 8010416:	f5a6 72e4 	sub.w	r2, r6, #456	; 0x1c8
 801041a:	f892 31c4 	ldrb.w	r3, [r2, #452]	; 0x1c4
 801041e:	3301      	adds	r3, #1
 8010420:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010424:	e792      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_ADC] == TRUE)
 8010426:	4a78      	ldr	r2, [pc, #480]	; (8010608 <parseRemoteconfig+0x2d4>)
 8010428:	f8d2 2160 	ldr.w	r2, [r2, #352]	; 0x160
 801042c:	2a01      	cmp	r2, #1
 801042e:	d08d      	beq.n	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 8010430:	3301      	adds	r3, #1
 8010432:	4a71      	ldr	r2, [pc, #452]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010434:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010438:	e788      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DI] == TRUE)
 801043a:	4a73      	ldr	r2, [pc, #460]	; (8010608 <parseRemoteconfig+0x2d4>)
 801043c:	f8d2 2164 	ldr.w	r2, [r2, #356]	; 0x164
 8010440:	2a01      	cmp	r2, #1
 8010442:	d083      	beq.n	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 8010444:	3301      	adds	r3, #1
 8010446:	4a6c      	ldr	r2, [pc, #432]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010448:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801044c:	e77e      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DO] == TRUE)
 801044e:	4a6e      	ldr	r2, [pc, #440]	; (8010608 <parseRemoteconfig+0x2d4>)
 8010450:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
 8010454:	2a01      	cmp	r2, #1
 8010456:	f43f af79 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 801045a:	3301      	adds	r3, #1
 801045c:	4a66      	ldr	r2, [pc, #408]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801045e:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010462:	e773      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_RPM] == TRUE)
 8010464:	4a68      	ldr	r2, [pc, #416]	; (8010608 <parseRemoteconfig+0x2d4>)
 8010466:	f8d2 216c 	ldr.w	r2, [r2, #364]	; 0x16c
 801046a:	2a01      	cmp	r2, #1
 801046c:	f43f af6e 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 8010470:	3301      	adds	r3, #1
 8010472:	4a61      	ldr	r2, [pc, #388]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010474:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010478:	e768      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_NETWORK] == TRUE)
 801047a:	4a63      	ldr	r2, [pc, #396]	; (8010608 <parseRemoteconfig+0x2d4>)
 801047c:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 8010480:	2a01      	cmp	r2, #1
 8010482:	d004      	beq.n	801048e <parseRemoteconfig+0x15a>
							enmDeviceConfigState++;
 8010484:	3301      	adds	r3, #1
 8010486:	4a5c      	ldr	r2, [pc, #368]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010488:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801048c:	e75e      	b.n	801034c <parseRemoteconfig+0x18>
							if(gu32ConfigOperationStatus == FALSE)
 801048e:	4a5a      	ldr	r2, [pc, #360]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010490:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
 8010494:	2a00      	cmp	r2, #0
 8010496:	d137      	bne.n	8010508 <parseRemoteconfig+0x1d4>
								if((nwsof != NULL) && (nweof != NULL))
 8010498:	4a5b      	ldr	r2, [pc, #364]	; (8010608 <parseRemoteconfig+0x2d4>)
 801049a:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
 801049e:	b371      	cbz	r1, 80104fe <parseRemoteconfig+0x1ca>
 80104a0:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 80104a4:	b35a      	cbz	r2, 80104fe <parseRemoteconfig+0x1ca>
									nwmlen = (nweof - nwsof) + 4 ;
 80104a6:	1a53      	subs	r3, r2, r1
 80104a8:	3304      	adds	r3, #4
 80104aa:	4a53      	ldr	r2, [pc, #332]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80104ac:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
									tempconfig = (char *)malloc(sizeof(char) * 2000);
 80104b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80104b4:	f002 faa6 	bl	8012a04 <malloc>
 80104b8:	4604      	mov	r4, r0
 80104ba:	4a53      	ldr	r2, [pc, #332]	; (8010608 <parseRemoteconfig+0x2d4>)
 80104bc:	f8c2 018c 	str.w	r0, [r2, #396]	; 0x18c
									memset(tempconfig,0x00,2000 * sizeof(char));
 80104c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80104c4:	2100      	movs	r1, #0
 80104c6:	f002 fd0b 	bl	8012ee0 <memset>
									if(tempconfig != NULL)
 80104ca:	4620      	mov	r0, r4
 80104cc:	b164      	cbz	r4, 80104e8 <parseRemoteconfig+0x1b4>
										strncat((char *)tempconfig,nwsof,nwmlen);
 80104ce:	4b4a      	ldr	r3, [pc, #296]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80104d0:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 80104d4:	4b4c      	ldr	r3, [pc, #304]	; (8010608 <parseRemoteconfig+0x2d4>)
 80104d6:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 80104da:	f002 fd7b 	bl	8012fd4 <strncat>
									gu32ConfigOperationStatus = TRUE;
 80104de:	4b46      	ldr	r3, [pc, #280]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80104e0:	2201      	movs	r2, #1
 80104e2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80104e6:	e731      	b.n	801034c <parseRemoteconfig+0x18>
										gau32RemoteConfigSupport[enmCONFIG_NETWORK] = FALSE;
 80104e8:	4b47      	ldr	r3, [pc, #284]	; (8010608 <parseRemoteconfig+0x2d4>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
										enmDeviceConfigState++;
 80104f0:	4a41      	ldr	r2, [pc, #260]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80104f2:	f892 31c4 	ldrb.w	r3, [r2, #452]	; 0x1c4
 80104f6:	3301      	adds	r3, #1
 80104f8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80104fc:	e7ef      	b.n	80104de <parseRemoteconfig+0x1aa>
									enmDeviceConfigState++;
 80104fe:	3301      	adds	r3, #1
 8010500:	4a3d      	ldr	r2, [pc, #244]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010502:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010506:	e721      	b.n	801034c <parseRemoteconfig+0x18>
								gu32ConfigOperationStatus = FALSE;
 8010508:	4a3b      	ldr	r2, [pc, #236]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801050a:	2100      	movs	r1, #0
 801050c:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
								enmDeviceConfigState++;
 8010510:	3301      	adds	r3, #1
 8010512:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010516:	e719      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_MODBUS485] == TRUE)
 8010518:	4a3b      	ldr	r2, [pc, #236]	; (8010608 <parseRemoteconfig+0x2d4>)
 801051a:	f8d2 2174 	ldr.w	r2, [r2, #372]	; 0x174
 801051e:	2a01      	cmp	r2, #1
 8010520:	d004      	beq.n	801052c <parseRemoteconfig+0x1f8>
							enmDeviceConfigState++;
 8010522:	3301      	adds	r3, #1
 8010524:	4a34      	ldr	r2, [pc, #208]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010526:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801052a:	e70f      	b.n	801034c <parseRemoteconfig+0x18>
							if(gu32ConfigOperationStatus == FALSE)
 801052c:	4a32      	ldr	r2, [pc, #200]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801052e:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
 8010532:	bb22      	cbnz	r2, 801057e <parseRemoteconfig+0x24a>
								if((mb485sof != NULL) && (mb485eof != NULL))
 8010534:	4a34      	ldr	r2, [pc, #208]	; (8010608 <parseRemoteconfig+0x2d4>)
 8010536:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 801053a:	b1d9      	cbz	r1, 8010574 <parseRemoteconfig+0x240>
 801053c:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8010540:	b1c2      	cbz	r2, 8010574 <parseRemoteconfig+0x240>
									mb485mlen = (mb485eof - mb485sof) + 4 ;
 8010542:	1a52      	subs	r2, r2, r1
 8010544:	3204      	adds	r2, #4
 8010546:	482c      	ldr	r0, [pc, #176]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010548:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
									if(tempconfig != NULL)
 801054c:	482e      	ldr	r0, [pc, #184]	; (8010608 <parseRemoteconfig+0x2d4>)
 801054e:	f8d0 018c 	ldr.w	r0, [r0, #396]	; 0x18c
 8010552:	b130      	cbz	r0, 8010562 <parseRemoteconfig+0x22e>
										strncat((char *)tempconfig,mb485sof,mb485mlen);
 8010554:	f002 fd3e 	bl	8012fd4 <strncat>
									gu32ConfigOperationStatus = TRUE;
 8010558:	4b27      	ldr	r3, [pc, #156]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801055a:	2201      	movs	r2, #1
 801055c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8010560:	e6f4      	b.n	801034c <parseRemoteconfig+0x18>
										gau32RemoteConfigSupport[enmCONFIG_NETWORK] = FALSE;
 8010562:	4a29      	ldr	r2, [pc, #164]	; (8010608 <parseRemoteconfig+0x2d4>)
 8010564:	2100      	movs	r1, #0
 8010566:	f8c2 1170 	str.w	r1, [r2, #368]	; 0x170
										enmDeviceConfigState++;
 801056a:	3301      	adds	r3, #1
 801056c:	4a22      	ldr	r2, [pc, #136]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801056e:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010572:	e7f1      	b.n	8010558 <parseRemoteconfig+0x224>
									enmDeviceConfigState++;
 8010574:	3301      	adds	r3, #1
 8010576:	4a20      	ldr	r2, [pc, #128]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010578:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801057c:	e6e6      	b.n	801034c <parseRemoteconfig+0x18>
								gu32ConfigOperationStatus = FALSE;
 801057e:	4a1e      	ldr	r2, [pc, #120]	; (80105f8 <parseRemoteconfig+0x2c4>)
 8010580:	2100      	movs	r1, #0
 8010582:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
								enmDeviceConfigState++;
 8010586:	3301      	adds	r3, #1
 8010588:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801058c:	e6de      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_MODBUSTCP] == TRUE)
 801058e:	4a1e      	ldr	r2, [pc, #120]	; (8010608 <parseRemoteconfig+0x2d4>)
 8010590:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 8010594:	2a01      	cmp	r2, #1
 8010596:	d004      	beq.n	80105a2 <parseRemoteconfig+0x26e>
							enmDeviceConfigState++;
 8010598:	3301      	adds	r3, #1
 801059a:	4a17      	ldr	r2, [pc, #92]	; (80105f8 <parseRemoteconfig+0x2c4>)
 801059c:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80105a0:	e6d4      	b.n	801034c <parseRemoteconfig+0x18>
								if(gu32ConfigOperationStatus == FALSE)
 80105a2:	4a15      	ldr	r2, [pc, #84]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80105a4:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
 80105a8:	2a00      	cmp	r2, #0
 80105aa:	d139      	bne.n	8010620 <parseRemoteconfig+0x2ec>
									if((mbTCPsof != NULL) && (mbTCPeof != NULL))
 80105ac:	4a16      	ldr	r2, [pc, #88]	; (8010608 <parseRemoteconfig+0x2d4>)
 80105ae:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
 80105b2:	b1d9      	cbz	r1, 80105ec <parseRemoteconfig+0x2b8>
 80105b4:	f8d2 2194 	ldr.w	r2, [r2, #404]	; 0x194
 80105b8:	b1c2      	cbz	r2, 80105ec <parseRemoteconfig+0x2b8>
										mbtcpmlen = (mbTCPeof-mbTCPsof) + 4;
 80105ba:	1a52      	subs	r2, r2, r1
 80105bc:	3204      	adds	r2, #4
 80105be:	480e      	ldr	r0, [pc, #56]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80105c0:	f8c0 21d8 	str.w	r2, [r0, #472]	; 0x1d8
										if(tempconfig != NULL)
 80105c4:	4810      	ldr	r0, [pc, #64]	; (8010608 <parseRemoteconfig+0x2d4>)
 80105c6:	f8d0 018c 	ldr.w	r0, [r0, #396]	; 0x18c
 80105ca:	b130      	cbz	r0, 80105da <parseRemoteconfig+0x2a6>
											strncat((char *)tempconfig,mbTCPsof,mbtcpmlen);
 80105cc:	f002 fd02 	bl	8012fd4 <strncat>
										gu32ConfigOperationStatus = TRUE;
 80105d0:	4b09      	ldr	r3, [pc, #36]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80105d2:	2201      	movs	r2, #1
 80105d4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80105d8:	e6b8      	b.n	801034c <parseRemoteconfig+0x18>
											gau32RemoteConfigSupport[enmCONFIG_MODBUSTCP] = FALSE;
 80105da:	4a0b      	ldr	r2, [pc, #44]	; (8010608 <parseRemoteconfig+0x2d4>)
 80105dc:	2100      	movs	r1, #0
 80105de:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
											enmDeviceConfigState++;
 80105e2:	3301      	adds	r3, #1
 80105e4:	4a04      	ldr	r2, [pc, #16]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80105e6:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80105ea:	e7f1      	b.n	80105d0 <parseRemoteconfig+0x29c>
										enmDeviceConfigState++;
 80105ec:	3301      	adds	r3, #1
 80105ee:	4a02      	ldr	r2, [pc, #8]	; (80105f8 <parseRemoteconfig+0x2c4>)
 80105f0:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 80105f4:	e6aa      	b.n	801034c <parseRemoteconfig+0x18>
 80105f6:	bf00      	nop
 80105f8:	20004028 	.word	0x20004028
 80105fc:	200020f0 	.word	0x200020f0
 8010600:	20007ac4 	.word	0x20007ac4
 8010604:	40020c00 	.word	0x40020c00
 8010608:	20001fc0 	.word	0x20001fc0
 801060c:	000f4240 	.word	0x000f4240
 8010610:	081c0000 	.word	0x081c0000
 8010614:	2000d2d4 	.word	0x2000d2d4
 8010618:	0801bde0 	.word	0x0801bde0
 801061c:	200041f0 	.word	0x200041f0
									gu32ConfigOperationStatus = FALSE;
 8010620:	4a3a      	ldr	r2, [pc, #232]	; (801070c <parseRemoteconfig+0x3d8>)
 8010622:	2100      	movs	r1, #0
 8010624:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
									enmDeviceConfigState++;
 8010628:	3301      	adds	r3, #1
 801062a:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801062e:	e68d      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DATAMGMT] == TRUE)
 8010630:	4a37      	ldr	r2, [pc, #220]	; (8010710 <parseRemoteconfig+0x3dc>)
 8010632:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 8010636:	2a01      	cmp	r2, #1
 8010638:	f43f ae88 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 801063c:	3301      	adds	r3, #1
 801063e:	4a33      	ldr	r2, [pc, #204]	; (801070c <parseRemoteconfig+0x3d8>)
 8010640:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010644:	e682      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_CAN_1] == TRUE)
 8010646:	4a32      	ldr	r2, [pc, #200]	; (8010710 <parseRemoteconfig+0x3dc>)
 8010648:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
 801064c:	2a01      	cmp	r2, #1
 801064e:	f43f ae7d 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 8010652:	3301      	adds	r3, #1
 8010654:	4a2d      	ldr	r2, [pc, #180]	; (801070c <parseRemoteconfig+0x3d8>)
 8010656:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801065a:	e677      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_CAN_2] == TRUE)
 801065c:	4a2c      	ldr	r2, [pc, #176]	; (8010710 <parseRemoteconfig+0x3dc>)
 801065e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
 8010662:	2a01      	cmp	r2, #1
 8010664:	f43f ae72 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 8010668:	3301      	adds	r3, #1
 801066a:	4a28      	ldr	r2, [pc, #160]	; (801070c <parseRemoteconfig+0x3d8>)
 801066c:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010670:	e66c      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_DEBUG] == TRUE)
 8010672:	4a27      	ldr	r2, [pc, #156]	; (8010710 <parseRemoteconfig+0x3dc>)
 8010674:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
 8010678:	2a01      	cmp	r2, #1
 801067a:	f43f ae67 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++;
 801067e:	3301      	adds	r3, #1
 8010680:	4a22      	ldr	r2, [pc, #136]	; (801070c <parseRemoteconfig+0x3d8>)
 8010682:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 8010686:	e661      	b.n	801034c <parseRemoteconfig+0x18>
						if(gau32RemoteConfigSupport[enmCONFIG_MQTT] == TRUE)
 8010688:	4a21      	ldr	r2, [pc, #132]	; (8010710 <parseRemoteconfig+0x3dc>)
 801068a:	f8d2 218c 	ldr.w	r2, [r2, #396]	; 0x18c
 801068e:	2a01      	cmp	r2, #1
 8010690:	f43f ae5c 	beq.w	801034c <parseRemoteconfig+0x18>
							enmDeviceConfigState++ ;
 8010694:	3301      	adds	r3, #1
 8010696:	4a1d      	ldr	r2, [pc, #116]	; (801070c <parseRemoteconfig+0x3d8>)
 8010698:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
 801069c:	e656      	b.n	801034c <parseRemoteconfig+0x18>
						if(FLASH_If_Erase(ADDR_FLASH_SECTOR_22) != FLASHIF_OK)
 801069e:	481d      	ldr	r0, [pc, #116]	; (8010714 <parseRemoteconfig+0x3e0>)
 80106a0:	f001 ff80 	bl	80125a4 <FLASH_If_Erase>
 80106a4:	b9c0      	cbnz	r0, 80106d8 <parseRemoteconfig+0x3a4>
							if(u32LastMemoryWriteLocation == 0)
 80106a6:	4b1c      	ldr	r3, [pc, #112]	; (8010718 <parseRemoteconfig+0x3e4>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	b913      	cbnz	r3, 80106b2 <parseRemoteconfig+0x37e>
								u32LastMemoryWriteLocation = ADDR_FLASH_SECTOR_22;
 80106ac:	4b1a      	ldr	r3, [pc, #104]	; (8010718 <parseRemoteconfig+0x3e4>)
 80106ae:	4a19      	ldr	r2, [pc, #100]	; (8010714 <parseRemoteconfig+0x3e0>)
 80106b0:	601a      	str	r2, [r3, #0]
							if(WriteDatatoFlash(u32LastMemoryWriteLocation,(uint8_t *)tempconfig,(nwmlen+mb485mlen+mbtcpmlen+4),1) == SUCCESS)
 80106b2:	4a16      	ldr	r2, [pc, #88]	; (801070c <parseRemoteconfig+0x3d8>)
 80106b4:	f8d2 31d0 	ldr.w	r3, [r2, #464]	; 0x1d0
 80106b8:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
 80106bc:	440b      	add	r3, r1
 80106be:	f8d2 21d8 	ldr.w	r2, [r2, #472]	; 0x1d8
 80106c2:	441a      	add	r2, r3
 80106c4:	2301      	movs	r3, #1
 80106c6:	3204      	adds	r2, #4
 80106c8:	4911      	ldr	r1, [pc, #68]	; (8010710 <parseRemoteconfig+0x3dc>)
 80106ca:	f8d1 118c 	ldr.w	r1, [r1, #396]	; 0x18c
 80106ce:	4812      	ldr	r0, [pc, #72]	; (8010718 <parseRemoteconfig+0x3e4>)
 80106d0:	6800      	ldr	r0, [r0, #0]
 80106d2:	f001 ffa9 	bl	8012628 <WriteDatatoFlash>
 80106d6:	b120      	cbz	r0, 80106e2 <parseRemoteconfig+0x3ae>
						gu32ParseConfigAvailable = FALSE;
 80106d8:	4b0c      	ldr	r3, [pc, #48]	; (801070c <parseRemoteconfig+0x3d8>)
 80106da:	2200      	movs	r2, #0
 80106dc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
						break;
 80106e0:	e634      	b.n	801034c <parseRemoteconfig+0x18>
								tempconfig = NULL;
 80106e2:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <parseRemoteconfig+0x3dc>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
								HAL_Delay(3000);
 80106ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80106ee:	f7f0 fced 	bl	80010cc <HAL_Delay>
								HAL_Delay(1000000);
 80106f2:	4c0a      	ldr	r4, [pc, #40]	; (801071c <parseRemoteconfig+0x3e8>)
 80106f4:	4620      	mov	r0, r4
 80106f6:	f7f0 fce9 	bl	80010cc <HAL_Delay>
								HAL_Delay(1000000);
 80106fa:	4620      	mov	r0, r4
 80106fc:	f7f0 fce6 	bl	80010cc <HAL_Delay>
 8010700:	e7ea      	b.n	80106d8 <parseRemoteconfig+0x3a4>
						gu32ParseConfigAvailable = FALSE;
 8010702:	4b02      	ldr	r3, [pc, #8]	; (801070c <parseRemoteconfig+0x3d8>)
 8010704:	2200      	movs	r2, #0
 8010706:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 801070a:	e61f      	b.n	801034c <parseRemoteconfig+0x18>
 801070c:	20004028 	.word	0x20004028
 8010710:	20001fc0 	.word	0x20001fc0
 8010714:	081c0000 	.word	0x081c0000
 8010718:	20004320 	.word	0x20004320
 801071c:	000f4240 	.word	0x000f4240

08010720 <extractNewtorkConfiguration>:
{
 8010720:	b510      	push	{r4, lr}
	gu32ExtractParamCounter = 0;
 8010722:	4b31      	ldr	r3, [pc, #196]	; (80107e8 <extractNewtorkConfiguration+0xc8>)
 8010724:	2200      	movs	r2, #0
 8010726:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	char *configptr = strtok(nwsof, ",");
 801072a:	4930      	ldr	r1, [pc, #192]	; (80107ec <extractNewtorkConfiguration+0xcc>)
 801072c:	4b30      	ldr	r3, [pc, #192]	; (80107f0 <extractNewtorkConfiguration+0xd0>)
 801072e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8010732:	f003 fabf 	bl	8013cb4 <strtok>
 8010736:	4601      	mov	r1, r0
	while(configptr != NULL)
 8010738:	e00b      	b.n	8010752 <extractNewtorkConfiguration+0x32>
				strcpy(gau8ConfigNewtorkIsEnabled,configptr);
 801073a:	482b      	ldr	r0, [pc, #172]	; (80107e8 <extractNewtorkConfiguration+0xc8>)
 801073c:	f002 fc42 	bl	8012fc4 <strcpy>
		gu32ExtractParamCounter++;
 8010740:	3401      	adds	r4, #1
 8010742:	4b29      	ldr	r3, [pc, #164]	; (80107e8 <extractNewtorkConfiguration+0xc8>)
 8010744:	f8c3 41dc 	str.w	r4, [r3, #476]	; 0x1dc
		configptr = strtok(NULL, ",");
 8010748:	4928      	ldr	r1, [pc, #160]	; (80107ec <extractNewtorkConfiguration+0xcc>)
 801074a:	2000      	movs	r0, #0
 801074c:	f003 fab2 	bl	8013cb4 <strtok>
 8010750:	4601      	mov	r1, r0
	while(configptr != NULL)
 8010752:	2900      	cmp	r1, #0
 8010754:	d040      	beq.n	80107d8 <extractNewtorkConfiguration+0xb8>
		switch(gu32ExtractParamCounter)
 8010756:	4b24      	ldr	r3, [pc, #144]	; (80107e8 <extractNewtorkConfiguration+0xc8>)
 8010758:	f8d3 41dc 	ldr.w	r4, [r3, #476]	; 0x1dc
 801075c:	1e63      	subs	r3, r4, #1
 801075e:	2b09      	cmp	r3, #9
 8010760:	d8ee      	bhi.n	8010740 <extractNewtorkConfiguration+0x20>
 8010762:	a201      	add	r2, pc, #4	; (adr r2, 8010768 <extractNewtorkConfiguration+0x48>)
 8010764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010768:	0801073b 	.word	0x0801073b
 801076c:	08010791 	.word	0x08010791
 8010770:	08010799 	.word	0x08010799
 8010774:	080107a1 	.word	0x080107a1
 8010778:	080107a9 	.word	0x080107a9
 801077c:	080107b1 	.word	0x080107b1
 8010780:	080107b9 	.word	0x080107b9
 8010784:	080107c1 	.word	0x080107c1
 8010788:	080107c9 	.word	0x080107c9
 801078c:	080107d1 	.word	0x080107d1
				strcpy(gau8ConfigNewtorkServerURL,configptr);
 8010790:	4818      	ldr	r0, [pc, #96]	; (80107f4 <extractNewtorkConfiguration+0xd4>)
 8010792:	f002 fc17 	bl	8012fc4 <strcpy>
				break;
 8010796:	e7d3      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkConfigURL,configptr);
 8010798:	4817      	ldr	r0, [pc, #92]	; (80107f8 <extractNewtorkConfiguration+0xd8>)
 801079a:	f002 fc13 	bl	8012fc4 <strcpy>
				break;
 801079e:	e7cf      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkAPN,configptr);
 80107a0:	4813      	ldr	r0, [pc, #76]	; (80107f0 <extractNewtorkConfiguration+0xd0>)
 80107a2:	f002 fc0f 	bl	8012fc4 <strcpy>
				break;
 80107a6:	e7cb      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkUpFreqSupply,configptr);
 80107a8:	4814      	ldr	r0, [pc, #80]	; (80107fc <extractNewtorkConfiguration+0xdc>)
 80107aa:	f002 fc0b 	bl	8012fc4 <strcpy>
				break;
 80107ae:	e7c7      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkUpFreqBatt,configptr);
 80107b0:	4813      	ldr	r0, [pc, #76]	; (8010800 <extractNewtorkConfiguration+0xe0>)
 80107b2:	f002 fc07 	bl	8012fc4 <strcpy>
				break;
 80107b6:	e7c3      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkType,configptr);
 80107b8:	4812      	ldr	r0, [pc, #72]	; (8010804 <extractNewtorkConfiguration+0xe4>)
 80107ba:	f002 fc03 	bl	8012fc4 <strcpy>
				break;
 80107be:	e7bf      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkGPSEnable,configptr);
 80107c0:	4811      	ldr	r0, [pc, #68]	; (8010808 <extractNewtorkConfiguration+0xe8>)
 80107c2:	f002 fbff 	bl	8012fc4 <strcpy>
				break;
 80107c6:	e7bb      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkSendData,configptr);
 80107c8:	4810      	ldr	r0, [pc, #64]	; (801080c <extractNewtorkConfiguration+0xec>)
 80107ca:	f002 fbfb 	bl	8012fc4 <strcpy>
				break;
 80107ce:	e7b7      	b.n	8010740 <extractNewtorkConfiguration+0x20>
				strcpy(gau8ConfigNewtorkSendDataDisableTime,configptr);
 80107d0:	480f      	ldr	r0, [pc, #60]	; (8010810 <extractNewtorkConfiguration+0xf0>)
 80107d2:	f002 fbf7 	bl	8012fc4 <strcpy>
				break;
 80107d6:	e7b3      	b.n	8010740 <extractNewtorkConfiguration+0x20>
	gu32ExtractParamCounter = 0;
 80107d8:	4b03      	ldr	r3, [pc, #12]	; (80107e8 <extractNewtorkConfiguration+0xc8>)
 80107da:	2200      	movs	r2, #0
 80107dc:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyNetworkConfigData();
 80107e0:	f7ff fa1e 	bl	800fc20 <verifyNetworkConfigData>
}
 80107e4:	bd10      	pop	{r4, pc}
 80107e6:	bf00      	nop
 80107e8:	20004028 	.word	0x20004028
 80107ec:	0801bde0 	.word	0x0801bde0
 80107f0:	20001fc0 	.word	0x20001fc0
 80107f4:	20004030 	.word	0x20004030
 80107f8:	200040c8 	.word	0x200040c8
 80107fc:	20004160 	.word	0x20004160
 8010800:	2000416c 	.word	0x2000416c
 8010804:	20004178 	.word	0x20004178
 8010808:	2000417c 	.word	0x2000417c
 801080c:	20004180 	.word	0x20004180
 8010810:	20004184 	.word	0x20004184

08010814 <extractModbus485Configuration>:
{
 8010814:	b570      	push	{r4, r5, r6, lr}
	char *configptr = strtok(mb485config, ",");//mb485config
 8010816:	4977      	ldr	r1, [pc, #476]	; (80109f4 <extractModbus485Configuration+0x1e0>)
 8010818:	4b77      	ldr	r3, [pc, #476]	; (80109f8 <extractModbus485Configuration+0x1e4>)
 801081a:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 801081e:	f003 fa49 	bl	8013cb4 <strtok>
 8010822:	4604      	mov	r4, r0
	gu32ExtractParamCounter = 0;
 8010824:	4b75      	ldr	r3, [pc, #468]	; (80109fc <extractModbus485Configuration+0x1e8>)
 8010826:	2200      	movs	r2, #0
 8010828:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	while(configptr != NULL)
 801082c:	e00f      	b.n	801084e <extractModbus485Configuration+0x3a>
				strcpy(gau8ConfigModbus485IsEnabled,configptr);
 801082e:	4621      	mov	r1, r4
 8010830:	4873      	ldr	r0, [pc, #460]	; (8010a00 <extractModbus485Configuration+0x1ec>)
 8010832:	f002 fbc7 	bl	8012fc4 <strcpy>
		if(gu32ExtractParamCounter != 9)
 8010836:	4b71      	ldr	r3, [pc, #452]	; (80109fc <extractModbus485Configuration+0x1e8>)
 8010838:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801083c:	2b09      	cmp	r3, #9
 801083e:	f040 80cb 	bne.w	80109d8 <extractModbus485Configuration+0x1c4>
		gu32ExtractParamCounter++;
 8010842:	4a6e      	ldr	r2, [pc, #440]	; (80109fc <extractModbus485Configuration+0x1e8>)
 8010844:	f8d2 31dc 	ldr.w	r3, [r2, #476]	; 0x1dc
 8010848:	3301      	adds	r3, #1
 801084a:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	while(configptr != NULL)
 801084e:	2c00      	cmp	r4, #0
 8010850:	f000 80c8 	beq.w	80109e4 <extractModbus485Configuration+0x1d0>
		switch(gu32ExtractParamCounter)
 8010854:	4b69      	ldr	r3, [pc, #420]	; (80109fc <extractModbus485Configuration+0x1e8>)
 8010856:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801085a:	3b01      	subs	r3, #1
 801085c:	2b0f      	cmp	r3, #15
 801085e:	d8ea      	bhi.n	8010836 <extractModbus485Configuration+0x22>
 8010860:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <extractModbus485Configuration+0x54>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	0801082f 	.word	0x0801082f
 801086c:	080108a9 	.word	0x080108a9
 8010870:	080108b3 	.word	0x080108b3
 8010874:	080108bd 	.word	0x080108bd
 8010878:	080108c7 	.word	0x080108c7
 801087c:	080108d1 	.word	0x080108d1
 8010880:	080108db 	.word	0x080108db
 8010884:	080108e5 	.word	0x080108e5
 8010888:	080108ef 	.word	0x080108ef
 801088c:	08010993 	.word	0x08010993
 8010890:	0801099d 	.word	0x0801099d
 8010894:	080109a7 	.word	0x080109a7
 8010898:	080109b1 	.word	0x080109b1
 801089c:	080109bb 	.word	0x080109bb
 80108a0:	080109c5 	.word	0x080109c5
 80108a4:	080109cf 	.word	0x080109cf
				strcpy(gau8ConfigModbus485SlaveID,configptr);
 80108a8:	4621      	mov	r1, r4
 80108aa:	4856      	ldr	r0, [pc, #344]	; (8010a04 <extractModbus485Configuration+0x1f0>)
 80108ac:	f002 fb8a 	bl	8012fc4 <strcpy>
				break;
 80108b0:	e7c1      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485Termination,configptr);
 80108b2:	4621      	mov	r1, r4
 80108b4:	4854      	ldr	r0, [pc, #336]	; (8010a08 <extractModbus485Configuration+0x1f4>)
 80108b6:	f002 fb85 	bl	8012fc4 <strcpy>
				break;
 80108ba:	e7bc      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485DataPoints,configptr);
 80108bc:	4621      	mov	r1, r4
 80108be:	4853      	ldr	r0, [pc, #332]	; (8010a0c <extractModbus485Configuration+0x1f8>)
 80108c0:	f002 fb80 	bl	8012fc4 <strcpy>
				break;
 80108c4:	e7b7      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTBR,configptr);
 80108c6:	4621      	mov	r1, r4
 80108c8:	4851      	ldr	r0, [pc, #324]	; (8010a10 <extractModbus485Configuration+0x1fc>)
 80108ca:	f002 fb7b 	bl	8012fc4 <strcpy>
				break;
 80108ce:	e7b2      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTStartBit,configptr);
 80108d0:	4621      	mov	r1, r4
 80108d2:	4850      	ldr	r0, [pc, #320]	; (8010a14 <extractModbus485Configuration+0x200>)
 80108d4:	f002 fb76 	bl	8012fc4 <strcpy>
				break;
 80108d8:	e7ad      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTStopBit,configptr);
 80108da:	4621      	mov	r1, r4
 80108dc:	484e      	ldr	r0, [pc, #312]	; (8010a18 <extractModbus485Configuration+0x204>)
 80108de:	f002 fb71 	bl	8012fc4 <strcpy>
				break;
 80108e2:	e7a8      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485UARTParity,configptr);
 80108e4:	4621      	mov	r1, r4
 80108e6:	484d      	ldr	r0, [pc, #308]	; (8010a1c <extractModbus485Configuration+0x208>)
 80108e8:	f002 fb6c 	bl	8012fc4 <strcpy>
				break;
 80108ec:	e7a3      	b.n	8010836 <extractModbus485Configuration+0x22>
				if(atoi(gau8ConfigModbus485DataPoints) <= CONFIG_MB485_MAXPARAMS)
 80108ee:	4847      	ldr	r0, [pc, #284]	; (8010a0c <extractModbus485Configuration+0x1f8>)
 80108f0:	f002 f846 	bl	8012980 <atoi>
 80108f4:	2808      	cmp	r0, #8
 80108f6:	dc9e      	bgt.n	8010836 <extractModbus485Configuration+0x22>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 80108f8:	2600      	movs	r6, #0
 80108fa:	4844      	ldr	r0, [pc, #272]	; (8010a0c <extractModbus485Configuration+0x1f8>)
 80108fc:	f002 f840 	bl	8012980 <atoi>
 8010900:	42b0      	cmp	r0, r6
 8010902:	d912      	bls.n	801092a <extractModbus485Configuration+0x116>
						gau32ConfigModbus485Address[u32Loopcounter] = atoi(configptr);
 8010904:	4620      	mov	r0, r4
 8010906:	f002 f83b 	bl	8012980 <atoi>
 801090a:	4d3b      	ldr	r5, [pc, #236]	; (80109f8 <extractModbus485Configuration+0x1e4>)
 801090c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8010910:	64a8      	str	r0, [r5, #72]	; 0x48
						gau32ConfigModbusTCPAddress[u32Loopcounter] = atoi(configptr);
 8010912:	4620      	mov	r0, r4
 8010914:	f002 f834 	bl	8012980 <atoi>
 8010918:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
						configptr = strtok(NULL, ",");
 801091c:	4935      	ldr	r1, [pc, #212]	; (80109f4 <extractModbus485Configuration+0x1e0>)
 801091e:	2000      	movs	r0, #0
 8010920:	f003 f9c8 	bl	8013cb4 <strtok>
 8010924:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8010926:	3601      	adds	r6, #1
 8010928:	e7e7      	b.n	80108fa <extractModbus485Configuration+0xe6>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801092a:	2600      	movs	r6, #0
 801092c:	e011      	b.n	8010952 <extractModbus485Configuration+0x13e>
						gau32ConfigModbus485DFunctionCode[u32Loopcounter] = atoi(configptr);
 801092e:	4620      	mov	r0, r4
 8010930:	f002 f826 	bl	8012980 <atoi>
 8010934:	4d30      	ldr	r5, [pc, #192]	; (80109f8 <extractModbus485Configuration+0x1e4>)
 8010936:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801093a:	66a8      	str	r0, [r5, #104]	; 0x68
						gau32ConfigModbusTCPDFunctionCode[u32Loopcounter] = atoi(configptr);
 801093c:	4620      	mov	r0, r4
 801093e:	f002 f81f 	bl	8012980 <atoi>
 8010942:	f8c5 00cc 	str.w	r0, [r5, #204]	; 0xcc
						configptr = strtok(NULL, ",");
 8010946:	492b      	ldr	r1, [pc, #172]	; (80109f4 <extractModbus485Configuration+0x1e0>)
 8010948:	2000      	movs	r0, #0
 801094a:	f003 f9b3 	bl	8013cb4 <strtok>
 801094e:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8010950:	3601      	adds	r6, #1
 8010952:	482e      	ldr	r0, [pc, #184]	; (8010a0c <extractModbus485Configuration+0x1f8>)
 8010954:	f002 f814 	bl	8012980 <atoi>
 8010958:	42b0      	cmp	r0, r6
 801095a:	d8e8      	bhi.n	801092e <extractModbus485Configuration+0x11a>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 801095c:	2600      	movs	r6, #0
 801095e:	e012      	b.n	8010986 <extractModbus485Configuration+0x172>
						gau32ConfigModbus485NoPoints[u32Loopcounter] = atoi(configptr);
 8010960:	4620      	mov	r0, r4
 8010962:	f002 f80d 	bl	8012980 <atoi>
 8010966:	4d24      	ldr	r5, [pc, #144]	; (80109f8 <extractModbus485Configuration+0x1e4>)
 8010968:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801096c:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
						gau32ConfigModbusTCPNoPoints[u32Loopcounter] = atoi(configptr);
 8010970:	4620      	mov	r0, r4
 8010972:	f002 f805 	bl	8012980 <atoi>
 8010976:	f8c5 00ec 	str.w	r0, [r5, #236]	; 0xec
						configptr = strtok(NULL, ",");
 801097a:	491e      	ldr	r1, [pc, #120]	; (80109f4 <extractModbus485Configuration+0x1e0>)
 801097c:	2000      	movs	r0, #0
 801097e:	f003 f999 	bl	8013cb4 <strtok>
 8010982:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbus485DataPoints) ;u32Loopcounter++)
 8010984:	3601      	adds	r6, #1
 8010986:	4821      	ldr	r0, [pc, #132]	; (8010a0c <extractModbus485Configuration+0x1f8>)
 8010988:	f001 fffa 	bl	8012980 <atoi>
 801098c:	42b0      	cmp	r0, r6
 801098e:	d8e7      	bhi.n	8010960 <extractModbus485Configuration+0x14c>
 8010990:	e751      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485PollingTime,configptr);
 8010992:	4621      	mov	r1, r4
 8010994:	4822      	ldr	r0, [pc, #136]	; (8010a20 <extractModbus485Configuration+0x20c>)
 8010996:	f002 fb15 	bl	8012fc4 <strcpy>
				break;
 801099a:	e74c      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbus485ResponseTime,configptr);
 801099c:	4621      	mov	r1, r4
 801099e:	4821      	ldr	r0, [pc, #132]	; (8010a24 <extractModbus485Configuration+0x210>)
 80109a0:	f002 fb10 	bl	8012fc4 <strcpy>
				break;
 80109a4:	e747      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPDEVICE,configptr);
 80109a6:	4621      	mov	r1, r4
 80109a8:	481f      	ldr	r0, [pc, #124]	; (8010a28 <extractModbus485Configuration+0x214>)
 80109aa:	f002 fb0b 	bl	8012fc4 <strcpy>
				break;
 80109ae:	e742      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPSUBNET,configptr);
 80109b0:	4621      	mov	r1, r4
 80109b2:	481e      	ldr	r0, [pc, #120]	; (8010a2c <extractModbus485Configuration+0x218>)
 80109b4:	f002 fb06 	bl	8012fc4 <strcpy>
				break;
 80109b8:	e73d      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPSERVER,configptr);
 80109ba:	4621      	mov	r1, r4
 80109bc:	481c      	ldr	r0, [pc, #112]	; (8010a30 <extractModbus485Configuration+0x21c>)
 80109be:	f002 fb01 	bl	8012fc4 <strcpy>
				break;
 80109c2:	e738      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPIPGATEWAY,configptr);
 80109c4:	4621      	mov	r1, r4
 80109c6:	481b      	ldr	r0, [pc, #108]	; (8010a34 <extractModbus485Configuration+0x220>)
 80109c8:	f002 fafc 	bl	8012fc4 <strcpy>
				break;
 80109cc:	e733      	b.n	8010836 <extractModbus485Configuration+0x22>
				strcpy(gau8ConfigModbusTCPPORT,configptr);
 80109ce:	4621      	mov	r1, r4
 80109d0:	4819      	ldr	r0, [pc, #100]	; (8010a38 <extractModbus485Configuration+0x224>)
 80109d2:	f002 faf7 	bl	8012fc4 <strcpy>
				break;
 80109d6:	e72e      	b.n	8010836 <extractModbus485Configuration+0x22>
			configptr = strtok(NULL, ",");
 80109d8:	4906      	ldr	r1, [pc, #24]	; (80109f4 <extractModbus485Configuration+0x1e0>)
 80109da:	2000      	movs	r0, #0
 80109dc:	f003 f96a 	bl	8013cb4 <strtok>
 80109e0:	4604      	mov	r4, r0
 80109e2:	e72e      	b.n	8010842 <extractModbus485Configuration+0x2e>
	gu32ExtractParamCounter = 0;
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <extractModbus485Configuration+0x1e8>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyModbus485ConfigData();
 80109ec:	f7ff f9e0 	bl	800fdb0 <verifyModbus485ConfigData>
}
 80109f0:	bd70      	pop	{r4, r5, r6, pc}
 80109f2:	bf00      	nop
 80109f4:	0801bde0 	.word	0x0801bde0
 80109f8:	20001fc0 	.word	0x20001fc0
 80109fc:	20004028 	.word	0x20004028
 8010a00:	20004190 	.word	0x20004190
 8010a04:	20004198 	.word	0x20004198
 8010a08:	200041a0 	.word	0x200041a0
 8010a0c:	200041a4 	.word	0x200041a4
 8010a10:	20001ffc 	.word	0x20001ffc
 8010a14:	200041a8 	.word	0x200041a8
 8010a18:	200041ac 	.word	0x200041ac
 8010a1c:	20004208 	.word	0x20004208
 8010a20:	200041b0 	.word	0x200041b0
 8010a24:	200041b8 	.word	0x200041b8
 8010a28:	2000420c 	.word	0x2000420c
 8010a2c:	2000421c 	.word	0x2000421c
 8010a30:	2000422c 	.word	0x2000422c
 8010a34:	2000423c 	.word	0x2000423c
 8010a38:	200041c4 	.word	0x200041c4

08010a3c <extractModbusTCPConfiguration>:
{
 8010a3c:	b538      	push	{r3, r4, r5, lr}
	char *configptr = strtok(mbTCPconfig, ",");
 8010a3e:	495b      	ldr	r1, [pc, #364]	; (8010bac <extractModbusTCPConfiguration+0x170>)
 8010a40:	4b5b      	ldr	r3, [pc, #364]	; (8010bb0 <extractModbusTCPConfiguration+0x174>)
 8010a42:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010a46:	f003 f935 	bl	8013cb4 <strtok>
 8010a4a:	4604      	mov	r4, r0
	gu32ExtractParamCounter = 0;
 8010a4c:	4b59      	ldr	r3, [pc, #356]	; (8010bb4 <extractModbusTCPConfiguration+0x178>)
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	while(configptr != NULL)
 8010a54:	e00f      	b.n	8010a76 <extractModbusTCPConfiguration+0x3a>
				strcpy(gau8ConfigModbusTCPIsEnabled,configptr);
 8010a56:	4621      	mov	r1, r4
 8010a58:	4857      	ldr	r0, [pc, #348]	; (8010bb8 <extractModbusTCPConfiguration+0x17c>)
 8010a5a:	f002 fab3 	bl	8012fc4 <strcpy>
		if(gu32ExtractParamCounter != 8)
 8010a5e:	4b55      	ldr	r3, [pc, #340]	; (8010bb4 <extractModbusTCPConfiguration+0x178>)
 8010a60:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010a64:	2b08      	cmp	r3, #8
 8010a66:	f040 8094 	bne.w	8010b92 <extractModbusTCPConfiguration+0x156>
		gu32ExtractParamCounter++;
 8010a6a:	4a52      	ldr	r2, [pc, #328]	; (8010bb4 <extractModbusTCPConfiguration+0x178>)
 8010a6c:	f8d2 31dc 	ldr.w	r3, [r2, #476]	; 0x1dc
 8010a70:	3301      	adds	r3, #1
 8010a72:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
	while(configptr != NULL)
 8010a76:	2c00      	cmp	r4, #0
 8010a78:	f000 8091 	beq.w	8010b9e <extractModbusTCPConfiguration+0x162>
		switch(gu32ExtractParamCounter)
 8010a7c:	4b4d      	ldr	r3, [pc, #308]	; (8010bb4 <extractModbusTCPConfiguration+0x178>)
 8010a7e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010a82:	3b01      	subs	r3, #1
 8010a84:	2b09      	cmp	r3, #9
 8010a86:	d8ea      	bhi.n	8010a5e <extractModbusTCPConfiguration+0x22>
 8010a88:	a201      	add	r2, pc, #4	; (adr r2, 8010a90 <extractModbusTCPConfiguration+0x54>)
 8010a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a8e:	bf00      	nop
 8010a90:	08010a57 	.word	0x08010a57
 8010a94:	08010ab9 	.word	0x08010ab9
 8010a98:	08010ac3 	.word	0x08010ac3
 8010a9c:	08010acd 	.word	0x08010acd
 8010aa0:	08010ad7 	.word	0x08010ad7
 8010aa4:	08010ae1 	.word	0x08010ae1
 8010aa8:	08010aeb 	.word	0x08010aeb
 8010aac:	08010af5 	.word	0x08010af5
 8010ab0:	08010b7f 	.word	0x08010b7f
 8010ab4:	08010b89 	.word	0x08010b89
				strcpy(gau8ConfigModbusTCPDataPoints,configptr);
 8010ab8:	4621      	mov	r1, r4
 8010aba:	4840      	ldr	r0, [pc, #256]	; (8010bbc <extractModbusTCPConfiguration+0x180>)
 8010abc:	f002 fa82 	bl	8012fc4 <strcpy>
				break;
 8010ac0:	e7cd      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPDEVICE,configptr);
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	483e      	ldr	r0, [pc, #248]	; (8010bc0 <extractModbusTCPConfiguration+0x184>)
 8010ac6:	f002 fa7d 	bl	8012fc4 <strcpy>
				break;
 8010aca:	e7c8      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPSUBNET,configptr);
 8010acc:	4621      	mov	r1, r4
 8010ace:	483d      	ldr	r0, [pc, #244]	; (8010bc4 <extractModbusTCPConfiguration+0x188>)
 8010ad0:	f002 fa78 	bl	8012fc4 <strcpy>
				break;
 8010ad4:	e7c3      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPSERVER,configptr);
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	483b      	ldr	r0, [pc, #236]	; (8010bc8 <extractModbusTCPConfiguration+0x18c>)
 8010ada:	f002 fa73 	bl	8012fc4 <strcpy>
				break;
 8010ade:	e7be      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPIPGATEWAY,configptr);
 8010ae0:	4621      	mov	r1, r4
 8010ae2:	483a      	ldr	r0, [pc, #232]	; (8010bcc <extractModbusTCPConfiguration+0x190>)
 8010ae4:	f002 fa6e 	bl	8012fc4 <strcpy>
				break;
 8010ae8:	e7b9      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPPORT,configptr);
 8010aea:	4621      	mov	r1, r4
 8010aec:	4838      	ldr	r0, [pc, #224]	; (8010bd0 <extractModbusTCPConfiguration+0x194>)
 8010aee:	f002 fa69 	bl	8012fc4 <strcpy>
				break;
 8010af2:	e7b4      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				if(atoi(gau8ConfigModbusTCPDataPoints) <= CONFIG_MBTCP_MAXPARAMS)
 8010af4:	4831      	ldr	r0, [pc, #196]	; (8010bbc <extractModbusTCPConfiguration+0x180>)
 8010af6:	f001 ff43 	bl	8012980 <atoi>
 8010afa:	2808      	cmp	r0, #8
 8010afc:	dcaf      	bgt.n	8010a5e <extractModbusTCPConfiguration+0x22>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010afe:	2500      	movs	r5, #0
 8010b00:	e00d      	b.n	8010b1e <extractModbusTCPConfiguration+0xe2>
						gau32ConfigModbusTCPAddress[u32Loopcounter] = atoi(configptr);
 8010b02:	4620      	mov	r0, r4
 8010b04:	f001 ff3c 	bl	8012980 <atoi>
 8010b08:	4b29      	ldr	r3, [pc, #164]	; (8010bb0 <extractModbusTCPConfiguration+0x174>)
 8010b0a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8010b0e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
						configptr = strtok(NULL, ",");
 8010b12:	4926      	ldr	r1, [pc, #152]	; (8010bac <extractModbusTCPConfiguration+0x170>)
 8010b14:	2000      	movs	r0, #0
 8010b16:	f003 f8cd 	bl	8013cb4 <strtok>
 8010b1a:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010b1c:	3501      	adds	r5, #1
 8010b1e:	4827      	ldr	r0, [pc, #156]	; (8010bbc <extractModbusTCPConfiguration+0x180>)
 8010b20:	f001 ff2e 	bl	8012980 <atoi>
 8010b24:	42a8      	cmp	r0, r5
 8010b26:	d8ec      	bhi.n	8010b02 <extractModbusTCPConfiguration+0xc6>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010b28:	2500      	movs	r5, #0
 8010b2a:	e00d      	b.n	8010b48 <extractModbusTCPConfiguration+0x10c>
						gau32ConfigModbusTCPDFunctionCode[u32Loopcounter] = atoi(configptr);
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f001 ff27 	bl	8012980 <atoi>
 8010b32:	4b1f      	ldr	r3, [pc, #124]	; (8010bb0 <extractModbusTCPConfiguration+0x174>)
 8010b34:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8010b38:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
						configptr = strtok(NULL, ",");
 8010b3c:	491b      	ldr	r1, [pc, #108]	; (8010bac <extractModbusTCPConfiguration+0x170>)
 8010b3e:	2000      	movs	r0, #0
 8010b40:	f003 f8b8 	bl	8013cb4 <strtok>
 8010b44:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010b46:	3501      	adds	r5, #1
 8010b48:	481c      	ldr	r0, [pc, #112]	; (8010bbc <extractModbusTCPConfiguration+0x180>)
 8010b4a:	f001 ff19 	bl	8012980 <atoi>
 8010b4e:	42a8      	cmp	r0, r5
 8010b50:	d8ec      	bhi.n	8010b2c <extractModbusTCPConfiguration+0xf0>
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010b52:	2500      	movs	r5, #0
 8010b54:	e00d      	b.n	8010b72 <extractModbusTCPConfiguration+0x136>
						gau32ConfigModbusTCPNoPoints[u32Loopcounter] = atoi(configptr);
 8010b56:	4620      	mov	r0, r4
 8010b58:	f001 ff12 	bl	8012980 <atoi>
 8010b5c:	4b14      	ldr	r3, [pc, #80]	; (8010bb0 <extractModbusTCPConfiguration+0x174>)
 8010b5e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8010b62:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
						configptr = strtok(NULL, ",");
 8010b66:	4911      	ldr	r1, [pc, #68]	; (8010bac <extractModbusTCPConfiguration+0x170>)
 8010b68:	2000      	movs	r0, #0
 8010b6a:	f003 f8a3 	bl	8013cb4 <strtok>
 8010b6e:	4604      	mov	r4, r0
					for(u32Loopcounter = 0; u32Loopcounter < atoi(gau8ConfigModbusTCPDataPoints) ;u32Loopcounter++)
 8010b70:	3501      	adds	r5, #1
 8010b72:	4812      	ldr	r0, [pc, #72]	; (8010bbc <extractModbusTCPConfiguration+0x180>)
 8010b74:	f001 ff04 	bl	8012980 <atoi>
 8010b78:	42a8      	cmp	r0, r5
 8010b7a:	d8ec      	bhi.n	8010b56 <extractModbusTCPConfiguration+0x11a>
 8010b7c:	e76f      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPPollingTime,configptr);
 8010b7e:	4621      	mov	r1, r4
 8010b80:	4814      	ldr	r0, [pc, #80]	; (8010bd4 <extractModbusTCPConfiguration+0x198>)
 8010b82:	f002 fa1f 	bl	8012fc4 <strcpy>
				break;
 8010b86:	e76a      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
				strcpy(gau8ConfigModbusTCPResponseTime,configptr);
 8010b88:	4621      	mov	r1, r4
 8010b8a:	4813      	ldr	r0, [pc, #76]	; (8010bd8 <extractModbusTCPConfiguration+0x19c>)
 8010b8c:	f002 fa1a 	bl	8012fc4 <strcpy>
				break;
 8010b90:	e765      	b.n	8010a5e <extractModbusTCPConfiguration+0x22>
			configptr = strtok(NULL, ",");
 8010b92:	4906      	ldr	r1, [pc, #24]	; (8010bac <extractModbusTCPConfiguration+0x170>)
 8010b94:	2000      	movs	r0, #0
 8010b96:	f003 f88d 	bl	8013cb4 <strtok>
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	e765      	b.n	8010a6a <extractModbusTCPConfiguration+0x2e>
	gu32ExtractParamCounter = 0;
 8010b9e:	4b05      	ldr	r3, [pc, #20]	; (8010bb4 <extractModbusTCPConfiguration+0x178>)
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	verifyModbusTCPConfigData();
 8010ba6:	f7ff fa69 	bl	801007c <verifyModbusTCPConfigData>
}
 8010baa:	bd38      	pop	{r3, r4, r5, pc}
 8010bac:	0801bde0 	.word	0x0801bde0
 8010bb0:	20001fc0 	.word	0x20001fc0
 8010bb4:	20004028 	.word	0x20004028
 8010bb8:	200041cc 	.word	0x200041cc
 8010bbc:	200041d0 	.word	0x200041d0
 8010bc0:	2000420c 	.word	0x2000420c
 8010bc4:	2000421c 	.word	0x2000421c
 8010bc8:	2000422c 	.word	0x2000422c
 8010bcc:	2000423c 	.word	0x2000423c
 8010bd0:	200041c4 	.word	0x200041c4
 8010bd4:	200041d4 	.word	0x200041d4
 8010bd8:	200041dc 	.word	0x200041dc

08010bdc <getLastKnownConfiguration>:
{
	/* Read Sector 22 till we get FF */
	uint32_t flashAddress = ADDR_FLASH_SECTOR_22;
	uint32_t loopCounter = 0;

	if(strlen(tempconfig) == 0)
 8010bdc:	4bb3      	ldr	r3, [pc, #716]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010bde:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f000 81d2 	beq.w	8010f8e <getLastKnownConfiguration+0x3b2>
 8010bea:	4770      	bx	lr
{
 8010bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf0:	af00      	add	r7, sp, #0
			{
				/* Configuration End . Parse the configuration */
				if(strlen(gau8LastKnownConfiguration) != 0 )
				{
					/* Data corrupting hence coping into a var */
					memset(nwsof, 0, 5);
 8010bf2:	4cae      	ldr	r4, [pc, #696]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010bf4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	6013      	str	r3, [r2, #0]
 8010bfc:	7113      	strb	r3, [r2, #4]
					memset(nweof, 0, 5);
 8010bfe:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8010c02:	6013      	str	r3, [r2, #0]
 8010c04:	7113      	strb	r3, [r2, #4]
					memset(mb485sof, 0, 5);
 8010c06:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8010c0a:	6013      	str	r3, [r2, #0]
 8010c0c:	7113      	strb	r3, [r2, #4]
					memset(mb485eof, 0,5);
 8010c0e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8010c12:	6013      	str	r3, [r2, #0]
 8010c14:	7113      	strb	r3, [r2, #4]
					memset(mbTCPsof, 0, 5);
 8010c16:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
 8010c1a:	6013      	str	r3, [r2, #0]
 8010c1c:	7113      	strb	r3, [r2, #4]
					memset(mbTCPeof, 0, 5);
 8010c1e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
 8010c22:	6013      	str	r3, [r2, #0]
 8010c24:	7113      	strb	r3, [r2, #4]

					strcpy(gau8ConfigurationCopy, gau8LastKnownConfiguration);
 8010c26:	4da2      	ldr	r5, [pc, #648]	; (8010eb0 <getLastKnownConfiguration+0x2d4>)
 8010c28:	4629      	mov	r1, r5
 8010c2a:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8010c2e:	f002 f9c9 	bl	8012fc4 <strcpy>
					/* Validate the configuration */
					nwsof = strstr(gau8LastKnownConfiguration,"NS,");
 8010c32:	49a0      	ldr	r1, [pc, #640]	; (8010eb4 <getLastKnownConfiguration+0x2d8>)
 8010c34:	4628      	mov	r0, r5
 8010c36:	f002 f9f2 	bl	801301e <strstr>
 8010c3a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
					nweof = strstr(gau8LastKnownConfiguration,",NE");
 8010c3e:	499e      	ldr	r1, [pc, #632]	; (8010eb8 <getLastKnownConfiguration+0x2dc>)
 8010c40:	4628      	mov	r0, r5
 8010c42:	f002 f9ec 	bl	801301e <strstr>
 8010c46:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
					mb485sof =  strstr(gau8LastKnownConfiguration,"MS,");
 8010c4a:	499c      	ldr	r1, [pc, #624]	; (8010ebc <getLastKnownConfiguration+0x2e0>)
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f002 f9e6 	bl	801301e <strstr>
 8010c52:	4606      	mov	r6, r0
 8010c54:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
					mb485eof =  strstr(gau8LastKnownConfiguration,",ME");
 8010c58:	4999      	ldr	r1, [pc, #612]	; (8010ec0 <getLastKnownConfiguration+0x2e4>)
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f002 f9df 	bl	801301e <strstr>
 8010c60:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
//					mbTCPsof =  strstr(gau8LastKnownConfiguration,"ms,");
//					mbTCPeof =  strstr(gau8LastKnownConfiguration,",me");

					if((mb485sof == NULL )|(mb485eof == NULL))
 8010c64:	fab0 f380 	clz	r3, r0
 8010c68:	095b      	lsrs	r3, r3, #5
 8010c6a:	2e00      	cmp	r6, #0
 8010c6c:	bf08      	it	eq
 8010c6e:	2301      	moveq	r3, #1
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f000 8090 	beq.w	8010d96 <getLastKnownConfiguration+0x1ba>
					{
						/*SOF / EOF Not found . Raise Error */
						gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 8010c76:	4a93      	ldr	r2, [pc, #588]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010c78:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8010c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c80:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
						}
						else
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
					}

					if((mbTCPsof == NULL )|(mbTCPeof == NULL))
 8010c84:	4b89      	ldr	r3, [pc, #548]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010c86:	f8d3 4190 	ldr.w	r4, [r3, #400]	; 0x190
 8010c8a:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
 8010c8e:	fab1 f381 	clz	r3, r1
 8010c92:	095b      	lsrs	r3, r3, #5
 8010c94:	2c00      	cmp	r4, #0
 8010c96:	bf08      	it	eq
 8010c98:	2301      	moveq	r3, #1
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f000 809f 	beq.w	8010dde <getLastKnownConfiguration+0x202>
					{
						/*SOF / EOF Not found . Raise Error */
						gu32ConfigModbusTCPErrorDatabase |= (1 << enmCONFIG_MBTCPCONFIGNOTFOUND);
 8010ca0:	4a88      	ldr	r2, [pc, #544]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010ca2:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
 8010ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010caa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
						else
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);

					}

					if((nwsof == NULL )|(nweof == NULL))
 8010cae:	4b7f      	ldr	r3, [pc, #508]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010cb0:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
 8010cb4:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8010cb8:	fab1 f381 	clz	r3, r1
 8010cbc:	095b      	lsrs	r3, r3, #5
 8010cbe:	2c00      	cmp	r4, #0
 8010cc0:	bf08      	it	eq
 8010cc2:	2301      	moveq	r3, #1
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 80be 	beq.w	8010e46 <getLastKnownConfiguration+0x26a>
					{
						/*SOF / EOF Not found . Raise Error */
						gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);
 8010cca:	4a7e      	ldr	r2, [pc, #504]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010ccc:	6853      	ldr	r3, [r2, #4]
 8010cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010cd2:	6053      	str	r3, [r2, #4]
						}
						else
							gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);

					}
					if((gu32ConfigNetworkErrorDatabase == 0 ) && (nwconfig != NULL))
 8010cd4:	4b7b      	ldr	r3, [pc, #492]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	bb73      	cbnz	r3, 8010d38 <getLastKnownConfiguration+0x15c>
 8010cda:	4b74      	ldr	r3, [pc, #464]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010cdc:	f8d3 3970 	ldr.w	r3, [r3, #2416]	; 0x970
 8010ce0:	b353      	cbz	r3, 8010d38 <getLastKnownConfiguration+0x15c>
					{
						/* Update System with N/W Configuration */
						/* APN */
						memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
 8010ce2:	4e79      	ldr	r6, [pc, #484]	; (8010ec8 <getLastKnownConfiguration+0x2ec>)
 8010ce4:	2564      	movs	r5, #100	; 0x64
 8010ce6:	462a      	mov	r2, r5
 8010ce8:	2100      	movs	r1, #0
 8010cea:	4630      	mov	r0, r6
 8010cec:	f002 f8f8 	bl	8012ee0 <memset>
						memcpy(gau8GSM4G_apn,gau8ConfigNewtorkAPN, strlen(gau8ConfigNewtorkAPN));
 8010cf0:	4c6e      	ldr	r4, [pc, #440]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f7ef fa86 	bl	8000204 <strlen>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f002 f8e1 	bl	8012ec4 <memcpy>
						/* URL Commented for different API(other than bluestar) */
//						memset(gau8GSM_url,0x00,sizeof(char) * 100);
//						memcpy( gau8GSM_url, gau8ConfigNewtorkServerURL, strlen(gau8ConfigNewtorkServerURL));
						/* Config URL */
						memset(gau8RemoteConfigurationURL,0x00,sizeof(char) * 100);
 8010d02:	4e72      	ldr	r6, [pc, #456]	; (8010ecc <getLastKnownConfiguration+0x2f0>)
 8010d04:	462a      	mov	r2, r5
 8010d06:	2100      	movs	r1, #0
 8010d08:	4630      	mov	r0, r6
 8010d0a:	f002 f8e9 	bl	8012ee0 <memset>
						memcpy( gau8RemoteConfigurationURL, gau8ConfigNewtorkConfigURL, strlen(gau8ConfigNewtorkConfigURL));
 8010d0e:	4d6d      	ldr	r5, [pc, #436]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010d10:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 8010d14:	4640      	mov	r0, r8
 8010d16:	f7ef fa75 	bl	8000204 <strlen>
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	4641      	mov	r1, r8
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f002 f8d0 	bl	8012ec4 <memcpy>
						/* Upload Time */
						gu32UploadTimeSupply = atoi(gau8ConfigNewtorkUpFreqSupply);
 8010d24:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8010d28:	f001 fe2a 	bl	8012980 <atoi>
 8010d2c:	6360      	str	r0, [r4, #52]	; 0x34
						gu32UploadTimeBatt = atoi(gau8ConfigNewtorkUpFreqBatt);
 8010d2e:	f505 70a2 	add.w	r0, r5, #324	; 0x144
 8010d32:	f001 fe25 	bl	8012980 <atoi>
 8010d36:	63a0      	str	r0, [r4, #56]	; 0x38
					}
					if((gu32ConfigModbus485ErrorDatabase == 0 ) && (mb485config != NULL))
 8010d38:	4b62      	ldr	r3, [pc, #392]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010d3a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f040 810e 	bne.w	8010f60 <getLastKnownConfiguration+0x384>
 8010d44:	4b59      	ldr	r3, [pc, #356]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010d46:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	f000 8108 	beq.w	8010f60 <getLastKnownConfiguration+0x384>
					{
						/* Update System with Modbus485 Configuration */
						gu32OperateModbus485 = atoi(gau8ConfigModbus485IsEnabled);
 8010d50:	4c5c      	ldr	r4, [pc, #368]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010d52:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 8010d56:	f001 fe13 	bl	8012980 <atoi>
 8010d5a:	4d54      	ldr	r5, [pc, #336]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010d5c:	f8c5 0974 	str.w	r0, [r5, #2420]	; 0x974
						gu32Modbus485SlaveID = atoi(gau8ConfigModbus485SlaveID);
 8010d60:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 8010d64:	f001 fe0c 	bl	8012980 <atoi>
 8010d68:	f8c5 0978 	str.w	r0, [r5, #2424]	; 0x978
						gu32Modbus485RegisterFetch = atoi(gau8ConfigModbus485DataPoints);
 8010d6c:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8010d70:	f001 fe06 	bl	8012980 <atoi>
 8010d74:	f8c5 097c 	str.w	r0, [r5, #2428]	; 0x97c
						gu32Modbus485PollingTime = atoi(gau8ConfigModbus485PollingTime);
 8010d78:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 8010d7c:	f001 fe00 	bl	8012980 <atoi>
 8010d80:	6468      	str	r0, [r5, #68]	; 0x44
						gu32Modbus485ResponseTime = atoi(gau8ConfigModbus485ResponseTime);
 8010d82:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 8010d86:	f001 fdfb 	bl	8012980 <atoi>
 8010d8a:	f8c5 0980 	str.w	r0, [r5, #2432]	; 0x980
						gu32LoopCounter = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
						for(gu32LoopCounter = 0; gu32LoopCounter <gu32Modbus485RegisterFetch; gu32LoopCounter++)
 8010d94:	e0bf      	b.n	8010f16 <getLastKnownConfiguration+0x33a>
						mb485mlen = mb485eof - mb485sof;
 8010d96:	1b86      	subs	r6, r0, r6
 8010d98:	4b4a      	ldr	r3, [pc, #296]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010d9a:	f8c3 61d4 	str.w	r6, [r3, #468]	; 0x1d4
						mb485config = (char *)malloc((sizeof(char) *mb485mlen));
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f001 fe30 	bl	8012a04 <malloc>
 8010da4:	4b41      	ldr	r3, [pc, #260]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010da6:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
						if(mb485config!= NULL)
 8010daa:	b180      	cbz	r0, 8010dce <getLastKnownConfiguration+0x1f2>
							memset(mb485config, 0, mb485mlen);
 8010dac:	4632      	mov	r2, r6
 8010dae:	2100      	movs	r1, #0
 8010db0:	f002 f896 	bl	8012ee0 <memset>
							memcpy(mb485config,mb485sof,mb485mlen);
 8010db4:	4b3d      	ldr	r3, [pc, #244]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010db6:	4a43      	ldr	r2, [pc, #268]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010db8:	f8d2 21d4 	ldr.w	r2, [r2, #468]	; 0x1d4
 8010dbc:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8010dc0:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 8010dc4:	f002 f87e 	bl	8012ec4 <memcpy>
							extractModbus485Configuration();
 8010dc8:	f7ff fd24 	bl	8010814 <extractModbus485Configuration>
 8010dcc:	e75a      	b.n	8010c84 <getLastKnownConfiguration+0xa8>
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 8010dce:	4a3d      	ldr	r2, [pc, #244]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010dd0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8010dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010dd8:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8010ddc:	e752      	b.n	8010c84 <getLastKnownConfiguration+0xa8>
						mbtcpmlen = mbTCPeof - mbTCPsof;
 8010dde:	1b0c      	subs	r4, r1, r4
 8010de0:	4b38      	ldr	r3, [pc, #224]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010de2:	f8c3 41d8 	str.w	r4, [r3, #472]	; 0x1d8
						mbTCPconfig = (char *)malloc((sizeof(char) * mbtcpmlen));
 8010de6:	4620      	mov	r0, r4
 8010de8:	f001 fe0c 	bl	8012a04 <malloc>
 8010dec:	4b2f      	ldr	r3, [pc, #188]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010dee:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
						if(mbTCPconfig!= NULL)
 8010df2:	b300      	cbz	r0, 8010e36 <getLastKnownConfiguration+0x25a>
						{
 8010df4:	466d      	mov	r5, sp
							char u8temp_array[mbtcpmlen];
 8010df6:	1de3      	adds	r3, r4, #7
 8010df8:	f023 0307 	bic.w	r3, r3, #7
 8010dfc:	ebad 0d03 	sub.w	sp, sp, r3
							memset(mbTCPconfig, 0, mbtcpmlen);
 8010e00:	4622      	mov	r2, r4
 8010e02:	2100      	movs	r1, #0
 8010e04:	f002 f86c 	bl	8012ee0 <memset>
							memset(u8temp_array, 0, sizeof(u8temp_array));
 8010e08:	4622      	mov	r2, r4
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	4668      	mov	r0, sp
 8010e0e:	f002 f867 	bl	8012ee0 <memset>
							memcpy(u8temp_array,mbTCPsof,mbtcpmlen);
 8010e12:	4c26      	ldr	r4, [pc, #152]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010e14:	4b2b      	ldr	r3, [pc, #172]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010e16:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 8010e1a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
 8010e1e:	4668      	mov	r0, sp
 8010e20:	f002 f850 	bl	8012ec4 <memcpy>
							strcpy(mbTCPconfig,u8temp_array);
 8010e24:	4669      	mov	r1, sp
 8010e26:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
 8010e2a:	f002 f8cb 	bl	8012fc4 <strcpy>
							extractModbusTCPConfiguration();
 8010e2e:	f7ff fe05 	bl	8010a3c <extractModbusTCPConfiguration>
 8010e32:	46ad      	mov	sp, r5
 8010e34:	e73b      	b.n	8010cae <getLastKnownConfiguration+0xd2>
							gu32ConfigModbus485ErrorDatabase |= (1 << enmCONFIG_MB485CONFIGNOTFOUND);
 8010e36:	4a23      	ldr	r2, [pc, #140]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010e38:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
 8010e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e40:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8010e44:	e733      	b.n	8010cae <getLastKnownConfiguration+0xd2>
						nwmlen = nweof - nwsof;
 8010e46:	1b0c      	subs	r4, r1, r4
 8010e48:	4b1e      	ldr	r3, [pc, #120]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010e4a:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
						nwconfig = (char *)malloc((sizeof(char) *nwmlen));
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f001 fdd8 	bl	8012a04 <malloc>
 8010e54:	4b15      	ldr	r3, [pc, #84]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010e56:	f8c3 0970 	str.w	r0, [r3, #2416]	; 0x970
						if(nwconfig!= NULL)
 8010e5a:	b300      	cbz	r0, 8010e9e <getLastKnownConfiguration+0x2c2>
						{
 8010e5c:	466d      	mov	r5, sp
							char u8temp_array[nwmlen];
 8010e5e:	1de3      	adds	r3, r4, #7
 8010e60:	f023 0307 	bic.w	r3, r3, #7
 8010e64:	ebad 0d03 	sub.w	sp, sp, r3
							memset(nwconfig, 0, nwmlen);
 8010e68:	4622      	mov	r2, r4
 8010e6a:	2100      	movs	r1, #0
 8010e6c:	f002 f838 	bl	8012ee0 <memset>
							memset(u8temp_array, 0, sizeof(u8temp_array));
 8010e70:	4622      	mov	r2, r4
 8010e72:	2100      	movs	r1, #0
 8010e74:	4668      	mov	r0, sp
 8010e76:	f002 f833 	bl	8012ee0 <memset>
							memcpy(u8temp_array,nwsof,nwmlen);
 8010e7a:	4c0c      	ldr	r4, [pc, #48]	; (8010eac <getLastKnownConfiguration+0x2d0>)
 8010e7c:	4b11      	ldr	r3, [pc, #68]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010e7e:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 8010e82:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8010e86:	4668      	mov	r0, sp
 8010e88:	f002 f81c 	bl	8012ec4 <memcpy>
							strcpy(nwconfig,u8temp_array);
 8010e8c:	4669      	mov	r1, sp
 8010e8e:	f8d4 0970 	ldr.w	r0, [r4, #2416]	; 0x970
 8010e92:	f002 f897 	bl	8012fc4 <strcpy>
							extractNewtorkConfiguration();
 8010e96:	f7ff fc43 	bl	8010720 <extractNewtorkConfiguration>
 8010e9a:	46ad      	mov	sp, r5
 8010e9c:	e71a      	b.n	8010cd4 <getLastKnownConfiguration+0xf8>
							gu32ConfigNetworkErrorDatabase |= (1 << enmCONFIG_NWCONFIGNOTFOUND);
 8010e9e:	4a09      	ldr	r2, [pc, #36]	; (8010ec4 <getLastKnownConfiguration+0x2e8>)
 8010ea0:	6853      	ldr	r3, [r2, #4]
 8010ea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010ea6:	6053      	str	r3, [r2, #4]
 8010ea8:	e714      	b.n	8010cd4 <getLastKnownConfiguration+0xf8>
 8010eaa:	bf00      	nop
 8010eac:	20001fc0 	.word	0x20001fc0
 8010eb0:	2000e924 	.word	0x2000e924
 8010eb4:	0801bf8c 	.word	0x0801bf8c
 8010eb8:	0801bf90 	.word	0x0801bf90
 8010ebc:	0801bf94 	.word	0x0801bf94
 8010ec0:	0801bf98 	.word	0x0801bf98
 8010ec4:	20004028 	.word	0x20004028
 8010ec8:	200004d4 	.word	0x200004d4
 8010ecc:	20000428 	.word	0x20000428
						{
							/*Copy MB485 Address/ FC / Points to respective array */
							gu32MBRTUClientAddress[gu32LoopCounter] = gau32ConfigModbus485Address[gu32LoopCounter];
 8010ed0:	4a31      	ldr	r2, [pc, #196]	; (8010f98 <getLastKnownConfiguration+0x3bc>)
 8010ed2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010ed6:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8010ed8:	4930      	ldr	r1, [pc, #192]	; (8010f9c <getLastKnownConfiguration+0x3c0>)
 8010eda:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBRTUClientFuncCode[gu32LoopCounter] = gau32ConfigModbus485DFunctionCode[gu32LoopCounter];
 8010ede:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8010ee0:	492f      	ldr	r1, [pc, #188]	; (8010fa0 <getLastKnownConfiguration+0x3c4>)
 8010ee2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBRTUClientNoofPoints[gu32LoopCounter] = gau32ConfigModbus485NoPoints[gu32LoopCounter];
 8010ee6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8010eea:	492e      	ldr	r1, [pc, #184]	; (8010fa4 <getLastKnownConfiguration+0x3c8>)
 8010eec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							/*TCP */
							gu32MBTCPClientAddress[gu32LoopCounter] = gau32ConfigModbusTCPAddress[gu32LoopCounter];
 8010ef0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 8010ef4:	492c      	ldr	r1, [pc, #176]	; (8010fa8 <getLastKnownConfiguration+0x3cc>)
 8010ef6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientFuncCode[gu32LoopCounter] = gau32ConfigModbusTCPDFunctionCode[gu32LoopCounter];
 8010efa:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 8010efe:	492b      	ldr	r1, [pc, #172]	; (8010fac <getLastKnownConfiguration+0x3d0>)
 8010f00:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
							gu32MBTCPClientNoofPoints[gu32LoopCounter] = gau32ConfigModbusTCPNoPoints[gu32LoopCounter];
 8010f04:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
 8010f08:	4a29      	ldr	r2, [pc, #164]	; (8010fb0 <getLastKnownConfiguration+0x3d4>)
 8010f0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for(gu32LoopCounter = 0; gu32LoopCounter <gu32Modbus485RegisterFetch; gu32LoopCounter++)
 8010f0e:	3301      	adds	r3, #1
 8010f10:	4a28      	ldr	r2, [pc, #160]	; (8010fb4 <getLastKnownConfiguration+0x3d8>)
 8010f12:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8010f16:	4b27      	ldr	r3, [pc, #156]	; (8010fb4 <getLastKnownConfiguration+0x3d8>)
 8010f18:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010f1c:	4a1e      	ldr	r2, [pc, #120]	; (8010f98 <getLastKnownConfiguration+0x3bc>)
 8010f1e:	f8d2 297c 	ldr.w	r2, [r2, #2428]	; 0x97c
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d3d4      	bcc.n	8010ed0 <getLastKnownConfiguration+0x2f4>
						}
						/* TCP Added */
						inet_aton(gau8ConfigModbusTCPIPDEVICE,IP_ADDRESS);
 8010f26:	4c23      	ldr	r4, [pc, #140]	; (8010fb4 <getLastKnownConfiguration+0x3d8>)
 8010f28:	4923      	ldr	r1, [pc, #140]	; (8010fb8 <getLastKnownConfiguration+0x3dc>)
 8010f2a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8010f2e:	f7fa fa53 	bl	800b3d8 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPSUBNET,NETMASK_ADDRESS);
 8010f32:	4922      	ldr	r1, [pc, #136]	; (8010fbc <getLastKnownConfiguration+0x3e0>)
 8010f34:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 8010f38:	f7fa fa4e 	bl	800b3d8 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPGATEWAY,GATEWAY_ADDRESS);
 8010f3c:	4920      	ldr	r1, [pc, #128]	; (8010fc0 <getLastKnownConfiguration+0x3e4>)
 8010f3e:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8010f42:	f7fa fa49 	bl	800b3d8 <ip4addr_aton>
						inet_aton(gau8ConfigModbusTCPIPSERVER,IP_ADDRESS_DESTI);
 8010f46:	4d14      	ldr	r5, [pc, #80]	; (8010f98 <getLastKnownConfiguration+0x3bc>)
 8010f48:	f605 1184 	addw	r1, r5, #2436	; 0x984
 8010f4c:	f504 7001 	add.w	r0, r4, #516	; 0x204
 8010f50:	f7fa fa42 	bl	800b3d8 <ip4addr_aton>
						gu32ModbusTCPPort = atoi(gau8ConfigModbusTCPPORT);
 8010f54:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8010f58:	f001 fd12 	bl	8012980 <atoi>
 8010f5c:	f8c5 0988 	str.w	r0, [r5, #2440]	; 0x988
//						inet_aton(gau8ConfigModbusTCPIPGATEWAY,GATEWAY_ADDRESS);
//						inet_aton(gau8ConfigModbusTCPIPSERVER,IP_ADDRESS_DESTI);
//						gu32ModbusTCPPort = atoi(gau8ConfigModbusTCPPORT);
//					}
					/* Data corrupting hence coping into a var */
					strcpy(gau8LastKnownConfiguration,gau8ConfigurationCopy);
 8010f60:	4918      	ldr	r1, [pc, #96]	; (8010fc4 <getLastKnownConfiguration+0x3e8>)
 8010f62:	4819      	ldr	r0, [pc, #100]	; (8010fc8 <getLastKnownConfiguration+0x3ec>)
 8010f64:	f002 f82e 	bl	8012fc4 <strcpy>
				gau8LastKnownConfiguration[loopCounter] = *(uint8_t *)flashAddress;
				flashAddress++;
			}
		}
	}
}
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				gau8LastKnownConfiguration[loopCounter] = *(uint8_t *)flashAddress;
 8010f6e:	4816      	ldr	r0, [pc, #88]	; (8010fc8 <getLastKnownConfiguration+0x3ec>)
 8010f70:	54c1      	strb	r1, [r0, r3]
				flashAddress++;
 8010f72:	3201      	adds	r2, #1
		for(loopCounter = 0 ; loopCounter < 2000; loopCounter++)
 8010f74:	3301      	adds	r3, #1
 8010f76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8010f7a:	d20b      	bcs.n	8010f94 <getLastKnownConfiguration+0x3b8>
			if(*(uint8_t *)flashAddress == 0xFF)
 8010f7c:	7811      	ldrb	r1, [r2, #0]
 8010f7e:	29ff      	cmp	r1, #255	; 0xff
 8010f80:	d1f5      	bne.n	8010f6e <getLastKnownConfiguration+0x392>
				if(strlen(gau8LastKnownConfiguration) != 0 )
 8010f82:	4b11      	ldr	r3, [pc, #68]	; (8010fc8 <getLastKnownConfiguration+0x3ec>)
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	f47f ae30 	bne.w	8010bec <getLastKnownConfiguration+0x10>
 8010f8c:	4770      	bx	lr
		for(loopCounter = 0 ; loopCounter < 2000; loopCounter++)
 8010f8e:	2300      	movs	r3, #0
	uint32_t flashAddress = ADDR_FLASH_SECTOR_22;
 8010f90:	4a0e      	ldr	r2, [pc, #56]	; (8010fcc <getLastKnownConfiguration+0x3f0>)
 8010f92:	e7f0      	b.n	8010f76 <getLastKnownConfiguration+0x39a>
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	20001fc0 	.word	0x20001fc0
 8010f9c:	20000c68 	.word	0x20000c68
 8010fa0:	20000c48 	.word	0x20000c48
 8010fa4:	20000c88 	.word	0x20000c88
 8010fa8:	20001568 	.word	0x20001568
 8010fac:	20001548 	.word	0x20001548
 8010fb0:	20001588 	.word	0x20001588
 8010fb4:	20004028 	.word	0x20004028
 8010fb8:	20000c3c 	.word	0x20000c3c
 8010fbc:	20000c40 	.word	0x20000c40
 8010fc0:	20000c44 	.word	0x20000c44
 8010fc4:	20002160 	.word	0x20002160
 8010fc8:	2000e924 	.word	0x2000e924
 8010fcc:	081c0000 	.word	0x081c0000

08010fd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8010fd0:	b508      	push	{r3, lr}
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010fd2:	4819      	ldr	r0, [pc, #100]	; (8011038 <MX_RTC_Init+0x68>)
 8010fd4:	4b19      	ldr	r3, [pc, #100]	; (801103c <MX_RTC_Init+0x6c>)
 8010fd6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 31;
 8010fdc:	221f      	movs	r2, #31
 8010fde:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 1023;
 8010fe0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010fe4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010fe6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010fe8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010fea:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010fec:	f7f3 fd1d 	bl	8004a2a <HAL_RTC_Init>
 8010ff0:	b9c8      	cbnz	r0, 8011026 <MX_RTC_Init+0x56>
//
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  STime1.Hours = 0x0;
 8010ff2:	4913      	ldr	r1, [pc, #76]	; (8011040 <MX_RTC_Init+0x70>)
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	700b      	strb	r3, [r1, #0]
  STime1.Minutes = 0x0;
 8010ff8:	704b      	strb	r3, [r1, #1]
  STime1.Seconds = 0x0;
 8010ffa:	708b      	strb	r3, [r1, #2]
  STime1.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010ffc:	60cb      	str	r3, [r1, #12]
  STime1.StoreOperation = RTC_STOREOPERATION_RESET;
 8010ffe:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &STime1, RTC_FORMAT_BCD) != HAL_OK)
 8011000:	2201      	movs	r2, #1
 8011002:	480d      	ldr	r0, [pc, #52]	; (8011038 <MX_RTC_Init+0x68>)
 8011004:	f7f3 fd7e 	bl	8004b04 <HAL_RTC_SetTime>
 8011008:	b980      	cbnz	r0, 801102c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
  }
  SDate1.WeekDay = RTC_WEEKDAY_MONDAY;
 801100a:	490e      	ldr	r1, [pc, #56]	; (8011044 <MX_RTC_Init+0x74>)
 801100c:	2201      	movs	r2, #1
 801100e:	700a      	strb	r2, [r1, #0]
  SDate1.Month = RTC_MONTH_MAY;
 8011010:	2305      	movs	r3, #5
 8011012:	704b      	strb	r3, [r1, #1]
  SDate1.Date = 0x16;
 8011014:	2316      	movs	r3, #22
 8011016:	708b      	strb	r3, [r1, #2]
  SDate1.Year = 0x22;
 8011018:	2322      	movs	r3, #34	; 0x22
 801101a:	70cb      	strb	r3, [r1, #3]
  if (HAL_RTC_SetDate(&hrtc, &SDate1, RTC_FORMAT_BCD) != HAL_OK)
 801101c:	4806      	ldr	r0, [pc, #24]	; (8011038 <MX_RTC_Init+0x68>)
 801101e:	f7f3 fdf0 	bl	8004c02 <HAL_RTC_SetDate>
 8011022:	b930      	cbnz	r0, 8011032 <MX_RTC_Init+0x62>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
  {
    Error_Handler();
  }*/

}
 8011024:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011026:	f7fd f881 	bl	800e12c <Error_Handler>
 801102a:	e7e2      	b.n	8010ff2 <MX_RTC_Init+0x22>
    Error_Handler();
 801102c:	f7fd f87e 	bl	800e12c <Error_Handler>
 8011030:	e7eb      	b.n	801100a <MX_RTC_Init+0x3a>
    Error_Handler();
 8011032:	f7fd f87b 	bl	800e12c <Error_Handler>
}
 8011036:	e7f5      	b.n	8011024 <MX_RTC_Init+0x54>
 8011038:	2000f10c 	.word	0x2000f10c
 801103c:	40002800 	.word	0x40002800
 8011040:	2000f0f8 	.word	0x2000f0f8
 8011044:	2000f0f4 	.word	0x2000f0f4

08011048 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8011048:	b508      	push	{r3, lr}

  if(rtcHandle->Instance==RTC)
 801104a:	6802      	ldr	r2, [r0, #0]
 801104c:	4b0b      	ldr	r3, [pc, #44]	; (801107c <HAL_RTC_MspInit+0x34>)
 801104e:	429a      	cmp	r2, r3
 8011050:	d000      	beq.n	8011054 <HAL_RTC_MspInit+0xc>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */
//
  /* USER CODE END RTC_MspInit 1 */
  }
}
 8011052:	bd08      	pop	{r3, pc}
    __HAL_RCC_RTC_ENABLE();
 8011054:	4b0a      	ldr	r3, [pc, #40]	; (8011080 <HAL_RTC_MspInit+0x38>)
 8011056:	2201      	movs	r2, #1
 8011058:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 801105a:	2200      	movs	r2, #0
 801105c:	4611      	mov	r1, r2
 801105e:	2003      	movs	r0, #3
 8011060:	f7f0 fc74 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8011064:	2003      	movs	r0, #3
 8011066:	f7f0 fca5 	bl	80019b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 801106a:	2200      	movs	r2, #0
 801106c:	4611      	mov	r1, r2
 801106e:	2029      	movs	r0, #41	; 0x29
 8011070:	f7f0 fc6c 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8011074:	2029      	movs	r0, #41	; 0x29
 8011076:	f7f0 fc9d 	bl	80019b4 <HAL_NVIC_EnableIRQ>
}
 801107a:	e7ea      	b.n	8011052 <HAL_RTC_MspInit+0xa>
 801107c:	40002800 	.word	0x40002800
 8011080:	42470e3c 	.word	0x42470e3c

08011084 <GSM_CharReception_Callback>:
extern uint32_t gu32GSMCharacterTimeout;
volatile uint32_t u8GSMCharRcv = 0;
uint8_t u8gsmResponse = 0;
extern strctGSM gsmInstance;
void GSM_CharReception_Callback(void)
{
 8011084:	b410      	push	{r4}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8011086:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <GSM_CharReception_Callback+0x34>)
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	b2d2      	uxtb	r2, r2
	u8gsmResponse = LL_USART_ReceiveData8(UART4);
 801108c:	490b      	ldr	r1, [pc, #44]	; (80110bc <GSM_CharReception_Callback+0x38>)
 801108e:	700a      	strb	r2, [r1, #0]
	gsmInstance.as8GSM_Response_Buff[gsmInstance.u8GSM_Response_Character_Counter++] = u8gsmResponse;
 8011090:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <GSM_CharReception_Callback+0x3c>)
 8011092:	f8d3 0e38 	ldr.w	r0, [r3, #3640]	; 0xe38
 8011096:	1c44      	adds	r4, r0, #1
 8011098:	f8c3 4e38 	str.w	r4, [r3, #3640]	; 0xe38
 801109c:	4403      	add	r3, r0
 801109e:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
	gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 80110a2:	4b08      	ldr	r3, [pc, #32]	; (80110c4 <GSM_CharReception_Callback+0x40>)
 80110a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80110a8:	601a      	str	r2, [r3, #0]
	if(u8GSMCharRcv == 0)
 80110aa:	684b      	ldr	r3, [r1, #4]
 80110ac:	b90b      	cbnz	r3, 80110b2 <GSM_CharReception_Callback+0x2e>
		u8GSMCharRcv = 1;
 80110ae:	2201      	movs	r2, #1
 80110b0:	604a      	str	r2, [r1, #4]
}
 80110b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b6:	4770      	bx	lr
 80110b8:	40004c00 	.word	0x40004c00
 80110bc:	2000425c 	.word	0x2000425c
 80110c0:	2000c164 	.word	0x2000c164
 80110c4:	2000443c 	.word	0x2000443c

080110c8 <MODBUS_CharReception_Callback>:
 80110c8:	4b14      	ldr	r3, [pc, #80]	; (801111c <MODBUS_CharReception_Callback+0x54>)
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	b2db      	uxtb	r3, r3
uint8_t u8TestArrayCounter = 0;
volatile uint8_t gu8ModbusInterruptFlag = 0;
void MODBUS_CharReception_Callback(void)
{

	u8receivedChar =LL_USART_ReceiveData8(USART3);
 80110ce:	4a14      	ldr	r2, [pc, #80]	; (8011120 <MODBUS_CharReception_Callback+0x58>)
 80110d0:	7013      	strb	r3, [r2, #0]
//
//	 if(u8TestArrayCounter == 25)
//	 {
//		 u8TestArrayCounter = 0;
//	 }
	if(gu8MBResponseFlag == 0)
 80110d2:	4b14      	ldr	r3, [pc, #80]	; (8011124 <MODBUS_CharReception_Callback+0x5c>)
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	b983      	cbnz	r3, 80110fa <MODBUS_CharReception_Callback+0x32>
	{
		if(master.u8MBSlave_Address == u8receivedChar)
 80110d8:	4b13      	ldr	r3, [pc, #76]	; (8011128 <MODBUS_CharReception_Callback+0x60>)
 80110da:	781a      	ldrb	r2, [r3, #0]
 80110dc:	4b10      	ldr	r3, [pc, #64]	; (8011120 <MODBUS_CharReception_Callback+0x58>)
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d119      	bne.n	801111a <MODBUS_CharReception_Callback+0x52>
		{
			/* Response from slave is received */
			gu8MBResponseFlag = 1;
 80110e6:	2301      	movs	r3, #1
 80110e8:	4a0e      	ldr	r2, [pc, #56]	; (8011124 <MODBUS_CharReception_Callback+0x5c>)
 80110ea:	7013      	strb	r3, [r2, #0]
			gu32ModbusFrameEndTimer = gu32Modbus485ResponseTime;//ONE_SEC;//TWO_SEC;
 80110ec:	4a0f      	ldr	r2, [pc, #60]	; (801112c <MODBUS_CharReception_Callback+0x64>)
 80110ee:	6811      	ldr	r1, [r2, #0]
 80110f0:	4a0f      	ldr	r2, [pc, #60]	; (8011130 <MODBUS_CharReception_Callback+0x68>)
 80110f2:	6011      	str	r1, [r2, #0]
			gu32MBRTUClientConnectedFlag = 1;
 80110f4:	4a0f      	ldr	r2, [pc, #60]	; (8011134 <MODBUS_CharReception_Callback+0x6c>)
 80110f6:	6013      	str	r3, [r2, #0]
 80110f8:	4770      	bx	lr
		}
	}
	else
	{
		master.u8SlaveResponseArray[master.u8MBResponseCharacterCounter++] = u8receivedChar;
 80110fa:	4b09      	ldr	r3, [pc, #36]	; (8011120 <MODBUS_CharReception_Callback+0x58>)
 80110fc:	7819      	ldrb	r1, [r3, #0]
 80110fe:	4b0a      	ldr	r3, [pc, #40]	; (8011128 <MODBUS_CharReception_Callback+0x60>)
 8011100:	f893 2520 	ldrb.w	r2, [r3, #1312]	; 0x520
 8011104:	1c50      	adds	r0, r2, #1
 8011106:	f883 0520 	strb.w	r0, [r3, #1312]	; 0x520
 801110a:	3202      	adds	r2, #2
 801110c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011110:	6059      	str	r1, [r3, #4]
		gu32ModbusFrameEndTimer = gu32Modbus485ResponseTime;//ONE_SEC;//TWO_SEC;
 8011112:	4b06      	ldr	r3, [pc, #24]	; (801112c <MODBUS_CharReception_Callback+0x64>)
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	4b06      	ldr	r3, [pc, #24]	; (8011130 <MODBUS_CharReception_Callback+0x68>)
 8011118:	601a      	str	r2, [r3, #0]
	}
}
 801111a:	4770      	bx	lr
 801111c:	40004800 	.word	0x40004800
 8011120:	2000f14a 	.word	0x2000f14a
 8011124:	2000361d 	.word	0x2000361d
 8011128:	2000d3a0 	.word	0x2000d3a0
 801112c:	20002940 	.word	0x20002940
 8011130:	20003620 	.word	0x20003620
 8011134:	2000362c 	.word	0x2000362c

08011138 <SFlash_Chip_Select>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
void SFlash_Chip_Select(uint8_t state)
{
 8011138:	b508      	push	{r3, lr}
	if(state == ENABLE)
 801113a:	2801      	cmp	r0, #1
 801113c:	d001      	beq.n	8011142 <SFlash_Chip_Select+0xa>
	{
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_RESET);		// CE LOW
	}
	else if(state == DISABLE)
 801113e:	b138      	cbz	r0, 8011150 <SFlash_Chip_Select+0x18>
	{
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_SET);		// CE High
	}
}
 8011140:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_RESET);		// CE LOW
 8011142:	2200      	movs	r2, #0
 8011144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011148:	4806      	ldr	r0, [pc, #24]	; (8011164 <SFlash_Chip_Select+0x2c>)
 801114a:	f7f1 fe45 	bl	8002dd8 <HAL_GPIO_WritePin>
 801114e:	e7f7      	b.n	8011140 <SFlash_Chip_Select+0x8>
		HAL_GPIO_WritePin(SPI_CE_GPIO_Port, SPI_CE_Pin, GPIO_PIN_SET);		// CE High
 8011150:	2201      	movs	r2, #1
 8011152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011156:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 801115a:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 801115e:	f7f1 fe3b 	bl	8002dd8 <HAL_GPIO_WritePin>
}
 8011162:	e7ed      	b.n	8011140 <SFlash_Chip_Select+0x8>
 8011164:	40020400 	.word	0x40020400

08011168 <SFlash_Read_Status_Register>:
{
 8011168:	b500      	push	{lr}
 801116a:	b083      	sub	sp, #12
	SFlash_Chip_Select(DISABLE);
 801116c:	2000      	movs	r0, #0
 801116e:	f7ff ffe3 	bl	8011138 <SFlash_Chip_Select>
	tx_var[0] = SFLASH_STATUS_REG_READ_CODE;
 8011172:	2305      	movs	r3, #5
 8011174:	f88d 3004 	strb.w	r3, [sp, #4]
	SFlash_Chip_Select(ENABLE);
 8011178:	2001      	movs	r0, #1
 801117a:	f7ff ffdd 	bl	8011138 <SFlash_Chip_Select>
	HAL_SPI_TransmitReceive_IT(&hspi1, tx_var, rx_var, 2);
 801117e:	2302      	movs	r3, #2
 8011180:	466a      	mov	r2, sp
 8011182:	a901      	add	r1, sp, #4
 8011184:	4806      	ldr	r0, [pc, #24]	; (80111a0 <SFlash_Read_Status_Register+0x38>)
 8011186:	f7f3 ff6d 	bl	8005064 <HAL_SPI_TransmitReceive_IT>
	HAL_Delay(20);
 801118a:	2014      	movs	r0, #20
 801118c:	f7ef ff9e 	bl	80010cc <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8011190:	2000      	movs	r0, #0
 8011192:	f7ff ffd1 	bl	8011138 <SFlash_Chip_Select>
}
 8011196:	f89d 0001 	ldrb.w	r0, [sp, #1]
 801119a:	b003      	add	sp, #12
 801119c:	f85d fb04 	ldr.w	pc, [sp], #4
 80111a0:	200112ac 	.word	0x200112ac

080111a4 <SFlash_Write_Enable>:
{
 80111a4:	b500      	push	{lr}
 80111a6:	b083      	sub	sp, #12
	tx_var[0] = SFLASH_WRITE_EN_CODE;	//0x06;
 80111a8:	2306      	movs	r3, #6
 80111aa:	f88d 3004 	strb.w	r3, [sp, #4]
	SFlash_Chip_Select(ENABLE);
 80111ae:	2001      	movs	r0, #1
 80111b0:	f7ff ffc2 	bl	8011138 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)tx_var, 1);
 80111b4:	2201      	movs	r2, #1
 80111b6:	a901      	add	r1, sp, #4
 80111b8:	4804      	ldr	r0, [pc, #16]	; (80111cc <SFlash_Write_Enable+0x28>)
 80111ba:	f7f3 ff03 	bl	8004fc4 <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 80111be:	2000      	movs	r0, #0
 80111c0:	f7ff ffba 	bl	8011138 <SFlash_Chip_Select>
}
 80111c4:	b003      	add	sp, #12
 80111c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80111ca:	bf00      	nop
 80111cc:	200112ac 	.word	0x200112ac

080111d0 <SFlash_Write_Disable>:
{
 80111d0:	b500      	push	{lr}
 80111d2:	b083      	sub	sp, #12
	tx_var[0] = SFLASH_WRITE_DIS_CODE;	//0x04;
 80111d4:	2304      	movs	r3, #4
 80111d6:	f88d 3004 	strb.w	r3, [sp, #4]
	SFlash_Chip_Select(ENABLE);
 80111da:	2001      	movs	r0, #1
 80111dc:	f7ff ffac 	bl	8011138 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *) tx_var,1);
 80111e0:	2201      	movs	r2, #1
 80111e2:	a901      	add	r1, sp, #4
 80111e4:	4805      	ldr	r0, [pc, #20]	; (80111fc <SFlash_Write_Disable+0x2c>)
 80111e6:	f7f3 feed 	bl	8004fc4 <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 80111ea:	2000      	movs	r0, #0
 80111ec:	f7ff ffa4 	bl	8011138 <SFlash_Chip_Select>
	HAL_Delay(20);
 80111f0:	2014      	movs	r0, #20
 80111f2:	f7ef ff6b 	bl	80010cc <HAL_Delay>
}
 80111f6:	b003      	add	sp, #12
 80111f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80111fc:	200112ac 	.word	0x200112ac

08011200 <SFlash_Read>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Read(uint32_t address, char * ptr_read_data, uint16_t size)
{
 8011200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011202:	b085      	sub	sp, #20
 8011204:	460d      	mov	r5, r1
 8011206:	4616      	mov	r6, r2
	char tx_var[10];
	memset(tx_var, 0, sizeof(tx_var));
 8011208:	2400      	movs	r4, #0
 801120a:	f8cd 4009 	str.w	r4, [sp, #9]
 801120e:	f88d 400d 	strb.w	r4, [sp, #13]
	tx_var[0] = SFLASH_READ_HSPEED_CODE;
 8011212:	230b      	movs	r3, #11
 8011214:	f88d 3004 	strb.w	r3, [sp, #4]
	tx_var[1] = (uint8_t)(address >> 16);
 8011218:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801121c:	f88d 3005 	strb.w	r3, [sp, #5]
	tx_var[2] = (uint8_t)(address >> 8);
 8011220:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011224:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_var[3] = (uint8_t)(address >> 0);
 8011228:	f88d 0007 	strb.w	r0, [sp, #7]
	tx_var[4] = 0;
 801122c:	f88d 4008 	strb.w	r4, [sp, #8]
	SFlash_Chip_Select(ENABLE);
 8011230:	2001      	movs	r0, #1
 8011232:	f7ff ff81 	bl	8011138 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)tx_var, 5);
 8011236:	4f09      	ldr	r7, [pc, #36]	; (801125c <SFlash_Read+0x5c>)
 8011238:	2205      	movs	r2, #5
 801123a:	a901      	add	r1, sp, #4
 801123c:	4638      	mov	r0, r7
 801123e:	f7f3 fec1 	bl	8004fc4 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)ptr_read_data, size);
 8011242:	4632      	mov	r2, r6
 8011244:	4629      	mov	r1, r5
 8011246:	4638      	mov	r0, r7
 8011248:	f7f3 ff70 	bl	800512c <HAL_SPI_Receive_IT>
	HAL_Delay(100);
 801124c:	2064      	movs	r0, #100	; 0x64
 801124e:	f7ef ff3d 	bl	80010cc <HAL_Delay>

	SFlash_Chip_Select(DISABLE);
 8011252:	4620      	mov	r0, r4
 8011254:	f7ff ff70 	bl	8011138 <SFlash_Chip_Select>
}
 8011258:	b005      	add	sp, #20
 801125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125c:	200112ac 	.word	0x200112ac

08011260 <SFlash_Arrange_Read_Data>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      04-05-2021			100229
******************************************************************************/
void SFlash_Arrange_Read_Data(void)
{
 8011260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011262:	f6ad 3dc4 	subw	sp, sp, #3012	; 0xbc4
	char temparray[3000];
	const char endstart[] = "#*";
 8011266:	4b34      	ldr	r3, [pc, #208]	; (8011338 <SFlash_Arrange_Read_Data+0xd8>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801126e:	0c1b      	lsrs	r3, r3, #16
 8011270:	f88d 3006 	strb.w	r3, [sp, #6]
	char *ptrchar = FlashStr.cSFlashHalfReadData;
	char *ptrendchar;
	uint16_t size = 0;

	if(strlen(FlashStr.cSFlashHalfReadData) == 0)
 8011274:	4b31      	ldr	r3, [pc, #196]	; (801133c <SFlash_Arrange_Read_Data+0xdc>)
 8011276:	f893 39da 	ldrb.w	r3, [r3, #2522]	; 0x9da
 801127a:	bb03      	cbnz	r3, 80112be <SFlash_Arrange_Read_Data+0x5e>
	{
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData) * sizeof(char));
 801127c:	4c30      	ldr	r4, [pc, #192]	; (8011340 <SFlash_Arrange_Read_Data+0xe0>)
 801127e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8011282:	2100      	movs	r1, #0
 8011284:	4620      	mov	r0, r4
 8011286:	f001 fe2b 	bl	8012ee0 <memset>
		memcpy(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData, sizeof(FlashStr.cSFlashTransmitData));
 801128a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 801128e:	f6a4 11c4 	subw	r1, r4, #2500	; 0x9c4
 8011292:	4620      	mov	r0, r4
 8011294:	f001 fe16 	bl	8012ec4 <memcpy>
	}
	else
		strcat(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData);

	if(strstr(FlashStr.cSFlashHalfReadData, endstart) != NULL)
 8011298:	a901      	add	r1, sp, #4
 801129a:	4829      	ldr	r0, [pc, #164]	; (8011340 <SFlash_Arrange_Read_Data+0xe0>)
 801129c:	f001 febf 	bl	801301e <strstr>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d041      	beq.n	8011328 <SFlash_Arrange_Read_Data+0xc8>
	{
		ptrendchar = ptrchar;
 80112a4:	4d26      	ldr	r5, [pc, #152]	; (8011340 <SFlash_Arrange_Read_Data+0xe0>)
	char *ptrchar = FlashStr.cSFlashHalfReadData;
 80112a6:	462b      	mov	r3, r5
		while( ptrchar != NULL)
 80112a8:	b17b      	cbz	r3, 80112ca <SFlash_Arrange_Read_Data+0x6a>
		{
			ptrchar = strstr(ptrchar, endstart);
 80112aa:	a901      	add	r1, sp, #4
 80112ac:	4618      	mov	r0, r3
 80112ae:	f001 feb6 	bl	801301e <strstr>
			if(ptrchar != NULL)
 80112b2:	4603      	mov	r3, r0
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d0f7      	beq.n	80112a8 <SFlash_Arrange_Read_Data+0x48>
			{
				ptrendchar = ptrchar;
 80112b8:	4605      	mov	r5, r0
				++ptrchar;
 80112ba:	3301      	adds	r3, #1
 80112bc:	e7f4      	b.n	80112a8 <SFlash_Arrange_Read_Data+0x48>
		strcat(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData);
 80112be:	4921      	ldr	r1, [pc, #132]	; (8011344 <SFlash_Arrange_Read_Data+0xe4>)
 80112c0:	f601 10c4 	addw	r0, r1, #2500	; 0x9c4
 80112c4:	f001 fe62 	bl	8012f8c <strcat>
 80112c8:	e7e6      	b.n	8011298 <SFlash_Arrange_Read_Data+0x38>
			}
		}
		++ptrendchar;
 80112ca:	3501      	adds	r5, #1
		size = ptrendchar - FlashStr.cSFlashHalfReadData;
 80112cc:	4c1c      	ldr	r4, [pc, #112]	; (8011340 <SFlash_Arrange_Read_Data+0xe0>)
 80112ce:	1b2c      	subs	r4, r5, r4
 80112d0:	b2a4      	uxth	r4, r4
		if(size > sizeof(FlashStr.cSFlashHalfReadData))
 80112d2:	f640 53ac 	movw	r3, #3500	; 0xdac
 80112d6:	429c      	cmp	r4, r3
 80112d8:	d901      	bls.n	80112de <SFlash_Arrange_Read_Data+0x7e>
			size = sizeof (FlashStr.cSFlashHalfReadData) - 1;
 80112da:	f640 54ab 	movw	r4, #3499	; 0xdab
		memset(FlashStr.cSFlashTransmitData, 0x00, sizeof(FlashStr.cSFlashTransmitData));
 80112de:	4f19      	ldr	r7, [pc, #100]	; (8011344 <SFlash_Arrange_Read_Data+0xe4>)
 80112e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80112e4:	2100      	movs	r1, #0
 80112e6:	4638      	mov	r0, r7
 80112e8:	f001 fdfa 	bl	8012ee0 <memset>
		memcpy(FlashStr.cSFlashTransmitData, FlashStr.cSFlashHalfReadData, size);
 80112ec:	f607 16c4 	addw	r6, r7, #2500	; 0x9c4
 80112f0:	4622      	mov	r2, r4
 80112f2:	4631      	mov	r1, r6
 80112f4:	4638      	mov	r0, r7
 80112f6:	f001 fde5 	bl	8012ec4 <memcpy>
		memset(temparray, 0, sizeof(temparray));
 80112fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80112fe:	2100      	movs	r1, #0
 8011300:	a802      	add	r0, sp, #8
 8011302:	f001 fded 	bl	8012ee0 <memset>
		strcpy(temparray, ptrendchar);
 8011306:	4629      	mov	r1, r5
 8011308:	a802      	add	r0, sp, #8
 801130a:	f001 fe5b 	bl	8012fc4 <strcpy>
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
 801130e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8011312:	2100      	movs	r1, #0
 8011314:	4630      	mov	r0, r6
 8011316:	f001 fde3 	bl	8012ee0 <memset>
		strcpy(FlashStr.cSFlashHalfReadData, temparray);
 801131a:	a902      	add	r1, sp, #8
 801131c:	4630      	mov	r0, r6
 801131e:	f001 fe51 	bl	8012fc4 <strcpy>
	else
	{
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
	}
	/* Single payload is copied in queue */
}
 8011322:	f60d 3dc4 	addw	sp, sp, #3012	; 0xbc4
 8011326:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
 8011328:	f640 52ac 	movw	r2, #3500	; 0xdac
 801132c:	2100      	movs	r1, #0
 801132e:	4804      	ldr	r0, [pc, #16]	; (8011340 <SFlash_Arrange_Read_Data+0xe0>)
 8011330:	f001 fdd6 	bl	8012ee0 <memset>
}
 8011334:	e7f5      	b.n	8011322 <SFlash_Arrange_Read_Data+0xc2>
 8011336:	bf00      	nop
 8011338:	0801bf9c 	.word	0x0801bf9c
 801133c:	2000f154 	.word	0x2000f154
 8011340:	2000fb2e 	.word	0x2000fb2e
 8011344:	2000f16a 	.word	0x2000f16a

08011348 <getSFlashDataString>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
char * getSFlashDataString(char * chrptr, uint16_t memory_size)
{
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4604      	mov	r4, r0
//	char * sflashPayload = malloc(sizeof(char) * SFLASH_PAYLOAD_MAX_SIZE);
	char * sflashPayload = malloc(sizeof(char) * memory_size);
 801134c:	4608      	mov	r0, r1
 801134e:	f001 fb59 	bl	8012a04 <malloc>
	if(sflashPayload != NULL)
 8011352:	4605      	mov	r5, r0
 8011354:	b120      	cbz	r0, 8011360 <getSFlashDataString+0x18>
	{
		memset((char *)sflashPayload, 0x00, (sizeof(sflashPayload) * sizeof(char)));
 8011356:	2300      	movs	r3, #0
 8011358:	6003      	str	r3, [r0, #0]
		strcpy((char *)sflashPayload, (char *)chrptr);
 801135a:	4621      	mov	r1, r4
 801135c:	f001 fe32 	bl	8012fc4 <strcpy>
		return sflashPayload;
	}
	return NULL;
}
 8011360:	4628      	mov	r0, r5
 8011362:	bd38      	pop	{r3, r4, r5, pc}

08011364 <SFlash_Chip_Erase>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Chip_Erase(void)
{
 8011364:	b500      	push	{lr}
 8011366:	b083      	sub	sp, #12
	uint8_t var = SFLASH_CHIP_ERASE_CODE;
 8011368:	2360      	movs	r3, #96	; 0x60
 801136a:	f88d 3007 	strb.w	r3, [sp, #7]
	SFlash_Write_Enable();
 801136e:	f7ff ff19 	bl	80111a4 <SFlash_Write_Enable>
	SFlash_Chip_Select(ENABLE);
 8011372:	2001      	movs	r0, #1
 8011374:	f7ff fee0 	bl	8011138 <SFlash_Chip_Select>
	HAL_SPI_Transmit_IT(&hspi1, &var, 1);
 8011378:	2201      	movs	r2, #1
 801137a:	f10d 0107 	add.w	r1, sp, #7
 801137e:	4807      	ldr	r0, [pc, #28]	; (801139c <SFlash_Chip_Erase+0x38>)
 8011380:	f7f3 fe20 	bl	8004fc4 <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 8011384:	2000      	movs	r0, #0
 8011386:	f7ff fed7 	bl	8011138 <SFlash_Chip_Select>
	HAL_Delay(200);		// Time to erase full chip 100 ms
 801138a:	20c8      	movs	r0, #200	; 0xc8
 801138c:	f7ef fe9e 	bl	80010cc <HAL_Delay>
	SFlash_Write_Disable();
 8011390:	f7ff ff1e 	bl	80111d0 <SFlash_Write_Disable>
}
 8011394:	b003      	add	sp, #12
 8011396:	f85d fb04 	ldr.w	pc, [sp], #4
 801139a:	bf00      	nop
 801139c:	200112ac 	.word	0x200112ac

080113a0 <SerialFlashFSM>:
	if(FlashStr.u32SerialFlashDelay != 0)
 80113a0:	4b88      	ldr	r3, [pc, #544]	; (80115c4 <SerialFlashFSM+0x224>)
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f040 829f 	bne.w	80118e8 <SerialFlashFSM+0x548>
{
 80113aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ae:	b084      	sub	sp, #16
	switch(FlashStr.enmCurrentOperation)
 80113b0:	4a84      	ldr	r2, [pc, #528]	; (80115c4 <SerialFlashFSM+0x224>)
 80113b2:	f242 134f 	movw	r3, #8527	; 0x214f
 80113b6:	5cd3      	ldrb	r3, [r2, r3]
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b03      	cmp	r3, #3
 80113bc:	f200 828e 	bhi.w	80118dc <SerialFlashFSM+0x53c>
 80113c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80113c4:	006e0004 	.word	0x006e0004
 80113c8:	024f01b0 	.word	0x024f01b0
			FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 80113cc:	4b7d      	ldr	r3, [pc, #500]	; (80115c4 <SerialFlashFSM+0x224>)
 80113ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80113d2:	611a      	str	r2, [r3, #16]
			if(isQueueEmpty(&gsmPayload) == 1 )
 80113d4:	487c      	ldr	r0, [pc, #496]	; (80115c8 <SerialFlashFSM+0x228>)
 80113d6:	f7fe fc1b 	bl	800fc10 <isQueueEmpty>
 80113da:	2801      	cmp	r0, #1
 80113dc:	d016      	beq.n	801140c <SerialFlashFSM+0x6c>
			else if(GSMQueueFullFlag == 1)
 80113de:	4b7b      	ldr	r3, [pc, #492]	; (80115cc <SerialFlashFSM+0x22c>)
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d044      	beq.n	8011470 <SerialFlashFSM+0xd0>
				if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE_FLASH) < SFLASH_SIZE)
 80113e6:	4b77      	ldr	r3, [pc, #476]	; (80115c4 <SerialFlashFSM+0x224>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80113ee:	4a78      	ldr	r2, [pc, #480]	; (80115d0 <SerialFlashFSM+0x230>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d833      	bhi.n	801145c <SerialFlashFSM+0xbc>
					GSMQueueFullFlag = 0;
 80113f4:	2200      	movs	r2, #0
 80113f6:	4b75      	ldr	r3, [pc, #468]	; (80115cc <SerialFlashFSM+0x22c>)
 80113f8:	701a      	strb	r2, [r3, #0]
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 80113fa:	4b72      	ldr	r3, [pc, #456]	; (80115c4 <SerialFlashFSM+0x224>)
 80113fc:	f242 114f 	movw	r1, #8527	; 0x214f
 8011400:	2001      	movs	r0, #1
 8011402:	5458      	strb	r0, [r3, r1]
					FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 8011404:	f242 1150 	movw	r1, #8528	; 0x2150
 8011408:	545a      	strb	r2, [r3, r1]
 801140a:	e264      	b.n	80118d6 <SerialFlashFSM+0x536>
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 801140c:	4b6d      	ldr	r3, [pc, #436]	; (80115c4 <SerialFlashFSM+0x224>)
 801140e:	6858      	ldr	r0, [r3, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4298      	cmp	r0, r3
 8011414:	f080 825f 	bcs.w	80118d6 <SerialFlashFSM+0x536>
					if((FlashStr.u32FlashReadAddress + SFLASH_UPLOAD_LENGTH) < SFLASH_SIZE)
 8011418:	f200 52dc 	addw	r2, r0, #1500	; 0x5dc
 801141c:	4b6c      	ldr	r3, [pc, #432]	; (80115d0 <SerialFlashFSM+0x230>)
 801141e:	429a      	cmp	r2, r3
 8011420:	d809      	bhi.n	8011436 <SerialFlashFSM+0x96>
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 8011422:	4b68      	ldr	r3, [pc, #416]	; (80115c4 <SerialFlashFSM+0x224>)
 8011424:	f242 124f 	movw	r2, #8527	; 0x214f
 8011428:	2102      	movs	r1, #2
 801142a:	5499      	strb	r1, [r3, r2]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 801142c:	f242 1251 	movw	r2, #8529	; 0x2151
 8011430:	2100      	movs	r1, #0
 8011432:	5499      	strb	r1, [r3, r2]
 8011434:	e24f      	b.n	80118d6 <SerialFlashFSM+0x536>
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, (SFLASH_SIZE - FlashStr.u32FlashReadAddress));
 8011436:	43c2      	mvns	r2, r0
 8011438:	4c66      	ldr	r4, [pc, #408]	; (80115d4 <SerialFlashFSM+0x234>)
 801143a:	b292      	uxth	r2, r2
 801143c:	4621      	mov	r1, r4
 801143e:	f7ff fedf 	bl	8011200 <SFlash_Read>
						FlashStr.u32FlashReadAddress = SFLASH_SIZE;
 8011442:	f1a4 0316 	sub.w	r3, r4, #22
 8011446:	4a64      	ldr	r2, [pc, #400]	; (80115d8 <SerialFlashFSM+0x238>)
 8011448:	f844 2c12 	str.w	r2, [r4, #-18]
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 801144c:	2202      	movs	r2, #2
 801144e:	f242 114f 	movw	r1, #8527	; 0x214f
 8011452:	545a      	strb	r2, [r3, r1]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 8011454:	f242 1151 	movw	r1, #8529	; 0x2151
 8011458:	545a      	strb	r2, [r3, r1]
 801145a:	e23c      	b.n	80118d6 <SerialFlashFSM+0x536>
					FlashStr.bitFlagMemoryFull = 1;
 801145c:	4b59      	ldr	r3, [pc, #356]	; (80115c4 <SerialFlashFSM+0x224>)
 801145e:	f242 124b 	movw	r2, #8523	; 0x214b
 8011462:	2101      	movs	r1, #1
 8011464:	5499      	strb	r1, [r3, r2]
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011466:	f242 124f 	movw	r2, #8527	; 0x214f
 801146a:	2100      	movs	r1, #0
 801146c:	5499      	strb	r1, [r3, r2]
 801146e:	e232      	b.n	80118d6 <SerialFlashFSM+0x536>
			else if(((FlashStr.u32FlashReadAddress != 0) && (FlashStr.u32FlashWriteAddress != 0)) && ((FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress) || (FlashStr.u32FlashReadAddress >= SFLASH_SIZE) || (FlashStr.u32FlashWriteAddress >= SFLASH_SIZE)))
 8011470:	4b54      	ldr	r3, [pc, #336]	; (80115c4 <SerialFlashFSM+0x224>)
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 822e 	beq.w	80118d6 <SerialFlashFSM+0x536>
 801147a:	4a52      	ldr	r2, [pc, #328]	; (80115c4 <SerialFlashFSM+0x224>)
 801147c:	6812      	ldr	r2, [r2, #0]
 801147e:	2a00      	cmp	r2, #0
 8011480:	f000 8229 	beq.w	80118d6 <SerialFlashFSM+0x536>
 8011484:	4293      	cmp	r3, r2
 8011486:	d205      	bcs.n	8011494 <SerialFlashFSM+0xf4>
 8011488:	4951      	ldr	r1, [pc, #324]	; (80115d0 <SerialFlashFSM+0x230>)
 801148a:	428b      	cmp	r3, r1
 801148c:	d802      	bhi.n	8011494 <SerialFlashFSM+0xf4>
 801148e:	428a      	cmp	r2, r1
 8011490:	f240 8221 	bls.w	80118d6 <SerialFlashFSM+0x536>
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
 8011494:	4a4b      	ldr	r2, [pc, #300]	; (80115c4 <SerialFlashFSM+0x224>)
 8011496:	f242 134f 	movw	r3, #8527	; 0x214f
 801149a:	2103      	movs	r1, #3
 801149c:	54d1      	strb	r1, [r2, r3]
 801149e:	e21a      	b.n	80118d6 <SerialFlashFSM+0x536>
			switch(FlashStr.enmCurrentWriteState)
 80114a0:	4a48      	ldr	r2, [pc, #288]	; (80115c4 <SerialFlashFSM+0x224>)
 80114a2:	f242 1350 	movw	r3, #8528	; 0x2150
 80114a6:	5cd3      	ldrb	r3, [r2, r3]
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	f200 8134 	bhi.w	8011718 <SerialFlashFSM+0x378>
 80114b0:	e8df f003 	tbb	[pc, r3]
 80114b4:	98756b02 	.word	0x98756b02
					if(FlashStr.bitFlagQueueDataWrite == 1)
 80114b8:	4a42      	ldr	r2, [pc, #264]	; (80115c4 <SerialFlashFSM+0x224>)
 80114ba:	f242 134e 	movw	r3, #8526	; 0x214e
 80114be:	5cd3      	ldrb	r3, [r2, r3]
 80114c0:	bb43      	cbnz	r3, 8011514 <SerialFlashFSM+0x174>
					u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 80114c2:	4846      	ldr	r0, [pc, #280]	; (80115dc <SerialFlashFSM+0x23c>)
 80114c4:	f7ee fe9e 	bl	8000204 <strlen>
 80114c8:	b280      	uxth	r0, r0
 80114ca:	4b40      	ldr	r3, [pc, #256]	; (80115cc <SerialFlashFSM+0x22c>)
 80114cc:	8058      	strh	r0, [r3, #2]
					if(u16writeDataSize > 200)
 80114ce:	28c8      	cmp	r0, #200	; 0xc8
 80114d0:	d955      	bls.n	801157e <SerialFlashFSM+0x1de>
						FlashStr.cSFlashWriteData[u16writeDataSize - 3] = '9';
 80114d2:	3803      	subs	r0, #3
 80114d4:	4b3b      	ldr	r3, [pc, #236]	; (80115c4 <SerialFlashFSM+0x224>)
 80114d6:	4418      	add	r0, r3
 80114d8:	f241 7386 	movw	r3, #6022	; 0x1786
 80114dc:	2239      	movs	r2, #57	; 0x39
 80114de:	54c2      	strb	r2, [r0, r3]
						lptrsof = strstr((char *)FlashStr.cSFlashWriteData, "#*");
 80114e0:	493f      	ldr	r1, [pc, #252]	; (80115e0 <SerialFlashFSM+0x240>)
 80114e2:	483e      	ldr	r0, [pc, #248]	; (80115dc <SerialFlashFSM+0x23c>)
 80114e4:	f001 fd9b 	bl	801301e <strstr>
						if(lptrsof != NULL)
 80114e8:	b110      	cbz	r0, 80114f0 <SerialFlashFSM+0x150>
							*(lptrsof - 2) = '9';
 80114ea:	2239      	movs	r2, #57	; 0x39
 80114ec:	f800 2c02 	strb.w	r2, [r0, #-2]
						u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 80114f0:	483a      	ldr	r0, [pc, #232]	; (80115dc <SerialFlashFSM+0x23c>)
 80114f2:	f7ee fe87 	bl	8000204 <strlen>
 80114f6:	4b35      	ldr	r3, [pc, #212]	; (80115cc <SerialFlashFSM+0x22c>)
 80114f8:	8058      	strh	r0, [r3, #2]
						FlashStr.u16FlashWriteIndex = 0;
 80114fa:	4b32      	ldr	r3, [pc, #200]	; (80115c4 <SerialFlashFSM+0x224>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	819a      	strh	r2, [r3, #12]
						u8Flash_Busy_status = SFlash_Read_Status_Register();
 8011500:	f7ff fe32 	bl	8011168 <SFlash_Read_Status_Register>
						if(u8Flash_Busy_status == 1)
 8011504:	2801      	cmp	r0, #1
 8011506:	d032      	beq.n	801156e <SerialFlashFSM+0x1ce>
							FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 8011508:	4a2e      	ldr	r2, [pc, #184]	; (80115c4 <SerialFlashFSM+0x224>)
 801150a:	f242 1350 	movw	r3, #8528	; 0x2150
 801150e:	2101      	movs	r1, #1
 8011510:	54d1      	strb	r1, [r2, r3]
 8011512:	e1e0      	b.n	80118d6 <SerialFlashFSM+0x536>
						memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 8011514:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8011518:	2100      	movs	r1, #0
 801151a:	4830      	ldr	r0, [pc, #192]	; (80115dc <SerialFlashFSM+0x23c>)
 801151c:	f001 fce0 	bl	8012ee0 <memset>
						GSMQueueFullFlag = 1;
 8011520:	4b2a      	ldr	r3, [pc, #168]	; (80115cc <SerialFlashFSM+0x22c>)
 8011522:	2201      	movs	r2, #1
 8011524:	701a      	strb	r2, [r3, #0]
						if(gsmPayload.data[FlashStr.u8QueueWriteCounter] != NULL)
 8011526:	4b27      	ldr	r3, [pc, #156]	; (80115c4 <SerialFlashFSM+0x224>)
 8011528:	7d5b      	ldrb	r3, [r3, #21]
 801152a:	1c99      	adds	r1, r3, #2
 801152c:	4a26      	ldr	r2, [pc, #152]	; (80115c8 <SerialFlashFSM+0x228>)
 801152e:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8011532:	b174      	cbz	r4, 8011552 <SerialFlashFSM+0x1b2>
							strcpy((char *)FlashStr.cSFlashWriteData, (char *)gsmPayload.data[FlashStr.u8QueueWriteCounter]);
 8011534:	4621      	mov	r1, r4
 8011536:	4829      	ldr	r0, [pc, #164]	; (80115dc <SerialFlashFSM+0x23c>)
 8011538:	f001 fd44 	bl	8012fc4 <strcpy>
							free(gsmPayload.data[FlashStr.u8QueueWriteCounter]);
 801153c:	4620      	mov	r0, r4
 801153e:	f001 fa69 	bl	8012a14 <free>
							gsmPayload.data[FlashStr.u8QueueWriteCounter] = NULL;
 8011542:	4b20      	ldr	r3, [pc, #128]	; (80115c4 <SerialFlashFSM+0x224>)
 8011544:	7d5b      	ldrb	r3, [r3, #21]
 8011546:	3302      	adds	r3, #2
 8011548:	4a1f      	ldr	r2, [pc, #124]	; (80115c8 <SerialFlashFSM+0x228>)
 801154a:	2100      	movs	r1, #0
 801154c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8011550:	e7b7      	b.n	80114c2 <SerialFlashFSM+0x122>
							++FlashStr.u8QueueWriteCounter;
 8011552:	3301      	adds	r3, #1
 8011554:	b2db      	uxtb	r3, r3
 8011556:	4a1b      	ldr	r2, [pc, #108]	; (80115c4 <SerialFlashFSM+0x224>)
 8011558:	7553      	strb	r3, [r2, #21]
							if(FlashStr.u8QueueWriteCounter >= MAX_QUEUE_SIZE)
 801155a:	2b09      	cmp	r3, #9
 801155c:	d9b1      	bls.n	80114c2 <SerialFlashFSM+0x122>
								FlashStr.u8QueueWriteCounter = 0;
 801155e:	2300      	movs	r3, #0
 8011560:	7553      	strb	r3, [r2, #21]
								GSMQueueFullFlag = 0;
 8011562:	491a      	ldr	r1, [pc, #104]	; (80115cc <SerialFlashFSM+0x22c>)
 8011564:	700b      	strb	r3, [r1, #0]
								FlashStr.bitFlagQueueDataWrite = 0;
 8011566:	f242 114e 	movw	r1, #8526	; 0x214e
 801156a:	5453      	strb	r3, [r2, r1]
 801156c:	e7a9      	b.n	80114c2 <SerialFlashFSM+0x122>
							FlashStr.u32SerialFlashDelay = TWENTY_MS; //FIVEHUNDRED_MS;
 801156e:	4b15      	ldr	r3, [pc, #84]	; (80115c4 <SerialFlashFSM+0x224>)
 8011570:	2214      	movs	r2, #20
 8011572:	611a      	str	r2, [r3, #16]
							FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 8011574:	f242 1250 	movw	r2, #8528	; 0x2150
 8011578:	2100      	movs	r1, #0
 801157a:	5499      	strb	r1, [r3, r2]
 801157c:	e1ab      	b.n	80118d6 <SerialFlashFSM+0x536>
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 801157e:	4a11      	ldr	r2, [pc, #68]	; (80115c4 <SerialFlashFSM+0x224>)
 8011580:	f242 134f 	movw	r3, #8527	; 0x214f
 8011584:	2100      	movs	r1, #0
 8011586:	54d1      	strb	r1, [r2, r3]
 8011588:	e1a5      	b.n	80118d6 <SerialFlashFSM+0x536>
					SFlash_Write_Enable();
 801158a:	f7ff fe0b 	bl	80111a4 <SFlash_Write_Enable>
					FlashStr.enmCurrentWriteState = enmFlashWriteEnableCheck;
 801158e:	4b0d      	ldr	r3, [pc, #52]	; (80115c4 <SerialFlashFSM+0x224>)
 8011590:	f242 1250 	movw	r2, #8528	; 0x2150
 8011594:	2102      	movs	r1, #2
 8011596:	5499      	strb	r1, [r3, r2]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 8011598:	2214      	movs	r2, #20
 801159a:	611a      	str	r2, [r3, #16]
					break;
 801159c:	e19b      	b.n	80118d6 <SerialFlashFSM+0x536>
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 801159e:	f7ff fde3 	bl	8011168 <SFlash_Read_Status_Register>
					if(u8Flash_Busy_status == 2)
 80115a2:	2802      	cmp	r0, #2
 80115a4:	d008      	beq.n	80115b8 <SerialFlashFSM+0x218>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 80115a6:	4a07      	ldr	r2, [pc, #28]	; (80115c4 <SerialFlashFSM+0x224>)
 80115a8:	f242 1350 	movw	r3, #8528	; 0x2150
 80115ac:	2101      	movs	r1, #1
 80115ae:	54d1      	strb	r1, [r2, r3]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80115b0:	4b04      	ldr	r3, [pc, #16]	; (80115c4 <SerialFlashFSM+0x224>)
 80115b2:	2214      	movs	r2, #20
 80115b4:	611a      	str	r2, [r3, #16]
					break;
 80115b6:	e18e      	b.n	80118d6 <SerialFlashFSM+0x536>
						FlashStr.enmCurrentWriteState = enmFlashWriteData;
 80115b8:	4a02      	ldr	r2, [pc, #8]	; (80115c4 <SerialFlashFSM+0x224>)
 80115ba:	f242 1350 	movw	r3, #8528	; 0x2150
 80115be:	2103      	movs	r1, #3
 80115c0:	54d1      	strb	r1, [r2, r3]
 80115c2:	e7f5      	b.n	80115b0 <SerialFlashFSM+0x210>
 80115c4:	2000f154 	.word	0x2000f154
 80115c8:	2000d2d4 	.word	0x2000d2d4
 80115cc:	20004270 	.word	0x20004270
 80115d0:	007ffffe 	.word	0x007ffffe
 80115d4:	2000f16a 	.word	0x2000f16a
 80115d8:	007fffff 	.word	0x007fffff
 80115dc:	200108da 	.word	0x200108da
 80115e0:	0801bf9c 	.word	0x0801bf9c
					u16tempVar = FlashStr.u32FlashWriteAddress / 256;
 80115e4:	49c1      	ldr	r1, [pc, #772]	; (80118ec <SerialFlashFSM+0x54c>)
 80115e6:	680a      	ldr	r2, [r1, #0]
					u16tempVar *= 256;
 80115e8:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
					u16tempVar = FlashStr.u32FlashWriteAddress - u16tempVar;
 80115ec:	b290      	uxth	r0, r2
					FlashStr.u16FlashPageEmptyByte = 256 - u16tempVar;
 80115ee:	1a1b      	subs	r3, r3, r0
 80115f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	810b      	strh	r3, [r1, #8]
					if(u16writeDataSize > FlashStr.u16FlashPageEmptyByte)
 80115f8:	49bd      	ldr	r1, [pc, #756]	; (80118f0 <SerialFlashFSM+0x550>)
 80115fa:	8849      	ldrh	r1, [r1, #2]
 80115fc:	428b      	cmp	r3, r1
 80115fe:	d242      	bcs.n	8011686 <SerialFlashFSM+0x2e6>
						FlashStr.u16FlashByteWriten = FlashStr.u16FlashPageEmptyByte;
 8011600:	49ba      	ldr	r1, [pc, #744]	; (80118ec <SerialFlashFSM+0x54c>)
 8011602:	814b      	strh	r3, [r1, #10]
					memset(DataToWrite, 0, 5);
 8011604:	2500      	movs	r5, #0
 8011606:	f88d 500c 	strb.w	r5, [sp, #12]
					DataToWrite[0] = SFLASH_WRITE_PAGE_CODE;
 801160a:	2302      	movs	r3, #2
 801160c:	f88d 3008 	strb.w	r3, [sp, #8]
					DataToWrite[1] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 16);
 8011610:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011614:	f88d 3009 	strb.w	r3, [sp, #9]
					DataToWrite[2] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 8);
 8011618:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801161c:	f88d 300a 	strb.w	r3, [sp, #10]
					DataToWrite[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 0);
 8011620:	f88d 200b 	strb.w	r2, [sp, #11]
					SFlash_Chip_Select(ENABLE);
 8011624:	2001      	movs	r0, #1
 8011626:	f7ff fd87 	bl	8011138 <SFlash_Chip_Select>
				  	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *) DataToWrite, 4);
 801162a:	4eb2      	ldr	r6, [pc, #712]	; (80118f4 <SerialFlashFSM+0x554>)
 801162c:	2204      	movs	r2, #4
 801162e:	a902      	add	r1, sp, #8
 8011630:	4630      	mov	r0, r6
 8011632:	f7f3 fcc7 	bl	8004fc4 <HAL_SPI_Transmit_IT>
				  	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *) &FlashStr.cSFlashWriteData[FlashStr.u16FlashWriteIndex], FlashStr.u16FlashByteWriten);
 8011636:	4cad      	ldr	r4, [pc, #692]	; (80118ec <SerialFlashFSM+0x54c>)
 8011638:	89a1      	ldrh	r1, [r4, #12]
 801163a:	f501 51bc 	add.w	r1, r1, #6016	; 0x1780
 801163e:	4421      	add	r1, r4
 8011640:	8962      	ldrh	r2, [r4, #10]
 8011642:	3106      	adds	r1, #6
 8011644:	4630      	mov	r0, r6
 8011646:	f7f3 fcbd 	bl	8004fc4 <HAL_SPI_Transmit_IT>
					HAL_Delay(20);
 801164a:	2014      	movs	r0, #20
 801164c:	f7ef fd3e 	bl	80010cc <HAL_Delay>
					SFlash_Chip_Select(DISABLE);
 8011650:	4628      	mov	r0, r5
 8011652:	f7ff fd71 	bl	8011138 <SFlash_Chip_Select>
					FlashStr.u32FlashWriteAddress += FlashStr.u16FlashByteWriten;
 8011656:	8961      	ldrh	r1, [r4, #10]
 8011658:	6825      	ldr	r5, [r4, #0]
 801165a:	440d      	add	r5, r1
 801165c:	6025      	str	r5, [r4, #0]
					FlashStr.u16FlashWriteIndex += FlashStr.u16FlashByteWriten;
 801165e:	89a3      	ldrh	r3, [r4, #12]
 8011660:	440b      	add	r3, r1
 8011662:	81a3      	strh	r3, [r4, #12]
					FlashStr.u16FlashPageEmptyByte -= FlashStr.u16FlashByteWriten;
 8011664:	8922      	ldrh	r2, [r4, #8]
 8011666:	1a52      	subs	r2, r2, r1
 8011668:	b292      	uxth	r2, r2
 801166a:	8122      	strh	r2, [r4, #8]
					u16writeDataSize -= FlashStr.u16FlashByteWriten;
 801166c:	48a0      	ldr	r0, [pc, #640]	; (80118f0 <SerialFlashFSM+0x550>)
 801166e:	8843      	ldrh	r3, [r0, #2]
 8011670:	1a5b      	subs	r3, r3, r1
 8011672:	b29b      	uxth	r3, r3
 8011674:	8043      	strh	r3, [r0, #2]
					if(FlashStr.u16FlashPageEmptyByte >= u16writeDataSize)	// Write is over
 8011676:	429a      	cmp	r2, r3
 8011678:	d20c      	bcs.n	8011694 <SerialFlashFSM+0x2f4>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 801167a:	4a9c      	ldr	r2, [pc, #624]	; (80118ec <SerialFlashFSM+0x54c>)
 801167c:	f242 1350 	movw	r3, #8528	; 0x2150
 8011680:	2101      	movs	r1, #1
 8011682:	54d1      	strb	r1, [r2, r3]
 8011684:	e127      	b.n	80118d6 <SerialFlashFSM+0x536>
						FlashStr.u16FlashByteWriten = u16writeDataSize;
 8011686:	4b99      	ldr	r3, [pc, #612]	; (80118ec <SerialFlashFSM+0x54c>)
 8011688:	8159      	strh	r1, [r3, #10]
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 801168a:	f242 114f 	movw	r1, #8527	; 0x214f
 801168e:	2000      	movs	r0, #0
 8011690:	5458      	strb	r0, [r3, r1]
 8011692:	e7b7      	b.n	8011604 <SerialFlashFSM+0x264>
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011694:	4626      	mov	r6, r4
 8011696:	2400      	movs	r4, #0
 8011698:	f242 134f 	movw	r3, #8527	; 0x214f
 801169c:	54f4      	strb	r4, [r6, r3]
						memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 801169e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80116a2:	4621      	mov	r1, r4
 80116a4:	4894      	ldr	r0, [pc, #592]	; (80118f8 <SerialFlashFSM+0x558>)
 80116a6:	f001 fc1b 	bl	8012ee0 <memset>
						memset(strI2cEeprom.pu8SFlashWriteMemLocAddress, 0x0, 5);
 80116aa:	4b94      	ldr	r3, [pc, #592]	; (80118fc <SerialFlashFSM+0x55c>)
 80116ac:	f883 4cdc 	strb.w	r4, [r3, #3292]	; 0xcdc
						strI2cEeprom.pu8SFlashWriteMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 24);
 80116b0:	0e2a      	lsrs	r2, r5, #24
 80116b2:	f883 2cdb 	strb.w	r2, [r3, #3291]	; 0xcdb
						strI2cEeprom.pu8SFlashWriteMemLocAddress[2] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 16);
 80116b6:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80116ba:	f883 2cda 	strb.w	r2, [r3, #3290]	; 0xcda
						strI2cEeprom.pu8SFlashWriteMemLocAddress[1] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 8);
 80116be:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80116c2:	f883 2cd9 	strb.w	r2, [r3, #3289]	; 0xcd9
						strI2cEeprom.pu8SFlashWriteMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashWriteAddress);
 80116c6:	f883 5cd8 	strb.w	r5, [r3, #3288]	; 0xcd8
						HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 288,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashWriteMemLocAddress,4);
 80116ca:	2204      	movs	r2, #4
 80116cc:	9201      	str	r2, [sp, #4]
 80116ce:	f603 43d8 	addw	r3, r3, #3288	; 0xcd8
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	2310      	movs	r3, #16
 80116d6:	f44f 7290 	mov.w	r2, #288	; 0x120
 80116da:	21a0      	movs	r1, #160	; 0xa0
 80116dc:	4888      	ldr	r0, [pc, #544]	; (8011900 <SerialFlashFSM+0x560>)
 80116de:	f7f1 fdff 	bl	80032e0 <HAL_I2C_Mem_Write_IT>
						HAL_Delay(10);
 80116e2:	200a      	movs	r0, #10
 80116e4:	f7ef fcf2 	bl	80010cc <HAL_Delay>
						if(FlashStr.bitFlagQueueDataWrite == 1)
 80116e8:	f242 134e 	movw	r3, #8526	; 0x214e
 80116ec:	5cf3      	ldrb	r3, [r6, r3]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 80f1 	beq.w	80118d6 <SerialFlashFSM+0x536>
							GSMQueueFullFlag = 1;
 80116f4:	4b7e      	ldr	r3, [pc, #504]	; (80118f0 <SerialFlashFSM+0x550>)
 80116f6:	2201      	movs	r2, #1
 80116f8:	701a      	strb	r2, [r3, #0]
							++FlashStr.u8QueueWriteCounter;
 80116fa:	7d73      	ldrb	r3, [r6, #21]
 80116fc:	3301      	adds	r3, #1
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	7573      	strb	r3, [r6, #21]
							if(FlashStr.u8QueueWriteCounter >= MAX_QUEUE_SIZE)
 8011702:	2b09      	cmp	r3, #9
 8011704:	f240 80e7 	bls.w	80118d6 <SerialFlashFSM+0x536>
								FlashStr.u8QueueWriteCounter = 1;
 8011708:	2201      	movs	r2, #1
 801170a:	7572      	strb	r2, [r6, #21]
								GSMQueueFullFlag = 0;
 801170c:	4978      	ldr	r1, [pc, #480]	; (80118f0 <SerialFlashFSM+0x550>)
 801170e:	700c      	strb	r4, [r1, #0]
								FlashStr.bitFlagQueueDataWrite = 0;
 8011710:	f242 114e 	movw	r1, #8526	; 0x214e
 8011714:	5474      	strb	r4, [r6, r1]
 8011716:	e0de      	b.n	80118d6 <SerialFlashFSM+0x536>
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011718:	4a74      	ldr	r2, [pc, #464]	; (80118ec <SerialFlashFSM+0x54c>)
 801171a:	f242 134f 	movw	r3, #8527	; 0x214f
 801171e:	2100      	movs	r1, #0
 8011720:	54d1      	strb	r1, [r2, r3]
					break;
 8011722:	e0d8      	b.n	80118d6 <SerialFlashFSM+0x536>
			switch(FlashStr.enmCurrentReadState)
 8011724:	4a71      	ldr	r2, [pc, #452]	; (80118ec <SerialFlashFSM+0x54c>)
 8011726:	f242 1351 	movw	r3, #8529	; 0x2151
 801172a:	5cd3      	ldrb	r3, [r2, r3]
 801172c:	b2db      	uxtb	r3, r3
 801172e:	2b01      	cmp	r3, #1
 8011730:	d01a      	beq.n	8011768 <SerialFlashFSM+0x3c8>
 8011732:	2b02      	cmp	r3, #2
 8011734:	d04f      	beq.n	80117d6 <SerialFlashFSM+0x436>
 8011736:	b12b      	cbz	r3, 8011744 <SerialFlashFSM+0x3a4>
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8011738:	4a6c      	ldr	r2, [pc, #432]	; (80118ec <SerialFlashFSM+0x54c>)
 801173a:	f242 134f 	movw	r3, #8527	; 0x214f
 801173e:	2100      	movs	r1, #0
 8011740:	54d1      	strb	r1, [r2, r3]
					break;
 8011742:	e0c8      	b.n	80118d6 <SerialFlashFSM+0x536>
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 8011744:	f7ff fd10 	bl	8011168 <SFlash_Read_Status_Register>
					if(u8Flash_Busy_status == 1)
 8011748:	2801      	cmp	r0, #1
 801174a:	d005      	beq.n	8011758 <SerialFlashFSM+0x3b8>
						FlashStr.enmCurrentReadState = enmFlashReadData;
 801174c:	4a67      	ldr	r2, [pc, #412]	; (80118ec <SerialFlashFSM+0x54c>)
 801174e:	f242 1351 	movw	r3, #8529	; 0x2151
 8011752:	2101      	movs	r1, #1
 8011754:	54d1      	strb	r1, [r2, r3]
 8011756:	e0be      	b.n	80118d6 <SerialFlashFSM+0x536>
						FlashStr.u32SerialFlashDelay = TWENTY_MS;
 8011758:	4b64      	ldr	r3, [pc, #400]	; (80118ec <SerialFlashFSM+0x54c>)
 801175a:	2214      	movs	r2, #20
 801175c:	611a      	str	r2, [r3, #16]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 801175e:	f242 1251 	movw	r2, #8529	; 0x2151
 8011762:	2100      	movs	r1, #0
 8011764:	5499      	strb	r1, [r3, r2]
 8011766:	e0b6      	b.n	80118d6 <SerialFlashFSM+0x536>
					FlashStr.bitFlagReadInProgress = 1;
 8011768:	4c60      	ldr	r4, [pc, #384]	; (80118ec <SerialFlashFSM+0x54c>)
 801176a:	f242 134d 	movw	r3, #8525	; 0x214d
 801176e:	2201      	movs	r2, #1
 8011770:	54e2      	strb	r2, [r4, r3]
					memset((char *)FlashStr.cSFlashTransmitData, 0, sizeof(FlashStr.cSFlashTransmitData));
 8011772:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8011776:	2100      	movs	r1, #0
 8011778:	f104 0016 	add.w	r0, r4, #22
 801177c:	f001 fbb0 	bl	8012ee0 <memset>
					if(FlashStr.u32FlashWriteAddress < (FlashStr.u32FlashReadAddress + SFLASH_UPLOAD_LENGTH))
 8011780:	6822      	ldr	r2, [r4, #0]
 8011782:	6860      	ldr	r0, [r4, #4]
 8011784:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 8011788:	429a      	cmp	r2, r3
 801178a:	d211      	bcs.n	80117b0 <SerialFlashFSM+0x410>
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, FlashStr.u32FlashWriteAddress - FlashStr.u32FlashReadAddress);
 801178c:	1a12      	subs	r2, r2, r0
 801178e:	3416      	adds	r4, #22
 8011790:	b292      	uxth	r2, r2
 8011792:	4621      	mov	r1, r4
 8011794:	f7ff fd34 	bl	8011200 <SFlash_Read>
						FlashStr.u32FlashReadAddress += SFLASH_UPLOAD_LENGTH;
 8011798:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801179c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80117a0:	f844 3c12 	str.w	r3, [r4, #-18]
					FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 80117a4:	4a51      	ldr	r2, [pc, #324]	; (80118ec <SerialFlashFSM+0x54c>)
 80117a6:	f242 1351 	movw	r3, #8529	; 0x2151
 80117aa:	2102      	movs	r1, #2
 80117ac:	54d1      	strb	r1, [r2, r3]
					break;
 80117ae:	e092      	b.n	80118d6 <SerialFlashFSM+0x536>
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, SFLASH_UPLOAD_LENGTH);
 80117b0:	4c54      	ldr	r4, [pc, #336]	; (8011904 <SerialFlashFSM+0x564>)
 80117b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80117b6:	4621      	mov	r1, r4
 80117b8:	f7ff fd22 	bl	8011200 <SFlash_Read>
						FlashStr.u32FlashReadAddress += SFLASH_UPLOAD_LENGTH;
 80117bc:	f1a4 0316 	sub.w	r3, r4, #22
 80117c0:	f854 2c12 	ldr.w	r2, [r4, #-18]
 80117c4:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80117c8:	f844 2c12 	str.w	r2, [r4, #-18]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 80117cc:	f242 1251 	movw	r2, #8529	; 0x2151
 80117d0:	2102      	movs	r1, #2
 80117d2:	5499      	strb	r1, [r3, r2]
 80117d4:	e7e6      	b.n	80117a4 <SerialFlashFSM+0x404>
					SFlash_Arrange_Read_Data();
 80117d6:	f7ff fd43 	bl	8011260 <SFlash_Arrange_Read_Data>
					if(strlen((char *)FlashStr.cSFlashTransmitData) > 10)
 80117da:	484a      	ldr	r0, [pc, #296]	; (8011904 <SerialFlashFSM+0x564>)
 80117dc:	f7ee fd12 	bl	8000204 <strlen>
 80117e0:	280a      	cmp	r0, #10
 80117e2:	d811      	bhi.n	8011808 <SerialFlashFSM+0x468>
					if(FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress)
 80117e4:	4b41      	ldr	r3, [pc, #260]	; (80118ec <SerialFlashFSM+0x54c>)
 80117e6:	685a      	ldr	r2, [r3, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d303      	bcc.n	80117f6 <SerialFlashFSM+0x456>
					  if(strlen((char *)FlashStr.cSFlashHalfReadData) != 0)
 80117ee:	4b3f      	ldr	r3, [pc, #252]	; (80118ec <SerialFlashFSM+0x54c>)
 80117f0:	f893 39da 	ldrb.w	r3, [r3, #2522]	; 0x9da
 80117f4:	b9fb      	cbnz	r3, 8011836 <SerialFlashFSM+0x496>
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80117f6:	4b3d      	ldr	r3, [pc, #244]	; (80118ec <SerialFlashFSM+0x54c>)
 80117f8:	2200      	movs	r2, #0
 80117fa:	f242 114f 	movw	r1, #8527	; 0x214f
 80117fe:	545a      	strb	r2, [r3, r1]
					FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 8011800:	f242 1151 	movw	r1, #8529	; 0x2151
 8011804:	545a      	strb	r2, [r3, r1]
					break;
 8011806:	e066      	b.n	80118d6 <SerialFlashFSM+0x536>
						FlashStr.u8BufferQueueCounts = 0;
 8011808:	4c38      	ldr	r4, [pc, #224]	; (80118ec <SerialFlashFSM+0x54c>)
 801180a:	2300      	movs	r3, #0
 801180c:	7523      	strb	r3, [r4, #20]
						enqueue(&gsmPayload,(char *)getSFlashDataString((char *)FlashStr.cSFlashTransmitData, strlen(FlashStr.cSFlashTransmitData) + 10));
 801180e:	f104 0516 	add.w	r5, r4, #22
 8011812:	4628      	mov	r0, r5
 8011814:	f7ee fcf6 	bl	8000204 <strlen>
 8011818:	f100 010a 	add.w	r1, r0, #10
 801181c:	b289      	uxth	r1, r1
 801181e:	4628      	mov	r0, r5
 8011820:	f7ff fd92 	bl	8011348 <getSFlashDataString>
 8011824:	4601      	mov	r1, r0
 8011826:	4838      	ldr	r0, [pc, #224]	; (8011908 <SerialFlashFSM+0x568>)
 8011828:	f7fe f988 	bl	800fb3c <enqueue>
						FlashStr.bitFlagSFlashData = 1;
 801182c:	f242 134c 	movw	r3, #8524	; 0x214c
 8011830:	2201      	movs	r2, #1
 8011832:	54e2      	strb	r2, [r4, r3]
 8011834:	e7d6      	b.n	80117e4 <SerialFlashFSM+0x444>
						  enqueue(&gsmPayload,(char *)getSFlashDataString((char *)FlashStr.cSFlashHalfReadData, strlen((char *)FlashStr.cSFlashHalfReadData)));
 8011836:	4c35      	ldr	r4, [pc, #212]	; (801190c <SerialFlashFSM+0x56c>)
 8011838:	4620      	mov	r0, r4
 801183a:	f7ee fce3 	bl	8000204 <strlen>
 801183e:	b281      	uxth	r1, r0
 8011840:	4620      	mov	r0, r4
 8011842:	f7ff fd81 	bl	8011348 <getSFlashDataString>
 8011846:	4601      	mov	r1, r0
 8011848:	482f      	ldr	r0, [pc, #188]	; (8011908 <SerialFlashFSM+0x568>)
 801184a:	f7fe f977 	bl	800fb3c <enqueue>
						  FlashStr.bitFlagSFlashData = 1;
 801184e:	f6a4 14da 	subw	r4, r4, #2522	; 0x9da
 8011852:	f242 134c 	movw	r3, #8524	; 0x214c
 8011856:	2201      	movs	r2, #1
 8011858:	54e2      	strb	r2, [r4, r3]
						  FlashStr.u8BufferQueueCounts++;
 801185a:	7d23      	ldrb	r3, [r4, #20]
 801185c:	4413      	add	r3, r2
 801185e:	7523      	strb	r3, [r4, #20]
 8011860:	e7c9      	b.n	80117f6 <SerialFlashFSM+0x456>
			  FlashStr.bitFlagReadInProgress = 0;
 8011862:	4e22      	ldr	r6, [pc, #136]	; (80118ec <SerialFlashFSM+0x54c>)
 8011864:	2500      	movs	r5, #0
 8011866:	f242 134d 	movw	r3, #8525	; 0x214d
 801186a:	54f5      	strb	r5, [r6, r3]
			  SFlash_Chip_Erase();
 801186c:	f7ff fd7a 	bl	8011364 <SFlash_Chip_Erase>
			  FlashStr.bitFlagMemoryFull = 0;
 8011870:	f242 134b 	movw	r3, #8523	; 0x214b
 8011874:	54f5      	strb	r5, [r6, r3]
			  FlashStr.u32FlashWriteAddress = 0;
 8011876:	6035      	str	r5, [r6, #0]
			  memset(strI2cEeprom.pu8SFlashWriteMemLocAddress, 0x0, 5);
 8011878:	4c25      	ldr	r4, [pc, #148]	; (8011910 <SerialFlashFSM+0x570>)
 801187a:	6025      	str	r5, [r4, #0]
			  strI2cEeprom.pu8SFlashWriteMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 24);
 801187c:	70a5      	strb	r5, [r4, #2]
			  strI2cEeprom.pu8SFlashWriteMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashWriteAddress);
 801187e:	f804 5c01 	strb.w	r5, [r4, #-1]
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 288,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashWriteMemLocAddress,4);
 8011882:	4f1f      	ldr	r7, [pc, #124]	; (8011900 <SerialFlashFSM+0x560>)
 8011884:	f04f 0804 	mov.w	r8, #4
 8011888:	f8cd 8004 	str.w	r8, [sp, #4]
 801188c:	1e63      	subs	r3, r4, #1
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	2310      	movs	r3, #16
 8011892:	f44f 7290 	mov.w	r2, #288	; 0x120
 8011896:	21a0      	movs	r1, #160	; 0xa0
 8011898:	4638      	mov	r0, r7
 801189a:	f7f1 fd21 	bl	80032e0 <HAL_I2C_Mem_Write_IT>
			  HAL_Delay(100);
 801189e:	2064      	movs	r0, #100	; 0x64
 80118a0:	f7ef fc14 	bl	80010cc <HAL_Delay>
			  FlashStr.u32FlashReadAddress = 0;
 80118a4:	6075      	str	r5, [r6, #4]
			  memset(strI2cEeprom.pu8SFlashReadMemLocAddress, 0, sizeof(strI2cEeprom.pu8SFlashReadMemLocAddress)*sizeof(char));
 80118a6:	7225      	strb	r5, [r4, #8]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[3] = (uint8_t)(FlashStr.u32FlashReadAddress >> 24);
 80118a8:	71e5      	strb	r5, [r4, #7]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[2] = (uint8_t)(FlashStr.u32FlashReadAddress >> 16);
 80118aa:	71a5      	strb	r5, [r4, #6]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[1] = (uint8_t)(FlashStr.u32FlashReadAddress >> 8);
 80118ac:	7165      	strb	r5, [r4, #5]
			  strI2cEeprom.pu8SFlashReadMemLocAddress[0] = (uint8_t)(FlashStr.u32FlashReadAddress);
 80118ae:	7125      	strb	r5, [r4, #4]
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDRESS, 292,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&strI2cEeprom.pu8SFlashReadMemLocAddress,4);
 80118b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80118b4:	3404      	adds	r4, #4
 80118b6:	9400      	str	r4, [sp, #0]
 80118b8:	2310      	movs	r3, #16
 80118ba:	f44f 7292 	mov.w	r2, #292	; 0x124
 80118be:	21a0      	movs	r1, #160	; 0xa0
 80118c0:	4638      	mov	r0, r7
 80118c2:	f7f1 fd0d 	bl	80032e0 <HAL_I2C_Mem_Write_IT>
			  HAL_Delay(10);
 80118c6:	200a      	movs	r0, #10
 80118c8:	f7ef fc00 	bl	80010cc <HAL_Delay>
			  FlashStr.u32SerialFlashDelay = TWO_MIN;
 80118cc:	4b11      	ldr	r3, [pc, #68]	; (8011914 <SerialFlashFSM+0x574>)
 80118ce:	6133      	str	r3, [r6, #16]
			  FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80118d0:	f242 134f 	movw	r3, #8527	; 0x214f
 80118d4:	54f5      	strb	r5, [r6, r3]
}
 80118d6:	b004      	add	sp, #16
 80118d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80118dc:	4a03      	ldr	r2, [pc, #12]	; (80118ec <SerialFlashFSM+0x54c>)
 80118de:	f242 134f 	movw	r3, #8527	; 0x214f
 80118e2:	2100      	movs	r1, #0
 80118e4:	54d1      	strb	r1, [r2, r3]
			break;
 80118e6:	e7f6      	b.n	80118d6 <SerialFlashFSM+0x536>
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	2000f154 	.word	0x2000f154
 80118f0:	20004270 	.word	0x20004270
 80118f4:	200112ac 	.word	0x200112ac
 80118f8:	200108da 	.word	0x200108da
 80118fc:	20007bb8 	.word	0x20007bb8
 8011900:	2000d304 	.word	0x2000d304
 8011904:	2000f16a 	.word	0x2000f16a
 8011908:	2000d2d4 	.word	0x2000d2d4
 801190c:	2000fb2e 	.word	0x2000fb2e
 8011910:	20008891 	.word	0x20008891
 8011914:	0001d4c0 	.word	0x0001d4c0

08011918 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011918:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 801191a:	480d      	ldr	r0, [pc, #52]	; (8011950 <MX_SPI1_Init+0x38>)
 801191c:	4b0d      	ldr	r3, [pc, #52]	; (8011954 <MX_SPI1_Init+0x3c>)
 801191e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011920:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011924:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011926:	2300      	movs	r3, #0
 8011928:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801192a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801192c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801192e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011934:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011936:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011938:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801193a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801193c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801193e:	230a      	movs	r3, #10
 8011940:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011942:	f7f3 faff 	bl	8004f44 <HAL_SPI_Init>
 8011946:	b900      	cbnz	r0, 801194a <MX_SPI1_Init+0x32>
  {
    Error_Handler();
  }

}
 8011948:	bd08      	pop	{r3, pc}
    Error_Handler();
 801194a:	f7fc fbef 	bl	800e12c <Error_Handler>
}
 801194e:	e7fb      	b.n	8011948 <MX_SPI1_Init+0x30>
 8011950:	200112ac 	.word	0x200112ac
 8011954:	40013000 	.word	0x40013000

08011958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011958:	b510      	push	{r4, lr}
 801195a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801195c:	2300      	movs	r3, #0
 801195e:	9303      	str	r3, [sp, #12]
 8011960:	9304      	str	r3, [sp, #16]
 8011962:	9305      	str	r3, [sp, #20]
 8011964:	9306      	str	r3, [sp, #24]
 8011966:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8011968:	6802      	ldr	r2, [r0, #0]
 801196a:	4b19      	ldr	r3, [pc, #100]	; (80119d0 <HAL_SPI_MspInit+0x78>)
 801196c:	429a      	cmp	r2, r3
 801196e:	d001      	beq.n	8011974 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8011970:	b008      	add	sp, #32
 8011972:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011974:	2400      	movs	r4, #0
 8011976:	9401      	str	r4, [sp, #4]
 8011978:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 801197c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801197e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011982:	645a      	str	r2, [r3, #68]	; 0x44
 8011984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011986:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801198a:	9201      	str	r2, [sp, #4]
 801198c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801198e:	9402      	str	r4, [sp, #8]
 8011990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011992:	f042 0202 	orr.w	r2, r2, #2
 8011996:	631a      	str	r2, [r3, #48]	; 0x30
 8011998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801199a:	f003 0302 	and.w	r3, r3, #2
 801199e:	9302      	str	r3, [sp, #8]
 80119a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80119a2:	2338      	movs	r3, #56	; 0x38
 80119a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119a6:	2302      	movs	r3, #2
 80119a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119aa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80119ac:	2303      	movs	r3, #3
 80119ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80119b0:	2305      	movs	r3, #5
 80119b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80119b4:	a903      	add	r1, sp, #12
 80119b6:	4807      	ldr	r0, [pc, #28]	; (80119d4 <HAL_SPI_MspInit+0x7c>)
 80119b8:	f7f1 f91c 	bl	8002bf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80119bc:	4622      	mov	r2, r4
 80119be:	4621      	mov	r1, r4
 80119c0:	2023      	movs	r0, #35	; 0x23
 80119c2:	f7ef ffc3 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80119c6:	2023      	movs	r0, #35	; 0x23
 80119c8:	f7ef fff4 	bl	80019b4 <HAL_NVIC_EnableIRQ>
}
 80119cc:	e7d0      	b.n	8011970 <HAL_SPI_MspInit+0x18>
 80119ce:	bf00      	nop
 80119d0:	40013000 	.word	0x40013000
 80119d4:	40020400 	.word	0x40020400

080119d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80119d8:	b510      	push	{r4, lr}
 80119da:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80119dc:	2400      	movs	r4, #0
 80119de:	9400      	str	r4, [sp, #0]
 80119e0:	4b12      	ldr	r3, [pc, #72]	; (8011a2c <HAL_MspInit+0x54>)
 80119e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80119e8:	645a      	str	r2, [r3, #68]	; 0x44
 80119ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119ec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80119f0:	9200      	str	r2, [sp, #0]
 80119f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80119f4:	9401      	str	r4, [sp, #4]
 80119f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80119fc:	641a      	str	r2, [r3, #64]	; 0x40
 80119fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 1, 0);
 8011a08:	4622      	mov	r2, r4
 8011a0a:	2101      	movs	r1, #1
 8011a0c:	2004      	movs	r0, #4
 8011a0e:	f7ef ff9d 	bl	800194c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8011a12:	2004      	movs	r0, #4
 8011a14:	f7ef ffce 	bl	80019b4 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8011a18:	4622      	mov	r2, r4
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	2005      	movs	r0, #5
 8011a1e:	f7ef ff95 	bl	800194c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8011a22:	2005      	movs	r0, #5
 8011a24:	f7ef ffc6 	bl	80019b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011a28:	b002      	add	sp, #8
 8011a2a:	bd10      	pop	{r4, pc}
 8011a2c:	40023800 	.word	0x40023800

08011a30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011a30:	4770      	bx	lr

08011a32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011a32:	e7fe      	b.n	8011a32 <HardFault_Handler>

08011a34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011a34:	e7fe      	b.n	8011a34 <MemManage_Handler>

08011a36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011a36:	e7fe      	b.n	8011a36 <BusFault_Handler>

08011a38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011a38:	e7fe      	b.n	8011a38 <UsageFault_Handler>

08011a3a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011a3a:	4770      	bx	lr

08011a3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011a3c:	4770      	bx	lr

08011a3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011a3e:	4770      	bx	lr

08011a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011a42:	f7ef fb31 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011a46:	bd08      	pop	{r3, pc}

08011a48 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8011a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8011a4a:	4802      	ldr	r0, [pc, #8]	; (8011a54 <RTC_WKUP_IRQHandler+0xc>)
 8011a4c:	f7f3 f996 	bl	8004d7c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8011a50:	bd08      	pop	{r3, pc}
 8011a52:	bf00      	nop
 8011a54:	2000f10c 	.word	0x2000f10c

08011a58 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8011a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8011a5a:	f7f0 fef9 	bl	8002850 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8011a5e:	bd08      	pop	{r3, pc}

08011a60 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8011a60:	4770      	bx	lr
	...

08011a64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8011a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8011a66:	4802      	ldr	r0, [pc, #8]	; (8011a70 <ADC_IRQHandler+0xc>)
 8011a68:	f7ef fd9f 	bl	80015aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8011a6c:	bd08      	pop	{r3, pc}
 8011a6e:	bf00      	nop
 8011a70:	20007a1c 	.word	0x20007a1c

08011a74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8011a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8011a76:	4802      	ldr	r0, [pc, #8]	; (8011a80 <I2C1_EV_IRQHandler+0xc>)
 8011a78:	f7f2 f97e 	bl	8003d78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8011a7c:	bd08      	pop	{r3, pc}
 8011a7e:	bf00      	nop
 8011a80:	2000d304 	.word	0x2000d304

08011a84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8011a84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8011a86:	4802      	ldr	r0, [pc, #8]	; (8011a90 <I2C1_ER_IRQHandler+0xc>)
 8011a88:	f7f2 fa3c 	bl	8003f04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8011a8c:	bd08      	pop	{r3, pc}
 8011a8e:	bf00      	nop
 8011a90:	2000d304 	.word	0x2000d304

08011a94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8011a94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8011a96:	4802      	ldr	r0, [pc, #8]	; (8011aa0 <SPI1_IRQHandler+0xc>)
 8011a98:	f7f3 fd32 	bl	8005500 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8011a9c:	bd08      	pop	{r3, pc}
 8011a9e:	bf00      	nop
 8011aa0:	200112ac 	.word	0x200112ac

08011aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8011aa4:	b510      	push	{r4, lr}
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8011aa6:	4b24      	ldr	r3, [pc, #144]	; (8011b38 <USART3_IRQHandler+0x94>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART3)!=RESET)
 8011aaa:	f013 0f20 	tst.w	r3, #32
 8011aae:	d114      	bne.n	8011ada <USART3_IRQHandler+0x36>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8011ab0:	4b21      	ldr	r3, [pc, #132]	; (8011b38 <USART3_IRQHandler+0x94>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
	{
	/* RXNE flag will be cleared by reading of RDR register (done in call) */
	/* Call function in charge of handling Character reception */
		MODBUS_CharReception_Callback();
	}
	else if(LL_USART_IsActiveFlag_TC(USART3)!=RESET)
 8011ab4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011ab8:	d011      	beq.n	8011ade <USART3_IRQHandler+0x3a>
	{
		if(u8MBQueryCharacterCounter <= 7)
 8011aba:	4b20      	ldr	r3, [pc, #128]	; (8011b3c <USART3_IRQHandler+0x98>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	2b07      	cmp	r3, #7
 8011ac2:	d80d      	bhi.n	8011ae0 <USART3_IRQHandler+0x3c>
		{
			LL_USART_TransmitData8(USART3,master.u8QueryFrame[u8MBQueryCharacterCounter++]);
 8011ac4:	4b1d      	ldr	r3, [pc, #116]	; (8011b3c <USART3_IRQHandler+0x98>)
 8011ac6:	7819      	ldrb	r1, [r3, #0]
 8011ac8:	1c4a      	adds	r2, r1, #1
 8011aca:	b2d2      	uxtb	r2, r2
 8011acc:	701a      	strb	r2, [r3, #0]
 8011ace:	4b1c      	ldr	r3, [pc, #112]	; (8011b40 <USART3_IRQHandler+0x9c>)
 8011ad0:	440b      	add	r3, r1
 8011ad2:	785a      	ldrb	r2, [r3, #1]
  USARTx->DR = Value;
 8011ad4:	4b18      	ldr	r3, [pc, #96]	; (8011b38 <USART3_IRQHandler+0x94>)
 8011ad6:	605a      	str	r2, [r3, #4]
}
 8011ad8:	e001      	b.n	8011ade <USART3_IRQHandler+0x3a>
		MODBUS_CharReception_Callback();
 8011ada:	f7ff faf5 	bl	80110c8 <MODBUS_CharReception_Callback>
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8011ade:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_RE_Pin,GPIO_PIN_RESET);
 8011ae0:	4c18      	ldr	r4, [pc, #96]	; (8011b44 <USART3_IRQHandler+0xa0>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f7f1 f975 	bl	8002dd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MB_RE_GPIO_Port,MB_DE_Pin,GPIO_PIN_RESET);
 8011aee:	2200      	movs	r2, #0
 8011af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011af4:	4620      	mov	r0, r4
 8011af6:	f7f1 f96f 	bl	8002dd8 <HAL_GPIO_WritePin>
			u8MBQueryCharacterCounter = 0;
 8011afa:	2200      	movs	r2, #0
 8011afc:	4b0f      	ldr	r3, [pc, #60]	; (8011b3c <USART3_IRQHandler+0x98>)
 8011afe:	701a      	strb	r2, [r3, #0]
			master.u8MBResponseCharacterCounter = 0;
 8011b00:	4b0f      	ldr	r3, [pc, #60]	; (8011b40 <USART3_IRQHandler+0x9c>)
 8011b02:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
			modbusState = enmMODBBUS_AWAIT_RESPONSE;
 8011b06:	4a10      	ldr	r2, [pc, #64]	; (8011b48 <USART3_IRQHandler+0xa4>)
 8011b08:	2102      	movs	r1, #2
 8011b0a:	7011      	strb	r1, [r2, #0]
			gu32ModbusResponseTimeout = THREE_SEC;
 8011b0c:	4a0f      	ldr	r2, [pc, #60]	; (8011b4c <USART3_IRQHandler+0xa8>)
 8011b0e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8011b12:	6011      	str	r1, [r2, #0]
			gu8MBFrameTransmittedFlag = 1;
 8011b14:	4a0e      	ldr	r2, [pc, #56]	; (8011b50 <USART3_IRQHandler+0xac>)
 8011b16:	2101      	movs	r1, #1
 8011b18:	7011      	strb	r1, [r2, #0]
			master.u32PollDelay = ONE_SEC;
 8011b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011b1e:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8011b22:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <USART3_IRQHandler+0x94>)
 8011b24:	68da      	ldr	r2, [r3, #12]
 8011b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8011b2c:	68da      	ldr	r2, [r3, #12]
 8011b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011b32:	60da      	str	r2, [r3, #12]
}
 8011b34:	e7d3      	b.n	8011ade <USART3_IRQHandler+0x3a>
 8011b36:	bf00      	nop
 8011b38:	40004800 	.word	0x40004800
 8011b3c:	2000361c 	.word	0x2000361c
 8011b40:	2000d3a0 	.word	0x2000d3a0
 8011b44:	40021000 	.word	0x40021000
 8011b48:	20003611 	.word	0x20003611
 8011b4c:	20003624 	.word	0x20003624
 8011b50:	20003aec 	.word	0x20003aec

08011b54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8011b54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8011b56:	4802      	ldr	r0, [pc, #8]	; (8011b60 <RTC_Alarm_IRQHandler+0xc>)
 8011b58:	f7f2 ff00 	bl	800495c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8011b5c:	bd08      	pop	{r3, pc}
 8011b5e:	bf00      	nop
 8011b60:	2000f10c 	.word	0x2000f10c

08011b64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8011b64:	b508      	push	{r3, lr}
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8011b66:	4b04      	ldr	r3, [pc, #16]	; (8011b78 <UART4_IRQHandler+0x14>)
 8011b68:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(UART4)!=RESET)
 8011b6a:	f013 0f20 	tst.w	r3, #32
 8011b6e:	d100      	bne.n	8011b72 <UART4_IRQHandler+0xe>
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8011b70:	bd08      	pop	{r3, pc}
		GSM_CharReception_Callback();
 8011b72:	f7ff fa87 	bl	8011084 <GSM_CharReception_Callback>
}
 8011b76:	e7fb      	b.n	8011b70 <UART4_IRQHandler+0xc>
 8011b78:	40004c00 	.word	0x40004c00

08011b7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8011b7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8011b7e:	4802      	ldr	r0, [pc, #8]	; (8011b88 <TIM7_IRQHandler+0xc>)
 8011b80:	f7f3 fd6d 	bl	800565e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8011b84:	bd08      	pop	{r3, pc}
 8011b86:	bf00      	nop
 8011b88:	20011304 	.word	0x20011304

08011b8c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8011b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011b8e:	4802      	ldr	r0, [pc, #8]	; (8011b98 <DMA2_Stream4_IRQHandler+0xc>)
 8011b90:	f7f0 f8b2 	bl	8001cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8011b94:	bd08      	pop	{r3, pc}
 8011b96:	bf00      	nop
 8011b98:	20007a64 	.word	0x20007a64

08011b9c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8011b9c:	2001      	movs	r0, #1
 8011b9e:	4770      	bx	lr

08011ba0 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8011ba0:	4b02      	ldr	r3, [pc, #8]	; (8011bac <_kill+0xc>)
 8011ba2:	2216      	movs	r2, #22
 8011ba4:	601a      	str	r2, [r3, #0]
	return -1;
}
 8011ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8011baa:	4770      	bx	lr
 8011bac:	20011374 	.word	0x20011374

08011bb0 <_exit>:

void _exit (int status)
{
 8011bb0:	b508      	push	{r3, lr}
	_kill(status, -1);
 8011bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8011bb6:	f7ff fff3 	bl	8011ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8011bba:	e7fe      	b.n	8011bba <_exit+0xa>

08011bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011bc2:	2500      	movs	r5, #0
 8011bc4:	42b5      	cmp	r5, r6
 8011bc6:	da07      	bge.n	8011bd8 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8011bc8:	f3af 8000 	nop.w
 8011bcc:	4621      	mov	r1, r4
 8011bce:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011bd2:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8011bd4:	460c      	mov	r4, r1
 8011bd6:	e7f5      	b.n	8011bc4 <_read+0x8>
	}

return len;
}
 8011bd8:	4630      	mov	r0, r6
 8011bda:	bd70      	pop	{r4, r5, r6, pc}

08011bdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011bdc:	b570      	push	{r4, r5, r6, lr}
 8011bde:	460c      	mov	r4, r1
 8011be0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011be2:	2500      	movs	r5, #0
 8011be4:	42b5      	cmp	r5, r6
 8011be6:	da05      	bge.n	8011bf4 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8011be8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011bec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011bf0:	3501      	adds	r5, #1
 8011bf2:	e7f7      	b.n	8011be4 <_write+0x8>
	}
	return len;
}
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	bd70      	pop	{r4, r5, r6, pc}

08011bf8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8011bf8:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011bfa:	4a0b      	ldr	r2, [pc, #44]	; (8011c28 <_sbrk+0x30>)
 8011bfc:	6812      	ldr	r2, [r2, #0]
 8011bfe:	b142      	cbz	r2, 8011c12 <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 8011c00:	4a09      	ldr	r2, [pc, #36]	; (8011c28 <_sbrk+0x30>)
 8011c02:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8011c04:	4403      	add	r3, r0
 8011c06:	466a      	mov	r2, sp
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d806      	bhi.n	8011c1a <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8011c0c:	4a06      	ldr	r2, [pc, #24]	; (8011c28 <_sbrk+0x30>)
 8011c0e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8011c10:	4770      	bx	lr
		heap_end = &end;
 8011c12:	4a05      	ldr	r2, [pc, #20]	; (8011c28 <_sbrk+0x30>)
 8011c14:	4905      	ldr	r1, [pc, #20]	; (8011c2c <_sbrk+0x34>)
 8011c16:	6011      	str	r1, [r2, #0]
 8011c18:	e7f2      	b.n	8011c00 <_sbrk+0x8>
		errno = ENOMEM;
 8011c1a:	4b05      	ldr	r3, [pc, #20]	; (8011c30 <_sbrk+0x38>)
 8011c1c:	220c      	movs	r2, #12
 8011c1e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8011c20:	f04f 30ff 	mov.w	r0, #4294967295
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop
 8011c28:	20004274 	.word	0x20004274
 8011c2c:	20011388 	.word	0x20011388
 8011c30:	20011374 	.word	0x20011374

08011c34 <_close>:

int _close(int file)
{
	return -1;
}
 8011c34:	f04f 30ff 	mov.w	r0, #4294967295
 8011c38:	4770      	bx	lr

08011c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8011c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011c3e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8011c40:	2000      	movs	r0, #0
 8011c42:	4770      	bx	lr

08011c44 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8011c44:	2001      	movs	r0, #1
 8011c46:	4770      	bx	lr

08011c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8011c48:	2000      	movs	r0, #0
 8011c4a:	4770      	bx	lr

08011c4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011c4c:	490f      	ldr	r1, [pc, #60]	; (8011c8c <SystemInit+0x40>)
 8011c4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8011c52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011c5a:	4b0d      	ldr	r3, [pc, #52]	; (8011c90 <SystemInit+0x44>)
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	f042 0201 	orr.w	r2, r2, #1
 8011c62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011c64:	2000      	movs	r0, #0
 8011c66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8011c6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011c72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011c74:	4a07      	ldr	r2, [pc, #28]	; (8011c94 <SystemInit+0x48>)
 8011c76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011c7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011c80:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011c82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011c86:	608b      	str	r3, [r1, #8]
#endif
}
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	e000ed00 	.word	0xe000ed00
 8011c90:	40023800 	.word	0x40023800
 8011c94:	24003010 	.word	0x24003010

08011c98 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8011c98:	b500      	push	{lr}
 8011c9a:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	9301      	str	r3, [sp, #4]

  htim7.Instance = TIM7;
 8011ca2:	480f      	ldr	r0, [pc, #60]	; (8011ce0 <MX_TIM7_Init+0x48>)
 8011ca4:	4a0f      	ldr	r2, [pc, #60]	; (8011ce4 <MX_TIM7_Init+0x4c>)
 8011ca6:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 1;
 8011ca8:	2201      	movs	r2, #1
 8011caa:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011cac:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 44999;
 8011cae:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8011cb2:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011cb4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8011cb6:	f7f3 fdf3 	bl	80058a0 <HAL_TIM_Base_Init>
 8011cba:	b950      	cbnz	r0, 8011cd2 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011cc0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8011cc2:	4669      	mov	r1, sp
 8011cc4:	4806      	ldr	r0, [pc, #24]	; (8011ce0 <MX_TIM7_Init+0x48>)
 8011cc6:	f7f3 fe05 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8011cca:	b928      	cbnz	r0, 8011cd8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
  }

}
 8011ccc:	b003      	add	sp, #12
 8011cce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011cd2:	f7fc fa2b 	bl	800e12c <Error_Handler>
 8011cd6:	e7f1      	b.n	8011cbc <MX_TIM7_Init+0x24>
    Error_Handler();
 8011cd8:	f7fc fa28 	bl	800e12c <Error_Handler>
}
 8011cdc:	e7f6      	b.n	8011ccc <MX_TIM7_Init+0x34>
 8011cde:	bf00      	nop
 8011ce0:	20011304 	.word	0x20011304
 8011ce4:	40001400 	.word	0x40001400

08011ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM7)
 8011ce8:	6802      	ldr	r2, [r0, #0]
 8011cea:	4b0e      	ldr	r3, [pc, #56]	; (8011d24 <HAL_TIM_Base_MspInit+0x3c>)
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d000      	beq.n	8011cf2 <HAL_TIM_Base_MspInit+0xa>
 8011cf0:	4770      	bx	lr
{
 8011cf2:	b500      	push	{lr}
 8011cf4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	9201      	str	r2, [sp, #4]
 8011cfa:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8011cfe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011d00:	f041 0120 	orr.w	r1, r1, #32
 8011d04:	6419      	str	r1, [r3, #64]	; 0x40
 8011d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d08:	f003 0320 	and.w	r3, r3, #32
 8011d0c:	9301      	str	r3, [sp, #4]
 8011d0e:	9b01      	ldr	r3, [sp, #4]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8011d10:	2101      	movs	r1, #1
 8011d12:	2037      	movs	r0, #55	; 0x37
 8011d14:	f7ef fe1a 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8011d18:	2037      	movs	r0, #55	; 0x37
 8011d1a:	f7ef fe4b 	bl	80019b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8011d1e:	b003      	add	sp, #12
 8011d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d24:	40001400 	.word	0x40001400

08011d28 <MX_UART4_Init>:
#include "externs.h"
/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8011d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2c:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8011d2e:	2400      	movs	r4, #0
 8011d30:	9409      	str	r4, [sp, #36]	; 0x24
 8011d32:	940a      	str	r4, [sp, #40]	; 0x28
 8011d34:	940b      	str	r4, [sp, #44]	; 0x2c
 8011d36:	940c      	str	r4, [sp, #48]	; 0x30
 8011d38:	940d      	str	r4, [sp, #52]	; 0x34
 8011d3a:	940e      	str	r4, [sp, #56]	; 0x38
 8011d3c:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8011d3e:	4b3b      	ldr	r3, [pc, #236]	; (8011e2c <MX_UART4_Init+0x104>)
 8011d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011d42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011d46:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8011d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011d4a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8011d4e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8011d50:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d54:	f042 0201 	orr.w	r2, r2, #1
 8011d58:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d5c:	f002 0201 	and.w	r2, r2, #1
 8011d60:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8011d62:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d66:	f042 0204 	orr.w	r2, r2, #4
 8011d6a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d6e:	f003 0304 	and.w	r3, r3, #4
 8011d72:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8011d74:	9b00      	ldr	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
  /**UART4 GPIO Configuration
  PA0/WKUP   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8011d76:	2501      	movs	r5, #1
 8011d78:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011d7a:	f04f 0802 	mov.w	r8, #2
 8011d7e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011d82:	2703      	movs	r7, #3
 8011d84:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011d86:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8011d88:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8011d8a:	2608      	movs	r6, #8
 8011d8c:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d8e:	a903      	add	r1, sp, #12
 8011d90:	4827      	ldr	r0, [pc, #156]	; (8011e30 <MX_UART4_Init+0x108>)
 8011d92:	f7f3 fdc4 	bl	800591e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8011d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d9a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011d9c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011da0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011da2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8011da4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8011da6:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011da8:	a903      	add	r1, sp, #12
 8011daa:	4822      	ldr	r0, [pc, #136]	; (8011e34 <MX_UART4_Init+0x10c>)
 8011dac:	f7f3 fdb7 	bl	800591e <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011db0:	4b21      	ldr	r3, [pc, #132]	; (8011e38 <MX_UART4_Init+0x110>)
 8011db2:	68da      	ldr	r2, [r3, #12]
 8011db4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011db8:	f1c2 0307 	rsb	r3, r2, #7
 8011dbc:	2b04      	cmp	r3, #4
 8011dbe:	bf28      	it	cs
 8011dc0:	2304      	movcs	r3, #4
 8011dc2:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011dc4:	1d13      	adds	r3, r2, #4
 8011dc6:	2b06      	cmp	r3, #6
 8011dc8:	d92e      	bls.n	8011e28 <MX_UART4_Init+0x100>
 8011dca:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd0:	408b      	lsls	r3, r1
 8011dd2:	43db      	mvns	r3, r3
 8011dd4:	f003 0303 	and.w	r3, r3, #3
 8011dd8:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011dda:	011b      	lsls	r3, r3, #4
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	4a17      	ldr	r2, [pc, #92]	; (8011e3c <MX_UART4_Init+0x114>)
 8011de0:	f882 3334 	strb.w	r3, [r2, #820]	; 0x334
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011de4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011de8:	6053      	str	r3, [r2, #4]

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
  NVIC_EnableIRQ(UART4_IRQn);

  USART_InitStruct.BaudRate = 115200;
 8011dea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8011dee:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8011df0:	2300      	movs	r3, #0
 8011df2:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8011df4:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8011df6:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8011df8:	220c      	movs	r2, #12
 8011dfa:	920d      	str	r2, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8011dfc:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8011dfe:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(UART4, &USART_InitStruct);
 8011e00:	4c0f      	ldr	r4, [pc, #60]	; (8011e40 <MX_UART4_Init+0x118>)
 8011e02:	a909      	add	r1, sp, #36	; 0x24
 8011e04:	4620      	mov	r0, r4
 8011e06:	f7f3 fe95 	bl	8005b34 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011e0a:	6923      	ldr	r3, [r4, #16]
 8011e0c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8011e10:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8011e12:	6963      	ldr	r3, [r4, #20]
 8011e14:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8011e18:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8011e1a:	68e3      	ldr	r3, [r4, #12]
 8011e1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011e20:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(UART4);
  LL_USART_Enable(UART4);

}
 8011e22:	b010      	add	sp, #64	; 0x40
 8011e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011e28:	2200      	movs	r2, #0
 8011e2a:	e7cf      	b.n	8011dcc <MX_UART4_Init+0xa4>
 8011e2c:	40023800 	.word	0x40023800
 8011e30:	40020000 	.word	0x40020000
 8011e34:	40020800 	.word	0x40020800
 8011e38:	e000ed00 	.word	0xe000ed00
 8011e3c:	e000e100 	.word	0xe000e100
 8011e40:	40004c00 	.word	0x40004c00

08011e44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8011e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e48:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8011e4a:	2400      	movs	r4, #0
 8011e4c:	9409      	str	r4, [sp, #36]	; 0x24
 8011e4e:	940a      	str	r4, [sp, #40]	; 0x28
 8011e50:	940b      	str	r4, [sp, #44]	; 0x2c
 8011e52:	940c      	str	r4, [sp, #48]	; 0x30
 8011e54:	940d      	str	r4, [sp, #52]	; 0x34
 8011e56:	940e      	str	r4, [sp, #56]	; 0x38
 8011e58:	940f      	str	r4, [sp, #60]	; 0x3c
  SET_BIT(RCC->APB1ENR, Periphs);
 8011e5a:	4b3b      	ldr	r3, [pc, #236]	; (8011f48 <MX_USART3_UART_Init+0x104>)
 8011e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011e62:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8011e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e66:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8011e6a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8011e6c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e70:	f042 0202 	orr.w	r2, r2, #2
 8011e74:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e78:	f002 0202 	and.w	r2, r2, #2
 8011e7c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8011e7e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e82:	f042 0208 	orr.w	r2, r2, #8
 8011e86:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e8a:	f003 0308 	and.w	r3, r3, #8
 8011e8e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8011e90:	9b00      	ldr	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PD9   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8011e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e96:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011e98:	f04f 0802 	mov.w	r8, #2
 8011e9c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011ea0:	2703      	movs	r7, #3
 8011ea2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011ea4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8011ea6:	2601      	movs	r6, #1
 8011ea8:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8011eaa:	2507      	movs	r5, #7
 8011eac:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011eae:	a903      	add	r1, sp, #12
 8011eb0:	4826      	ldr	r0, [pc, #152]	; (8011f4c <MX_USART3_UART_Init+0x108>)
 8011eb2:	f7f3 fd34 	bl	800591e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8011eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011eba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8011ebc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8011ec0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8011ec2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8011ec4:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8011ec6:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011ec8:	a903      	add	r1, sp, #12
 8011eca:	4821      	ldr	r0, [pc, #132]	; (8011f50 <MX_USART3_UART_Init+0x10c>)
 8011ecc:	f7f3 fd27 	bl	800591e <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ed0:	4b20      	ldr	r3, [pc, #128]	; (8011f54 <MX_USART3_UART_Init+0x110>)
 8011ed2:	68da      	ldr	r2, [r3, #12]
 8011ed4:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011ed8:	1aab      	subs	r3, r5, r2
 8011eda:	2b04      	cmp	r3, #4
 8011edc:	bf28      	it	cs
 8011ede:	2304      	movcs	r3, #4
 8011ee0:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011ee2:	1d13      	adds	r3, r2, #4
 8011ee4:	2b06      	cmp	r3, #6
 8011ee6:	d92d      	bls.n	8011f44 <MX_USART3_UART_Init+0x100>
 8011ee8:	3a03      	subs	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011eea:	f04f 33ff 	mov.w	r3, #4294967295
 8011eee:	408b      	lsls	r3, r1
 8011ef0:	43db      	mvns	r3, r3
 8011ef2:	f003 0304 	and.w	r3, r3, #4
 8011ef6:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ef8:	011b      	lsls	r3, r3, #4
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	4a16      	ldr	r2, [pc, #88]	; (8011f58 <MX_USART3_UART_Init+0x114>)
 8011efe:	f882 3327 	strb.w	r3, [r2, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f02:	2380      	movs	r3, #128	; 0x80
 8011f04:	6053      	str	r3, [r2, #4]

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
  NVIC_EnableIRQ(USART3_IRQn);

  USART_InitStruct.BaudRate = 9600;
 8011f06:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8011f0a:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8011f10:	930b      	str	r3, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8011f12:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8011f14:	220c      	movs	r2, #12
 8011f16:	920d      	str	r2, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8011f18:	930e      	str	r3, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8011f1a:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(USART3, &USART_InitStruct);
 8011f1c:	4c0f      	ldr	r4, [pc, #60]	; (8011f5c <MX_USART3_UART_Init+0x118>)
 8011f1e:	a909      	add	r1, sp, #36	; 0x24
 8011f20:	4620      	mov	r0, r4
 8011f22:	f7f3 fe07 	bl	8005b34 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f26:	6923      	ldr	r3, [r4, #16]
 8011f28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8011f2c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8011f2e:	6963      	ldr	r3, [r4, #20]
 8011f30:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8011f34:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8011f36:	68e3      	ldr	r3, [r4, #12]
 8011f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011f3c:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART3);
  LL_USART_Enable(USART3);

}
 8011f3e:	b010      	add	sp, #64	; 0x40
 8011f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011f44:	2200      	movs	r2, #0
 8011f46:	e7d0      	b.n	8011eea <MX_USART3_UART_Init+0xa6>
 8011f48:	40023800 	.word	0x40023800
 8011f4c:	40020400 	.word	0x40020400
 8011f50:	40020c00 	.word	0x40020c00
 8011f54:	e000ed00 	.word	0xe000ed00
 8011f58:	e000e100 	.word	0xe000e100
 8011f5c:	40004800 	.word	0x40004800

08011f60 <calculateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void calculateInputVoltage(void)
{
 8011f60:	b510      	push	{r4, lr}
 8011f62:	ed2d 8b02 	vpush	{d8}
	/* Calculate Input Votage from adc data */
//	gfInputSupplyVoltage = (float) ((MAX_INPUT_VTG * gau32BatteryProcessedData[ADC_VIN + 1])/ADC_RESOLUTION);
//	gfBatteryVoltage = ((((3.3 * ( 2 * gau32BatteryProcessedData[ADC_VIN])) / 4095) * 2 ) / 0.6 ) - 0.2;

	gfInputSupplyVoltage = (float)((gau32BatteryProcessedData[1] * 3.3) / 4095) * 10.1;
 8011f66:	4c28      	ldr	r4, [pc, #160]	; (8012008 <calculateInputVoltage+0xa8>)
 8011f68:	6860      	ldr	r0, [r4, #4]
 8011f6a:	f7ee faeb 	bl	8000544 <__aeabi_ui2d>
 8011f6e:	a320      	add	r3, pc, #128	; (adr r3, 8011ff0 <calculateInputVoltage+0x90>)
 8011f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f74:	f7ee fb60 	bl	8000638 <__aeabi_dmul>
 8011f78:	a31f      	add	r3, pc, #124	; (adr r3, 8011ff8 <calculateInputVoltage+0x98>)
 8011f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7e:	f7ee fc85 	bl	800088c <__aeabi_ddiv>
 8011f82:	f7ee fe51 	bl	8000c28 <__aeabi_d2f>
 8011f86:	f7ee faff 	bl	8000588 <__aeabi_f2d>
 8011f8a:	a31d      	add	r3, pc, #116	; (adr r3, 8012000 <calculateInputVoltage+0xa0>)
 8011f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f90:	f7ee fb52 	bl	8000638 <__aeabi_dmul>
 8011f94:	f7ee fe48 	bl	8000c28 <__aeabi_d2f>
 8011f98:	ee08 0a10 	vmov	s16, r0
 8011f9c:	60a0      	str	r0, [r4, #8]
	gfBatteryVoltage = (float)((gau32BatteryProcessedData[0] * 3.3) / 4095) * 1.5;
 8011f9e:	6820      	ldr	r0, [r4, #0]
 8011fa0:	f7ee fad0 	bl	8000544 <__aeabi_ui2d>
 8011fa4:	a312      	add	r3, pc, #72	; (adr r3, 8011ff0 <calculateInputVoltage+0x90>)
 8011fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011faa:	f7ee fb45 	bl	8000638 <__aeabi_dmul>
 8011fae:	a312      	add	r3, pc, #72	; (adr r3, 8011ff8 <calculateInputVoltage+0x98>)
 8011fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb4:	f7ee fc6a 	bl	800088c <__aeabi_ddiv>
 8011fb8:	f7ee fe36 	bl	8000c28 <__aeabi_d2f>
 8011fbc:	ee07 0a90 	vmov	s15, r0
 8011fc0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011fc8:	edc4 7a03 	vstr	s15, [r4, #12]
	/* Add diode drop for actual voltage */
//	gfInputSupplyVoltage += INPUT_DIODE_DROP;
	/* Check if system is powered from 8.4 V dc battery pack */
	if(gfInputSupplyVoltage <= VIN_BATTERY_VTG)
 8011fcc:	eef2 7a05 	vmov.f32	s15, #37	; 0x41280000  10.5
 8011fd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd8:	d804      	bhi.n	8011fe4 <calculateInputVoltage+0x84>
	{
		gu32InputSupplySwitchedAlert = TRUE;
 8011fda:	2201      	movs	r2, #1
 8011fdc:	6122      	str	r2, [r4, #16]
	}
	else
	{
		gu32InputSupplySwitchedAlert = FALSE;
	}
}
 8011fde:	ecbd 8b02 	vpop	{d8}
 8011fe2:	bd10      	pop	{r4, pc}
		gu32InputSupplySwitchedAlert = FALSE;
 8011fe4:	4b08      	ldr	r3, [pc, #32]	; (8012008 <calculateInputVoltage+0xa8>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	611a      	str	r2, [r3, #16]
}
 8011fea:	e7f8      	b.n	8011fde <calculateInputVoltage+0x7e>
 8011fec:	f3af 8000 	nop.w
 8011ff0:	66666666 	.word	0x66666666
 8011ff4:	400a6666 	.word	0x400a6666
 8011ff8:	00000000 	.word	0x00000000
 8011ffc:	40affe00 	.word	0x40affe00
 8012000:	33333333 	.word	0x33333333
 8012004:	40243333 	.word	0x40243333
 8012008:	2000427c 	.word	0x2000427c

0801200c <operateadc>:
{
 801200c:	b508      	push	{r3, lr}
	if(gu32ADCPollTimer)
 801200e:	4b34      	ldr	r3, [pc, #208]	; (80120e0 <operateadc+0xd4>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d150      	bne.n	80120b8 <operateadc+0xac>
	switch(enmAdcSMCurrentState)
 8012016:	4b33      	ldr	r3, [pc, #204]	; (80120e4 <operateadc+0xd8>)
 8012018:	7d1b      	ldrb	r3, [r3, #20]
 801201a:	2b03      	cmp	r3, #3
 801201c:	d857      	bhi.n	80120ce <operateadc+0xc2>
 801201e:	e8df f003 	tbb	[pc, r3]
 8012022:	1702      	.short	0x1702
 8012024:	444c      	.short	0x444c
			if((HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gau32BatteryPeripheralData, 2) != HAL_OK))
 8012026:	2202      	movs	r2, #2
 8012028:	492f      	ldr	r1, [pc, #188]	; (80120e8 <operateadc+0xdc>)
 801202a:	4830      	ldr	r0, [pc, #192]	; (80120ec <operateadc+0xe0>)
 801202c:	f7ef f9c8 	bl	80013c0 <HAL_ADC_Start_DMA>
 8012030:	b118      	cbz	r0, 801203a <operateadc+0x2e>
				enmAdcSMCurrentState = enmADC_ERROR;
 8012032:	4b2c      	ldr	r3, [pc, #176]	; (80120e4 <operateadc+0xd8>)
 8012034:	2203      	movs	r2, #3
 8012036:	751a      	strb	r2, [r3, #20]
 8012038:	e03e      	b.n	80120b8 <operateadc+0xac>
				HAL_ADC_Start_IT(&hadc1);
 801203a:	482c      	ldr	r0, [pc, #176]	; (80120ec <operateadc+0xe0>)
 801203c:	f7ef f920 	bl	8001280 <HAL_ADC_Start_IT>
				enmAdcSMCurrentState = enmADC_GETDATA;
 8012040:	4b28      	ldr	r3, [pc, #160]	; (80120e4 <operateadc+0xd8>)
 8012042:	2201      	movs	r2, #1
 8012044:	751a      	strb	r2, [r3, #20]
				gu32ADCOperationTimer = ONE_MIN;
 8012046:	4b2a      	ldr	r3, [pc, #168]	; (80120f0 <operateadc+0xe4>)
 8012048:	f64e 2260 	movw	r2, #60000	; 0xea60
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	e033      	b.n	80120b8 <operateadc+0xac>
			if((g32AdcConversionStatusBatt == TRUE) && (gu32ADCOperationTimer != 0))
 8012050:	4b24      	ldr	r3, [pc, #144]	; (80120e4 <operateadc+0xd8>)
 8012052:	6a1b      	ldr	r3, [r3, #32]
 8012054:	2b01      	cmp	r3, #1
 8012056:	d013      	beq.n	8012080 <operateadc+0x74>
			else if((!g32AdcConversionStatus) | (!g32AdcConversionStatusBatt) | (gu32ADCOperationTimer == 0))
 8012058:	4a22      	ldr	r2, [pc, #136]	; (80120e4 <operateadc+0xd8>)
 801205a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801205c:	6a13      	ldr	r3, [r2, #32]
 801205e:	fab3 f383 	clz	r3, r3
 8012062:	095b      	lsrs	r3, r3, #5
 8012064:	2900      	cmp	r1, #0
 8012066:	bf08      	it	eq
 8012068:	2301      	moveq	r3, #1
 801206a:	4a21      	ldr	r2, [pc, #132]	; (80120f0 <operateadc+0xe4>)
 801206c:	6812      	ldr	r2, [r2, #0]
 801206e:	fab2 f282 	clz	r2, r2
 8012072:	0952      	lsrs	r2, r2, #5
 8012074:	b9ab      	cbnz	r3, 80120a2 <operateadc+0x96>
 8012076:	b9a2      	cbnz	r2, 80120a2 <operateadc+0x96>
			HAL_ADC_Stop_DMA(&hadc1);
 8012078:	481c      	ldr	r0, [pc, #112]	; (80120ec <operateadc+0xe0>)
 801207a:	f7ef fa5f 	bl	800153c <HAL_ADC_Stop_DMA>
			break;
 801207e:	e01b      	b.n	80120b8 <operateadc+0xac>
			if((g32AdcConversionStatusBatt == TRUE) && (gu32ADCOperationTimer != 0))
 8012080:	4b1b      	ldr	r3, [pc, #108]	; (80120f0 <operateadc+0xe4>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d0e7      	beq.n	8012058 <operateadc+0x4c>
				gu32ADCOperationTimer = 0;
 8012088:	2200      	movs	r2, #0
 801208a:	4b19      	ldr	r3, [pc, #100]	; (80120f0 <operateadc+0xe4>)
 801208c:	601a      	str	r2, [r3, #0]
				gau32BatteryProcessedData[0] = gau32BatteryPeripheralData[0];
 801208e:	4b15      	ldr	r3, [pc, #84]	; (80120e4 <operateadc+0xd8>)
 8012090:	6999      	ldr	r1, [r3, #24]
 8012092:	6019      	str	r1, [r3, #0]
				gau32BatteryProcessedData[1] = gau32BatteryPeripheralData[1];
 8012094:	69d9      	ldr	r1, [r3, #28]
 8012096:	6059      	str	r1, [r3, #4]
				enmAdcSMCurrentState = enmADC_PROCESSDATA;
 8012098:	2102      	movs	r1, #2
 801209a:	7519      	strb	r1, [r3, #20]
				g32AdcConversionStatusBatt = FALSE;
 801209c:	621a      	str	r2, [r3, #32]
				g32AdcConversionStatus = FALSE;
 801209e:	625a      	str	r2, [r3, #36]	; 0x24
 80120a0:	e7ea      	b.n	8012078 <operateadc+0x6c>
				enmAdcSMCurrentState = enmADC_IDLE;
 80120a2:	4b10      	ldr	r3, [pc, #64]	; (80120e4 <operateadc+0xd8>)
 80120a4:	2200      	movs	r2, #0
 80120a6:	751a      	strb	r2, [r3, #20]
 80120a8:	e7e6      	b.n	8012078 <operateadc+0x6c>
			gu32ADCPollTimer = TEN_SEC;
 80120aa:	4b0d      	ldr	r3, [pc, #52]	; (80120e0 <operateadc+0xd4>)
 80120ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80120b0:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 80120b2:	4b0c      	ldr	r3, [pc, #48]	; (80120e4 <operateadc+0xd8>)
 80120b4:	2200      	movs	r2, #0
 80120b6:	751a      	strb	r2, [r3, #20]
}
 80120b8:	bd08      	pop	{r3, pc}
			calculateInputVoltage();
 80120ba:	f7ff ff51 	bl	8011f60 <calculateInputVoltage>
			gu32ADCPollTimer = TEN_SEC;
 80120be:	4b08      	ldr	r3, [pc, #32]	; (80120e0 <operateadc+0xd4>)
 80120c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80120c4:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 80120c6:	4b07      	ldr	r3, [pc, #28]	; (80120e4 <operateadc+0xd8>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	751a      	strb	r2, [r3, #20]
			break;
 80120cc:	e7f4      	b.n	80120b8 <operateadc+0xac>
			gu32ADCPollTimer = TEN_SEC;
 80120ce:	4b04      	ldr	r3, [pc, #16]	; (80120e0 <operateadc+0xd4>)
 80120d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80120d4:	601a      	str	r2, [r3, #0]
			enmAdcSMCurrentState = enmADC_IDLE;
 80120d6:	4b03      	ldr	r3, [pc, #12]	; (80120e4 <operateadc+0xd8>)
 80120d8:	2200      	movs	r2, #0
 80120da:	751a      	strb	r2, [r3, #20]
			break;
 80120dc:	e7ec      	b.n	80120b8 <operateadc+0xac>
 80120de:	bf00      	nop
 80120e0:	20004460 	.word	0x20004460
 80120e4:	2000427c 	.word	0x2000427c
 80120e8:	20004294 	.word	0x20004294
 80120ec:	20007a1c 	.word	0x20007a1c
 80120f0:	2000445c 	.word	0x2000445c

080120f4 <HAL_ADC_ConvCpltCallback>:
 *
 * */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	/*Sequence conversion complete . Read Processed Value */
	if(hadc->Instance == ADC1)
 80120f4:	6803      	ldr	r3, [r0, #0]
 80120f6:	4a0b      	ldr	r2, [pc, #44]	; (8012124 <HAL_ADC_ConvCpltCallback+0x30>)
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d003      	beq.n	8012104 <HAL_ADC_ConvCpltCallback+0x10>
	{
		if(g32AdcConversionStatusBatt == FALSE)
			g32AdcConversionStatusBatt = TRUE;

	}
	else if(hadc->Instance == ADC3)
 80120fc:	4a0a      	ldr	r2, [pc, #40]	; (8012128 <HAL_ADC_ConvCpltCallback+0x34>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d008      	beq.n	8012114 <HAL_ADC_ConvCpltCallback+0x20>
	}
	else
	{
		/* Unknown Interrupt */
	}
}
 8012102:	4770      	bx	lr
		if(g32AdcConversionStatusBatt == FALSE)
 8012104:	4b09      	ldr	r3, [pc, #36]	; (801212c <HAL_ADC_ConvCpltCallback+0x38>)
 8012106:	6a1b      	ldr	r3, [r3, #32]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d1fa      	bne.n	8012102 <HAL_ADC_ConvCpltCallback+0xe>
			g32AdcConversionStatusBatt = TRUE;
 801210c:	4b07      	ldr	r3, [pc, #28]	; (801212c <HAL_ADC_ConvCpltCallback+0x38>)
 801210e:	2201      	movs	r2, #1
 8012110:	621a      	str	r2, [r3, #32]
 8012112:	4770      	bx	lr
		if(g32AdcConversionStatus == FALSE)
 8012114:	4b05      	ldr	r3, [pc, #20]	; (801212c <HAL_ADC_ConvCpltCallback+0x38>)
 8012116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1f2      	bne.n	8012102 <HAL_ADC_ConvCpltCallback+0xe>
			g32AdcConversionStatus = TRUE;
 801211c:	4b03      	ldr	r3, [pc, #12]	; (801212c <HAL_ADC_ConvCpltCallback+0x38>)
 801211e:	2201      	movs	r2, #1
 8012120:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012122:	e7ee      	b.n	8012102 <HAL_ADC_ConvCpltCallback+0xe>
 8012124:	40012000 	.word	0x40012000
 8012128:	40012200 	.word	0x40012200
 801212c:	2000427c 	.word	0x2000427c

08012130 <HAL_I2C_ErrorCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012130:	b508      	push	{r3, lr}
	assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 8012132:	2101      	movs	r1, #1
 8012134:	200e      	movs	r0, #14
 8012136:	f7f9 ff87 	bl	800c048 <assertError>
}
 801213a:	bd08      	pop	{r3, pc}

0801213c <initMemoryRead>:
* <hr>
*
*******************************************************************************/
void initMemoryRead(void)
{
	gau8MemoryOperationRead[0] = FALSE;
 801213c:	4b0b      	ldr	r3, [pc, #44]	; (801216c <initMemoryRead+0x30>)
 801213e:	2100      	movs	r1, #0
 8012140:	7119      	strb	r1, [r3, #4]
	gau8MemoryOperationRead[1] = TRUE;
 8012142:	2201      	movs	r2, #1
 8012144:	715a      	strb	r2, [r3, #5]
	gau8MemoryOperationRead[2] = TRUE;
 8012146:	719a      	strb	r2, [r3, #6]
	gau8MemoryOperationRead[3] = TRUE;
 8012148:	71da      	strb	r2, [r3, #7]
	gau8MemoryOperationRead[4] = TRUE;
 801214a:	721a      	strb	r2, [r3, #8]
	gau8MemoryOperationRead[5] = TRUE;
 801214c:	725a      	strb	r2, [r3, #9]
	gau8MemoryOperationRead[6] = TRUE;
 801214e:	729a      	strb	r2, [r3, #10]
	gau8MemoryOperationRead[7] = TRUE;
 8012150:	72da      	strb	r2, [r3, #11]
	gau8MemoryOperationRead[8] = TRUE;
 8012152:	731a      	strb	r2, [r3, #12]
	gau8MemoryOperationRead[9] = TRUE;
 8012154:	735a      	strb	r2, [r3, #13]
	gau8MemoryOperationRead[10] = TRUE;
 8012156:	739a      	strb	r2, [r3, #14]
	gau8MemoryOperationRead[11] = TRUE;
 8012158:	73da      	strb	r2, [r3, #15]
	gau8MemoryOperationRead[12] = TRUE;
 801215a:	741a      	strb	r2, [r3, #16]
	gau8MemoryOperationRead[13] = TRUE;
 801215c:	745a      	strb	r2, [r3, #17]
	gau8MemoryOperationRead[14] = TRUE;
 801215e:	749a      	strb	r2, [r3, #18]
	gau8MemoryOperationRead[15] = TRUE;
 8012160:	74da      	strb	r2, [r3, #19]
	gau8MemoryOperationRead[16] = TRUE;
 8012162:	751a      	strb	r2, [r3, #20]
	gau8MemoryOperationRead[17] = TRUE;
 8012164:	755a      	strb	r2, [r3, #21]
	gu32MemoryOperation = EEPROM_OPR_READ;
 8012166:	4b02      	ldr	r3, [pc, #8]	; (8012170 <initMemoryRead+0x34>)
 8012168:	7019      	strb	r1, [r3, #0]
}
 801216a:	4770      	bx	lr
 801216c:	200042bc 	.word	0x200042bc
 8012170:	20002960 	.word	0x20002960

08012174 <initSystemDefaultsfromMemory>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initSystemDefaultsfromMemory(void)
{
 8012174:	b538      	push	{r3, r4, r5, lr}
	/* */
	if(strlen(strI2cEeprom.pu8NetworkAPN) != 0)
 8012176:	4b26      	ldr	r3, [pc, #152]	; (8012210 <initSystemDefaultsfromMemory+0x9c>)
 8012178:	f893 3c16 	ldrb.w	r3, [r3, #3094]	; 0xc16
 801217c:	b9b3      	cbnz	r3, 80121ac <initSystemDefaultsfromMemory+0x38>
	{
		memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
		memcpy(gau8GSM4G_apn,strI2cEeprom.pu8NetworkAPN, strlen(strI2cEeprom.pu8NetworkAPN));
	}
	if(strlen(strI2cEeprom.pu8RdServerURL) != 0)
 801217e:	4b24      	ldr	r3, [pc, #144]	; (8012210 <initSystemDefaultsfromMemory+0x9c>)
 8012180:	f893 3c2a 	ldrb.w	r3, [r3, #3114]	; 0xc2a
 8012184:	bb13      	cbnz	r3, 80121cc <initSystemDefaultsfromMemory+0x58>
	{
		memset(gau8GSM_url,0x00,sizeof(char) * 100);
		memcpy( gau8GSM_url, strI2cEeprom.pu8RdServerURL, strlen(strI2cEeprom.pu8RdServerURL));
	}
	if(strlen(strI2cEeprom.pu8MobileNumber) != 0)
 8012186:	4b22      	ldr	r3, [pc, #136]	; (8012210 <initSystemDefaultsfromMemory+0x9c>)
 8012188:	f893 3c07 	ldrb.w	r3, [r3, #3079]	; 0xc07
 801218c:	bb73      	cbnz	r3, 80121ec <initSystemDefaultsfromMemory+0x78>
	{
		memset(gau8GSM_smsto,0x00,sizeof(char) * 15);
		memcpy(gau8GSM_smsto, strI2cEeprom.pu8MobileNumber,strlen(strI2cEeprom.pu8MobileNumber));
	}
	gsmInstance.u32OFFPayloadUploadFreq = atoi(strI2cEeprom.pu8RdUploadOffFreq);
 801218e:	4d21      	ldr	r5, [pc, #132]	; (8012214 <initSystemDefaultsfromMemory+0xa0>)
 8012190:	4628      	mov	r0, r5
 8012192:	f000 fbf5 	bl	8012980 <atoi>
 8012196:	4c20      	ldr	r4, [pc, #128]	; (8012218 <initSystemDefaultsfromMemory+0xa4>)
 8012198:	f8c4 0e28 	str.w	r0, [r4, #3624]	; 0xe28
	gsmInstance.u32ONPayloadUploadFreq = atoi(strI2cEeprom.pu8RdUploadOnFreq);
 801219c:	1f68      	subs	r0, r5, #5
 801219e:	f000 fbef 	bl	8012980 <atoi>
 80121a2:	f8c4 0e24 	str.w	r0, [r4, #3620]	; 0xe24
	initGSMSIM868();
 80121a6:	f7fa f9e1 	bl	800c56c <initGSMSIM868>
}
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
		memset(gau8GSM4G_apn,0x00,sizeof(char) * 100);
 80121ac:	4c1b      	ldr	r4, [pc, #108]	; (801221c <initSystemDefaultsfromMemory+0xa8>)
 80121ae:	2264      	movs	r2, #100	; 0x64
 80121b0:	2100      	movs	r1, #0
 80121b2:	4620      	mov	r0, r4
 80121b4:	f000 fe94 	bl	8012ee0 <memset>
		memcpy(gau8GSM4G_apn,strI2cEeprom.pu8NetworkAPN, strlen(strI2cEeprom.pu8NetworkAPN));
 80121b8:	4d19      	ldr	r5, [pc, #100]	; (8012220 <initSystemDefaultsfromMemory+0xac>)
 80121ba:	4628      	mov	r0, r5
 80121bc:	f7ee f822 	bl	8000204 <strlen>
 80121c0:	4602      	mov	r2, r0
 80121c2:	4629      	mov	r1, r5
 80121c4:	4620      	mov	r0, r4
 80121c6:	f000 fe7d 	bl	8012ec4 <memcpy>
 80121ca:	e7d8      	b.n	801217e <initSystemDefaultsfromMemory+0xa>
		memset(gau8GSM_url,0x00,sizeof(char) * 100);
 80121cc:	4c15      	ldr	r4, [pc, #84]	; (8012224 <initSystemDefaultsfromMemory+0xb0>)
 80121ce:	2264      	movs	r2, #100	; 0x64
 80121d0:	2100      	movs	r1, #0
 80121d2:	4620      	mov	r0, r4
 80121d4:	f000 fe84 	bl	8012ee0 <memset>
		memcpy( gau8GSM_url, strI2cEeprom.pu8RdServerURL, strlen(strI2cEeprom.pu8RdServerURL));
 80121d8:	4d13      	ldr	r5, [pc, #76]	; (8012228 <initSystemDefaultsfromMemory+0xb4>)
 80121da:	4628      	mov	r0, r5
 80121dc:	f7ee f812 	bl	8000204 <strlen>
 80121e0:	4602      	mov	r2, r0
 80121e2:	4629      	mov	r1, r5
 80121e4:	4620      	mov	r0, r4
 80121e6:	f000 fe6d 	bl	8012ec4 <memcpy>
 80121ea:	e7cc      	b.n	8012186 <initSystemDefaultsfromMemory+0x12>
		memset(gau8GSM_smsto,0x00,sizeof(char) * 15);
 80121ec:	4c0f      	ldr	r4, [pc, #60]	; (801222c <initSystemDefaultsfromMemory+0xb8>)
 80121ee:	2300      	movs	r3, #0
 80121f0:	6023      	str	r3, [r4, #0]
 80121f2:	6063      	str	r3, [r4, #4]
 80121f4:	60a3      	str	r3, [r4, #8]
 80121f6:	f8c4 300b 	str.w	r3, [r4, #11]
		memcpy(gau8GSM_smsto, strI2cEeprom.pu8MobileNumber,strlen(strI2cEeprom.pu8MobileNumber));
 80121fa:	4d0d      	ldr	r5, [pc, #52]	; (8012230 <initSystemDefaultsfromMemory+0xbc>)
 80121fc:	4628      	mov	r0, r5
 80121fe:	f7ee f801 	bl	8000204 <strlen>
 8012202:	4602      	mov	r2, r0
 8012204:	4629      	mov	r1, r5
 8012206:	4620      	mov	r0, r4
 8012208:	f000 fe5c 	bl	8012ec4 <memcpy>
 801220c:	e7bf      	b.n	801218e <initSystemDefaultsfromMemory+0x1a>
 801220e:	bf00      	nop
 8012210:	20007bb8 	.word	0x20007bb8
 8012214:	2000887d 	.word	0x2000887d
 8012218:	2000c164 	.word	0x2000c164
 801221c:	200004d4 	.word	0x200004d4
 8012220:	200087ce 	.word	0x200087ce
 8012224:	20000354 	.word	0x20000354
 8012228:	200087e2 	.word	0x200087e2
 801222c:	20000248 	.word	0x20000248
 8012230:	200087bf 	.word	0x200087bf

08012234 <HAL_I2C_MemRxCpltCallback>:
{
 8012234:	b508      	push	{r3, lr}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0)
 8012236:	4b20      	ldr	r3, [pc, #128]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8012238:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801223c:	2b01      	cmp	r3, #1
 801223e:	d006      	beq.n	801224e <HAL_I2C_MemRxCpltCallback+0x1a>
		if(gu32EEPROMInitforSerialFlash == 0)
 8012240:	4b1d      	ldr	r3, [pc, #116]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8012242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012244:	b913      	cbnz	r3, 801224c <HAL_I2C_MemRxCpltCallback+0x18>
			gu8SignatureReadFlag = TRUE;
 8012246:	4b1c      	ldr	r3, [pc, #112]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8012248:	2201      	movs	r2, #1
 801224a:	701a      	strb	r2, [r3, #0]
}
 801224c:	bd08      	pop	{r3, pc}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0)
 801224e:	4b1b      	ldr	r3, [pc, #108]	; (80122bc <HAL_I2C_MemRxCpltCallback+0x88>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d0f4      	beq.n	8012240 <HAL_I2C_MemRxCpltCallback+0xc>
			&& (gu8OperateSystemStatus != FALSE))
 8012256:	4b1a      	ldr	r3, [pc, #104]	; (80122c0 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8012258:	789b      	ldrb	r3, [r3, #2]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d0f0      	beq.n	8012240 <HAL_I2C_MemRxCpltCallback+0xc>
		if(gau8MemoryOperationRead[u8RdMemLoopCounter] == TRUE)
 801225e:	4b16      	ldr	r3, [pc, #88]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8012260:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012264:	4413      	add	r3, r2
 8012266:	791b      	ldrb	r3, [r3, #4]
 8012268:	2b01      	cmp	r3, #1
 801226a:	d006      	beq.n	801227a <HAL_I2C_MemRxCpltCallback+0x46>
		gu8MemoryOperationStatus = 0;
 801226c:	2300      	movs	r3, #0
 801226e:	4a12      	ldr	r2, [pc, #72]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8012270:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		gu32I2CMemoryOperationTimeout = 0;
 8012274:	4a11      	ldr	r2, [pc, #68]	; (80122bc <HAL_I2C_MemRxCpltCallback+0x88>)
 8012276:	6013      	str	r3, [r2, #0]
 8012278:	e7e8      	b.n	801224c <HAL_I2C_MemRxCpltCallback+0x18>
			gau8MemoryOperationRead[u8RdMemLoopCounter] = FALSE;
 801227a:	4b0f      	ldr	r3, [pc, #60]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 801227c:	1899      	adds	r1, r3, r2
 801227e:	2000      	movs	r0, #0
 8012280:	7108      	strb	r0, [r1, #4]
			u8RdMemLoopCounter ++;
 8012282:	3201      	adds	r2, #1
 8012284:	b2d2      	uxtb	r2, r2
 8012286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(u8RdMemLoopCounter >= I2CMEM_MAX_OPRATIONS)
 801228a:	2a0e      	cmp	r2, #14
 801228c:	d9ee      	bls.n	801226c <HAL_I2C_MemRxCpltCallback+0x38>
				gu32MemoryOperation = EEPROM_OPR_IDLE;
 801228e:	4a0c      	ldr	r2, [pc, #48]	; (80122c0 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8012290:	2302      	movs	r3, #2
 8012292:	7013      	strb	r3, [r2, #0]
				u8RdMemLoopCounter = 0;
 8012294:	4b08      	ldr	r3, [pc, #32]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8012296:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
				gu8MemoryRdOperationFlag = TRUE;
 801229a:	2101      	movs	r1, #1
 801229c:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
				gu8MemoryCycleComplete = TRUE;
 80122a0:	7051      	strb	r1, [r2, #1]
				if(gu8RestoreSystemSettings == TRUE)
 80122a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80122a6:	428b      	cmp	r3, r1
 80122a8:	d1e0      	bne.n	801226c <HAL_I2C_MemRxCpltCallback+0x38>
					initSystemDefaultsfromMemory();
 80122aa:	f7ff ff63 	bl	8012174 <initSystemDefaultsfromMemory>
					gu8RestoreSystemSettings = FALSE;
 80122ae:	4b02      	ldr	r3, [pc, #8]	; (80122b8 <HAL_I2C_MemRxCpltCallback+0x84>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80122b6:	e7d9      	b.n	801226c <HAL_I2C_MemRxCpltCallback+0x38>
 80122b8:	200042bc 	.word	0x200042bc
 80122bc:	20004458 	.word	0x20004458
 80122c0:	20002960 	.word	0x20002960

080122c4 <systemReset>:
}


void systemReset(void)
{
	while(1);
 80122c4:	e7fe      	b.n	80122c4 <systemReset>
	...

080122c8 <HAL_I2C_MemTxCpltCallback>:
{
 80122c8:	b508      	push	{r3, lr}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0))
 80122ca:	4b25      	ldr	r3, [pc, #148]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 80122cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d000      	beq.n	80122d6 <HAL_I2C_MemTxCpltCallback+0xe>
}
 80122d4:	bd08      	pop	{r3, pc}
	if((gu8MemoryOperationStatus == 1) && (gu32I2CMemoryOperationTimeout !=0))
 80122d6:	4b23      	ldr	r3, [pc, #140]	; (8012364 <HAL_I2C_MemTxCpltCallback+0x9c>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d0fa      	beq.n	80122d4 <HAL_I2C_MemTxCpltCallback+0xc>
		if(gau8MemoryOperationWrite[u8WrMemLoopCounter] == TRUE)
 80122de:	4b20      	ldr	r3, [pc, #128]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 80122e0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80122e4:	4413      	add	r3, r2
 80122e6:	7d1b      	ldrb	r3, [r3, #20]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d006      	beq.n	80122fa <HAL_I2C_MemTxCpltCallback+0x32>
		gu8MemoryOperationStatus = 0;
 80122ec:	2300      	movs	r3, #0
 80122ee:	4a1c      	ldr	r2, [pc, #112]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 80122f0:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		gu32I2CMemoryOperationTimeout = 0;
 80122f4:	4a1b      	ldr	r2, [pc, #108]	; (8012364 <HAL_I2C_MemTxCpltCallback+0x9c>)
 80122f6:	6013      	str	r3, [r2, #0]
}
 80122f8:	e7ec      	b.n	80122d4 <HAL_I2C_MemTxCpltCallback+0xc>
			if(gu8PageWriteCycle == TRUE)
 80122fa:	4b19      	ldr	r3, [pc, #100]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 80122fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012300:	2b01      	cmp	r3, #1
 8012302:	d019      	beq.n	8012338 <HAL_I2C_MemTxCpltCallback+0x70>
				gau8MemoryOperationWrite[u8WrMemLoopCounter] = FALSE;
 8012304:	4b16      	ldr	r3, [pc, #88]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 8012306:	1899      	adds	r1, r3, r2
 8012308:	2000      	movs	r0, #0
 801230a:	7508      	strb	r0, [r1, #20]
				u8WrMemLoopCounter ++;
 801230c:	3201      	adds	r2, #1
 801230e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			if(u8WrMemLoopCounter >= I2CMEM_MAX_OPRATIONS)
 8012312:	4b13      	ldr	r3, [pc, #76]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 8012314:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012318:	2b0e      	cmp	r3, #14
 801231a:	d9e7      	bls.n	80122ec <HAL_I2C_MemTxCpltCallback+0x24>
				gu32MemoryOperation = EEPROM_OPR_READ;
 801231c:	4b12      	ldr	r3, [pc, #72]	; (8012368 <HAL_I2C_MemTxCpltCallback+0xa0>)
 801231e:	2200      	movs	r2, #0
 8012320:	701a      	strb	r2, [r3, #0]
				if(u32DefautParamWriteStatus == TRUE)
 8012322:	4b0f      	ldr	r3, [pc, #60]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 8012324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012326:	2b01      	cmp	r3, #1
 8012328:	d018      	beq.n	801235c <HAL_I2C_MemTxCpltCallback+0x94>
					initMemoryRead();
 801232a:	f7ff ff07 	bl	801213c <initMemoryRead>
				u8WrMemLoopCounter = 0;
 801232e:	4b0c      	ldr	r3, [pc, #48]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 8012330:	2200      	movs	r2, #0
 8012332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012336:	e7d9      	b.n	80122ec <HAL_I2C_MemTxCpltCallback+0x24>
				if(gu8PageWriteCounter > cycleRequired)
 8012338:	4909      	ldr	r1, [pc, #36]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 801233a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801233c:	6c89      	ldr	r1, [r1, #72]	; 0x48
 801233e:	428b      	cmp	r3, r1
 8012340:	d908      	bls.n	8012354 <HAL_I2C_MemTxCpltCallback+0x8c>
					gau8MemoryOperationWrite[u8WrMemLoopCounter] = FALSE;
 8012342:	4b07      	ldr	r3, [pc, #28]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 8012344:	1898      	adds	r0, r3, r2
 8012346:	2100      	movs	r1, #0
 8012348:	7501      	strb	r1, [r0, #20]
					u8WrMemLoopCounter ++;
 801234a:	3201      	adds	r2, #1
 801234c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					gu8PageWriteCounter  = 0;
 8012350:	6319      	str	r1, [r3, #48]	; 0x30
 8012352:	e7de      	b.n	8012312 <HAL_I2C_MemTxCpltCallback+0x4a>
					gu8PageWriteCounter ++;
 8012354:	3301      	adds	r3, #1
 8012356:	4a02      	ldr	r2, [pc, #8]	; (8012360 <HAL_I2C_MemTxCpltCallback+0x98>)
 8012358:	6313      	str	r3, [r2, #48]	; 0x30
 801235a:	e7da      	b.n	8012312 <HAL_I2C_MemTxCpltCallback+0x4a>
					systemReset();						/* IDWT will reset the system */
 801235c:	f7ff ffb2 	bl	80122c4 <systemReset>
 8012360:	200042bc 	.word	0x200042bc
 8012364:	20004458 	.word	0x20004458
 8012368:	20002960 	.word	0x20002960

0801236c <updateEthLinkStatus_1>:
	}
}

/* Updated by 100229 */
uint32_t updateEthLinkStatus_1(void)
{
 801236c:	b510      	push	{r4, lr}
	HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &gu32EthLinkStatus);
 801236e:	4c1d      	ldr	r4, [pc, #116]	; (80123e4 <updateEthLinkStatus_1+0x78>)
 8012370:	4622      	mov	r2, r4
 8012372:	2101      	movs	r1, #1
 8012374:	481c      	ldr	r0, [pc, #112]	; (80123e8 <updateEthLinkStatus_1+0x7c>)
 8012376:	f7f0 f806 	bl	8002386 <HAL_ETH_ReadPHYRegister>
	if((gu32EthLinkStatus & PHY_LINKED_STATUS) != PHY_LINKED_STATUS)
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	f013 0f04 	tst.w	r3, #4
 8012380:	d00f      	beq.n	80123a2 <updateEthLinkStatus_1+0x36>
		return 1;
	}
	else
	{
		/*Added on 23-12-22 */
		if(gu32EthLastConnectedSuccess == 0)
 8012382:	4b1a      	ldr	r3, [pc, #104]	; (80123ec <updateEthLinkStatus_1+0x80>)
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	b1eb      	cbz	r3, 80123c4 <updateEthLinkStatus_1+0x58>
				MX_LWIP_Init();
				gu32PowerOnDisconnected = 0;
			}
			gu32EthLastConnectedSuccess = 1;
		}
		MX_LWIP_Process();
 8012388:	f7fb fbdc 	bl	800db44 <MX_LWIP_Process>
		gu32EthLinkAlert = 0;
 801238c:	2400      	movs	r4, #0
 801238e:	4b17      	ldr	r3, [pc, #92]	; (80123ec <updateEthLinkStatus_1+0x80>)
 8012390:	601c      	str	r4, [r3, #0]
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);	// LED OFF
 8012392:	2201      	movs	r2, #1
 8012394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012398:	4815      	ldr	r0, [pc, #84]	; (80123f0 <updateEthLinkStatus_1+0x84>)
 801239a:	f7f0 fd1d 	bl	8002dd8 <HAL_GPIO_WritePin>
		return 0;
 801239e:	4620      	mov	r0, r4
	}
}
 80123a0:	bd10      	pop	{r4, pc}
		gu32EthLinkAlert = 1;
 80123a2:	4c12      	ldr	r4, [pc, #72]	; (80123ec <updateEthLinkStatus_1+0x80>)
 80123a4:	2301      	movs	r3, #1
 80123a6:	6023      	str	r3, [r4, #0]
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	// LED ON
 80123a8:	2200      	movs	r2, #0
 80123aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80123ae:	4810      	ldr	r0, [pc, #64]	; (80123f0 <updateEthLinkStatus_1+0x84>)
 80123b0:	f7f0 fd12 	bl	8002dd8 <HAL_GPIO_WritePin>
		gu32PowerOnDisconnected = 0;
 80123b4:	2300      	movs	r3, #0
 80123b6:	60a3      	str	r3, [r4, #8]
		if(gu32EthLastConnectedSuccess)
 80123b8:	6863      	ldr	r3, [r4, #4]
 80123ba:	b10b      	cbz	r3, 80123c0 <updateEthLinkStatus_1+0x54>
			gu32EthLastConnectedSuccess = 0;
 80123bc:	2200      	movs	r2, #0
 80123be:	6062      	str	r2, [r4, #4]
		return 1;
 80123c0:	2001      	movs	r0, #1
 80123c2:	e7ed      	b.n	80123a0 <updateEthLinkStatus_1+0x34>
			tcp_modbusclient_connect();
 80123c4:	f7fc fc30 	bl	800ec28 <tcp_modbusclient_connect>
			if(gu32PowerOnDisconnected)
 80123c8:	4b08      	ldr	r3, [pc, #32]	; (80123ec <updateEthLinkStatus_1+0x80>)
 80123ca:	689b      	ldr	r3, [r3, #8]
 80123cc:	b91b      	cbnz	r3, 80123d6 <updateEthLinkStatus_1+0x6a>
			gu32EthLastConnectedSuccess = 1;
 80123ce:	4b07      	ldr	r3, [pc, #28]	; (80123ec <updateEthLinkStatus_1+0x80>)
 80123d0:	2201      	movs	r2, #1
 80123d2:	605a      	str	r2, [r3, #4]
 80123d4:	e7d8      	b.n	8012388 <updateEthLinkStatus_1+0x1c>
				MX_LWIP_Init();
 80123d6:	f7fb fb41 	bl	800da5c <MX_LWIP_Init>
				gu32PowerOnDisconnected = 0;
 80123da:	4b04      	ldr	r3, [pc, #16]	; (80123ec <updateEthLinkStatus_1+0x80>)
 80123dc:	2200      	movs	r2, #0
 80123de:	609a      	str	r2, [r3, #8]
 80123e0:	e7f5      	b.n	80123ce <updateEthLinkStatus_1+0x62>
 80123e2:	bf00      	nop
 80123e4:	2000431c 	.word	0x2000431c
 80123e8:	2000a17c 	.word	0x2000a17c
 80123ec:	2000296c 	.word	0x2000296c
 80123f0:	40020c00 	.word	0x40020c00

080123f4 <GetSector>:
  */
static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80123f4:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80123f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123fc:	f0c0 809a 	bcc.w	8012534 <GetSector+0x140>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8012400:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012408:	f0c0 8096 	bcc.w	8012538 <GetSector+0x144>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 801240c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8012410:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8012414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012418:	f0c0 8090 	bcc.w	801253c <GetSector+0x148>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 801241c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8012420:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8012424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012428:	f0c0 808a 	bcc.w	8012540 <GetSector+0x14c>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 801242c:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012430:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8012434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012438:	f0c0 8084 	bcc.w	8012544 <GetSector+0x150>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 801243c:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012440:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012448:	d37e      	bcc.n	8012548 <GetSector+0x154>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 801244a:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801244e:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 8012452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012456:	d379      	bcc.n	801254c <GetSector+0x158>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8012458:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801245c:	f503 037a 	add.w	r3, r3, #16384000	; 0xfa0000
 8012460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012464:	d374      	bcc.n	8012550 <GetSector+0x15c>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8012466:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801246a:	f503 0378 	add.w	r3, r3, #16252928	; 0xf80000
 801246e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012472:	d36f      	bcc.n	8012554 <GetSector+0x160>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8012474:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012478:	f503 0376 	add.w	r3, r3, #16121856	; 0xf60000
 801247c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012480:	d36a      	bcc.n	8012558 <GetSector+0x164>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8012482:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012486:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 801248a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801248e:	d365      	bcc.n	801255c <GetSector+0x168>
  {
    sector = FLASH_SECTOR_10;
  }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 8012490:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012494:	f503 0372 	add.w	r3, r3, #15859712	; 0xf20000
 8012498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801249c:	d360      	bcc.n	8012560 <GetSector+0x16c>
  {
    sector = FLASH_SECTOR_11;
  }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 801249e:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 80124a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80124a6:	d35d      	bcc.n	8012564 <GetSector+0x170>
  {
    sector = FLASH_SECTOR_12;
  }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 80124a8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80124ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80124b0:	d35a      	bcc.n	8012568 <GetSector+0x174>
  {
    sector = FLASH_SECTOR_13;
  }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 80124b2:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 80124b6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80124ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80124be:	d355      	bcc.n	801256c <GetSector+0x178>
  {
    sector = FLASH_SECTOR_14;
  }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 80124c0:	f1a0 6301 	sub.w	r3, r0, #135266304	; 0x8100000
 80124c4:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 80124c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80124cc:	d350      	bcc.n	8012570 <GetSector+0x17c>
  {
    sector = FLASH_SECTOR_15;
  }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 80124ce:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80124d2:	f503 036f 	add.w	r3, r3, #15663104	; 0xef0000
 80124d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124da:	d34b      	bcc.n	8012574 <GetSector+0x180>
  {
    sector = FLASH_SECTOR_16;
  }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 80124dc:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80124e0:	f503 036e 	add.w	r3, r3, #15597568	; 0xee0000
 80124e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80124e8:	d346      	bcc.n	8012578 <GetSector+0x184>
  {
    sector = FLASH_SECTOR_17;
  }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 80124ea:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80124ee:	f503 036c 	add.w	r3, r3, #15466496	; 0xec0000
 80124f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80124f6:	d341      	bcc.n	801257c <GetSector+0x188>
  {
    sector = FLASH_SECTOR_18;
  }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 80124f8:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 80124fc:	f503 036a 	add.w	r3, r3, #15335424	; 0xea0000
 8012500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012504:	d33c      	bcc.n	8012580 <GetSector+0x18c>
  {
    sector = FLASH_SECTOR_19;
  }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 8012506:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 801250a:	f503 0368 	add.w	r3, r3, #15204352	; 0xe80000
 801250e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012512:	d337      	bcc.n	8012584 <GetSector+0x190>
  {
    sector = FLASH_SECTOR_20;
  }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 8012514:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8012518:	f503 0366 	add.w	r3, r3, #15073280	; 0xe60000
 801251c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012520:	d332      	bcc.n	8012588 <GetSector+0x194>
  {
    sector = FLASH_SECTOR_21;
  }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 8012522:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
 8012526:	f500 0064 	add.w	r0, r0, #14942208	; 0xe40000
 801252a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 801252e:	d22d      	bcs.n	801258c <GetSector+0x198>
  {
    sector = FLASH_SECTOR_22;
 8012530:	2016      	movs	r0, #22
 8012532:	4770      	bx	lr
    sector = FLASH_SECTOR_0;
 8012534:	2000      	movs	r0, #0
 8012536:	4770      	bx	lr
    sector = FLASH_SECTOR_1;
 8012538:	2001      	movs	r0, #1
 801253a:	4770      	bx	lr
    sector = FLASH_SECTOR_2;
 801253c:	2002      	movs	r0, #2
 801253e:	4770      	bx	lr
    sector = FLASH_SECTOR_3;
 8012540:	2003      	movs	r0, #3
 8012542:	4770      	bx	lr
    sector = FLASH_SECTOR_4;
 8012544:	2004      	movs	r0, #4
 8012546:	4770      	bx	lr
    sector = FLASH_SECTOR_5;
 8012548:	2005      	movs	r0, #5
 801254a:	4770      	bx	lr
    sector = FLASH_SECTOR_6;
 801254c:	2006      	movs	r0, #6
 801254e:	4770      	bx	lr
    sector = FLASH_SECTOR_7;
 8012550:	2007      	movs	r0, #7
 8012552:	4770      	bx	lr
    sector = FLASH_SECTOR_8;
 8012554:	2008      	movs	r0, #8
 8012556:	4770      	bx	lr
    sector = FLASH_SECTOR_9;
 8012558:	2009      	movs	r0, #9
 801255a:	4770      	bx	lr
    sector = FLASH_SECTOR_10;
 801255c:	200a      	movs	r0, #10
 801255e:	4770      	bx	lr
    sector = FLASH_SECTOR_11;
 8012560:	200b      	movs	r0, #11
 8012562:	4770      	bx	lr
    sector = FLASH_SECTOR_12;
 8012564:	200c      	movs	r0, #12
 8012566:	4770      	bx	lr
    sector = FLASH_SECTOR_13;
 8012568:	200d      	movs	r0, #13
 801256a:	4770      	bx	lr
    sector = FLASH_SECTOR_14;
 801256c:	200e      	movs	r0, #14
 801256e:	4770      	bx	lr
    sector = FLASH_SECTOR_15;
 8012570:	200f      	movs	r0, #15
 8012572:	4770      	bx	lr
    sector = FLASH_SECTOR_16;
 8012574:	2010      	movs	r0, #16
 8012576:	4770      	bx	lr
    sector = FLASH_SECTOR_17;
 8012578:	2011      	movs	r0, #17
 801257a:	4770      	bx	lr
    sector = FLASH_SECTOR_18;
 801257c:	2012      	movs	r0, #18
 801257e:	4770      	bx	lr
    sector = FLASH_SECTOR_19;
 8012580:	2013      	movs	r0, #19
 8012582:	4770      	bx	lr
    sector = FLASH_SECTOR_20;
 8012584:	2014      	movs	r0, #20
 8012586:	4770      	bx	lr
    sector = FLASH_SECTOR_21;
 8012588:	2015      	movs	r0, #21
 801258a:	4770      	bx	lr
  }
  else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23))*/
  {
    sector = FLASH_SECTOR_23;
 801258c:	2017      	movs	r0, #23
  }
  return sector;
}
 801258e:	4770      	bx	lr

08012590 <FLASH_If_Init>:
{
 8012590:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8012592:	f7f0 f9d9 	bl	8002948 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8012596:	4b02      	ldr	r3, [pc, #8]	; (80125a0 <FLASH_If_Init+0x10>)
 8012598:	22f3      	movs	r2, #243	; 0xf3
 801259a:	60da      	str	r2, [r3, #12]
}
 801259c:	bd08      	pop	{r3, pc}
 801259e:	bf00      	nop
 80125a0:	40023c00 	.word	0x40023c00

080125a4 <FLASH_If_Erase>:
{
 80125a4:	b510      	push	{r4, lr}
 80125a6:	b086      	sub	sp, #24
 80125a8:	4604      	mov	r4, r0
  FLASH_If_Init();
 80125aa:	f7ff fff1 	bl	8012590 <FLASH_If_Init>
  UserStartSector = GetSector(StartSector);
 80125ae:	4620      	mov	r0, r4
 80125b0:	f7ff ff20 	bl	80123f4 <GetSector>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80125b4:	2300      	movs	r3, #0
 80125b6:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = UserStartSector;
 80125b8:	9002      	str	r0, [sp, #8]
  pEraseInit.NbSectors = 1;
 80125ba:	2301      	movs	r3, #1
 80125bc:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 80125be:	2302      	movs	r3, #2
 80125c0:	9304      	str	r3, [sp, #16]
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 80125c2:	a905      	add	r1, sp, #20
 80125c4:	4668      	mov	r0, sp
 80125c6:	f7f0 fac9 	bl	8002b5c <HAL_FLASHEx_Erase>
 80125ca:	b908      	cbnz	r0, 80125d0 <FLASH_If_Erase+0x2c>
}
 80125cc:	b006      	add	sp, #24
 80125ce:	bd10      	pop	{r4, pc}
     return (1);
 80125d0:	2001      	movs	r0, #1
 80125d2:	e7fb      	b.n	80125cc <FLASH_If_Erase+0x28>

080125d4 <FLASH_If_Write>:
{
 80125d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125d6:	4604      	mov	r4, r0
 80125d8:	460e      	mov	r6, r1
 80125da:	4617      	mov	r7, r2
  for (i = 0; (i < (DataLength / 4)) && (FlashAddress <= (USER_FLASH_END_ADDRESS - 4)); i++)//USER_FLASH_END_ADDRESS
 80125dc:	2500      	movs	r5, #0
 80125de:	e003      	b.n	80125e8 <FLASH_If_Write+0x14>
      FlashAddress += 4;
 80125e0:	3404      	adds	r4, #4
      u32LastMemoryWriteLocation = FlashAddress;
 80125e2:	4b0f      	ldr	r3, [pc, #60]	; (8012620 <FLASH_If_Write+0x4c>)
 80125e4:	601c      	str	r4, [r3, #0]
  for (i = 0; (i < (DataLength / 4)) && (FlashAddress <= (USER_FLASH_END_ADDRESS - 4)); i++)//USER_FLASH_END_ADDRESS
 80125e6:	3501      	adds	r5, #1
 80125e8:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
 80125ec:	d211      	bcs.n	8012612 <FLASH_If_Write+0x3e>
 80125ee:	4b0d      	ldr	r3, [pc, #52]	; (8012624 <FLASH_If_Write+0x50>)
 80125f0:	429c      	cmp	r4, r3
 80125f2:	d80e      	bhi.n	8012612 <FLASH_If_Write+0x3e>
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)
 80125f4:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 80125f8:	2300      	movs	r3, #0
 80125fa:	4621      	mov	r1, r4
 80125fc:	2002      	movs	r0, #2
 80125fe:	f7f0 f9eb 	bl	80029d8 <HAL_FLASH_Program>
 8012602:	b950      	cbnz	r0, 801261a <FLASH_If_Write+0x46>
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8012604:	6821      	ldr	r1, [r4, #0]
 8012606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801260a:	4299      	cmp	r1, r3
 801260c:	d0e8      	beq.n	80125e0 <FLASH_If_Write+0xc>
        return(FLASHIF_WRITINGCTRL_ERROR);
 801260e:	2002      	movs	r0, #2
 8012610:	e002      	b.n	8012618 <FLASH_If_Write+0x44>
  u32LastMemoryWriteLocation = FlashAddress;
 8012612:	4b03      	ldr	r3, [pc, #12]	; (8012620 <FLASH_If_Write+0x4c>)
 8012614:	601c      	str	r4, [r3, #0]
  return (FLASHIF_OK);
 8012616:	2000      	movs	r0, #0
}
 8012618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (FLASHIF_WRITING_ERROR);
 801261a:	2003      	movs	r0, #3
 801261c:	e7fc      	b.n	8012618 <FLASH_If_Write+0x44>
 801261e:	bf00      	nop
 8012620:	20004320 	.word	0x20004320
 8012624:	081dfffc 	.word	0x081dfffc

08012628 <WriteDatatoFlash>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      26-07-2021			Initial Definition
******************************************************************************/
uint32_t WriteDatatoFlash(uint32_t Sector,uint8_t *data,uint32_t configLen,uint32_t writeCycle)
{
 8012628:	b508      	push	{r3, lr}
	if(FLASH_If_Write(Sector,(uint32_t*)data,configLen) == FLASHIF_OK)
 801262a:	f7ff ffd3 	bl	80125d4 <FLASH_If_Write>
 801262e:	b100      	cbz	r0, 8012632 <WriteDatatoFlash+0xa>
		return SUCCESS;
	else
		return ERROR;
 8012630:	2001      	movs	r0, #1
}
 8012632:	bd08      	pop	{r3, pc}

08012634 <HAL_RTCEx_WakeUpTimerEventCallback>:
*******************************************************************************/

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	//HAL_GPIO_TogglePin(LED_1_GPIO_Port,LED_1_Pin);
}
 8012634:	4770      	bx	lr

08012636 <HAL_RTC_AlarmAEventCallback>:
*
*******************************************************************************/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{

}
 8012636:	4770      	bx	lr

08012638 <getRTCCalender>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void getRTCCalender(void)
{
 8012638:	b570      	push	{r4, r5, r6, lr}
 801263a:	b082      	sub	sp, #8

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 801263c:	4d11      	ldr	r5, [pc, #68]	; (8012684 <getRTCCalender+0x4c>)
 801263e:	4e12      	ldr	r6, [pc, #72]	; (8012688 <getRTCCalender+0x50>)
 8012640:	2200      	movs	r2, #0
 8012642:	4629      	mov	r1, r5
 8012644:	4630      	mov	r0, r6
 8012646:	f7f2 fb52 	bl	8004cee <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 801264a:	4c10      	ldr	r4, [pc, #64]	; (801268c <getRTCCalender+0x54>)
 801264c:	2200      	movs	r2, #0
 801264e:	4621      	mov	r1, r4
 8012650:	4630      	mov	r0, r6
 8012652:	f7f2 fb74 	bl	8004d3e <HAL_RTC_GetDate>

  /* Display time Format : hh:mm:ss */
  sprintf((char*)aShowTimeStamp,"%.2d:%.2d:%.2d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8012656:	78ab      	ldrb	r3, [r5, #2]
 8012658:	4e0d      	ldr	r6, [pc, #52]	; (8012690 <getRTCCalender+0x58>)
 801265a:	9300      	str	r3, [sp, #0]
 801265c:	786b      	ldrb	r3, [r5, #1]
 801265e:	782a      	ldrb	r2, [r5, #0]
 8012660:	490c      	ldr	r1, [pc, #48]	; (8012694 <getRTCCalender+0x5c>)
 8012662:	4630      	mov	r0, r6
 8012664:	f000 fc72 	bl	8012f4c <sprintf>
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aShowDateStamp,"%.2d/%.2d/%.2d",sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8012668:	78e3      	ldrb	r3, [r4, #3]
 801266a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	7863      	ldrb	r3, [r4, #1]
 8012672:	78a2      	ldrb	r2, [r4, #2]
 8012674:	4908      	ldr	r1, [pc, #32]	; (8012698 <getRTCCalender+0x60>)
 8012676:	f106 0034 	add.w	r0, r6, #52	; 0x34
 801267a:	f000 fc67 	bl	8012f4c <sprintf>
}
 801267e:	b002      	add	sp, #8
 8012680:	bd70      	pop	{r4, r5, r6, pc}
 8012682:	bf00      	nop
 8012684:	20011360 	.word	0x20011360
 8012688:	2000f10c 	.word	0x2000f10c
 801268c:	20011344 	.word	0x20011344
 8012690:	20004334 	.word	0x20004334
 8012694:	0801bfa0 	.word	0x0801bfa0
 8012698:	0801bfb0 	.word	0x0801bfb0

0801269c <DecimalToBCD>:
* <hr>
*
*******************************************************************************/
uint32_t DecimalToBCD (uint32_t Decimal)
{
   return (((Decimal/10) << 4) | (Decimal % 10));
 801269c:	4b05      	ldr	r3, [pc, #20]	; (80126b4 <DecimalToBCD+0x18>)
 801269e:	fba3 2300 	umull	r2, r3, r3, r0
 80126a2:	08db      	lsrs	r3, r3, #3
 80126a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80126a8:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
}
 80126ac:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	cccccccd 	.word	0xcccccccd

080126b8 <BCDToDecimal>:
* <hr>
*
*******************************************************************************/
uint32_t BCDToDecimal(uint32_t BCD)
{
   return (((BCD >> 4) * 10) + (BCD & 0xF));
 80126b8:	0903      	lsrs	r3, r0, #4
 80126ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80126be:	f000 000f 	and.w	r0, r0, #15
}
 80126c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80126c6:	4770      	bx	lr

080126c8 <getrtcStamp>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void getrtcStamp(void)
{
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_RTC_GetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 80126ca:	4e22      	ldr	r6, [pc, #136]	; (8012754 <getrtcStamp+0x8c>)
 80126cc:	4c22      	ldr	r4, [pc, #136]	; (8012758 <getrtcStamp+0x90>)
 80126ce:	2201      	movs	r2, #1
 80126d0:	4631      	mov	r1, r6
 80126d2:	4620      	mov	r0, r4
 80126d4:	f7f2 fb0b 	bl	8004cee <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 80126d8:	4f20      	ldr	r7, [pc, #128]	; (801275c <getrtcStamp+0x94>)
 80126da:	2201      	movs	r2, #1
 80126dc:	4639      	mov	r1, r7
 80126de:	4620      	mov	r0, r4
 80126e0:	f7f2 fb2d 	bl	8004d3e <HAL_RTC_GetDate>
	itoa(BCDToDecimal(STime1.Hours),gau8Hour,PAYLOAD_DATA_STRING_RADIX);
	itoa(BCDToDecimal(STime1.Minutes),gau8Minutes,PAYLOAD_DATA_STRING_RADIX);
	itoa(BCDToDecimal(STime1.Seconds),gau8Seconds,PAYLOAD_DATA_STRING_RADIX);*/

	/* Time stamp length is fixed */
	sprintf(gau8Year, "%02i", (int)BCDToDecimal(SDate1.Year));
 80126e4:	78f8      	ldrb	r0, [r7, #3]
 80126e6:	f7ff ffe7 	bl	80126b8 <BCDToDecimal>
 80126ea:	4602      	mov	r2, r0
 80126ec:	4d1c      	ldr	r5, [pc, #112]	; (8012760 <getrtcStamp+0x98>)
 80126ee:	4c1d      	ldr	r4, [pc, #116]	; (8012764 <getrtcStamp+0x9c>)
 80126f0:	4629      	mov	r1, r5
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 fc2a 	bl	8012f4c <sprintf>
	sprintf(gau8Month, "%02i", (int)BCDToDecimal(SDate1.Month));
 80126f8:	7878      	ldrb	r0, [r7, #1]
 80126fa:	f7ff ffdd 	bl	80126b8 <BCDToDecimal>
 80126fe:	4602      	mov	r2, r0
 8012700:	4629      	mov	r1, r5
 8012702:	f104 0008 	add.w	r0, r4, #8
 8012706:	f000 fc21 	bl	8012f4c <sprintf>
	sprintf(gau8Date, "%02i", (int)BCDToDecimal(SDate1.Date));
 801270a:	78b8      	ldrb	r0, [r7, #2]
 801270c:	f7ff ffd4 	bl	80126b8 <BCDToDecimal>
 8012710:	4602      	mov	r2, r0
 8012712:	4629      	mov	r1, r5
 8012714:	f104 0010 	add.w	r0, r4, #16
 8012718:	f000 fc18 	bl	8012f4c <sprintf>
	sprintf(gau8Hour, "%02i", (int)BCDToDecimal(STime1.Hours));
 801271c:	7830      	ldrb	r0, [r6, #0]
 801271e:	f7ff ffcb 	bl	80126b8 <BCDToDecimal>
 8012722:	4602      	mov	r2, r0
 8012724:	4629      	mov	r1, r5
 8012726:	f104 0018 	add.w	r0, r4, #24
 801272a:	f000 fc0f 	bl	8012f4c <sprintf>
	sprintf(gau8Minutes, "%02i", (int)BCDToDecimal(STime1.Minutes));
 801272e:	7870      	ldrb	r0, [r6, #1]
 8012730:	f7ff ffc2 	bl	80126b8 <BCDToDecimal>
 8012734:	4602      	mov	r2, r0
 8012736:	4629      	mov	r1, r5
 8012738:	f104 0020 	add.w	r0, r4, #32
 801273c:	f000 fc06 	bl	8012f4c <sprintf>
	sprintf(gau8Seconds, "%02i", (int)BCDToDecimal(STime1.Seconds));
 8012740:	78b0      	ldrb	r0, [r6, #2]
 8012742:	f7ff ffb9 	bl	80126b8 <BCDToDecimal>
 8012746:	4602      	mov	r2, r0
 8012748:	4629      	mov	r1, r5
 801274a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801274e:	f000 fbfd 	bl	8012f4c <sprintf>
}
 8012752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012754:	2000f0f8 	.word	0x2000f0f8
 8012758:	2000f10c 	.word	0x2000f10c
 801275c:	2000f0f4 	.word	0x2000f0f4
 8012760:	0801bfc0 	.word	0x0801bfc0
 8012764:	20002978 	.word	0x20002978

08012768 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t gu32UploadFailTimer = TEN_MIN;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* Timer 7 . 1 ms Interrupt */
	if(htim->Instance == TIM7)
 8012768:	6802      	ldr	r2, [r0, #0]
 801276a:	4b64      	ldr	r3, [pc, #400]	; (80128fc <HAL_TIM_PeriodElapsedCallback+0x194>)
 801276c:	429a      	cmp	r2, r3
 801276e:	d000      	beq.n	8012772 <HAL_TIM_PeriodElapsedCallback+0xa>
		if(gu32UploadFailTimer)gu32UploadFailTimer--;

		/* Buffer */
		if(FlashStr.u32SerialFlashDelay)FlashStr.u32SerialFlashDelay--;
	}
}
 8012770:	4770      	bx	lr
		if(gu32MBTCPTimer)gu32MBTCPTimer--;
 8012772:	4b63      	ldr	r3, [pc, #396]	; (8012900 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	b113      	cbz	r3, 801277e <HAL_TIM_PeriodElapsedCallback+0x16>
 8012778:	3b01      	subs	r3, #1
 801277a:	4a61      	ldr	r2, [pc, #388]	; (8012900 <HAL_TIM_PeriodElapsedCallback+0x198>)
 801277c:	6013      	str	r3, [r2, #0]
		if(gu32MBPOLLTimer)gu32MBPOLLTimer--;
 801277e:	4b61      	ldr	r3, [pc, #388]	; (8012904 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	b113      	cbz	r3, 801278a <HAL_TIM_PeriodElapsedCallback+0x22>
 8012784:	3b01      	subs	r3, #1
 8012786:	4a5f      	ldr	r2, [pc, #380]	; (8012904 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8012788:	6013      	str	r3, [r2, #0]
		if(master.u32PollDelay)master.u32PollDelay--;
 801278a:	4b5f      	ldr	r3, [pc, #380]	; (8012908 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 801278c:	f8d3 3e4c 	ldr.w	r3, [r3, #3660]	; 0xe4c
 8012790:	b11b      	cbz	r3, 801279a <HAL_TIM_PeriodElapsedCallback+0x32>
 8012792:	3b01      	subs	r3, #1
 8012794:	4a5c      	ldr	r2, [pc, #368]	; (8012908 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8012796:	f8c2 3e4c 	str.w	r3, [r2, #3660]	; 0xe4c
		if(gu32MBCharacterDelay)gu32MBCharacterDelay--;
 801279a:	4b5c      	ldr	r3, [pc, #368]	; (801290c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	b113      	cbz	r3, 80127a6 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80127a0:	3b01      	subs	r3, #1
 80127a2:	4a5a      	ldr	r2, [pc, #360]	; (801290c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80127a4:	6013      	str	r3, [r2, #0]
		if(gu32ModbusFrameEndTimer)gu32ModbusFrameEndTimer--;
 80127a6:	4b5a      	ldr	r3, [pc, #360]	; (8012910 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	b113      	cbz	r3, 80127b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80127ac:	3b01      	subs	r3, #1
 80127ae:	4a58      	ldr	r2, [pc, #352]	; (8012910 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80127b0:	6013      	str	r3, [r2, #0]
		if(gu32ModbusResponseTimeout)gu32ModbusResponseTimeout--;
 80127b2:	4b58      	ldr	r3, [pc, #352]	; (8012914 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	b113      	cbz	r3, 80127be <HAL_TIM_PeriodElapsedCallback+0x56>
 80127b8:	3b01      	subs	r3, #1
 80127ba:	4a56      	ldr	r2, [pc, #344]	; (8012914 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80127bc:	6013      	str	r3, [r2, #0]
		if(gu32LinkDisconnectTimer)gu32LinkDisconnectTimer--;
 80127be:	4b56      	ldr	r3, [pc, #344]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	b11b      	cbz	r3, 80127cc <HAL_TIM_PeriodElapsedCallback+0x64>
 80127c4:	4a54      	ldr	r2, [pc, #336]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80127c6:	6813      	ldr	r3, [r2, #0]
 80127c8:	3b01      	subs	r3, #1
 80127ca:	6013      	str	r3, [r2, #0]
		if(gu32GSMCharacterTimeout)gu32GSMCharacterTimeout--;
 80127cc:	4b53      	ldr	r3, [pc, #332]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	b113      	cbz	r3, 80127d8 <HAL_TIM_PeriodElapsedCallback+0x70>
 80127d2:	3b01      	subs	r3, #1
 80127d4:	4a51      	ldr	r2, [pc, #324]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80127d6:	6013      	str	r3, [r2, #0]
		if(gsmInstance.u32GSMTimer)gsmInstance.u32GSMTimer--;
 80127d8:	4b51      	ldr	r3, [pc, #324]	; (8012920 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80127da:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 80127de:	b12b      	cbz	r3, 80127ec <HAL_TIM_PeriodElapsedCallback+0x84>
 80127e0:	4a4f      	ldr	r2, [pc, #316]	; (8012920 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80127e2:	f8d2 3e20 	ldr.w	r3, [r2, #3616]	; 0xe20
 80127e6:	3b01      	subs	r3, #1
 80127e8:	f8c2 3e20 	str.w	r3, [r2, #3616]	; 0xe20
		if(gsmInstance.u32GSMResponseTimer)gsmInstance.u32GSMResponseTimer--;
 80127ec:	4b4c      	ldr	r3, [pc, #304]	; (8012920 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80127ee:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 80127f2:	b12b      	cbz	r3, 8012800 <HAL_TIM_PeriodElapsedCallback+0x98>
 80127f4:	4a4a      	ldr	r2, [pc, #296]	; (8012920 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80127f6:	f8d2 3e34 	ldr.w	r3, [r2, #3636]	; 0xe34
 80127fa:	3b01      	subs	r3, #1
 80127fc:	f8c2 3e34 	str.w	r3, [r2, #3636]	; 0xe34
		if(gsmInstance.u32GSMHeartbeatTimer)gsmInstance.u32GSMHeartbeatTimer--;
 8012800:	4b47      	ldr	r3, [pc, #284]	; (8012920 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8012802:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	; 0xe2c
 8012806:	b11b      	cbz	r3, 8012810 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8012808:	3b01      	subs	r3, #1
 801280a:	4a45      	ldr	r2, [pc, #276]	; (8012920 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 801280c:	f8c2 3e2c 	str.w	r3, [r2, #3628]	; 0xe2c
		if(gu32GSMHangTimer)gu32GSMHangTimer--;
 8012810:	4b42      	ldr	r3, [pc, #264]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	b11b      	cbz	r3, 801281e <HAL_TIM_PeriodElapsedCallback+0xb6>
 8012816:	4a41      	ldr	r2, [pc, #260]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012818:	6853      	ldr	r3, [r2, #4]
 801281a:	3b01      	subs	r3, #1
 801281c:	6053      	str	r3, [r2, #4]
		if(gu32GPSCharacterTimeout)gu32GPSCharacterTimeout--;
 801281e:	4b3f      	ldr	r3, [pc, #252]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	b113      	cbz	r3, 801282a <HAL_TIM_PeriodElapsedCallback+0xc2>
 8012824:	3b01      	subs	r3, #1
 8012826:	4a3d      	ldr	r2, [pc, #244]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012828:	6093      	str	r3, [r2, #8]
		if(gu32PayloadQueueEnqueue)gu32PayloadQueueEnqueue--;
 801282a:	4b3c      	ldr	r3, [pc, #240]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	b11b      	cbz	r3, 8012838 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8012830:	4a3a      	ldr	r2, [pc, #232]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012832:	68d3      	ldr	r3, [r2, #12]
 8012834:	3b01      	subs	r3, #1
 8012836:	60d3      	str	r3, [r2, #12]
		if(gu32TempPayloadQueueEnqueue)gu32TempPayloadQueueEnqueue--;
 8012838:	4b38      	ldr	r3, [pc, #224]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801283a:	691b      	ldr	r3, [r3, #16]
 801283c:	b11b      	cbz	r3, 8012846 <HAL_TIM_PeriodElapsedCallback+0xde>
 801283e:	4a37      	ldr	r2, [pc, #220]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012840:	6913      	ldr	r3, [r2, #16]
 8012842:	3b01      	subs	r3, #1
 8012844:	6113      	str	r3, [r2, #16]
		if(gu32FotaFileReadTimer)gu32FotaFileReadTimer--;
 8012846:	4b35      	ldr	r3, [pc, #212]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012848:	695b      	ldr	r3, [r3, #20]
 801284a:	b11b      	cbz	r3, 8012854 <HAL_TIM_PeriodElapsedCallback+0xec>
 801284c:	4a33      	ldr	r2, [pc, #204]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801284e:	6953      	ldr	r3, [r2, #20]
 8012850:	3b01      	subs	r3, #1
 8012852:	6153      	str	r3, [r2, #20]
		if(gu32GSMRestartTimer)gu32GSMRestartTimer--; /* Added on 6/2/22 . Was Missing :P */
 8012854:	4b30      	ldr	r3, [pc, #192]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	b11b      	cbz	r3, 8012862 <HAL_TIM_PeriodElapsedCallback+0xfa>
 801285a:	4a2f      	ldr	r2, [pc, #188]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 801285c:	6853      	ldr	r3, [r2, #4]
 801285e:	3b01      	subs	r3, #1
 8012860:	6053      	str	r3, [r2, #4]
		if(gu32RTCUpdateTimer)gu32RTCUpdateTimer--;
 8012862:	4b2e      	ldr	r3, [pc, #184]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	b113      	cbz	r3, 801286e <HAL_TIM_PeriodElapsedCallback+0x106>
 8012868:	3b01      	subs	r3, #1
 801286a:	4a2c      	ldr	r2, [pc, #176]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801286c:	6193      	str	r3, [r2, #24]
		if(gu32I2CMemoryOperationTimeout)gu32I2CMemoryOperationTimeout--;
 801286e:	4b2b      	ldr	r3, [pc, #172]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012870:	69db      	ldr	r3, [r3, #28]
 8012872:	b113      	cbz	r3, 801287a <HAL_TIM_PeriodElapsedCallback+0x112>
 8012874:	3b01      	subs	r3, #1
 8012876:	4a29      	ldr	r2, [pc, #164]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012878:	61d3      	str	r3, [r2, #28]
		if(gu32ADCOperationTimer)gu32ADCOperationTimer--;
 801287a:	4b28      	ldr	r3, [pc, #160]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801287c:	6a1b      	ldr	r3, [r3, #32]
 801287e:	b113      	cbz	r3, 8012886 <HAL_TIM_PeriodElapsedCallback+0x11e>
 8012880:	3b01      	subs	r3, #1
 8012882:	4a26      	ldr	r2, [pc, #152]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012884:	6213      	str	r3, [r2, #32]
		if(gu32ADCPollTimer)gu32ADCPollTimer--;
 8012886:	4b25      	ldr	r3, [pc, #148]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288a:	b113      	cbz	r3, 8012892 <HAL_TIM_PeriodElapsedCallback+0x12a>
 801288c:	3b01      	subs	r3, #1
 801288e:	4a23      	ldr	r2, [pc, #140]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012890:	6253      	str	r3, [r2, #36]	; 0x24
		if(gu32LedTimer)gu32LedTimer--;
 8012892:	4b22      	ldr	r3, [pc, #136]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8012894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012896:	b11b      	cbz	r3, 80128a0 <HAL_TIM_PeriodElapsedCallback+0x138>
 8012898:	4a20      	ldr	r2, [pc, #128]	; (801291c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 801289a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801289c:	3b01      	subs	r3, #1
 801289e:	6293      	str	r3, [r2, #40]	; 0x28
		if(gu32GSMConfigCheckTimer)gu32GSMConfigCheckTimer--;
 80128a0:	4b1d      	ldr	r3, [pc, #116]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	b11b      	cbz	r3, 80128ae <HAL_TIM_PeriodElapsedCallback+0x146>
 80128a6:	4a1c      	ldr	r2, [pc, #112]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128a8:	6893      	ldr	r3, [r2, #8]
 80128aa:	3b01      	subs	r3, #1
 80128ac:	6093      	str	r3, [r2, #8]
		if(gu32LinkDownTimer)gu32LinkDownTimer--;
 80128ae:	4b1a      	ldr	r3, [pc, #104]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128b0:	68db      	ldr	r3, [r3, #12]
 80128b2:	b11b      	cbz	r3, 80128bc <HAL_TIM_PeriodElapsedCallback+0x154>
 80128b4:	4a18      	ldr	r2, [pc, #96]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128b6:	68d3      	ldr	r3, [r2, #12]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	60d3      	str	r3, [r2, #12]
		if(gu32SystemResetTimer)gu32SystemResetTimer--;
 80128bc:	4b16      	ldr	r3, [pc, #88]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128be:	691b      	ldr	r3, [r3, #16]
 80128c0:	b11b      	cbz	r3, 80128ca <HAL_TIM_PeriodElapsedCallback+0x162>
 80128c2:	4a15      	ldr	r2, [pc, #84]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128c4:	6913      	ldr	r3, [r2, #16]
 80128c6:	3b01      	subs	r3, #1
 80128c8:	6113      	str	r3, [r2, #16]
		if(gu32ExtWatchDogResetTimer)gu32ExtWatchDogResetTimer--;
 80128ca:	4b13      	ldr	r3, [pc, #76]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	b11b      	cbz	r3, 80128d8 <HAL_TIM_PeriodElapsedCallback+0x170>
 80128d0:	4a11      	ldr	r2, [pc, #68]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128d2:	6953      	ldr	r3, [r2, #20]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	6153      	str	r3, [r2, #20]
		if(gu32UploadFailTimer)gu32UploadFailTimer--;
 80128d8:	4b0f      	ldr	r3, [pc, #60]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128da:	699b      	ldr	r3, [r3, #24]
 80128dc:	b11b      	cbz	r3, 80128e6 <HAL_TIM_PeriodElapsedCallback+0x17e>
 80128de:	4a0e      	ldr	r2, [pc, #56]	; (8012918 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80128e0:	6993      	ldr	r3, [r2, #24]
 80128e2:	3b01      	subs	r3, #1
 80128e4:	6193      	str	r3, [r2, #24]
		if(FlashStr.u32SerialFlashDelay)FlashStr.u32SerialFlashDelay--;
 80128e6:	4b0f      	ldr	r3, [pc, #60]	; (8012924 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80128e8:	691b      	ldr	r3, [r3, #16]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	f43f af40 	beq.w	8012770 <HAL_TIM_PeriodElapsedCallback+0x8>
 80128f0:	4a0c      	ldr	r2, [pc, #48]	; (8012924 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80128f2:	6913      	ldr	r3, [r2, #16]
 80128f4:	3b01      	subs	r3, #1
 80128f6:	6113      	str	r3, [r2, #16]
}
 80128f8:	e73a      	b.n	8012770 <HAL_TIM_PeriodElapsedCallback+0x8>
 80128fa:	bf00      	nop
 80128fc:	40001400 	.word	0x40001400
 8012900:	20003b14 	.word	0x20003b14
 8012904:	20003fe4 	.word	0x20003fe4
 8012908:	2000d3a0 	.word	0x2000d3a0
 801290c:	20003af0 	.word	0x20003af0
 8012910:	20003620 	.word	0x20003620
 8012914:	20003624 	.word	0x20003624
 8012918:	200029a8 	.word	0x200029a8
 801291c:	2000443c 	.word	0x2000443c
 8012920:	2000c164 	.word	0x2000c164
 8012924:	2000f154 	.word	0x2000f154

08012928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801292c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801292e:	e003      	b.n	8012938 <LoopCopyDataInit>

08012930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012930:	4b0c      	ldr	r3, [pc, #48]	; (8012964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012936:	3104      	adds	r1, #4

08012938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012938:	480b      	ldr	r0, [pc, #44]	; (8012968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801293a:	4b0c      	ldr	r3, [pc, #48]	; (801296c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801293c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801293e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012940:	d3f6      	bcc.n	8012930 <CopyDataInit>
  ldr  r2, =_sbss
 8012942:	4a0b      	ldr	r2, [pc, #44]	; (8012970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012944:	e002      	b.n	801294c <LoopFillZerobss>

08012946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012948:	f842 3b04 	str.w	r3, [r2], #4

0801294c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801294c:	4b09      	ldr	r3, [pc, #36]	; (8012974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801294e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012950:	d3f9      	bcc.n	8012946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012952:	f7ff f97b 	bl	8011c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012956:	f000 f817 	bl	8012988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801295a:	f7fb f95b 	bl	800dc14 <main>
  bx  lr    
 801295e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012960:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8012964:	0801c484 	.word	0x0801c484
  ldr  r0, =_sdata
 8012968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801296c:	20003374 	.word	0x20003374
  ldr  r2, =_sbss
 8012970:	20003374 	.word	0x20003374
  ldr  r3, = _ebss
 8012974:	20011384 	.word	0x20011384

08012978 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012978:	e7fe      	b.n	8012978 <CAN1_RX0_IRQHandler>

0801297a <atof>:
 801297a:	2100      	movs	r1, #0
 801297c:	f001 b98e 	b.w	8013c9c <strtod>

08012980 <atoi>:
 8012980:	220a      	movs	r2, #10
 8012982:	2100      	movs	r1, #0
 8012984:	f001 ba4a 	b.w	8013e1c <strtol>

08012988 <__libc_init_array>:
 8012988:	b570      	push	{r4, r5, r6, lr}
 801298a:	4d0d      	ldr	r5, [pc, #52]	; (80129c0 <__libc_init_array+0x38>)
 801298c:	4c0d      	ldr	r4, [pc, #52]	; (80129c4 <__libc_init_array+0x3c>)
 801298e:	1b64      	subs	r4, r4, r5
 8012990:	10a4      	asrs	r4, r4, #2
 8012992:	2600      	movs	r6, #0
 8012994:	42a6      	cmp	r6, r4
 8012996:	d109      	bne.n	80129ac <__libc_init_array+0x24>
 8012998:	4d0b      	ldr	r5, [pc, #44]	; (80129c8 <__libc_init_array+0x40>)
 801299a:	4c0c      	ldr	r4, [pc, #48]	; (80129cc <__libc_init_array+0x44>)
 801299c:	f007 fc2a 	bl	801a1f4 <_init>
 80129a0:	1b64      	subs	r4, r4, r5
 80129a2:	10a4      	asrs	r4, r4, #2
 80129a4:	2600      	movs	r6, #0
 80129a6:	42a6      	cmp	r6, r4
 80129a8:	d105      	bne.n	80129b6 <__libc_init_array+0x2e>
 80129aa:	bd70      	pop	{r4, r5, r6, pc}
 80129ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80129b0:	4798      	blx	r3
 80129b2:	3601      	adds	r6, #1
 80129b4:	e7ee      	b.n	8012994 <__libc_init_array+0xc>
 80129b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80129ba:	4798      	blx	r3
 80129bc:	3601      	adds	r6, #1
 80129be:	e7f2      	b.n	80129a6 <__libc_init_array+0x1e>
 80129c0:	0801c478 	.word	0x0801c478
 80129c4:	0801c478 	.word	0x0801c478
 80129c8:	0801c478 	.word	0x0801c478
 80129cc:	0801c480 	.word	0x0801c480

080129d0 <__itoa>:
 80129d0:	1e93      	subs	r3, r2, #2
 80129d2:	2b22      	cmp	r3, #34	; 0x22
 80129d4:	b510      	push	{r4, lr}
 80129d6:	460c      	mov	r4, r1
 80129d8:	d904      	bls.n	80129e4 <__itoa+0x14>
 80129da:	2300      	movs	r3, #0
 80129dc:	700b      	strb	r3, [r1, #0]
 80129de:	461c      	mov	r4, r3
 80129e0:	4620      	mov	r0, r4
 80129e2:	bd10      	pop	{r4, pc}
 80129e4:	2a0a      	cmp	r2, #10
 80129e6:	d109      	bne.n	80129fc <__itoa+0x2c>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	da07      	bge.n	80129fc <__itoa+0x2c>
 80129ec:	232d      	movs	r3, #45	; 0x2d
 80129ee:	700b      	strb	r3, [r1, #0]
 80129f0:	4240      	negs	r0, r0
 80129f2:	2101      	movs	r1, #1
 80129f4:	4421      	add	r1, r4
 80129f6:	f002 fc09 	bl	801520c <__utoa>
 80129fa:	e7f1      	b.n	80129e0 <__itoa+0x10>
 80129fc:	2100      	movs	r1, #0
 80129fe:	e7f9      	b.n	80129f4 <__itoa+0x24>

08012a00 <itoa>:
 8012a00:	f7ff bfe6 	b.w	80129d0 <__itoa>

08012a04 <malloc>:
 8012a04:	4b02      	ldr	r3, [pc, #8]	; (8012a10 <malloc+0xc>)
 8012a06:	4601      	mov	r1, r0
 8012a08:	6818      	ldr	r0, [r3, #0]
 8012a0a:	f000 b80b 	b.w	8012a24 <_malloc_r>
 8012a0e:	bf00      	nop
 8012a10:	200029c4 	.word	0x200029c4

08012a14 <free>:
 8012a14:	4b02      	ldr	r3, [pc, #8]	; (8012a20 <free+0xc>)
 8012a16:	4601      	mov	r1, r0
 8012a18:	6818      	ldr	r0, [r3, #0]
 8012a1a:	f004 bf09 	b.w	8017830 <_free_r>
 8012a1e:	bf00      	nop
 8012a20:	200029c4 	.word	0x200029c4

08012a24 <_malloc_r>:
 8012a24:	f101 030b 	add.w	r3, r1, #11
 8012a28:	2b16      	cmp	r3, #22
 8012a2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a2e:	4605      	mov	r5, r0
 8012a30:	d906      	bls.n	8012a40 <_malloc_r+0x1c>
 8012a32:	f033 0707 	bics.w	r7, r3, #7
 8012a36:	d504      	bpl.n	8012a42 <_malloc_r+0x1e>
 8012a38:	230c      	movs	r3, #12
 8012a3a:	602b      	str	r3, [r5, #0]
 8012a3c:	2400      	movs	r4, #0
 8012a3e:	e1ae      	b.n	8012d9e <_malloc_r+0x37a>
 8012a40:	2710      	movs	r7, #16
 8012a42:	42b9      	cmp	r1, r7
 8012a44:	d8f8      	bhi.n	8012a38 <_malloc_r+0x14>
 8012a46:	4628      	mov	r0, r5
 8012a48:	f000 fa52 	bl	8012ef0 <__malloc_lock>
 8012a4c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8012a50:	4ec3      	ldr	r6, [pc, #780]	; (8012d60 <_malloc_r+0x33c>)
 8012a52:	d238      	bcs.n	8012ac6 <_malloc_r+0xa2>
 8012a54:	f107 0208 	add.w	r2, r7, #8
 8012a58:	4432      	add	r2, r6
 8012a5a:	f1a2 0108 	sub.w	r1, r2, #8
 8012a5e:	6854      	ldr	r4, [r2, #4]
 8012a60:	428c      	cmp	r4, r1
 8012a62:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8012a66:	d102      	bne.n	8012a6e <_malloc_r+0x4a>
 8012a68:	68d4      	ldr	r4, [r2, #12]
 8012a6a:	42a2      	cmp	r2, r4
 8012a6c:	d010      	beq.n	8012a90 <_malloc_r+0x6c>
 8012a6e:	6863      	ldr	r3, [r4, #4]
 8012a70:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8012a74:	f023 0303 	bic.w	r3, r3, #3
 8012a78:	60ca      	str	r2, [r1, #12]
 8012a7a:	4423      	add	r3, r4
 8012a7c:	6091      	str	r1, [r2, #8]
 8012a7e:	685a      	ldr	r2, [r3, #4]
 8012a80:	f042 0201 	orr.w	r2, r2, #1
 8012a84:	605a      	str	r2, [r3, #4]
 8012a86:	4628      	mov	r0, r5
 8012a88:	f000 fa38 	bl	8012efc <__malloc_unlock>
 8012a8c:	3408      	adds	r4, #8
 8012a8e:	e186      	b.n	8012d9e <_malloc_r+0x37a>
 8012a90:	3302      	adds	r3, #2
 8012a92:	4ab4      	ldr	r2, [pc, #720]	; (8012d64 <_malloc_r+0x340>)
 8012a94:	6934      	ldr	r4, [r6, #16]
 8012a96:	4294      	cmp	r4, r2
 8012a98:	4611      	mov	r1, r2
 8012a9a:	d077      	beq.n	8012b8c <_malloc_r+0x168>
 8012a9c:	6860      	ldr	r0, [r4, #4]
 8012a9e:	f020 0c03 	bic.w	ip, r0, #3
 8012aa2:	ebac 0007 	sub.w	r0, ip, r7
 8012aa6:	280f      	cmp	r0, #15
 8012aa8:	dd48      	ble.n	8012b3c <_malloc_r+0x118>
 8012aaa:	19e1      	adds	r1, r4, r7
 8012aac:	f040 0301 	orr.w	r3, r0, #1
 8012ab0:	f047 0701 	orr.w	r7, r7, #1
 8012ab4:	6067      	str	r7, [r4, #4]
 8012ab6:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8012aba:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8012abe:	604b      	str	r3, [r1, #4]
 8012ac0:	f844 000c 	str.w	r0, [r4, ip]
 8012ac4:	e7df      	b.n	8012a86 <_malloc_r+0x62>
 8012ac6:	0a7b      	lsrs	r3, r7, #9
 8012ac8:	d02a      	beq.n	8012b20 <_malloc_r+0xfc>
 8012aca:	2b04      	cmp	r3, #4
 8012acc:	d812      	bhi.n	8012af4 <_malloc_r+0xd0>
 8012ace:	09bb      	lsrs	r3, r7, #6
 8012ad0:	3338      	adds	r3, #56	; 0x38
 8012ad2:	1c5a      	adds	r2, r3, #1
 8012ad4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012ad8:	f1a2 0c08 	sub.w	ip, r2, #8
 8012adc:	6854      	ldr	r4, [r2, #4]
 8012ade:	4564      	cmp	r4, ip
 8012ae0:	d006      	beq.n	8012af0 <_malloc_r+0xcc>
 8012ae2:	6862      	ldr	r2, [r4, #4]
 8012ae4:	f022 0203 	bic.w	r2, r2, #3
 8012ae8:	1bd0      	subs	r0, r2, r7
 8012aea:	280f      	cmp	r0, #15
 8012aec:	dd1c      	ble.n	8012b28 <_malloc_r+0x104>
 8012aee:	3b01      	subs	r3, #1
 8012af0:	3301      	adds	r3, #1
 8012af2:	e7ce      	b.n	8012a92 <_malloc_r+0x6e>
 8012af4:	2b14      	cmp	r3, #20
 8012af6:	d801      	bhi.n	8012afc <_malloc_r+0xd8>
 8012af8:	335b      	adds	r3, #91	; 0x5b
 8012afa:	e7ea      	b.n	8012ad2 <_malloc_r+0xae>
 8012afc:	2b54      	cmp	r3, #84	; 0x54
 8012afe:	d802      	bhi.n	8012b06 <_malloc_r+0xe2>
 8012b00:	0b3b      	lsrs	r3, r7, #12
 8012b02:	336e      	adds	r3, #110	; 0x6e
 8012b04:	e7e5      	b.n	8012ad2 <_malloc_r+0xae>
 8012b06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8012b0a:	d802      	bhi.n	8012b12 <_malloc_r+0xee>
 8012b0c:	0bfb      	lsrs	r3, r7, #15
 8012b0e:	3377      	adds	r3, #119	; 0x77
 8012b10:	e7df      	b.n	8012ad2 <_malloc_r+0xae>
 8012b12:	f240 5254 	movw	r2, #1364	; 0x554
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d804      	bhi.n	8012b24 <_malloc_r+0x100>
 8012b1a:	0cbb      	lsrs	r3, r7, #18
 8012b1c:	337c      	adds	r3, #124	; 0x7c
 8012b1e:	e7d8      	b.n	8012ad2 <_malloc_r+0xae>
 8012b20:	233f      	movs	r3, #63	; 0x3f
 8012b22:	e7d6      	b.n	8012ad2 <_malloc_r+0xae>
 8012b24:	237e      	movs	r3, #126	; 0x7e
 8012b26:	e7d4      	b.n	8012ad2 <_malloc_r+0xae>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	68e1      	ldr	r1, [r4, #12]
 8012b2c:	db04      	blt.n	8012b38 <_malloc_r+0x114>
 8012b2e:	68a3      	ldr	r3, [r4, #8]
 8012b30:	60d9      	str	r1, [r3, #12]
 8012b32:	608b      	str	r3, [r1, #8]
 8012b34:	18a3      	adds	r3, r4, r2
 8012b36:	e7a2      	b.n	8012a7e <_malloc_r+0x5a>
 8012b38:	460c      	mov	r4, r1
 8012b3a:	e7d0      	b.n	8012ade <_malloc_r+0xba>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012b42:	db07      	blt.n	8012b54 <_malloc_r+0x130>
 8012b44:	44a4      	add	ip, r4
 8012b46:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8012b4a:	f043 0301 	orr.w	r3, r3, #1
 8012b4e:	f8cc 3004 	str.w	r3, [ip, #4]
 8012b52:	e798      	b.n	8012a86 <_malloc_r+0x62>
 8012b54:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8012b58:	6870      	ldr	r0, [r6, #4]
 8012b5a:	f080 809e 	bcs.w	8012c9a <_malloc_r+0x276>
 8012b5e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8012b62:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8012b66:	f04f 0c01 	mov.w	ip, #1
 8012b6a:	3201      	adds	r2, #1
 8012b6c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8012b70:	ea4c 0000 	orr.w	r0, ip, r0
 8012b74:	6070      	str	r0, [r6, #4]
 8012b76:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8012b7a:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8012b7e:	3808      	subs	r0, #8
 8012b80:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8012b84:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8012b88:	f8cc 400c 	str.w	r4, [ip, #12]
 8012b8c:	2001      	movs	r0, #1
 8012b8e:	109a      	asrs	r2, r3, #2
 8012b90:	fa00 f202 	lsl.w	r2, r0, r2
 8012b94:	6870      	ldr	r0, [r6, #4]
 8012b96:	4290      	cmp	r0, r2
 8012b98:	d326      	bcc.n	8012be8 <_malloc_r+0x1c4>
 8012b9a:	4210      	tst	r0, r2
 8012b9c:	d106      	bne.n	8012bac <_malloc_r+0x188>
 8012b9e:	f023 0303 	bic.w	r3, r3, #3
 8012ba2:	0052      	lsls	r2, r2, #1
 8012ba4:	4210      	tst	r0, r2
 8012ba6:	f103 0304 	add.w	r3, r3, #4
 8012baa:	d0fa      	beq.n	8012ba2 <_malloc_r+0x17e>
 8012bac:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8012bb0:	46c1      	mov	r9, r8
 8012bb2:	469e      	mov	lr, r3
 8012bb4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012bb8:	454c      	cmp	r4, r9
 8012bba:	f040 80b3 	bne.w	8012d24 <_malloc_r+0x300>
 8012bbe:	f10e 0e01 	add.w	lr, lr, #1
 8012bc2:	f01e 0f03 	tst.w	lr, #3
 8012bc6:	f109 0908 	add.w	r9, r9, #8
 8012bca:	d1f3      	bne.n	8012bb4 <_malloc_r+0x190>
 8012bcc:	0798      	lsls	r0, r3, #30
 8012bce:	f040 80ec 	bne.w	8012daa <_malloc_r+0x386>
 8012bd2:	6873      	ldr	r3, [r6, #4]
 8012bd4:	ea23 0302 	bic.w	r3, r3, r2
 8012bd8:	6073      	str	r3, [r6, #4]
 8012bda:	6870      	ldr	r0, [r6, #4]
 8012bdc:	0052      	lsls	r2, r2, #1
 8012bde:	4290      	cmp	r0, r2
 8012be0:	d302      	bcc.n	8012be8 <_malloc_r+0x1c4>
 8012be2:	2a00      	cmp	r2, #0
 8012be4:	f040 80ee 	bne.w	8012dc4 <_malloc_r+0x3a0>
 8012be8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8012bec:	f8db 1004 	ldr.w	r1, [fp, #4]
 8012bf0:	f021 0903 	bic.w	r9, r1, #3
 8012bf4:	45b9      	cmp	r9, r7
 8012bf6:	d304      	bcc.n	8012c02 <_malloc_r+0x1de>
 8012bf8:	eba9 0207 	sub.w	r2, r9, r7
 8012bfc:	2a0f      	cmp	r2, #15
 8012bfe:	f300 8149 	bgt.w	8012e94 <_malloc_r+0x470>
 8012c02:	4a59      	ldr	r2, [pc, #356]	; (8012d68 <_malloc_r+0x344>)
 8012c04:	6811      	ldr	r1, [r2, #0]
 8012c06:	3110      	adds	r1, #16
 8012c08:	eb0b 0309 	add.w	r3, fp, r9
 8012c0c:	4439      	add	r1, r7
 8012c0e:	2008      	movs	r0, #8
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	9100      	str	r1, [sp, #0]
 8012c14:	f002 faec 	bl	80151f0 <sysconf>
 8012c18:	4a54      	ldr	r2, [pc, #336]	; (8012d6c <_malloc_r+0x348>)
 8012c1a:	e9dd 1300 	ldrd	r1, r3, [sp]
 8012c1e:	4680      	mov	r8, r0
 8012c20:	6810      	ldr	r0, [r2, #0]
 8012c22:	3001      	adds	r0, #1
 8012c24:	bf1f      	itttt	ne
 8012c26:	f101 31ff 	addne.w	r1, r1, #4294967295
 8012c2a:	4441      	addne	r1, r8
 8012c2c:	f1c8 0000 	rsbne	r0, r8, #0
 8012c30:	4001      	andne	r1, r0
 8012c32:	4628      	mov	r0, r5
 8012c34:	e9cd 1300 	strd	r1, r3, [sp]
 8012c38:	f000 f978 	bl	8012f2c <_sbrk_r>
 8012c3c:	1c42      	adds	r2, r0, #1
 8012c3e:	4604      	mov	r4, r0
 8012c40:	f000 80fc 	beq.w	8012e3c <_malloc_r+0x418>
 8012c44:	9b01      	ldr	r3, [sp, #4]
 8012c46:	9900      	ldr	r1, [sp, #0]
 8012c48:	4a48      	ldr	r2, [pc, #288]	; (8012d6c <_malloc_r+0x348>)
 8012c4a:	4283      	cmp	r3, r0
 8012c4c:	d902      	bls.n	8012c54 <_malloc_r+0x230>
 8012c4e:	45b3      	cmp	fp, r6
 8012c50:	f040 80f4 	bne.w	8012e3c <_malloc_r+0x418>
 8012c54:	f8df a120 	ldr.w	sl, [pc, #288]	; 8012d78 <_malloc_r+0x354>
 8012c58:	f8da 0000 	ldr.w	r0, [sl]
 8012c5c:	42a3      	cmp	r3, r4
 8012c5e:	eb00 0e01 	add.w	lr, r0, r1
 8012c62:	f8ca e000 	str.w	lr, [sl]
 8012c66:	f108 3cff 	add.w	ip, r8, #4294967295
 8012c6a:	f040 80ad 	bne.w	8012dc8 <_malloc_r+0x3a4>
 8012c6e:	ea13 0f0c 	tst.w	r3, ip
 8012c72:	f040 80a9 	bne.w	8012dc8 <_malloc_r+0x3a4>
 8012c76:	68b3      	ldr	r3, [r6, #8]
 8012c78:	4449      	add	r1, r9
 8012c7a:	f041 0101 	orr.w	r1, r1, #1
 8012c7e:	6059      	str	r1, [r3, #4]
 8012c80:	4a3b      	ldr	r2, [pc, #236]	; (8012d70 <_malloc_r+0x34c>)
 8012c82:	f8da 3000 	ldr.w	r3, [sl]
 8012c86:	6811      	ldr	r1, [r2, #0]
 8012c88:	428b      	cmp	r3, r1
 8012c8a:	bf88      	it	hi
 8012c8c:	6013      	strhi	r3, [r2, #0]
 8012c8e:	4a39      	ldr	r2, [pc, #228]	; (8012d74 <_malloc_r+0x350>)
 8012c90:	6811      	ldr	r1, [r2, #0]
 8012c92:	428b      	cmp	r3, r1
 8012c94:	bf88      	it	hi
 8012c96:	6013      	strhi	r3, [r2, #0]
 8012c98:	e0d0      	b.n	8012e3c <_malloc_r+0x418>
 8012c9a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8012c9e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8012ca2:	d218      	bcs.n	8012cd6 <_malloc_r+0x2b2>
 8012ca4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012ca8:	3238      	adds	r2, #56	; 0x38
 8012caa:	f102 0e01 	add.w	lr, r2, #1
 8012cae:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8012cb2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8012cb6:	45f0      	cmp	r8, lr
 8012cb8:	d12b      	bne.n	8012d12 <_malloc_r+0x2ee>
 8012cba:	1092      	asrs	r2, r2, #2
 8012cbc:	f04f 0c01 	mov.w	ip, #1
 8012cc0:	fa0c f202 	lsl.w	r2, ip, r2
 8012cc4:	4310      	orrs	r0, r2
 8012cc6:	6070      	str	r0, [r6, #4]
 8012cc8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012ccc:	f8c8 4008 	str.w	r4, [r8, #8]
 8012cd0:	f8ce 400c 	str.w	r4, [lr, #12]
 8012cd4:	e75a      	b.n	8012b8c <_malloc_r+0x168>
 8012cd6:	2a14      	cmp	r2, #20
 8012cd8:	d801      	bhi.n	8012cde <_malloc_r+0x2ba>
 8012cda:	325b      	adds	r2, #91	; 0x5b
 8012cdc:	e7e5      	b.n	8012caa <_malloc_r+0x286>
 8012cde:	2a54      	cmp	r2, #84	; 0x54
 8012ce0:	d803      	bhi.n	8012cea <_malloc_r+0x2c6>
 8012ce2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8012ce6:	326e      	adds	r2, #110	; 0x6e
 8012ce8:	e7df      	b.n	8012caa <_malloc_r+0x286>
 8012cea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012cee:	d803      	bhi.n	8012cf8 <_malloc_r+0x2d4>
 8012cf0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8012cf4:	3277      	adds	r2, #119	; 0x77
 8012cf6:	e7d8      	b.n	8012caa <_malloc_r+0x286>
 8012cf8:	f240 5e54 	movw	lr, #1364	; 0x554
 8012cfc:	4572      	cmp	r2, lr
 8012cfe:	bf9a      	itte	ls
 8012d00:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8012d04:	327c      	addls	r2, #124	; 0x7c
 8012d06:	227e      	movhi	r2, #126	; 0x7e
 8012d08:	e7cf      	b.n	8012caa <_malloc_r+0x286>
 8012d0a:	f8de e008 	ldr.w	lr, [lr, #8]
 8012d0e:	45f0      	cmp	r8, lr
 8012d10:	d005      	beq.n	8012d1e <_malloc_r+0x2fa>
 8012d12:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012d16:	f022 0203 	bic.w	r2, r2, #3
 8012d1a:	4562      	cmp	r2, ip
 8012d1c:	d8f5      	bhi.n	8012d0a <_malloc_r+0x2e6>
 8012d1e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012d22:	e7d1      	b.n	8012cc8 <_malloc_r+0x2a4>
 8012d24:	6860      	ldr	r0, [r4, #4]
 8012d26:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012d2a:	f020 0003 	bic.w	r0, r0, #3
 8012d2e:	eba0 0a07 	sub.w	sl, r0, r7
 8012d32:	f1ba 0f0f 	cmp.w	sl, #15
 8012d36:	dd21      	ble.n	8012d7c <_malloc_r+0x358>
 8012d38:	68a3      	ldr	r3, [r4, #8]
 8012d3a:	19e2      	adds	r2, r4, r7
 8012d3c:	f047 0701 	orr.w	r7, r7, #1
 8012d40:	6067      	str	r7, [r4, #4]
 8012d42:	f8c3 c00c 	str.w	ip, [r3, #12]
 8012d46:	f8cc 3008 	str.w	r3, [ip, #8]
 8012d4a:	f04a 0301 	orr.w	r3, sl, #1
 8012d4e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012d52:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8012d56:	6053      	str	r3, [r2, #4]
 8012d58:	f844 a000 	str.w	sl, [r4, r0]
 8012d5c:	e693      	b.n	8012a86 <_malloc_r+0x62>
 8012d5e:	bf00      	nop
 8012d60:	20002df0 	.word	0x20002df0
 8012d64:	20002df8 	.word	0x20002df8
 8012d68:	200044a8 	.word	0x200044a8
 8012d6c:	200031f8 	.word	0x200031f8
 8012d70:	200044a0 	.word	0x200044a0
 8012d74:	200044a4 	.word	0x200044a4
 8012d78:	20004478 	.word	0x20004478
 8012d7c:	f1ba 0f00 	cmp.w	sl, #0
 8012d80:	db11      	blt.n	8012da6 <_malloc_r+0x382>
 8012d82:	4420      	add	r0, r4
 8012d84:	6843      	ldr	r3, [r0, #4]
 8012d86:	f043 0301 	orr.w	r3, r3, #1
 8012d8a:	6043      	str	r3, [r0, #4]
 8012d8c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8012d90:	4628      	mov	r0, r5
 8012d92:	f8c3 c00c 	str.w	ip, [r3, #12]
 8012d96:	f8cc 3008 	str.w	r3, [ip, #8]
 8012d9a:	f000 f8af 	bl	8012efc <__malloc_unlock>
 8012d9e:	4620      	mov	r0, r4
 8012da0:	b003      	add	sp, #12
 8012da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da6:	4664      	mov	r4, ip
 8012da8:	e706      	b.n	8012bb8 <_malloc_r+0x194>
 8012daa:	f858 0908 	ldr.w	r0, [r8], #-8
 8012dae:	4540      	cmp	r0, r8
 8012db0:	f103 33ff 	add.w	r3, r3, #4294967295
 8012db4:	f43f af0a 	beq.w	8012bcc <_malloc_r+0x1a8>
 8012db8:	e70f      	b.n	8012bda <_malloc_r+0x1b6>
 8012dba:	3304      	adds	r3, #4
 8012dbc:	0052      	lsls	r2, r2, #1
 8012dbe:	4210      	tst	r0, r2
 8012dc0:	d0fb      	beq.n	8012dba <_malloc_r+0x396>
 8012dc2:	e6f3      	b.n	8012bac <_malloc_r+0x188>
 8012dc4:	4673      	mov	r3, lr
 8012dc6:	e7fa      	b.n	8012dbe <_malloc_r+0x39a>
 8012dc8:	6810      	ldr	r0, [r2, #0]
 8012dca:	3001      	adds	r0, #1
 8012dcc:	bf1b      	ittet	ne
 8012dce:	1ae3      	subne	r3, r4, r3
 8012dd0:	4473      	addne	r3, lr
 8012dd2:	6014      	streq	r4, [r2, #0]
 8012dd4:	f8ca 3000 	strne.w	r3, [sl]
 8012dd8:	f014 0307 	ands.w	r3, r4, #7
 8012ddc:	bf1a      	itte	ne
 8012dde:	f1c3 0008 	rsbne	r0, r3, #8
 8012de2:	1824      	addne	r4, r4, r0
 8012de4:	4618      	moveq	r0, r3
 8012de6:	1862      	adds	r2, r4, r1
 8012de8:	ea02 010c 	and.w	r1, r2, ip
 8012dec:	4480      	add	r8, r0
 8012dee:	eba8 0801 	sub.w	r8, r8, r1
 8012df2:	ea08 080c 	and.w	r8, r8, ip
 8012df6:	4641      	mov	r1, r8
 8012df8:	4628      	mov	r0, r5
 8012dfa:	9301      	str	r3, [sp, #4]
 8012dfc:	9200      	str	r2, [sp, #0]
 8012dfe:	f000 f895 	bl	8012f2c <_sbrk_r>
 8012e02:	1c43      	adds	r3, r0, #1
 8012e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e08:	d105      	bne.n	8012e16 <_malloc_r+0x3f2>
 8012e0a:	b32b      	cbz	r3, 8012e58 <_malloc_r+0x434>
 8012e0c:	f1a3 0008 	sub.w	r0, r3, #8
 8012e10:	4410      	add	r0, r2
 8012e12:	f04f 0800 	mov.w	r8, #0
 8012e16:	f8da 2000 	ldr.w	r2, [sl]
 8012e1a:	60b4      	str	r4, [r6, #8]
 8012e1c:	1b00      	subs	r0, r0, r4
 8012e1e:	4440      	add	r0, r8
 8012e20:	4442      	add	r2, r8
 8012e22:	f040 0001 	orr.w	r0, r0, #1
 8012e26:	45b3      	cmp	fp, r6
 8012e28:	f8ca 2000 	str.w	r2, [sl]
 8012e2c:	6060      	str	r0, [r4, #4]
 8012e2e:	f43f af27 	beq.w	8012c80 <_malloc_r+0x25c>
 8012e32:	f1b9 0f0f 	cmp.w	r9, #15
 8012e36:	d812      	bhi.n	8012e5e <_malloc_r+0x43a>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	6063      	str	r3, [r4, #4]
 8012e3c:	68b3      	ldr	r3, [r6, #8]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	f023 0303 	bic.w	r3, r3, #3
 8012e44:	42bb      	cmp	r3, r7
 8012e46:	eba3 0207 	sub.w	r2, r3, r7
 8012e4a:	d301      	bcc.n	8012e50 <_malloc_r+0x42c>
 8012e4c:	2a0f      	cmp	r2, #15
 8012e4e:	dc21      	bgt.n	8012e94 <_malloc_r+0x470>
 8012e50:	4628      	mov	r0, r5
 8012e52:	f000 f853 	bl	8012efc <__malloc_unlock>
 8012e56:	e5f1      	b.n	8012a3c <_malloc_r+0x18>
 8012e58:	4610      	mov	r0, r2
 8012e5a:	4698      	mov	r8, r3
 8012e5c:	e7db      	b.n	8012e16 <_malloc_r+0x3f2>
 8012e5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012e62:	f1a9 090c 	sub.w	r9, r9, #12
 8012e66:	f029 0907 	bic.w	r9, r9, #7
 8012e6a:	f003 0301 	and.w	r3, r3, #1
 8012e6e:	ea43 0309 	orr.w	r3, r3, r9
 8012e72:	f8cb 3004 	str.w	r3, [fp, #4]
 8012e76:	2205      	movs	r2, #5
 8012e78:	eb0b 0309 	add.w	r3, fp, r9
 8012e7c:	f1b9 0f0f 	cmp.w	r9, #15
 8012e80:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8012e84:	f67f aefc 	bls.w	8012c80 <_malloc_r+0x25c>
 8012e88:	f10b 0108 	add.w	r1, fp, #8
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	f004 fccf 	bl	8017830 <_free_r>
 8012e92:	e6f5      	b.n	8012c80 <_malloc_r+0x25c>
 8012e94:	68b4      	ldr	r4, [r6, #8]
 8012e96:	f047 0301 	orr.w	r3, r7, #1
 8012e9a:	4427      	add	r7, r4
 8012e9c:	f042 0201 	orr.w	r2, r2, #1
 8012ea0:	6063      	str	r3, [r4, #4]
 8012ea2:	60b7      	str	r7, [r6, #8]
 8012ea4:	607a      	str	r2, [r7, #4]
 8012ea6:	e5ee      	b.n	8012a86 <_malloc_r+0x62>

08012ea8 <memcmp>:
 8012ea8:	b530      	push	{r4, r5, lr}
 8012eaa:	3901      	subs	r1, #1
 8012eac:	2400      	movs	r4, #0
 8012eae:	42a2      	cmp	r2, r4
 8012eb0:	d101      	bne.n	8012eb6 <memcmp+0xe>
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	e005      	b.n	8012ec2 <memcmp+0x1a>
 8012eb6:	5d03      	ldrb	r3, [r0, r4]
 8012eb8:	3401      	adds	r4, #1
 8012eba:	5d0d      	ldrb	r5, [r1, r4]
 8012ebc:	42ab      	cmp	r3, r5
 8012ebe:	d0f6      	beq.n	8012eae <memcmp+0x6>
 8012ec0:	1b58      	subs	r0, r3, r5
 8012ec2:	bd30      	pop	{r4, r5, pc}

08012ec4 <memcpy>:
 8012ec4:	440a      	add	r2, r1
 8012ec6:	4291      	cmp	r1, r2
 8012ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ecc:	d100      	bne.n	8012ed0 <memcpy+0xc>
 8012ece:	4770      	bx	lr
 8012ed0:	b510      	push	{r4, lr}
 8012ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eda:	4291      	cmp	r1, r2
 8012edc:	d1f9      	bne.n	8012ed2 <memcpy+0xe>
 8012ede:	bd10      	pop	{r4, pc}

08012ee0 <memset>:
 8012ee0:	4402      	add	r2, r0
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	d100      	bne.n	8012eea <memset+0xa>
 8012ee8:	4770      	bx	lr
 8012eea:	f803 1b01 	strb.w	r1, [r3], #1
 8012eee:	e7f9      	b.n	8012ee4 <memset+0x4>

08012ef0 <__malloc_lock>:
 8012ef0:	4801      	ldr	r0, [pc, #4]	; (8012ef8 <__malloc_lock+0x8>)
 8012ef2:	f005 b8f7 	b.w	80180e4 <__retarget_lock_acquire_recursive>
 8012ef6:	bf00      	nop
 8012ef8:	2001137c 	.word	0x2001137c

08012efc <__malloc_unlock>:
 8012efc:	4801      	ldr	r0, [pc, #4]	; (8012f04 <__malloc_unlock+0x8>)
 8012efe:	f005 b8f2 	b.w	80180e6 <__retarget_lock_release_recursive>
 8012f02:	bf00      	nop
 8012f04:	2001137c 	.word	0x2001137c

08012f08 <printf>:
 8012f08:	b40f      	push	{r0, r1, r2, r3}
 8012f0a:	b507      	push	{r0, r1, r2, lr}
 8012f0c:	4906      	ldr	r1, [pc, #24]	; (8012f28 <printf+0x20>)
 8012f0e:	ab04      	add	r3, sp, #16
 8012f10:	6808      	ldr	r0, [r1, #0]
 8012f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f16:	6881      	ldr	r1, [r0, #8]
 8012f18:	9301      	str	r3, [sp, #4]
 8012f1a:	f002 f9b9 	bl	8015290 <_vfprintf_r>
 8012f1e:	b003      	add	sp, #12
 8012f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f24:	b004      	add	sp, #16
 8012f26:	4770      	bx	lr
 8012f28:	200029c4 	.word	0x200029c4

08012f2c <_sbrk_r>:
 8012f2c:	b538      	push	{r3, r4, r5, lr}
 8012f2e:	4d06      	ldr	r5, [pc, #24]	; (8012f48 <_sbrk_r+0x1c>)
 8012f30:	2300      	movs	r3, #0
 8012f32:	4604      	mov	r4, r0
 8012f34:	4608      	mov	r0, r1
 8012f36:	602b      	str	r3, [r5, #0]
 8012f38:	f7fe fe5e 	bl	8011bf8 <_sbrk>
 8012f3c:	1c43      	adds	r3, r0, #1
 8012f3e:	d102      	bne.n	8012f46 <_sbrk_r+0x1a>
 8012f40:	682b      	ldr	r3, [r5, #0]
 8012f42:	b103      	cbz	r3, 8012f46 <_sbrk_r+0x1a>
 8012f44:	6023      	str	r3, [r4, #0]
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	20011374 	.word	0x20011374

08012f4c <sprintf>:
 8012f4c:	b40e      	push	{r1, r2, r3}
 8012f4e:	b500      	push	{lr}
 8012f50:	b09c      	sub	sp, #112	; 0x70
 8012f52:	ab1d      	add	r3, sp, #116	; 0x74
 8012f54:	9002      	str	r0, [sp, #8]
 8012f56:	9006      	str	r0, [sp, #24]
 8012f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f5c:	4809      	ldr	r0, [pc, #36]	; (8012f84 <sprintf+0x38>)
 8012f5e:	9107      	str	r1, [sp, #28]
 8012f60:	9104      	str	r1, [sp, #16]
 8012f62:	4909      	ldr	r1, [pc, #36]	; (8012f88 <sprintf+0x3c>)
 8012f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f68:	9105      	str	r1, [sp, #20]
 8012f6a:	6800      	ldr	r0, [r0, #0]
 8012f6c:	9301      	str	r3, [sp, #4]
 8012f6e:	a902      	add	r1, sp, #8
 8012f70:	f000 ff5e 	bl	8013e30 <_svfprintf_r>
 8012f74:	9b02      	ldr	r3, [sp, #8]
 8012f76:	2200      	movs	r2, #0
 8012f78:	701a      	strb	r2, [r3, #0]
 8012f7a:	b01c      	add	sp, #112	; 0x70
 8012f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f80:	b003      	add	sp, #12
 8012f82:	4770      	bx	lr
 8012f84:	200029c4 	.word	0x200029c4
 8012f88:	ffff0208 	.word	0xffff0208

08012f8c <strcat>:
 8012f8c:	b510      	push	{r4, lr}
 8012f8e:	4602      	mov	r2, r0
 8012f90:	7814      	ldrb	r4, [r2, #0]
 8012f92:	4613      	mov	r3, r2
 8012f94:	3201      	adds	r2, #1
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	d1fa      	bne.n	8012f90 <strcat+0x4>
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012fa4:	2a00      	cmp	r2, #0
 8012fa6:	d1f9      	bne.n	8012f9c <strcat+0x10>
 8012fa8:	bd10      	pop	{r4, pc}

08012faa <strchr>:
 8012faa:	b2c9      	uxtb	r1, r1
 8012fac:	4603      	mov	r3, r0
 8012fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fb2:	b11a      	cbz	r2, 8012fbc <strchr+0x12>
 8012fb4:	428a      	cmp	r2, r1
 8012fb6:	d1f9      	bne.n	8012fac <strchr+0x2>
 8012fb8:	4618      	mov	r0, r3
 8012fba:	4770      	bx	lr
 8012fbc:	2900      	cmp	r1, #0
 8012fbe:	bf18      	it	ne
 8012fc0:	2300      	movne	r3, #0
 8012fc2:	e7f9      	b.n	8012fb8 <strchr+0xe>

08012fc4 <strcpy>:
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fca:	f803 2b01 	strb.w	r2, [r3], #1
 8012fce:	2a00      	cmp	r2, #0
 8012fd0:	d1f9      	bne.n	8012fc6 <strcpy+0x2>
 8012fd2:	4770      	bx	lr

08012fd4 <strncat>:
 8012fd4:	b530      	push	{r4, r5, lr}
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	7825      	ldrb	r5, [r4, #0]
 8012fda:	4623      	mov	r3, r4
 8012fdc:	3401      	adds	r4, #1
 8012fde:	2d00      	cmp	r5, #0
 8012fe0:	d1fa      	bne.n	8012fd8 <strncat+0x4>
 8012fe2:	3a01      	subs	r2, #1
 8012fe4:	d304      	bcc.n	8012ff0 <strncat+0x1c>
 8012fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fea:	f803 4b01 	strb.w	r4, [r3], #1
 8012fee:	b904      	cbnz	r4, 8012ff2 <strncat+0x1e>
 8012ff0:	bd30      	pop	{r4, r5, pc}
 8012ff2:	2a00      	cmp	r2, #0
 8012ff4:	d1f5      	bne.n	8012fe2 <strncat+0xe>
 8012ff6:	701a      	strb	r2, [r3, #0]
 8012ff8:	e7f3      	b.n	8012fe2 <strncat+0xe>

08012ffa <strncmp>:
 8012ffa:	b510      	push	{r4, lr}
 8012ffc:	b16a      	cbz	r2, 801301a <strncmp+0x20>
 8012ffe:	3901      	subs	r1, #1
 8013000:	1884      	adds	r4, r0, r2
 8013002:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013006:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801300a:	4293      	cmp	r3, r2
 801300c:	d103      	bne.n	8013016 <strncmp+0x1c>
 801300e:	42a0      	cmp	r0, r4
 8013010:	d001      	beq.n	8013016 <strncmp+0x1c>
 8013012:	2b00      	cmp	r3, #0
 8013014:	d1f5      	bne.n	8013002 <strncmp+0x8>
 8013016:	1a98      	subs	r0, r3, r2
 8013018:	bd10      	pop	{r4, pc}
 801301a:	4610      	mov	r0, r2
 801301c:	e7fc      	b.n	8013018 <strncmp+0x1e>

0801301e <strstr>:
 801301e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013020:	780c      	ldrb	r4, [r1, #0]
 8013022:	b164      	cbz	r4, 801303e <strstr+0x20>
 8013024:	4603      	mov	r3, r0
 8013026:	781a      	ldrb	r2, [r3, #0]
 8013028:	4618      	mov	r0, r3
 801302a:	1c5e      	adds	r6, r3, #1
 801302c:	b90a      	cbnz	r2, 8013032 <strstr+0x14>
 801302e:	4610      	mov	r0, r2
 8013030:	e005      	b.n	801303e <strstr+0x20>
 8013032:	4294      	cmp	r4, r2
 8013034:	d108      	bne.n	8013048 <strstr+0x2a>
 8013036:	460d      	mov	r5, r1
 8013038:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801303c:	b902      	cbnz	r2, 8013040 <strstr+0x22>
 801303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013040:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8013044:	4297      	cmp	r7, r2
 8013046:	d0f7      	beq.n	8013038 <strstr+0x1a>
 8013048:	4633      	mov	r3, r6
 801304a:	e7ec      	b.n	8013026 <strstr+0x8>

0801304c <sulp>:
 801304c:	b570      	push	{r4, r5, r6, lr}
 801304e:	4604      	mov	r4, r0
 8013050:	460d      	mov	r5, r1
 8013052:	ec45 4b10 	vmov	d0, r4, r5
 8013056:	4616      	mov	r6, r2
 8013058:	f005 fbe2 	bl	8018820 <__ulp>
 801305c:	ec51 0b10 	vmov	r0, r1, d0
 8013060:	b17e      	cbz	r6, 8013082 <sulp+0x36>
 8013062:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013066:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801306a:	2b00      	cmp	r3, #0
 801306c:	dd09      	ble.n	8013082 <sulp+0x36>
 801306e:	051b      	lsls	r3, r3, #20
 8013070:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013074:	2400      	movs	r4, #0
 8013076:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801307a:	4622      	mov	r2, r4
 801307c:	462b      	mov	r3, r5
 801307e:	f7ed fadb 	bl	8000638 <__aeabi_dmul>
 8013082:	bd70      	pop	{r4, r5, r6, pc}
 8013084:	0000      	movs	r0, r0
	...

08013088 <_strtod_l>:
 8013088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308c:	b0a3      	sub	sp, #140	; 0x8c
 801308e:	461f      	mov	r7, r3
 8013090:	2300      	movs	r3, #0
 8013092:	931e      	str	r3, [sp, #120]	; 0x78
 8013094:	4ba4      	ldr	r3, [pc, #656]	; (8013328 <_strtod_l+0x2a0>)
 8013096:	9219      	str	r2, [sp, #100]	; 0x64
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	9307      	str	r3, [sp, #28]
 801309c:	4604      	mov	r4, r0
 801309e:	4618      	mov	r0, r3
 80130a0:	4688      	mov	r8, r1
 80130a2:	f7ed f8af 	bl	8000204 <strlen>
 80130a6:	f04f 0a00 	mov.w	sl, #0
 80130aa:	4605      	mov	r5, r0
 80130ac:	f04f 0b00 	mov.w	fp, #0
 80130b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80130b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130b6:	781a      	ldrb	r2, [r3, #0]
 80130b8:	2a2b      	cmp	r2, #43	; 0x2b
 80130ba:	d04c      	beq.n	8013156 <_strtod_l+0xce>
 80130bc:	d839      	bhi.n	8013132 <_strtod_l+0xaa>
 80130be:	2a0d      	cmp	r2, #13
 80130c0:	d832      	bhi.n	8013128 <_strtod_l+0xa0>
 80130c2:	2a08      	cmp	r2, #8
 80130c4:	d832      	bhi.n	801312c <_strtod_l+0xa4>
 80130c6:	2a00      	cmp	r2, #0
 80130c8:	d03c      	beq.n	8013144 <_strtod_l+0xbc>
 80130ca:	2300      	movs	r3, #0
 80130cc:	930e      	str	r3, [sp, #56]	; 0x38
 80130ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80130d0:	7833      	ldrb	r3, [r6, #0]
 80130d2:	2b30      	cmp	r3, #48	; 0x30
 80130d4:	f040 80b4 	bne.w	8013240 <_strtod_l+0x1b8>
 80130d8:	7873      	ldrb	r3, [r6, #1]
 80130da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80130de:	2b58      	cmp	r3, #88	; 0x58
 80130e0:	d16c      	bne.n	80131bc <_strtod_l+0x134>
 80130e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80130e4:	9301      	str	r3, [sp, #4]
 80130e6:	ab1e      	add	r3, sp, #120	; 0x78
 80130e8:	9702      	str	r7, [sp, #8]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	4a8f      	ldr	r2, [pc, #572]	; (801332c <_strtod_l+0x2a4>)
 80130ee:	ab1f      	add	r3, sp, #124	; 0x7c
 80130f0:	a91d      	add	r1, sp, #116	; 0x74
 80130f2:	4620      	mov	r0, r4
 80130f4:	f004 fce2 	bl	8017abc <__gethex>
 80130f8:	f010 0707 	ands.w	r7, r0, #7
 80130fc:	4605      	mov	r5, r0
 80130fe:	d005      	beq.n	801310c <_strtod_l+0x84>
 8013100:	2f06      	cmp	r7, #6
 8013102:	d12a      	bne.n	801315a <_strtod_l+0xd2>
 8013104:	3601      	adds	r6, #1
 8013106:	2300      	movs	r3, #0
 8013108:	961d      	str	r6, [sp, #116]	; 0x74
 801310a:	930e      	str	r3, [sp, #56]	; 0x38
 801310c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801310e:	2b00      	cmp	r3, #0
 8013110:	f040 8596 	bne.w	8013c40 <_strtod_l+0xbb8>
 8013114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013116:	b1db      	cbz	r3, 8013150 <_strtod_l+0xc8>
 8013118:	4652      	mov	r2, sl
 801311a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801311e:	ec43 2b10 	vmov	d0, r2, r3
 8013122:	b023      	add	sp, #140	; 0x8c
 8013124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013128:	2a20      	cmp	r2, #32
 801312a:	d1ce      	bne.n	80130ca <_strtod_l+0x42>
 801312c:	3301      	adds	r3, #1
 801312e:	931d      	str	r3, [sp, #116]	; 0x74
 8013130:	e7c0      	b.n	80130b4 <_strtod_l+0x2c>
 8013132:	2a2d      	cmp	r2, #45	; 0x2d
 8013134:	d1c9      	bne.n	80130ca <_strtod_l+0x42>
 8013136:	2201      	movs	r2, #1
 8013138:	920e      	str	r2, [sp, #56]	; 0x38
 801313a:	1c5a      	adds	r2, r3, #1
 801313c:	921d      	str	r2, [sp, #116]	; 0x74
 801313e:	785b      	ldrb	r3, [r3, #1]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d1c4      	bne.n	80130ce <_strtod_l+0x46>
 8013144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013146:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801314a:	2b00      	cmp	r3, #0
 801314c:	f040 8576 	bne.w	8013c3c <_strtod_l+0xbb4>
 8013150:	4652      	mov	r2, sl
 8013152:	465b      	mov	r3, fp
 8013154:	e7e3      	b.n	801311e <_strtod_l+0x96>
 8013156:	2200      	movs	r2, #0
 8013158:	e7ee      	b.n	8013138 <_strtod_l+0xb0>
 801315a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801315c:	b13a      	cbz	r2, 801316e <_strtod_l+0xe6>
 801315e:	2135      	movs	r1, #53	; 0x35
 8013160:	a820      	add	r0, sp, #128	; 0x80
 8013162:	f005 fc68 	bl	8018a36 <__copybits>
 8013166:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013168:	4620      	mov	r0, r4
 801316a:	f005 f860 	bl	801822e <_Bfree>
 801316e:	3f01      	subs	r7, #1
 8013170:	2f05      	cmp	r7, #5
 8013172:	d807      	bhi.n	8013184 <_strtod_l+0xfc>
 8013174:	e8df f007 	tbb	[pc, r7]
 8013178:	1d180b0e 	.word	0x1d180b0e
 801317c:	030e      	.short	0x030e
 801317e:	f04f 0b00 	mov.w	fp, #0
 8013182:	46da      	mov	sl, fp
 8013184:	0728      	lsls	r0, r5, #28
 8013186:	d5c1      	bpl.n	801310c <_strtod_l+0x84>
 8013188:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801318c:	e7be      	b.n	801310c <_strtod_l+0x84>
 801318e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013192:	e7f7      	b.n	8013184 <_strtod_l+0xfc>
 8013194:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013198:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801319a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801319e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80131a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80131a6:	e7ed      	b.n	8013184 <_strtod_l+0xfc>
 80131a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013330 <_strtod_l+0x2a8>
 80131ac:	f04f 0a00 	mov.w	sl, #0
 80131b0:	e7e8      	b.n	8013184 <_strtod_l+0xfc>
 80131b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80131b6:	f04f 3aff 	mov.w	sl, #4294967295
 80131ba:	e7e3      	b.n	8013184 <_strtod_l+0xfc>
 80131bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131be:	1c5a      	adds	r2, r3, #1
 80131c0:	921d      	str	r2, [sp, #116]	; 0x74
 80131c2:	785b      	ldrb	r3, [r3, #1]
 80131c4:	2b30      	cmp	r3, #48	; 0x30
 80131c6:	d0f9      	beq.n	80131bc <_strtod_l+0x134>
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d09f      	beq.n	801310c <_strtod_l+0x84>
 80131cc:	2301      	movs	r3, #1
 80131ce:	f04f 0900 	mov.w	r9, #0
 80131d2:	9304      	str	r3, [sp, #16]
 80131d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131d6:	930a      	str	r3, [sp, #40]	; 0x28
 80131d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80131dc:	464f      	mov	r7, r9
 80131de:	220a      	movs	r2, #10
 80131e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80131e2:	7806      	ldrb	r6, [r0, #0]
 80131e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80131e8:	b2d9      	uxtb	r1, r3
 80131ea:	2909      	cmp	r1, #9
 80131ec:	d92a      	bls.n	8013244 <_strtod_l+0x1bc>
 80131ee:	9907      	ldr	r1, [sp, #28]
 80131f0:	462a      	mov	r2, r5
 80131f2:	f7ff ff02 	bl	8012ffa <strncmp>
 80131f6:	b398      	cbz	r0, 8013260 <_strtod_l+0x1d8>
 80131f8:	2000      	movs	r0, #0
 80131fa:	4633      	mov	r3, r6
 80131fc:	463d      	mov	r5, r7
 80131fe:	9007      	str	r0, [sp, #28]
 8013200:	4602      	mov	r2, r0
 8013202:	2b65      	cmp	r3, #101	; 0x65
 8013204:	d001      	beq.n	801320a <_strtod_l+0x182>
 8013206:	2b45      	cmp	r3, #69	; 0x45
 8013208:	d118      	bne.n	801323c <_strtod_l+0x1b4>
 801320a:	b91d      	cbnz	r5, 8013214 <_strtod_l+0x18c>
 801320c:	9b04      	ldr	r3, [sp, #16]
 801320e:	4303      	orrs	r3, r0
 8013210:	d098      	beq.n	8013144 <_strtod_l+0xbc>
 8013212:	2500      	movs	r5, #0
 8013214:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013218:	f108 0301 	add.w	r3, r8, #1
 801321c:	931d      	str	r3, [sp, #116]	; 0x74
 801321e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013222:	2b2b      	cmp	r3, #43	; 0x2b
 8013224:	d075      	beq.n	8013312 <_strtod_l+0x28a>
 8013226:	2b2d      	cmp	r3, #45	; 0x2d
 8013228:	d07b      	beq.n	8013322 <_strtod_l+0x29a>
 801322a:	f04f 0c00 	mov.w	ip, #0
 801322e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013232:	2909      	cmp	r1, #9
 8013234:	f240 8082 	bls.w	801333c <_strtod_l+0x2b4>
 8013238:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801323c:	2600      	movs	r6, #0
 801323e:	e09d      	b.n	801337c <_strtod_l+0x2f4>
 8013240:	2300      	movs	r3, #0
 8013242:	e7c4      	b.n	80131ce <_strtod_l+0x146>
 8013244:	2f08      	cmp	r7, #8
 8013246:	bfd8      	it	le
 8013248:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801324a:	f100 0001 	add.w	r0, r0, #1
 801324e:	bfda      	itte	le
 8013250:	fb02 3301 	mlale	r3, r2, r1, r3
 8013254:	9309      	strle	r3, [sp, #36]	; 0x24
 8013256:	fb02 3909 	mlagt	r9, r2, r9, r3
 801325a:	3701      	adds	r7, #1
 801325c:	901d      	str	r0, [sp, #116]	; 0x74
 801325e:	e7bf      	b.n	80131e0 <_strtod_l+0x158>
 8013260:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013262:	195a      	adds	r2, r3, r5
 8013264:	921d      	str	r2, [sp, #116]	; 0x74
 8013266:	5d5b      	ldrb	r3, [r3, r5]
 8013268:	2f00      	cmp	r7, #0
 801326a:	d037      	beq.n	80132dc <_strtod_l+0x254>
 801326c:	9007      	str	r0, [sp, #28]
 801326e:	463d      	mov	r5, r7
 8013270:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013274:	2a09      	cmp	r2, #9
 8013276:	d912      	bls.n	801329e <_strtod_l+0x216>
 8013278:	2201      	movs	r2, #1
 801327a:	e7c2      	b.n	8013202 <_strtod_l+0x17a>
 801327c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801327e:	1c5a      	adds	r2, r3, #1
 8013280:	921d      	str	r2, [sp, #116]	; 0x74
 8013282:	785b      	ldrb	r3, [r3, #1]
 8013284:	3001      	adds	r0, #1
 8013286:	2b30      	cmp	r3, #48	; 0x30
 8013288:	d0f8      	beq.n	801327c <_strtod_l+0x1f4>
 801328a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801328e:	2a08      	cmp	r2, #8
 8013290:	f200 84db 	bhi.w	8013c4a <_strtod_l+0xbc2>
 8013294:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013296:	9007      	str	r0, [sp, #28]
 8013298:	2000      	movs	r0, #0
 801329a:	920a      	str	r2, [sp, #40]	; 0x28
 801329c:	4605      	mov	r5, r0
 801329e:	3b30      	subs	r3, #48	; 0x30
 80132a0:	f100 0201 	add.w	r2, r0, #1
 80132a4:	d014      	beq.n	80132d0 <_strtod_l+0x248>
 80132a6:	9907      	ldr	r1, [sp, #28]
 80132a8:	4411      	add	r1, r2
 80132aa:	9107      	str	r1, [sp, #28]
 80132ac:	462a      	mov	r2, r5
 80132ae:	eb00 0e05 	add.w	lr, r0, r5
 80132b2:	210a      	movs	r1, #10
 80132b4:	4572      	cmp	r2, lr
 80132b6:	d113      	bne.n	80132e0 <_strtod_l+0x258>
 80132b8:	182a      	adds	r2, r5, r0
 80132ba:	2a08      	cmp	r2, #8
 80132bc:	f105 0501 	add.w	r5, r5, #1
 80132c0:	4405      	add	r5, r0
 80132c2:	dc1c      	bgt.n	80132fe <_strtod_l+0x276>
 80132c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132c6:	220a      	movs	r2, #10
 80132c8:	fb02 3301 	mla	r3, r2, r1, r3
 80132cc:	9309      	str	r3, [sp, #36]	; 0x24
 80132ce:	2200      	movs	r2, #0
 80132d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132d2:	1c59      	adds	r1, r3, #1
 80132d4:	911d      	str	r1, [sp, #116]	; 0x74
 80132d6:	785b      	ldrb	r3, [r3, #1]
 80132d8:	4610      	mov	r0, r2
 80132da:	e7c9      	b.n	8013270 <_strtod_l+0x1e8>
 80132dc:	4638      	mov	r0, r7
 80132de:	e7d2      	b.n	8013286 <_strtod_l+0x1fe>
 80132e0:	2a08      	cmp	r2, #8
 80132e2:	dc04      	bgt.n	80132ee <_strtod_l+0x266>
 80132e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80132e6:	434e      	muls	r6, r1
 80132e8:	9609      	str	r6, [sp, #36]	; 0x24
 80132ea:	3201      	adds	r2, #1
 80132ec:	e7e2      	b.n	80132b4 <_strtod_l+0x22c>
 80132ee:	f102 0c01 	add.w	ip, r2, #1
 80132f2:	f1bc 0f10 	cmp.w	ip, #16
 80132f6:	bfd8      	it	le
 80132f8:	fb01 f909 	mulle.w	r9, r1, r9
 80132fc:	e7f5      	b.n	80132ea <_strtod_l+0x262>
 80132fe:	2d10      	cmp	r5, #16
 8013300:	bfdc      	itt	le
 8013302:	220a      	movle	r2, #10
 8013304:	fb02 3909 	mlale	r9, r2, r9, r3
 8013308:	e7e1      	b.n	80132ce <_strtod_l+0x246>
 801330a:	2300      	movs	r3, #0
 801330c:	9307      	str	r3, [sp, #28]
 801330e:	2201      	movs	r2, #1
 8013310:	e77c      	b.n	801320c <_strtod_l+0x184>
 8013312:	f04f 0c00 	mov.w	ip, #0
 8013316:	f108 0302 	add.w	r3, r8, #2
 801331a:	931d      	str	r3, [sp, #116]	; 0x74
 801331c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013320:	e785      	b.n	801322e <_strtod_l+0x1a6>
 8013322:	f04f 0c01 	mov.w	ip, #1
 8013326:	e7f6      	b.n	8013316 <_strtod_l+0x28e>
 8013328:	0801c2a0 	.word	0x0801c2a0
 801332c:	0801bfcc 	.word	0x0801bfcc
 8013330:	7ff00000 	.word	0x7ff00000
 8013334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013336:	1c59      	adds	r1, r3, #1
 8013338:	911d      	str	r1, [sp, #116]	; 0x74
 801333a:	785b      	ldrb	r3, [r3, #1]
 801333c:	2b30      	cmp	r3, #48	; 0x30
 801333e:	d0f9      	beq.n	8013334 <_strtod_l+0x2ac>
 8013340:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013344:	2908      	cmp	r1, #8
 8013346:	f63f af79 	bhi.w	801323c <_strtod_l+0x1b4>
 801334a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801334e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013350:	9308      	str	r3, [sp, #32]
 8013352:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013354:	1c59      	adds	r1, r3, #1
 8013356:	911d      	str	r1, [sp, #116]	; 0x74
 8013358:	785b      	ldrb	r3, [r3, #1]
 801335a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801335e:	2e09      	cmp	r6, #9
 8013360:	d937      	bls.n	80133d2 <_strtod_l+0x34a>
 8013362:	9e08      	ldr	r6, [sp, #32]
 8013364:	1b89      	subs	r1, r1, r6
 8013366:	2908      	cmp	r1, #8
 8013368:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801336c:	dc02      	bgt.n	8013374 <_strtod_l+0x2ec>
 801336e:	4576      	cmp	r6, lr
 8013370:	bfa8      	it	ge
 8013372:	4676      	movge	r6, lr
 8013374:	f1bc 0f00 	cmp.w	ip, #0
 8013378:	d000      	beq.n	801337c <_strtod_l+0x2f4>
 801337a:	4276      	negs	r6, r6
 801337c:	2d00      	cmp	r5, #0
 801337e:	d14f      	bne.n	8013420 <_strtod_l+0x398>
 8013380:	9904      	ldr	r1, [sp, #16]
 8013382:	4301      	orrs	r1, r0
 8013384:	f47f aec2 	bne.w	801310c <_strtod_l+0x84>
 8013388:	2a00      	cmp	r2, #0
 801338a:	f47f aedb 	bne.w	8013144 <_strtod_l+0xbc>
 801338e:	2b69      	cmp	r3, #105	; 0x69
 8013390:	d027      	beq.n	80133e2 <_strtod_l+0x35a>
 8013392:	dc24      	bgt.n	80133de <_strtod_l+0x356>
 8013394:	2b49      	cmp	r3, #73	; 0x49
 8013396:	d024      	beq.n	80133e2 <_strtod_l+0x35a>
 8013398:	2b4e      	cmp	r3, #78	; 0x4e
 801339a:	f47f aed3 	bne.w	8013144 <_strtod_l+0xbc>
 801339e:	499e      	ldr	r1, [pc, #632]	; (8013618 <_strtod_l+0x590>)
 80133a0:	a81d      	add	r0, sp, #116	; 0x74
 80133a2:	f004 fde3 	bl	8017f6c <__match>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	f43f aecc 	beq.w	8013144 <_strtod_l+0xbc>
 80133ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b28      	cmp	r3, #40	; 0x28
 80133b2:	d12d      	bne.n	8013410 <_strtod_l+0x388>
 80133b4:	4999      	ldr	r1, [pc, #612]	; (801361c <_strtod_l+0x594>)
 80133b6:	aa20      	add	r2, sp, #128	; 0x80
 80133b8:	a81d      	add	r0, sp, #116	; 0x74
 80133ba:	f004 fdeb 	bl	8017f94 <__hexnan>
 80133be:	2805      	cmp	r0, #5
 80133c0:	d126      	bne.n	8013410 <_strtod_l+0x388>
 80133c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80133c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80133cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80133d0:	e69c      	b.n	801310c <_strtod_l+0x84>
 80133d2:	210a      	movs	r1, #10
 80133d4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80133d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80133dc:	e7b9      	b.n	8013352 <_strtod_l+0x2ca>
 80133de:	2b6e      	cmp	r3, #110	; 0x6e
 80133e0:	e7db      	b.n	801339a <_strtod_l+0x312>
 80133e2:	498f      	ldr	r1, [pc, #572]	; (8013620 <_strtod_l+0x598>)
 80133e4:	a81d      	add	r0, sp, #116	; 0x74
 80133e6:	f004 fdc1 	bl	8017f6c <__match>
 80133ea:	2800      	cmp	r0, #0
 80133ec:	f43f aeaa 	beq.w	8013144 <_strtod_l+0xbc>
 80133f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133f2:	498c      	ldr	r1, [pc, #560]	; (8013624 <_strtod_l+0x59c>)
 80133f4:	3b01      	subs	r3, #1
 80133f6:	a81d      	add	r0, sp, #116	; 0x74
 80133f8:	931d      	str	r3, [sp, #116]	; 0x74
 80133fa:	f004 fdb7 	bl	8017f6c <__match>
 80133fe:	b910      	cbnz	r0, 8013406 <_strtod_l+0x37e>
 8013400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013402:	3301      	adds	r3, #1
 8013404:	931d      	str	r3, [sp, #116]	; 0x74
 8013406:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013634 <_strtod_l+0x5ac>
 801340a:	f04f 0a00 	mov.w	sl, #0
 801340e:	e67d      	b.n	801310c <_strtod_l+0x84>
 8013410:	4885      	ldr	r0, [pc, #532]	; (8013628 <_strtod_l+0x5a0>)
 8013412:	f005 fb8d 	bl	8018b30 <nan>
 8013416:	ed8d 0b04 	vstr	d0, [sp, #16]
 801341a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801341e:	e675      	b.n	801310c <_strtod_l+0x84>
 8013420:	9b07      	ldr	r3, [sp, #28]
 8013422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013424:	1af3      	subs	r3, r6, r3
 8013426:	2f00      	cmp	r7, #0
 8013428:	bf08      	it	eq
 801342a:	462f      	moveq	r7, r5
 801342c:	2d10      	cmp	r5, #16
 801342e:	9308      	str	r3, [sp, #32]
 8013430:	46a8      	mov	r8, r5
 8013432:	bfa8      	it	ge
 8013434:	f04f 0810 	movge.w	r8, #16
 8013438:	f7ed f884 	bl	8000544 <__aeabi_ui2d>
 801343c:	2d09      	cmp	r5, #9
 801343e:	4682      	mov	sl, r0
 8013440:	468b      	mov	fp, r1
 8013442:	dd13      	ble.n	801346c <_strtod_l+0x3e4>
 8013444:	4b79      	ldr	r3, [pc, #484]	; (801362c <_strtod_l+0x5a4>)
 8013446:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801344a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801344e:	f7ed f8f3 	bl	8000638 <__aeabi_dmul>
 8013452:	4682      	mov	sl, r0
 8013454:	4648      	mov	r0, r9
 8013456:	468b      	mov	fp, r1
 8013458:	f7ed f874 	bl	8000544 <__aeabi_ui2d>
 801345c:	4602      	mov	r2, r0
 801345e:	460b      	mov	r3, r1
 8013460:	4650      	mov	r0, sl
 8013462:	4659      	mov	r1, fp
 8013464:	f7ec ff32 	bl	80002cc <__adddf3>
 8013468:	4682      	mov	sl, r0
 801346a:	468b      	mov	fp, r1
 801346c:	2d0f      	cmp	r5, #15
 801346e:	dc38      	bgt.n	80134e2 <_strtod_l+0x45a>
 8013470:	9b08      	ldr	r3, [sp, #32]
 8013472:	2b00      	cmp	r3, #0
 8013474:	f43f ae4a 	beq.w	801310c <_strtod_l+0x84>
 8013478:	dd24      	ble.n	80134c4 <_strtod_l+0x43c>
 801347a:	2b16      	cmp	r3, #22
 801347c:	dc0b      	bgt.n	8013496 <_strtod_l+0x40e>
 801347e:	4d6b      	ldr	r5, [pc, #428]	; (801362c <_strtod_l+0x5a4>)
 8013480:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013484:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013488:	4652      	mov	r2, sl
 801348a:	465b      	mov	r3, fp
 801348c:	f7ed f8d4 	bl	8000638 <__aeabi_dmul>
 8013490:	4682      	mov	sl, r0
 8013492:	468b      	mov	fp, r1
 8013494:	e63a      	b.n	801310c <_strtod_l+0x84>
 8013496:	9a08      	ldr	r2, [sp, #32]
 8013498:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801349c:	4293      	cmp	r3, r2
 801349e:	db20      	blt.n	80134e2 <_strtod_l+0x45a>
 80134a0:	4c62      	ldr	r4, [pc, #392]	; (801362c <_strtod_l+0x5a4>)
 80134a2:	f1c5 050f 	rsb	r5, r5, #15
 80134a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80134aa:	4652      	mov	r2, sl
 80134ac:	465b      	mov	r3, fp
 80134ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134b2:	f7ed f8c1 	bl	8000638 <__aeabi_dmul>
 80134b6:	9b08      	ldr	r3, [sp, #32]
 80134b8:	1b5d      	subs	r5, r3, r5
 80134ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80134be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134c2:	e7e3      	b.n	801348c <_strtod_l+0x404>
 80134c4:	9b08      	ldr	r3, [sp, #32]
 80134c6:	3316      	adds	r3, #22
 80134c8:	db0b      	blt.n	80134e2 <_strtod_l+0x45a>
 80134ca:	9b07      	ldr	r3, [sp, #28]
 80134cc:	4a57      	ldr	r2, [pc, #348]	; (801362c <_strtod_l+0x5a4>)
 80134ce:	1b9e      	subs	r6, r3, r6
 80134d0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80134d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80134d8:	4650      	mov	r0, sl
 80134da:	4659      	mov	r1, fp
 80134dc:	f7ed f9d6 	bl	800088c <__aeabi_ddiv>
 80134e0:	e7d6      	b.n	8013490 <_strtod_l+0x408>
 80134e2:	9b08      	ldr	r3, [sp, #32]
 80134e4:	eba5 0808 	sub.w	r8, r5, r8
 80134e8:	4498      	add	r8, r3
 80134ea:	f1b8 0f00 	cmp.w	r8, #0
 80134ee:	dd71      	ble.n	80135d4 <_strtod_l+0x54c>
 80134f0:	f018 030f 	ands.w	r3, r8, #15
 80134f4:	d00a      	beq.n	801350c <_strtod_l+0x484>
 80134f6:	494d      	ldr	r1, [pc, #308]	; (801362c <_strtod_l+0x5a4>)
 80134f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80134fc:	4652      	mov	r2, sl
 80134fe:	465b      	mov	r3, fp
 8013500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013504:	f7ed f898 	bl	8000638 <__aeabi_dmul>
 8013508:	4682      	mov	sl, r0
 801350a:	468b      	mov	fp, r1
 801350c:	f038 080f 	bics.w	r8, r8, #15
 8013510:	d04d      	beq.n	80135ae <_strtod_l+0x526>
 8013512:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013516:	dd22      	ble.n	801355e <_strtod_l+0x4d6>
 8013518:	2500      	movs	r5, #0
 801351a:	462e      	mov	r6, r5
 801351c:	9509      	str	r5, [sp, #36]	; 0x24
 801351e:	9507      	str	r5, [sp, #28]
 8013520:	2322      	movs	r3, #34	; 0x22
 8013522:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013634 <_strtod_l+0x5ac>
 8013526:	6023      	str	r3, [r4, #0]
 8013528:	f04f 0a00 	mov.w	sl, #0
 801352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801352e:	2b00      	cmp	r3, #0
 8013530:	f43f adec 	beq.w	801310c <_strtod_l+0x84>
 8013534:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013536:	4620      	mov	r0, r4
 8013538:	f004 fe79 	bl	801822e <_Bfree>
 801353c:	9907      	ldr	r1, [sp, #28]
 801353e:	4620      	mov	r0, r4
 8013540:	f004 fe75 	bl	801822e <_Bfree>
 8013544:	4631      	mov	r1, r6
 8013546:	4620      	mov	r0, r4
 8013548:	f004 fe71 	bl	801822e <_Bfree>
 801354c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801354e:	4620      	mov	r0, r4
 8013550:	f004 fe6d 	bl	801822e <_Bfree>
 8013554:	4629      	mov	r1, r5
 8013556:	4620      	mov	r0, r4
 8013558:	f004 fe69 	bl	801822e <_Bfree>
 801355c:	e5d6      	b.n	801310c <_strtod_l+0x84>
 801355e:	2300      	movs	r3, #0
 8013560:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013564:	4650      	mov	r0, sl
 8013566:	4659      	mov	r1, fp
 8013568:	4699      	mov	r9, r3
 801356a:	f1b8 0f01 	cmp.w	r8, #1
 801356e:	dc21      	bgt.n	80135b4 <_strtod_l+0x52c>
 8013570:	b10b      	cbz	r3, 8013576 <_strtod_l+0x4ee>
 8013572:	4682      	mov	sl, r0
 8013574:	468b      	mov	fp, r1
 8013576:	4b2e      	ldr	r3, [pc, #184]	; (8013630 <_strtod_l+0x5a8>)
 8013578:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801357c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013580:	4652      	mov	r2, sl
 8013582:	465b      	mov	r3, fp
 8013584:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013588:	f7ed f856 	bl	8000638 <__aeabi_dmul>
 801358c:	4b29      	ldr	r3, [pc, #164]	; (8013634 <_strtod_l+0x5ac>)
 801358e:	460a      	mov	r2, r1
 8013590:	400b      	ands	r3, r1
 8013592:	4929      	ldr	r1, [pc, #164]	; (8013638 <_strtod_l+0x5b0>)
 8013594:	428b      	cmp	r3, r1
 8013596:	4682      	mov	sl, r0
 8013598:	d8be      	bhi.n	8013518 <_strtod_l+0x490>
 801359a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801359e:	428b      	cmp	r3, r1
 80135a0:	bf86      	itte	hi
 80135a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801363c <_strtod_l+0x5b4>
 80135a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80135aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80135ae:	2300      	movs	r3, #0
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	e081      	b.n	80136b8 <_strtod_l+0x630>
 80135b4:	f018 0f01 	tst.w	r8, #1
 80135b8:	d007      	beq.n	80135ca <_strtod_l+0x542>
 80135ba:	4b1d      	ldr	r3, [pc, #116]	; (8013630 <_strtod_l+0x5a8>)
 80135bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80135c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c4:	f7ed f838 	bl	8000638 <__aeabi_dmul>
 80135c8:	2301      	movs	r3, #1
 80135ca:	f109 0901 	add.w	r9, r9, #1
 80135ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135d2:	e7ca      	b.n	801356a <_strtod_l+0x4e2>
 80135d4:	d0eb      	beq.n	80135ae <_strtod_l+0x526>
 80135d6:	f1c8 0800 	rsb	r8, r8, #0
 80135da:	f018 020f 	ands.w	r2, r8, #15
 80135de:	d00a      	beq.n	80135f6 <_strtod_l+0x56e>
 80135e0:	4b12      	ldr	r3, [pc, #72]	; (801362c <_strtod_l+0x5a4>)
 80135e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135e6:	4650      	mov	r0, sl
 80135e8:	4659      	mov	r1, fp
 80135ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ee:	f7ed f94d 	bl	800088c <__aeabi_ddiv>
 80135f2:	4682      	mov	sl, r0
 80135f4:	468b      	mov	fp, r1
 80135f6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80135fa:	d0d8      	beq.n	80135ae <_strtod_l+0x526>
 80135fc:	f1b8 0f1f 	cmp.w	r8, #31
 8013600:	dd1e      	ble.n	8013640 <_strtod_l+0x5b8>
 8013602:	2500      	movs	r5, #0
 8013604:	462e      	mov	r6, r5
 8013606:	9509      	str	r5, [sp, #36]	; 0x24
 8013608:	9507      	str	r5, [sp, #28]
 801360a:	2322      	movs	r3, #34	; 0x22
 801360c:	f04f 0a00 	mov.w	sl, #0
 8013610:	f04f 0b00 	mov.w	fp, #0
 8013614:	6023      	str	r3, [r4, #0]
 8013616:	e789      	b.n	801352c <_strtod_l+0x4a4>
 8013618:	0801c02d 	.word	0x0801c02d
 801361c:	0801bfe0 	.word	0x0801bfe0
 8013620:	0801c025 	.word	0x0801c025
 8013624:	0801c1c1 	.word	0x0801c1c1
 8013628:	0801c46f 	.word	0x0801c46f
 801362c:	0801c340 	.word	0x0801c340
 8013630:	0801c318 	.word	0x0801c318
 8013634:	7ff00000 	.word	0x7ff00000
 8013638:	7ca00000 	.word	0x7ca00000
 801363c:	7fefffff 	.word	0x7fefffff
 8013640:	f018 0310 	ands.w	r3, r8, #16
 8013644:	bf18      	it	ne
 8013646:	236a      	movne	r3, #106	; 0x6a
 8013648:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013a00 <_strtod_l+0x978>
 801364c:	9304      	str	r3, [sp, #16]
 801364e:	4650      	mov	r0, sl
 8013650:	4659      	mov	r1, fp
 8013652:	2300      	movs	r3, #0
 8013654:	f018 0f01 	tst.w	r8, #1
 8013658:	d004      	beq.n	8013664 <_strtod_l+0x5dc>
 801365a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801365e:	f7ec ffeb 	bl	8000638 <__aeabi_dmul>
 8013662:	2301      	movs	r3, #1
 8013664:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013668:	f109 0908 	add.w	r9, r9, #8
 801366c:	d1f2      	bne.n	8013654 <_strtod_l+0x5cc>
 801366e:	b10b      	cbz	r3, 8013674 <_strtod_l+0x5ec>
 8013670:	4682      	mov	sl, r0
 8013672:	468b      	mov	fp, r1
 8013674:	9b04      	ldr	r3, [sp, #16]
 8013676:	b1bb      	cbz	r3, 80136a8 <_strtod_l+0x620>
 8013678:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801367c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013680:	2b00      	cmp	r3, #0
 8013682:	4659      	mov	r1, fp
 8013684:	dd10      	ble.n	80136a8 <_strtod_l+0x620>
 8013686:	2b1f      	cmp	r3, #31
 8013688:	f340 8128 	ble.w	80138dc <_strtod_l+0x854>
 801368c:	2b34      	cmp	r3, #52	; 0x34
 801368e:	bfde      	ittt	le
 8013690:	3b20      	suble	r3, #32
 8013692:	f04f 32ff 	movle.w	r2, #4294967295
 8013696:	fa02 f303 	lslle.w	r3, r2, r3
 801369a:	f04f 0a00 	mov.w	sl, #0
 801369e:	bfcc      	ite	gt
 80136a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80136a4:	ea03 0b01 	andle.w	fp, r3, r1
 80136a8:	2200      	movs	r2, #0
 80136aa:	2300      	movs	r3, #0
 80136ac:	4650      	mov	r0, sl
 80136ae:	4659      	mov	r1, fp
 80136b0:	f7ed fa2a 	bl	8000b08 <__aeabi_dcmpeq>
 80136b4:	2800      	cmp	r0, #0
 80136b6:	d1a4      	bne.n	8013602 <_strtod_l+0x57a>
 80136b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ba:	9300      	str	r3, [sp, #0]
 80136bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80136be:	462b      	mov	r3, r5
 80136c0:	463a      	mov	r2, r7
 80136c2:	4620      	mov	r0, r4
 80136c4:	f004 fe06 	bl	80182d4 <__s2b>
 80136c8:	9009      	str	r0, [sp, #36]	; 0x24
 80136ca:	2800      	cmp	r0, #0
 80136cc:	f43f af24 	beq.w	8013518 <_strtod_l+0x490>
 80136d0:	9b07      	ldr	r3, [sp, #28]
 80136d2:	1b9e      	subs	r6, r3, r6
 80136d4:	9b08      	ldr	r3, [sp, #32]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	bfb4      	ite	lt
 80136da:	4633      	movlt	r3, r6
 80136dc:	2300      	movge	r3, #0
 80136de:	9310      	str	r3, [sp, #64]	; 0x40
 80136e0:	9b08      	ldr	r3, [sp, #32]
 80136e2:	2500      	movs	r5, #0
 80136e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136e8:	9318      	str	r3, [sp, #96]	; 0x60
 80136ea:	462e      	mov	r6, r5
 80136ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ee:	4620      	mov	r0, r4
 80136f0:	6859      	ldr	r1, [r3, #4]
 80136f2:	f004 fd77 	bl	80181e4 <_Balloc>
 80136f6:	9007      	str	r0, [sp, #28]
 80136f8:	2800      	cmp	r0, #0
 80136fa:	f43f af11 	beq.w	8013520 <_strtod_l+0x498>
 80136fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013700:	691a      	ldr	r2, [r3, #16]
 8013702:	3202      	adds	r2, #2
 8013704:	f103 010c 	add.w	r1, r3, #12
 8013708:	0092      	lsls	r2, r2, #2
 801370a:	300c      	adds	r0, #12
 801370c:	f7ff fbda 	bl	8012ec4 <memcpy>
 8013710:	ec4b ab10 	vmov	d0, sl, fp
 8013714:	aa20      	add	r2, sp, #128	; 0x80
 8013716:	a91f      	add	r1, sp, #124	; 0x7c
 8013718:	4620      	mov	r0, r4
 801371a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801371e:	f005 f8fb 	bl	8018918 <__d2b>
 8013722:	901e      	str	r0, [sp, #120]	; 0x78
 8013724:	2800      	cmp	r0, #0
 8013726:	f43f aefb 	beq.w	8013520 <_strtod_l+0x498>
 801372a:	2101      	movs	r1, #1
 801372c:	4620      	mov	r0, r4
 801372e:	f004 fe6b 	bl	8018408 <__i2b>
 8013732:	4606      	mov	r6, r0
 8013734:	2800      	cmp	r0, #0
 8013736:	f43f aef3 	beq.w	8013520 <_strtod_l+0x498>
 801373a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801373c:	9904      	ldr	r1, [sp, #16]
 801373e:	2b00      	cmp	r3, #0
 8013740:	bfab      	itete	ge
 8013742:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013744:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013746:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013748:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801374c:	bfac      	ite	ge
 801374e:	eb03 0902 	addge.w	r9, r3, r2
 8013752:	1ad7      	sublt	r7, r2, r3
 8013754:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013756:	eba3 0801 	sub.w	r8, r3, r1
 801375a:	4490      	add	r8, r2
 801375c:	4ba3      	ldr	r3, [pc, #652]	; (80139ec <_strtod_l+0x964>)
 801375e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013762:	4598      	cmp	r8, r3
 8013764:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013768:	f280 80cc 	bge.w	8013904 <_strtod_l+0x87c>
 801376c:	eba3 0308 	sub.w	r3, r3, r8
 8013770:	2b1f      	cmp	r3, #31
 8013772:	eba2 0203 	sub.w	r2, r2, r3
 8013776:	f04f 0101 	mov.w	r1, #1
 801377a:	f300 80b6 	bgt.w	80138ea <_strtod_l+0x862>
 801377e:	fa01 f303 	lsl.w	r3, r1, r3
 8013782:	9311      	str	r3, [sp, #68]	; 0x44
 8013784:	2300      	movs	r3, #0
 8013786:	930c      	str	r3, [sp, #48]	; 0x30
 8013788:	eb09 0802 	add.w	r8, r9, r2
 801378c:	9b04      	ldr	r3, [sp, #16]
 801378e:	45c1      	cmp	r9, r8
 8013790:	4417      	add	r7, r2
 8013792:	441f      	add	r7, r3
 8013794:	464b      	mov	r3, r9
 8013796:	bfa8      	it	ge
 8013798:	4643      	movge	r3, r8
 801379a:	42bb      	cmp	r3, r7
 801379c:	bfa8      	it	ge
 801379e:	463b      	movge	r3, r7
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	bfc2      	ittt	gt
 80137a4:	eba8 0803 	subgt.w	r8, r8, r3
 80137a8:	1aff      	subgt	r7, r7, r3
 80137aa:	eba9 0903 	subgt.w	r9, r9, r3
 80137ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	dd17      	ble.n	80137e4 <_strtod_l+0x75c>
 80137b4:	4631      	mov	r1, r6
 80137b6:	461a      	mov	r2, r3
 80137b8:	4620      	mov	r0, r4
 80137ba:	f004 fee1 	bl	8018580 <__pow5mult>
 80137be:	4606      	mov	r6, r0
 80137c0:	2800      	cmp	r0, #0
 80137c2:	f43f aead 	beq.w	8013520 <_strtod_l+0x498>
 80137c6:	4601      	mov	r1, r0
 80137c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80137ca:	4620      	mov	r0, r4
 80137cc:	f004 fe32 	bl	8018434 <__multiply>
 80137d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80137d2:	2800      	cmp	r0, #0
 80137d4:	f43f aea4 	beq.w	8013520 <_strtod_l+0x498>
 80137d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137da:	4620      	mov	r0, r4
 80137dc:	f004 fd27 	bl	801822e <_Bfree>
 80137e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137e2:	931e      	str	r3, [sp, #120]	; 0x78
 80137e4:	f1b8 0f00 	cmp.w	r8, #0
 80137e8:	f300 8091 	bgt.w	801390e <_strtod_l+0x886>
 80137ec:	9b08      	ldr	r3, [sp, #32]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd08      	ble.n	8013804 <_strtod_l+0x77c>
 80137f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80137f4:	9907      	ldr	r1, [sp, #28]
 80137f6:	4620      	mov	r0, r4
 80137f8:	f004 fec2 	bl	8018580 <__pow5mult>
 80137fc:	9007      	str	r0, [sp, #28]
 80137fe:	2800      	cmp	r0, #0
 8013800:	f43f ae8e 	beq.w	8013520 <_strtod_l+0x498>
 8013804:	2f00      	cmp	r7, #0
 8013806:	dd08      	ble.n	801381a <_strtod_l+0x792>
 8013808:	9907      	ldr	r1, [sp, #28]
 801380a:	463a      	mov	r2, r7
 801380c:	4620      	mov	r0, r4
 801380e:	f004 fef7 	bl	8018600 <__lshift>
 8013812:	9007      	str	r0, [sp, #28]
 8013814:	2800      	cmp	r0, #0
 8013816:	f43f ae83 	beq.w	8013520 <_strtod_l+0x498>
 801381a:	f1b9 0f00 	cmp.w	r9, #0
 801381e:	dd08      	ble.n	8013832 <_strtod_l+0x7aa>
 8013820:	4631      	mov	r1, r6
 8013822:	464a      	mov	r2, r9
 8013824:	4620      	mov	r0, r4
 8013826:	f004 feeb 	bl	8018600 <__lshift>
 801382a:	4606      	mov	r6, r0
 801382c:	2800      	cmp	r0, #0
 801382e:	f43f ae77 	beq.w	8013520 <_strtod_l+0x498>
 8013832:	9a07      	ldr	r2, [sp, #28]
 8013834:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013836:	4620      	mov	r0, r4
 8013838:	f004 ff6a 	bl	8018710 <__mdiff>
 801383c:	4605      	mov	r5, r0
 801383e:	2800      	cmp	r0, #0
 8013840:	f43f ae6e 	beq.w	8013520 <_strtod_l+0x498>
 8013844:	68c3      	ldr	r3, [r0, #12]
 8013846:	930f      	str	r3, [sp, #60]	; 0x3c
 8013848:	2300      	movs	r3, #0
 801384a:	60c3      	str	r3, [r0, #12]
 801384c:	4631      	mov	r1, r6
 801384e:	f004 ff43 	bl	80186d8 <__mcmp>
 8013852:	2800      	cmp	r0, #0
 8013854:	da65      	bge.n	8013922 <_strtod_l+0x89a>
 8013856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013858:	ea53 030a 	orrs.w	r3, r3, sl
 801385c:	f040 8087 	bne.w	801396e <_strtod_l+0x8e6>
 8013860:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013864:	2b00      	cmp	r3, #0
 8013866:	f040 8082 	bne.w	801396e <_strtod_l+0x8e6>
 801386a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801386e:	0d1b      	lsrs	r3, r3, #20
 8013870:	051b      	lsls	r3, r3, #20
 8013872:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013876:	d97a      	bls.n	801396e <_strtod_l+0x8e6>
 8013878:	696b      	ldr	r3, [r5, #20]
 801387a:	b913      	cbnz	r3, 8013882 <_strtod_l+0x7fa>
 801387c:	692b      	ldr	r3, [r5, #16]
 801387e:	2b01      	cmp	r3, #1
 8013880:	dd75      	ble.n	801396e <_strtod_l+0x8e6>
 8013882:	4629      	mov	r1, r5
 8013884:	2201      	movs	r2, #1
 8013886:	4620      	mov	r0, r4
 8013888:	f004 feba 	bl	8018600 <__lshift>
 801388c:	4631      	mov	r1, r6
 801388e:	4605      	mov	r5, r0
 8013890:	f004 ff22 	bl	80186d8 <__mcmp>
 8013894:	2800      	cmp	r0, #0
 8013896:	dd6a      	ble.n	801396e <_strtod_l+0x8e6>
 8013898:	9904      	ldr	r1, [sp, #16]
 801389a:	4a55      	ldr	r2, [pc, #340]	; (80139f0 <_strtod_l+0x968>)
 801389c:	465b      	mov	r3, fp
 801389e:	2900      	cmp	r1, #0
 80138a0:	f000 8085 	beq.w	80139ae <_strtod_l+0x926>
 80138a4:	ea02 010b 	and.w	r1, r2, fp
 80138a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80138ac:	dc7f      	bgt.n	80139ae <_strtod_l+0x926>
 80138ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80138b2:	f77f aeaa 	ble.w	801360a <_strtod_l+0x582>
 80138b6:	4a4f      	ldr	r2, [pc, #316]	; (80139f4 <_strtod_l+0x96c>)
 80138b8:	2300      	movs	r3, #0
 80138ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80138be:	4650      	mov	r0, sl
 80138c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80138c4:	4659      	mov	r1, fp
 80138c6:	f7ec feb7 	bl	8000638 <__aeabi_dmul>
 80138ca:	460b      	mov	r3, r1
 80138cc:	4303      	orrs	r3, r0
 80138ce:	bf08      	it	eq
 80138d0:	2322      	moveq	r3, #34	; 0x22
 80138d2:	4682      	mov	sl, r0
 80138d4:	468b      	mov	fp, r1
 80138d6:	bf08      	it	eq
 80138d8:	6023      	streq	r3, [r4, #0]
 80138da:	e62b      	b.n	8013534 <_strtod_l+0x4ac>
 80138dc:	f04f 32ff 	mov.w	r2, #4294967295
 80138e0:	fa02 f303 	lsl.w	r3, r2, r3
 80138e4:	ea03 0a0a 	and.w	sl, r3, sl
 80138e8:	e6de      	b.n	80136a8 <_strtod_l+0x620>
 80138ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80138ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80138f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80138f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80138fa:	fa01 f308 	lsl.w	r3, r1, r8
 80138fe:	930c      	str	r3, [sp, #48]	; 0x30
 8013900:	9111      	str	r1, [sp, #68]	; 0x44
 8013902:	e741      	b.n	8013788 <_strtod_l+0x700>
 8013904:	2300      	movs	r3, #0
 8013906:	930c      	str	r3, [sp, #48]	; 0x30
 8013908:	2301      	movs	r3, #1
 801390a:	9311      	str	r3, [sp, #68]	; 0x44
 801390c:	e73c      	b.n	8013788 <_strtod_l+0x700>
 801390e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013910:	4642      	mov	r2, r8
 8013912:	4620      	mov	r0, r4
 8013914:	f004 fe74 	bl	8018600 <__lshift>
 8013918:	901e      	str	r0, [sp, #120]	; 0x78
 801391a:	2800      	cmp	r0, #0
 801391c:	f47f af66 	bne.w	80137ec <_strtod_l+0x764>
 8013920:	e5fe      	b.n	8013520 <_strtod_l+0x498>
 8013922:	465f      	mov	r7, fp
 8013924:	d16e      	bne.n	8013a04 <_strtod_l+0x97c>
 8013926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013928:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801392c:	b342      	cbz	r2, 8013980 <_strtod_l+0x8f8>
 801392e:	4a32      	ldr	r2, [pc, #200]	; (80139f8 <_strtod_l+0x970>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d128      	bne.n	8013986 <_strtod_l+0x8fe>
 8013934:	9b04      	ldr	r3, [sp, #16]
 8013936:	4650      	mov	r0, sl
 8013938:	b1eb      	cbz	r3, 8013976 <_strtod_l+0x8ee>
 801393a:	4a2d      	ldr	r2, [pc, #180]	; (80139f0 <_strtod_l+0x968>)
 801393c:	403a      	ands	r2, r7
 801393e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013942:	f04f 31ff 	mov.w	r1, #4294967295
 8013946:	d819      	bhi.n	801397c <_strtod_l+0x8f4>
 8013948:	0d12      	lsrs	r2, r2, #20
 801394a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801394e:	fa01 f303 	lsl.w	r3, r1, r3
 8013952:	4298      	cmp	r0, r3
 8013954:	d117      	bne.n	8013986 <_strtod_l+0x8fe>
 8013956:	4b29      	ldr	r3, [pc, #164]	; (80139fc <_strtod_l+0x974>)
 8013958:	429f      	cmp	r7, r3
 801395a:	d102      	bne.n	8013962 <_strtod_l+0x8da>
 801395c:	3001      	adds	r0, #1
 801395e:	f43f addf 	beq.w	8013520 <_strtod_l+0x498>
 8013962:	4b23      	ldr	r3, [pc, #140]	; (80139f0 <_strtod_l+0x968>)
 8013964:	403b      	ands	r3, r7
 8013966:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801396a:	f04f 0a00 	mov.w	sl, #0
 801396e:	9b04      	ldr	r3, [sp, #16]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d1a0      	bne.n	80138b6 <_strtod_l+0x82e>
 8013974:	e5de      	b.n	8013534 <_strtod_l+0x4ac>
 8013976:	f04f 33ff 	mov.w	r3, #4294967295
 801397a:	e7ea      	b.n	8013952 <_strtod_l+0x8ca>
 801397c:	460b      	mov	r3, r1
 801397e:	e7e8      	b.n	8013952 <_strtod_l+0x8ca>
 8013980:	ea53 030a 	orrs.w	r3, r3, sl
 8013984:	d088      	beq.n	8013898 <_strtod_l+0x810>
 8013986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013988:	b1db      	cbz	r3, 80139c2 <_strtod_l+0x93a>
 801398a:	423b      	tst	r3, r7
 801398c:	d0ef      	beq.n	801396e <_strtod_l+0x8e6>
 801398e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013990:	9a04      	ldr	r2, [sp, #16]
 8013992:	4650      	mov	r0, sl
 8013994:	4659      	mov	r1, fp
 8013996:	b1c3      	cbz	r3, 80139ca <_strtod_l+0x942>
 8013998:	f7ff fb58 	bl	801304c <sulp>
 801399c:	4602      	mov	r2, r0
 801399e:	460b      	mov	r3, r1
 80139a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80139a4:	f7ec fc92 	bl	80002cc <__adddf3>
 80139a8:	4682      	mov	sl, r0
 80139aa:	468b      	mov	fp, r1
 80139ac:	e7df      	b.n	801396e <_strtod_l+0x8e6>
 80139ae:	4013      	ands	r3, r2
 80139b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80139b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80139b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80139bc:	f04f 3aff 	mov.w	sl, #4294967295
 80139c0:	e7d5      	b.n	801396e <_strtod_l+0x8e6>
 80139c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139c4:	ea13 0f0a 	tst.w	r3, sl
 80139c8:	e7e0      	b.n	801398c <_strtod_l+0x904>
 80139ca:	f7ff fb3f 	bl	801304c <sulp>
 80139ce:	4602      	mov	r2, r0
 80139d0:	460b      	mov	r3, r1
 80139d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80139d6:	f7ec fc77 	bl	80002c8 <__aeabi_dsub>
 80139da:	2200      	movs	r2, #0
 80139dc:	2300      	movs	r3, #0
 80139de:	4682      	mov	sl, r0
 80139e0:	468b      	mov	fp, r1
 80139e2:	f7ed f891 	bl	8000b08 <__aeabi_dcmpeq>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	d0c1      	beq.n	801396e <_strtod_l+0x8e6>
 80139ea:	e60e      	b.n	801360a <_strtod_l+0x582>
 80139ec:	fffffc02 	.word	0xfffffc02
 80139f0:	7ff00000 	.word	0x7ff00000
 80139f4:	39500000 	.word	0x39500000
 80139f8:	000fffff 	.word	0x000fffff
 80139fc:	7fefffff 	.word	0x7fefffff
 8013a00:	0801bff8 	.word	0x0801bff8
 8013a04:	4631      	mov	r1, r6
 8013a06:	4628      	mov	r0, r5
 8013a08:	f004 ffe2 	bl	80189d0 <__ratio>
 8013a0c:	ec59 8b10 	vmov	r8, r9, d0
 8013a10:	ee10 0a10 	vmov	r0, s0
 8013a14:	2200      	movs	r2, #0
 8013a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a1a:	4649      	mov	r1, r9
 8013a1c:	f7ed f888 	bl	8000b30 <__aeabi_dcmple>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d07c      	beq.n	8013b1e <_strtod_l+0xa96>
 8013a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d04c      	beq.n	8013ac4 <_strtod_l+0xa3c>
 8013a2a:	4b95      	ldr	r3, [pc, #596]	; (8013c80 <_strtod_l+0xbf8>)
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013a32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013c80 <_strtod_l+0xbf8>
 8013a36:	f04f 0800 	mov.w	r8, #0
 8013a3a:	4b92      	ldr	r3, [pc, #584]	; (8013c84 <_strtod_l+0xbfc>)
 8013a3c:	403b      	ands	r3, r7
 8013a3e:	9311      	str	r3, [sp, #68]	; 0x44
 8013a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a42:	4b91      	ldr	r3, [pc, #580]	; (8013c88 <_strtod_l+0xc00>)
 8013a44:	429a      	cmp	r2, r3
 8013a46:	f040 80b2 	bne.w	8013bae <_strtod_l+0xb26>
 8013a4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013a52:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013a56:	ec4b ab10 	vmov	d0, sl, fp
 8013a5a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013a5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013a62:	f004 fedd 	bl	8018820 <__ulp>
 8013a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013a6a:	ec53 2b10 	vmov	r2, r3, d0
 8013a6e:	f7ec fde3 	bl	8000638 <__aeabi_dmul>
 8013a72:	4652      	mov	r2, sl
 8013a74:	465b      	mov	r3, fp
 8013a76:	f7ec fc29 	bl	80002cc <__adddf3>
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	4981      	ldr	r1, [pc, #516]	; (8013c84 <_strtod_l+0xbfc>)
 8013a7e:	4a83      	ldr	r2, [pc, #524]	; (8013c8c <_strtod_l+0xc04>)
 8013a80:	4019      	ands	r1, r3
 8013a82:	4291      	cmp	r1, r2
 8013a84:	4682      	mov	sl, r0
 8013a86:	d95e      	bls.n	8013b46 <_strtod_l+0xabe>
 8013a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d103      	bne.n	8013a9a <_strtod_l+0xa12>
 8013a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a94:	3301      	adds	r3, #1
 8013a96:	f43f ad43 	beq.w	8013520 <_strtod_l+0x498>
 8013a9a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013c98 <_strtod_l+0xc10>
 8013a9e:	f04f 3aff 	mov.w	sl, #4294967295
 8013aa2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	f004 fbc2 	bl	801822e <_Bfree>
 8013aaa:	9907      	ldr	r1, [sp, #28]
 8013aac:	4620      	mov	r0, r4
 8013aae:	f004 fbbe 	bl	801822e <_Bfree>
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f004 fbba 	bl	801822e <_Bfree>
 8013aba:	4629      	mov	r1, r5
 8013abc:	4620      	mov	r0, r4
 8013abe:	f004 fbb6 	bl	801822e <_Bfree>
 8013ac2:	e613      	b.n	80136ec <_strtod_l+0x664>
 8013ac4:	f1ba 0f00 	cmp.w	sl, #0
 8013ac8:	d11b      	bne.n	8013b02 <_strtod_l+0xa7a>
 8013aca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ace:	b9f3      	cbnz	r3, 8013b0e <_strtod_l+0xa86>
 8013ad0:	4b6b      	ldr	r3, [pc, #428]	; (8013c80 <_strtod_l+0xbf8>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	4649      	mov	r1, r9
 8013ad8:	f7ed f820 	bl	8000b1c <__aeabi_dcmplt>
 8013adc:	b9d0      	cbnz	r0, 8013b14 <_strtod_l+0xa8c>
 8013ade:	4640      	mov	r0, r8
 8013ae0:	4649      	mov	r1, r9
 8013ae2:	4b6b      	ldr	r3, [pc, #428]	; (8013c90 <_strtod_l+0xc08>)
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	f7ec fda7 	bl	8000638 <__aeabi_dmul>
 8013aea:	4680      	mov	r8, r0
 8013aec:	4689      	mov	r9, r1
 8013aee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013af2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013af6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013af8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013afc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013b00:	e79b      	b.n	8013a3a <_strtod_l+0x9b2>
 8013b02:	f1ba 0f01 	cmp.w	sl, #1
 8013b06:	d102      	bne.n	8013b0e <_strtod_l+0xa86>
 8013b08:	2f00      	cmp	r7, #0
 8013b0a:	f43f ad7e 	beq.w	801360a <_strtod_l+0x582>
 8013b0e:	4b61      	ldr	r3, [pc, #388]	; (8013c94 <_strtod_l+0xc0c>)
 8013b10:	2200      	movs	r2, #0
 8013b12:	e78c      	b.n	8013a2e <_strtod_l+0x9a6>
 8013b14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013c90 <_strtod_l+0xc08>
 8013b18:	f04f 0800 	mov.w	r8, #0
 8013b1c:	e7e7      	b.n	8013aee <_strtod_l+0xa66>
 8013b1e:	4b5c      	ldr	r3, [pc, #368]	; (8013c90 <_strtod_l+0xc08>)
 8013b20:	4640      	mov	r0, r8
 8013b22:	4649      	mov	r1, r9
 8013b24:	2200      	movs	r2, #0
 8013b26:	f7ec fd87 	bl	8000638 <__aeabi_dmul>
 8013b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b2c:	4680      	mov	r8, r0
 8013b2e:	4689      	mov	r9, r1
 8013b30:	b933      	cbnz	r3, 8013b40 <_strtod_l+0xab8>
 8013b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b36:	9012      	str	r0, [sp, #72]	; 0x48
 8013b38:	9313      	str	r3, [sp, #76]	; 0x4c
 8013b3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013b3e:	e7dd      	b.n	8013afc <_strtod_l+0xa74>
 8013b40:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013b44:	e7f9      	b.n	8013b3a <_strtod_l+0xab2>
 8013b46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013b4a:	9b04      	ldr	r3, [sp, #16]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d1a8      	bne.n	8013aa2 <_strtod_l+0xa1a>
 8013b50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b56:	0d1b      	lsrs	r3, r3, #20
 8013b58:	051b      	lsls	r3, r3, #20
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d1a1      	bne.n	8013aa2 <_strtod_l+0xa1a>
 8013b5e:	4640      	mov	r0, r8
 8013b60:	4649      	mov	r1, r9
 8013b62:	f7ed f8c9 	bl	8000cf8 <__aeabi_d2lz>
 8013b66:	f7ec fd39 	bl	80005dc <__aeabi_l2d>
 8013b6a:	4602      	mov	r2, r0
 8013b6c:	460b      	mov	r3, r1
 8013b6e:	4640      	mov	r0, r8
 8013b70:	4649      	mov	r1, r9
 8013b72:	f7ec fba9 	bl	80002c8 <__aeabi_dsub>
 8013b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b7c:	ea43 030a 	orr.w	r3, r3, sl
 8013b80:	4313      	orrs	r3, r2
 8013b82:	4680      	mov	r8, r0
 8013b84:	4689      	mov	r9, r1
 8013b86:	d053      	beq.n	8013c30 <_strtod_l+0xba8>
 8013b88:	a335      	add	r3, pc, #212	; (adr r3, 8013c60 <_strtod_l+0xbd8>)
 8013b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8e:	f7ec ffc5 	bl	8000b1c <__aeabi_dcmplt>
 8013b92:	2800      	cmp	r0, #0
 8013b94:	f47f acce 	bne.w	8013534 <_strtod_l+0x4ac>
 8013b98:	a333      	add	r3, pc, #204	; (adr r3, 8013c68 <_strtod_l+0xbe0>)
 8013b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9e:	4640      	mov	r0, r8
 8013ba0:	4649      	mov	r1, r9
 8013ba2:	f7ec ffd9 	bl	8000b58 <__aeabi_dcmpgt>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	f43f af7b 	beq.w	8013aa2 <_strtod_l+0xa1a>
 8013bac:	e4c2      	b.n	8013534 <_strtod_l+0x4ac>
 8013bae:	9b04      	ldr	r3, [sp, #16]
 8013bb0:	b333      	cbz	r3, 8013c00 <_strtod_l+0xb78>
 8013bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013bb8:	d822      	bhi.n	8013c00 <_strtod_l+0xb78>
 8013bba:	a32d      	add	r3, pc, #180	; (adr r3, 8013c70 <_strtod_l+0xbe8>)
 8013bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc0:	4640      	mov	r0, r8
 8013bc2:	4649      	mov	r1, r9
 8013bc4:	f7ec ffb4 	bl	8000b30 <__aeabi_dcmple>
 8013bc8:	b1a0      	cbz	r0, 8013bf4 <_strtod_l+0xb6c>
 8013bca:	4649      	mov	r1, r9
 8013bcc:	4640      	mov	r0, r8
 8013bce:	f7ed f80b 	bl	8000be8 <__aeabi_d2uiz>
 8013bd2:	2801      	cmp	r0, #1
 8013bd4:	bf38      	it	cc
 8013bd6:	2001      	movcc	r0, #1
 8013bd8:	f7ec fcb4 	bl	8000544 <__aeabi_ui2d>
 8013bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bde:	4680      	mov	r8, r0
 8013be0:	4689      	mov	r9, r1
 8013be2:	bb13      	cbnz	r3, 8013c2a <_strtod_l+0xba2>
 8013be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013be8:	9014      	str	r0, [sp, #80]	; 0x50
 8013bea:	9315      	str	r3, [sp, #84]	; 0x54
 8013bec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013bf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013bf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013bfc:	1a9b      	subs	r3, r3, r2
 8013bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8013c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c04:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013c08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013c0c:	f004 fe08 	bl	8018820 <__ulp>
 8013c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c14:	ec53 2b10 	vmov	r2, r3, d0
 8013c18:	f7ec fd0e 	bl	8000638 <__aeabi_dmul>
 8013c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013c20:	f7ec fb54 	bl	80002cc <__adddf3>
 8013c24:	4682      	mov	sl, r0
 8013c26:	468b      	mov	fp, r1
 8013c28:	e78f      	b.n	8013b4a <_strtod_l+0xac2>
 8013c2a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013c2e:	e7dd      	b.n	8013bec <_strtod_l+0xb64>
 8013c30:	a311      	add	r3, pc, #68	; (adr r3, 8013c78 <_strtod_l+0xbf0>)
 8013c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c36:	f7ec ff71 	bl	8000b1c <__aeabi_dcmplt>
 8013c3a:	e7b4      	b.n	8013ba6 <_strtod_l+0xb1e>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8013c40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013c42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c44:	6013      	str	r3, [r2, #0]
 8013c46:	f7ff ba65 	b.w	8013114 <_strtod_l+0x8c>
 8013c4a:	2b65      	cmp	r3, #101	; 0x65
 8013c4c:	f43f ab5d 	beq.w	801330a <_strtod_l+0x282>
 8013c50:	2b45      	cmp	r3, #69	; 0x45
 8013c52:	f43f ab5a 	beq.w	801330a <_strtod_l+0x282>
 8013c56:	2201      	movs	r2, #1
 8013c58:	f7ff bb92 	b.w	8013380 <_strtod_l+0x2f8>
 8013c5c:	f3af 8000 	nop.w
 8013c60:	94a03595 	.word	0x94a03595
 8013c64:	3fdfffff 	.word	0x3fdfffff
 8013c68:	35afe535 	.word	0x35afe535
 8013c6c:	3fe00000 	.word	0x3fe00000
 8013c70:	ffc00000 	.word	0xffc00000
 8013c74:	41dfffff 	.word	0x41dfffff
 8013c78:	94a03595 	.word	0x94a03595
 8013c7c:	3fcfffff 	.word	0x3fcfffff
 8013c80:	3ff00000 	.word	0x3ff00000
 8013c84:	7ff00000 	.word	0x7ff00000
 8013c88:	7fe00000 	.word	0x7fe00000
 8013c8c:	7c9fffff 	.word	0x7c9fffff
 8013c90:	3fe00000 	.word	0x3fe00000
 8013c94:	bff00000 	.word	0xbff00000
 8013c98:	7fefffff 	.word	0x7fefffff

08013c9c <strtod>:
 8013c9c:	460a      	mov	r2, r1
 8013c9e:	4601      	mov	r1, r0
 8013ca0:	4802      	ldr	r0, [pc, #8]	; (8013cac <strtod+0x10>)
 8013ca2:	4b03      	ldr	r3, [pc, #12]	; (8013cb0 <strtod+0x14>)
 8013ca4:	6800      	ldr	r0, [r0, #0]
 8013ca6:	f7ff b9ef 	b.w	8013088 <_strtod_l>
 8013caa:	bf00      	nop
 8013cac:	200029c4 	.word	0x200029c4
 8013cb0:	20003208 	.word	0x20003208

08013cb4 <strtok>:
 8013cb4:	4b02      	ldr	r3, [pc, #8]	; (8013cc0 <strtok+0xc>)
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	2301      	movs	r3, #1
 8013cba:	325c      	adds	r2, #92	; 0x5c
 8013cbc:	f000 b802 	b.w	8013cc4 <__strtok_r>
 8013cc0:	200029c4 	.word	0x200029c4

08013cc4 <__strtok_r>:
 8013cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cc6:	b908      	cbnz	r0, 8013ccc <__strtok_r+0x8>
 8013cc8:	6810      	ldr	r0, [r2, #0]
 8013cca:	b188      	cbz	r0, 8013cf0 <__strtok_r+0x2c>
 8013ccc:	4604      	mov	r4, r0
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013cd4:	460f      	mov	r7, r1
 8013cd6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013cda:	b91e      	cbnz	r6, 8013ce4 <__strtok_r+0x20>
 8013cdc:	b965      	cbnz	r5, 8013cf8 <__strtok_r+0x34>
 8013cde:	6015      	str	r5, [r2, #0]
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	e005      	b.n	8013cf0 <__strtok_r+0x2c>
 8013ce4:	42b5      	cmp	r5, r6
 8013ce6:	d1f6      	bne.n	8013cd6 <__strtok_r+0x12>
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d1f0      	bne.n	8013cce <__strtok_r+0xa>
 8013cec:	6014      	str	r4, [r2, #0]
 8013cee:	7003      	strb	r3, [r0, #0]
 8013cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cf2:	461c      	mov	r4, r3
 8013cf4:	e00c      	b.n	8013d10 <__strtok_r+0x4c>
 8013cf6:	b915      	cbnz	r5, 8013cfe <__strtok_r+0x3a>
 8013cf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013cfc:	460e      	mov	r6, r1
 8013cfe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013d02:	42ab      	cmp	r3, r5
 8013d04:	d1f7      	bne.n	8013cf6 <__strtok_r+0x32>
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d0f3      	beq.n	8013cf2 <__strtok_r+0x2e>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013d10:	6014      	str	r4, [r2, #0]
 8013d12:	e7ed      	b.n	8013cf0 <__strtok_r+0x2c>

08013d14 <_strtol_l.isra.0>:
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d1a:	d001      	beq.n	8013d20 <_strtol_l.isra.0+0xc>
 8013d1c:	2b24      	cmp	r3, #36	; 0x24
 8013d1e:	d906      	bls.n	8013d2e <_strtol_l.isra.0+0x1a>
 8013d20:	f003 fbf6 	bl	8017510 <__errno>
 8013d24:	2316      	movs	r3, #22
 8013d26:	6003      	str	r3, [r0, #0]
 8013d28:	2000      	movs	r0, #0
 8013d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d2e:	4f3a      	ldr	r7, [pc, #232]	; (8013e18 <_strtol_l.isra.0+0x104>)
 8013d30:	468e      	mov	lr, r1
 8013d32:	4676      	mov	r6, lr
 8013d34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013d38:	5de5      	ldrb	r5, [r4, r7]
 8013d3a:	f015 0508 	ands.w	r5, r5, #8
 8013d3e:	d1f8      	bne.n	8013d32 <_strtol_l.isra.0+0x1e>
 8013d40:	2c2d      	cmp	r4, #45	; 0x2d
 8013d42:	d134      	bne.n	8013dae <_strtol_l.isra.0+0x9a>
 8013d44:	f89e 4000 	ldrb.w	r4, [lr]
 8013d48:	f04f 0801 	mov.w	r8, #1
 8013d4c:	f106 0e02 	add.w	lr, r6, #2
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d05c      	beq.n	8013e0e <_strtol_l.isra.0+0xfa>
 8013d54:	2b10      	cmp	r3, #16
 8013d56:	d10c      	bne.n	8013d72 <_strtol_l.isra.0+0x5e>
 8013d58:	2c30      	cmp	r4, #48	; 0x30
 8013d5a:	d10a      	bne.n	8013d72 <_strtol_l.isra.0+0x5e>
 8013d5c:	f89e 4000 	ldrb.w	r4, [lr]
 8013d60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013d64:	2c58      	cmp	r4, #88	; 0x58
 8013d66:	d14d      	bne.n	8013e04 <_strtol_l.isra.0+0xf0>
 8013d68:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013d6c:	2310      	movs	r3, #16
 8013d6e:	f10e 0e02 	add.w	lr, lr, #2
 8013d72:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013d76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d7a:	2600      	movs	r6, #0
 8013d7c:	fbbc f9f3 	udiv	r9, ip, r3
 8013d80:	4635      	mov	r5, r6
 8013d82:	fb03 ca19 	mls	sl, r3, r9, ip
 8013d86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013d8a:	2f09      	cmp	r7, #9
 8013d8c:	d818      	bhi.n	8013dc0 <_strtol_l.isra.0+0xac>
 8013d8e:	463c      	mov	r4, r7
 8013d90:	42a3      	cmp	r3, r4
 8013d92:	dd24      	ble.n	8013dde <_strtol_l.isra.0+0xca>
 8013d94:	2e00      	cmp	r6, #0
 8013d96:	db1f      	blt.n	8013dd8 <_strtol_l.isra.0+0xc4>
 8013d98:	45a9      	cmp	r9, r5
 8013d9a:	d31d      	bcc.n	8013dd8 <_strtol_l.isra.0+0xc4>
 8013d9c:	d101      	bne.n	8013da2 <_strtol_l.isra.0+0x8e>
 8013d9e:	45a2      	cmp	sl, r4
 8013da0:	db1a      	blt.n	8013dd8 <_strtol_l.isra.0+0xc4>
 8013da2:	fb05 4503 	mla	r5, r5, r3, r4
 8013da6:	2601      	movs	r6, #1
 8013da8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013dac:	e7eb      	b.n	8013d86 <_strtol_l.isra.0+0x72>
 8013dae:	2c2b      	cmp	r4, #43	; 0x2b
 8013db0:	bf08      	it	eq
 8013db2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013db6:	46a8      	mov	r8, r5
 8013db8:	bf08      	it	eq
 8013dba:	f106 0e02 	addeq.w	lr, r6, #2
 8013dbe:	e7c7      	b.n	8013d50 <_strtol_l.isra.0+0x3c>
 8013dc0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013dc4:	2f19      	cmp	r7, #25
 8013dc6:	d801      	bhi.n	8013dcc <_strtol_l.isra.0+0xb8>
 8013dc8:	3c37      	subs	r4, #55	; 0x37
 8013dca:	e7e1      	b.n	8013d90 <_strtol_l.isra.0+0x7c>
 8013dcc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013dd0:	2f19      	cmp	r7, #25
 8013dd2:	d804      	bhi.n	8013dde <_strtol_l.isra.0+0xca>
 8013dd4:	3c57      	subs	r4, #87	; 0x57
 8013dd6:	e7db      	b.n	8013d90 <_strtol_l.isra.0+0x7c>
 8013dd8:	f04f 36ff 	mov.w	r6, #4294967295
 8013ddc:	e7e4      	b.n	8013da8 <_strtol_l.isra.0+0x94>
 8013dde:	2e00      	cmp	r6, #0
 8013de0:	da05      	bge.n	8013dee <_strtol_l.isra.0+0xda>
 8013de2:	2322      	movs	r3, #34	; 0x22
 8013de4:	6003      	str	r3, [r0, #0]
 8013de6:	4665      	mov	r5, ip
 8013de8:	b942      	cbnz	r2, 8013dfc <_strtol_l.isra.0+0xe8>
 8013dea:	4628      	mov	r0, r5
 8013dec:	e79d      	b.n	8013d2a <_strtol_l.isra.0+0x16>
 8013dee:	f1b8 0f00 	cmp.w	r8, #0
 8013df2:	d000      	beq.n	8013df6 <_strtol_l.isra.0+0xe2>
 8013df4:	426d      	negs	r5, r5
 8013df6:	2a00      	cmp	r2, #0
 8013df8:	d0f7      	beq.n	8013dea <_strtol_l.isra.0+0xd6>
 8013dfa:	b10e      	cbz	r6, 8013e00 <_strtol_l.isra.0+0xec>
 8013dfc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013e00:	6011      	str	r1, [r2, #0]
 8013e02:	e7f2      	b.n	8013dea <_strtol_l.isra.0+0xd6>
 8013e04:	2430      	movs	r4, #48	; 0x30
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d1b3      	bne.n	8013d72 <_strtol_l.isra.0+0x5e>
 8013e0a:	2308      	movs	r3, #8
 8013e0c:	e7b1      	b.n	8013d72 <_strtol_l.isra.0+0x5e>
 8013e0e:	2c30      	cmp	r4, #48	; 0x30
 8013e10:	d0a4      	beq.n	8013d5c <_strtol_l.isra.0+0x48>
 8013e12:	230a      	movs	r3, #10
 8013e14:	e7ad      	b.n	8013d72 <_strtol_l.isra.0+0x5e>
 8013e16:	bf00      	nop
 8013e18:	0801c0ba 	.word	0x0801c0ba

08013e1c <strtol>:
 8013e1c:	4613      	mov	r3, r2
 8013e1e:	460a      	mov	r2, r1
 8013e20:	4601      	mov	r1, r0
 8013e22:	4802      	ldr	r0, [pc, #8]	; (8013e2c <strtol+0x10>)
 8013e24:	6800      	ldr	r0, [r0, #0]
 8013e26:	f7ff bf75 	b.w	8013d14 <_strtol_l.isra.0>
 8013e2a:	bf00      	nop
 8013e2c:	200029c4 	.word	0x200029c4

08013e30 <_svfprintf_r>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	ed2d 8b04 	vpush	{d8-d9}
 8013e38:	b0cf      	sub	sp, #316	; 0x13c
 8013e3a:	4689      	mov	r9, r1
 8013e3c:	4693      	mov	fp, r2
 8013e3e:	461e      	mov	r6, r3
 8013e40:	4682      	mov	sl, r0
 8013e42:	f004 f949 	bl	80180d8 <_localeconv_r>
 8013e46:	6803      	ldr	r3, [r0, #0]
 8013e48:	9313      	str	r3, [sp, #76]	; 0x4c
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7ec f9da 	bl	8000204 <strlen>
 8013e50:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013e54:	900e      	str	r0, [sp, #56]	; 0x38
 8013e56:	0618      	lsls	r0, r3, #24
 8013e58:	d51a      	bpl.n	8013e90 <_svfprintf_r+0x60>
 8013e5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013e5e:	b9bb      	cbnz	r3, 8013e90 <_svfprintf_r+0x60>
 8013e60:	2140      	movs	r1, #64	; 0x40
 8013e62:	4650      	mov	r0, sl
 8013e64:	f7fe fdde 	bl	8012a24 <_malloc_r>
 8013e68:	f8c9 0000 	str.w	r0, [r9]
 8013e6c:	f8c9 0010 	str.w	r0, [r9, #16]
 8013e70:	b958      	cbnz	r0, 8013e8a <_svfprintf_r+0x5a>
 8013e72:	230c      	movs	r3, #12
 8013e74:	f8ca 3000 	str.w	r3, [sl]
 8013e78:	f04f 33ff 	mov.w	r3, #4294967295
 8013e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013e80:	b04f      	add	sp, #316	; 0x13c
 8013e82:	ecbd 8b04 	vpop	{d8-d9}
 8013e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8a:	2340      	movs	r3, #64	; 0x40
 8013e8c:	f8c9 3014 	str.w	r3, [r9, #20]
 8013e90:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80140e0 <_svfprintf_r+0x2b0>
 8013e94:	2500      	movs	r5, #0
 8013e96:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8013e9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013e9e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8013ea2:	ac25      	add	r4, sp, #148	; 0x94
 8013ea4:	9422      	str	r4, [sp, #136]	; 0x88
 8013ea6:	9505      	str	r5, [sp, #20]
 8013ea8:	950a      	str	r5, [sp, #40]	; 0x28
 8013eaa:	9512      	str	r5, [sp, #72]	; 0x48
 8013eac:	9514      	str	r5, [sp, #80]	; 0x50
 8013eae:	950f      	str	r5, [sp, #60]	; 0x3c
 8013eb0:	465b      	mov	r3, fp
 8013eb2:	461d      	mov	r5, r3
 8013eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eb8:	b10a      	cbz	r2, 8013ebe <_svfprintf_r+0x8e>
 8013eba:	2a25      	cmp	r2, #37	; 0x25
 8013ebc:	d1f9      	bne.n	8013eb2 <_svfprintf_r+0x82>
 8013ebe:	ebb5 070b 	subs.w	r7, r5, fp
 8013ec2:	d00d      	beq.n	8013ee0 <_svfprintf_r+0xb0>
 8013ec4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ec6:	443b      	add	r3, r7
 8013ec8:	9324      	str	r3, [sp, #144]	; 0x90
 8013eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ecc:	3301      	adds	r3, #1
 8013ece:	2b07      	cmp	r3, #7
 8013ed0:	e9c4 b700 	strd	fp, r7, [r4]
 8013ed4:	9323      	str	r3, [sp, #140]	; 0x8c
 8013ed6:	dc79      	bgt.n	8013fcc <_svfprintf_r+0x19c>
 8013ed8:	3408      	adds	r4, #8
 8013eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013edc:	443b      	add	r3, r7
 8013ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ee0:	782b      	ldrb	r3, [r5, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f001 8140 	beq.w	8015168 <_svfprintf_r+0x1338>
 8013ee8:	2300      	movs	r3, #0
 8013eea:	f04f 32ff 	mov.w	r2, #4294967295
 8013eee:	3501      	adds	r5, #1
 8013ef0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8013ef4:	9204      	str	r2, [sp, #16]
 8013ef6:	9310      	str	r3, [sp, #64]	; 0x40
 8013ef8:	4698      	mov	r8, r3
 8013efa:	270a      	movs	r7, #10
 8013efc:	212b      	movs	r1, #43	; 0x2b
 8013efe:	462a      	mov	r2, r5
 8013f00:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013f04:	9307      	str	r3, [sp, #28]
 8013f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8013f08:	9b07      	ldr	r3, [sp, #28]
 8013f0a:	3b20      	subs	r3, #32
 8013f0c:	2b5a      	cmp	r3, #90	; 0x5a
 8013f0e:	f200 85b4 	bhi.w	8014a7a <_svfprintf_r+0xc4a>
 8013f12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013f16:	007e      	.short	0x007e
 8013f18:	05b205b2 	.word	0x05b205b2
 8013f1c:	05b20086 	.word	0x05b20086
 8013f20:	05b205b2 	.word	0x05b205b2
 8013f24:	05b20065 	.word	0x05b20065
 8013f28:	008905b2 	.word	0x008905b2
 8013f2c:	05b20093 	.word	0x05b20093
 8013f30:	00960090 	.word	0x00960090
 8013f34:	00b305b2 	.word	0x00b305b2
 8013f38:	00b600b6 	.word	0x00b600b6
 8013f3c:	00b600b6 	.word	0x00b600b6
 8013f40:	00b600b6 	.word	0x00b600b6
 8013f44:	00b600b6 	.word	0x00b600b6
 8013f48:	05b200b6 	.word	0x05b200b6
 8013f4c:	05b205b2 	.word	0x05b205b2
 8013f50:	05b205b2 	.word	0x05b205b2
 8013f54:	05b205b2 	.word	0x05b205b2
 8013f58:	05b20127 	.word	0x05b20127
 8013f5c:	00fc00e9 	.word	0x00fc00e9
 8013f60:	01270127 	.word	0x01270127
 8013f64:	05b20127 	.word	0x05b20127
 8013f68:	05b205b2 	.word	0x05b205b2
 8013f6c:	00c605b2 	.word	0x00c605b2
 8013f70:	05b205b2 	.word	0x05b205b2
 8013f74:	05b20492 	.word	0x05b20492
 8013f78:	05b205b2 	.word	0x05b205b2
 8013f7c:	05b204d9 	.word	0x05b204d9
 8013f80:	05b204fa 	.word	0x05b204fa
 8013f84:	051905b2 	.word	0x051905b2
 8013f88:	05b205b2 	.word	0x05b205b2
 8013f8c:	05b205b2 	.word	0x05b205b2
 8013f90:	05b205b2 	.word	0x05b205b2
 8013f94:	05b205b2 	.word	0x05b205b2
 8013f98:	05b20127 	.word	0x05b20127
 8013f9c:	00fe00e9 	.word	0x00fe00e9
 8013fa0:	01270127 	.word	0x01270127
 8013fa4:	00c90127 	.word	0x00c90127
 8013fa8:	00dd00fe 	.word	0x00dd00fe
 8013fac:	00d605b2 	.word	0x00d605b2
 8013fb0:	046f05b2 	.word	0x046f05b2
 8013fb4:	04c80494 	.word	0x04c80494
 8013fb8:	05b200dd 	.word	0x05b200dd
 8013fbc:	007c04d9 	.word	0x007c04d9
 8013fc0:	05b204fc 	.word	0x05b204fc
 8013fc4:	053605b2 	.word	0x053605b2
 8013fc8:	007c05b2 	.word	0x007c05b2
 8013fcc:	aa22      	add	r2, sp, #136	; 0x88
 8013fce:	4649      	mov	r1, r9
 8013fd0:	4650      	mov	r0, sl
 8013fd2:	f004 fe0b 	bl	8018bec <__ssprint_r>
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f040 8132 	bne.w	8014240 <_svfprintf_r+0x410>
 8013fdc:	ac25      	add	r4, sp, #148	; 0x94
 8013fde:	e77c      	b.n	8013eda <_svfprintf_r+0xaa>
 8013fe0:	4650      	mov	r0, sl
 8013fe2:	f004 f879 	bl	80180d8 <_localeconv_r>
 8013fe6:	6843      	ldr	r3, [r0, #4]
 8013fe8:	9314      	str	r3, [sp, #80]	; 0x50
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7ec f90a 	bl	8000204 <strlen>
 8013ff0:	9012      	str	r0, [sp, #72]	; 0x48
 8013ff2:	4650      	mov	r0, sl
 8013ff4:	f004 f870 	bl	80180d8 <_localeconv_r>
 8013ff8:	6883      	ldr	r3, [r0, #8]
 8013ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8013ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ffe:	212b      	movs	r1, #43	; 0x2b
 8014000:	b12b      	cbz	r3, 801400e <_svfprintf_r+0x1de>
 8014002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014004:	b11b      	cbz	r3, 801400e <_svfprintf_r+0x1de>
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	b10b      	cbz	r3, 801400e <_svfprintf_r+0x1de>
 801400a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801400e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014010:	e775      	b.n	8013efe <_svfprintf_r+0xce>
 8014012:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1f9      	bne.n	801400e <_svfprintf_r+0x1de>
 801401a:	2320      	movs	r3, #32
 801401c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014020:	e7f5      	b.n	801400e <_svfprintf_r+0x1de>
 8014022:	f048 0801 	orr.w	r8, r8, #1
 8014026:	e7f2      	b.n	801400e <_svfprintf_r+0x1de>
 8014028:	f856 3b04 	ldr.w	r3, [r6], #4
 801402c:	9310      	str	r3, [sp, #64]	; 0x40
 801402e:	2b00      	cmp	r3, #0
 8014030:	daed      	bge.n	801400e <_svfprintf_r+0x1de>
 8014032:	425b      	negs	r3, r3
 8014034:	9310      	str	r3, [sp, #64]	; 0x40
 8014036:	f048 0804 	orr.w	r8, r8, #4
 801403a:	e7e8      	b.n	801400e <_svfprintf_r+0x1de>
 801403c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8014040:	e7e5      	b.n	801400e <_svfprintf_r+0x1de>
 8014042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014044:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014048:	9307      	str	r3, [sp, #28]
 801404a:	2b2a      	cmp	r3, #42	; 0x2a
 801404c:	d113      	bne.n	8014076 <_svfprintf_r+0x246>
 801404e:	f856 0b04 	ldr.w	r0, [r6], #4
 8014052:	920b      	str	r2, [sp, #44]	; 0x2c
 8014054:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8014058:	9304      	str	r3, [sp, #16]
 801405a:	e7d8      	b.n	801400e <_svfprintf_r+0x1de>
 801405c:	9804      	ldr	r0, [sp, #16]
 801405e:	fb07 3300 	mla	r3, r7, r0, r3
 8014062:	9304      	str	r3, [sp, #16]
 8014064:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014068:	9307      	str	r3, [sp, #28]
 801406a:	9b07      	ldr	r3, [sp, #28]
 801406c:	3b30      	subs	r3, #48	; 0x30
 801406e:	2b09      	cmp	r3, #9
 8014070:	d9f4      	bls.n	801405c <_svfprintf_r+0x22c>
 8014072:	920b      	str	r2, [sp, #44]	; 0x2c
 8014074:	e748      	b.n	8013f08 <_svfprintf_r+0xd8>
 8014076:	2300      	movs	r3, #0
 8014078:	9304      	str	r3, [sp, #16]
 801407a:	e7f6      	b.n	801406a <_svfprintf_r+0x23a>
 801407c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8014080:	e7c5      	b.n	801400e <_svfprintf_r+0x1de>
 8014082:	2300      	movs	r3, #0
 8014084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014086:	9310      	str	r3, [sp, #64]	; 0x40
 8014088:	9b07      	ldr	r3, [sp, #28]
 801408a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801408c:	3b30      	subs	r3, #48	; 0x30
 801408e:	fb07 3300 	mla	r3, r7, r0, r3
 8014092:	9310      	str	r3, [sp, #64]	; 0x40
 8014094:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014098:	9307      	str	r3, [sp, #28]
 801409a:	3b30      	subs	r3, #48	; 0x30
 801409c:	2b09      	cmp	r3, #9
 801409e:	d9f3      	bls.n	8014088 <_svfprintf_r+0x258>
 80140a0:	e7e7      	b.n	8014072 <_svfprintf_r+0x242>
 80140a2:	f048 0808 	orr.w	r8, r8, #8
 80140a6:	e7b2      	b.n	801400e <_svfprintf_r+0x1de>
 80140a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b68      	cmp	r3, #104	; 0x68
 80140ae:	bf01      	itttt	eq
 80140b0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80140b2:	3301      	addeq	r3, #1
 80140b4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80140b6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80140ba:	bf18      	it	ne
 80140bc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80140c0:	e7a5      	b.n	801400e <_svfprintf_r+0x1de>
 80140c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	2b6c      	cmp	r3, #108	; 0x6c
 80140c8:	d105      	bne.n	80140d6 <_svfprintf_r+0x2a6>
 80140ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140cc:	3301      	adds	r3, #1
 80140ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80140d0:	f048 0820 	orr.w	r8, r8, #32
 80140d4:	e79b      	b.n	801400e <_svfprintf_r+0x1de>
 80140d6:	f048 0810 	orr.w	r8, r8, #16
 80140da:	e798      	b.n	801400e <_svfprintf_r+0x1de>
 80140dc:	f3af 8000 	nop.w
	...
 80140e8:	4632      	mov	r2, r6
 80140ea:	2000      	movs	r0, #0
 80140ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80140f0:	9206      	str	r2, [sp, #24]
 80140f2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80140f6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80140fa:	2301      	movs	r3, #1
 80140fc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8014100:	9003      	str	r0, [sp, #12]
 8014102:	9304      	str	r3, [sp, #16]
 8014104:	4606      	mov	r6, r0
 8014106:	4605      	mov	r5, r0
 8014108:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801410c:	e1b8      	b.n	8014480 <_svfprintf_r+0x650>
 801410e:	f048 0810 	orr.w	r8, r8, #16
 8014112:	f018 0f20 	tst.w	r8, #32
 8014116:	d012      	beq.n	801413e <_svfprintf_r+0x30e>
 8014118:	3607      	adds	r6, #7
 801411a:	f026 0307 	bic.w	r3, r6, #7
 801411e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8014122:	9306      	str	r3, [sp, #24]
 8014124:	2e00      	cmp	r6, #0
 8014126:	f177 0300 	sbcs.w	r3, r7, #0
 801412a:	da06      	bge.n	801413a <_svfprintf_r+0x30a>
 801412c:	4276      	negs	r6, r6
 801412e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8014132:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8014136:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801413a:	2301      	movs	r3, #1
 801413c:	e38e      	b.n	801485c <_svfprintf_r+0xa2c>
 801413e:	1d33      	adds	r3, r6, #4
 8014140:	f018 0f10 	tst.w	r8, #16
 8014144:	9306      	str	r3, [sp, #24]
 8014146:	d002      	beq.n	801414e <_svfprintf_r+0x31e>
 8014148:	6836      	ldr	r6, [r6, #0]
 801414a:	17f7      	asrs	r7, r6, #31
 801414c:	e7ea      	b.n	8014124 <_svfprintf_r+0x2f4>
 801414e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8014152:	6836      	ldr	r6, [r6, #0]
 8014154:	d001      	beq.n	801415a <_svfprintf_r+0x32a>
 8014156:	b236      	sxth	r6, r6
 8014158:	e7f7      	b.n	801414a <_svfprintf_r+0x31a>
 801415a:	f418 7f00 	tst.w	r8, #512	; 0x200
 801415e:	bf18      	it	ne
 8014160:	b276      	sxtbne	r6, r6
 8014162:	e7f2      	b.n	801414a <_svfprintf_r+0x31a>
 8014164:	3607      	adds	r6, #7
 8014166:	f026 0307 	bic.w	r3, r6, #7
 801416a:	ecb3 7b02 	vldmia	r3!, {d7}
 801416e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014172:	9306      	str	r3, [sp, #24]
 8014174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014176:	ee09 3a10 	vmov	s18, r3
 801417a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801417c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014180:	ee09 3a90 	vmov	s19, r3
 8014184:	f04f 32ff 	mov.w	r2, #4294967295
 8014188:	4b3a      	ldr	r3, [pc, #232]	; (8014274 <_svfprintf_r+0x444>)
 801418a:	ec51 0b19 	vmov	r0, r1, d9
 801418e:	f7ec fced 	bl	8000b6c <__aeabi_dcmpun>
 8014192:	bb10      	cbnz	r0, 80141da <_svfprintf_r+0x3aa>
 8014194:	4b37      	ldr	r3, [pc, #220]	; (8014274 <_svfprintf_r+0x444>)
 8014196:	ec51 0b19 	vmov	r0, r1, d9
 801419a:	f04f 32ff 	mov.w	r2, #4294967295
 801419e:	f7ec fcc7 	bl	8000b30 <__aeabi_dcmple>
 80141a2:	b9d0      	cbnz	r0, 80141da <_svfprintf_r+0x3aa>
 80141a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80141a8:	2200      	movs	r2, #0
 80141aa:	2300      	movs	r3, #0
 80141ac:	f7ec fcb6 	bl	8000b1c <__aeabi_dcmplt>
 80141b0:	b110      	cbz	r0, 80141b8 <_svfprintf_r+0x388>
 80141b2:	232d      	movs	r3, #45	; 0x2d
 80141b4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80141b8:	4a2f      	ldr	r2, [pc, #188]	; (8014278 <_svfprintf_r+0x448>)
 80141ba:	4830      	ldr	r0, [pc, #192]	; (801427c <_svfprintf_r+0x44c>)
 80141bc:	9b07      	ldr	r3, [sp, #28]
 80141be:	2100      	movs	r1, #0
 80141c0:	2b47      	cmp	r3, #71	; 0x47
 80141c2:	bfd4      	ite	le
 80141c4:	4693      	movle	fp, r2
 80141c6:	4683      	movgt	fp, r0
 80141c8:	2303      	movs	r3, #3
 80141ca:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80141ce:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80141d2:	2600      	movs	r6, #0
 80141d4:	4633      	mov	r3, r6
 80141d6:	f001 b802 	b.w	80151de <_svfprintf_r+0x13ae>
 80141da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80141de:	4610      	mov	r0, r2
 80141e0:	4619      	mov	r1, r3
 80141e2:	f7ec fcc3 	bl	8000b6c <__aeabi_dcmpun>
 80141e6:	b140      	cbz	r0, 80141fa <_svfprintf_r+0x3ca>
 80141e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141ea:	4a25      	ldr	r2, [pc, #148]	; (8014280 <_svfprintf_r+0x450>)
 80141ec:	4825      	ldr	r0, [pc, #148]	; (8014284 <_svfprintf_r+0x454>)
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	bfbc      	itt	lt
 80141f2:	232d      	movlt	r3, #45	; 0x2d
 80141f4:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80141f8:	e7e0      	b.n	80141bc <_svfprintf_r+0x38c>
 80141fa:	9b07      	ldr	r3, [sp, #28]
 80141fc:	f023 0320 	bic.w	r3, r3, #32
 8014200:	2b41      	cmp	r3, #65	; 0x41
 8014202:	9308      	str	r3, [sp, #32]
 8014204:	d125      	bne.n	8014252 <_svfprintf_r+0x422>
 8014206:	2330      	movs	r3, #48	; 0x30
 8014208:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801420c:	9b07      	ldr	r3, [sp, #28]
 801420e:	2b61      	cmp	r3, #97	; 0x61
 8014210:	bf0c      	ite	eq
 8014212:	2378      	moveq	r3, #120	; 0x78
 8014214:	2358      	movne	r3, #88	; 0x58
 8014216:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801421a:	9b04      	ldr	r3, [sp, #16]
 801421c:	2b63      	cmp	r3, #99	; 0x63
 801421e:	f048 0802 	orr.w	r8, r8, #2
 8014222:	dd31      	ble.n	8014288 <_svfprintf_r+0x458>
 8014224:	1c59      	adds	r1, r3, #1
 8014226:	4650      	mov	r0, sl
 8014228:	f7fe fbfc 	bl	8012a24 <_malloc_r>
 801422c:	4683      	mov	fp, r0
 801422e:	2800      	cmp	r0, #0
 8014230:	f040 81fe 	bne.w	8014630 <_svfprintf_r+0x800>
 8014234:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801423c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8014240:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014244:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801424a:	bf18      	it	ne
 801424c:	f04f 33ff 	movne.w	r3, #4294967295
 8014250:	e614      	b.n	8013e7c <_svfprintf_r+0x4c>
 8014252:	9b04      	ldr	r3, [sp, #16]
 8014254:	3301      	adds	r3, #1
 8014256:	f000 81ed 	beq.w	8014634 <_svfprintf_r+0x804>
 801425a:	9b08      	ldr	r3, [sp, #32]
 801425c:	2b47      	cmp	r3, #71	; 0x47
 801425e:	f040 81ec 	bne.w	801463a <_svfprintf_r+0x80a>
 8014262:	9b04      	ldr	r3, [sp, #16]
 8014264:	2b00      	cmp	r3, #0
 8014266:	f040 81e8 	bne.w	801463a <_svfprintf_r+0x80a>
 801426a:	9303      	str	r3, [sp, #12]
 801426c:	2301      	movs	r3, #1
 801426e:	9304      	str	r3, [sp, #16]
 8014270:	e00d      	b.n	801428e <_svfprintf_r+0x45e>
 8014272:	bf00      	nop
 8014274:	7fefffff 	.word	0x7fefffff
 8014278:	0801c020 	.word	0x0801c020
 801427c:	0801c024 	.word	0x0801c024
 8014280:	0801c028 	.word	0x0801c028
 8014284:	0801c02c 	.word	0x0801c02c
 8014288:	9003      	str	r0, [sp, #12]
 801428a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801428e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8014292:	9311      	str	r3, [sp, #68]	; 0x44
 8014294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014296:	2b00      	cmp	r3, #0
 8014298:	f280 81d1 	bge.w	801463e <_svfprintf_r+0x80e>
 801429c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801429e:	ee08 3a10 	vmov	s16, r3
 80142a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80142a8:	ee08 3a90 	vmov	s17, r3
 80142ac:	232d      	movs	r3, #45	; 0x2d
 80142ae:	9318      	str	r3, [sp, #96]	; 0x60
 80142b0:	9b08      	ldr	r3, [sp, #32]
 80142b2:	2b41      	cmp	r3, #65	; 0x41
 80142b4:	f040 81e1 	bne.w	801467a <_svfprintf_r+0x84a>
 80142b8:	eeb0 0a48 	vmov.f32	s0, s16
 80142bc:	eef0 0a68 	vmov.f32	s1, s17
 80142c0:	a81c      	add	r0, sp, #112	; 0x70
 80142c2:	f004 fbfd 	bl	8018ac0 <frexp>
 80142c6:	2200      	movs	r2, #0
 80142c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80142cc:	ec51 0b10 	vmov	r0, r1, d0
 80142d0:	f7ec f9b2 	bl	8000638 <__aeabi_dmul>
 80142d4:	2200      	movs	r2, #0
 80142d6:	2300      	movs	r3, #0
 80142d8:	4606      	mov	r6, r0
 80142da:	460f      	mov	r7, r1
 80142dc:	f7ec fc14 	bl	8000b08 <__aeabi_dcmpeq>
 80142e0:	b108      	cbz	r0, 80142e6 <_svfprintf_r+0x4b6>
 80142e2:	2301      	movs	r3, #1
 80142e4:	931c      	str	r3, [sp, #112]	; 0x70
 80142e6:	4bb4      	ldr	r3, [pc, #720]	; (80145b8 <_svfprintf_r+0x788>)
 80142e8:	4ab4      	ldr	r2, [pc, #720]	; (80145bc <_svfprintf_r+0x78c>)
 80142ea:	9907      	ldr	r1, [sp, #28]
 80142ec:	2961      	cmp	r1, #97	; 0x61
 80142ee:	bf18      	it	ne
 80142f0:	461a      	movne	r2, r3
 80142f2:	9b04      	ldr	r3, [sp, #16]
 80142f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80142f6:	3b01      	subs	r3, #1
 80142f8:	9305      	str	r3, [sp, #20]
 80142fa:	465d      	mov	r5, fp
 80142fc:	4bb0      	ldr	r3, [pc, #704]	; (80145c0 <_svfprintf_r+0x790>)
 80142fe:	2200      	movs	r2, #0
 8014300:	4630      	mov	r0, r6
 8014302:	4639      	mov	r1, r7
 8014304:	f7ec f998 	bl	8000638 <__aeabi_dmul>
 8014308:	460f      	mov	r7, r1
 801430a:	4606      	mov	r6, r0
 801430c:	f7ec fc44 	bl	8000b98 <__aeabi_d2iz>
 8014310:	9019      	str	r0, [sp, #100]	; 0x64
 8014312:	f7ec f927 	bl	8000564 <__aeabi_i2d>
 8014316:	4602      	mov	r2, r0
 8014318:	460b      	mov	r3, r1
 801431a:	4630      	mov	r0, r6
 801431c:	4639      	mov	r1, r7
 801431e:	f7eb ffd3 	bl	80002c8 <__aeabi_dsub>
 8014322:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014326:	5c9b      	ldrb	r3, [r3, r2]
 8014328:	f805 3b01 	strb.w	r3, [r5], #1
 801432c:	9b05      	ldr	r3, [sp, #20]
 801432e:	9309      	str	r3, [sp, #36]	; 0x24
 8014330:	1c5a      	adds	r2, r3, #1
 8014332:	4606      	mov	r6, r0
 8014334:	460f      	mov	r7, r1
 8014336:	d007      	beq.n	8014348 <_svfprintf_r+0x518>
 8014338:	3b01      	subs	r3, #1
 801433a:	9305      	str	r3, [sp, #20]
 801433c:	2200      	movs	r2, #0
 801433e:	2300      	movs	r3, #0
 8014340:	f7ec fbe2 	bl	8000b08 <__aeabi_dcmpeq>
 8014344:	2800      	cmp	r0, #0
 8014346:	d0d9      	beq.n	80142fc <_svfprintf_r+0x4cc>
 8014348:	4b9e      	ldr	r3, [pc, #632]	; (80145c4 <_svfprintf_r+0x794>)
 801434a:	2200      	movs	r2, #0
 801434c:	4630      	mov	r0, r6
 801434e:	4639      	mov	r1, r7
 8014350:	f7ec fc02 	bl	8000b58 <__aeabi_dcmpgt>
 8014354:	b960      	cbnz	r0, 8014370 <_svfprintf_r+0x540>
 8014356:	4b9b      	ldr	r3, [pc, #620]	; (80145c4 <_svfprintf_r+0x794>)
 8014358:	2200      	movs	r2, #0
 801435a:	4630      	mov	r0, r6
 801435c:	4639      	mov	r1, r7
 801435e:	f7ec fbd3 	bl	8000b08 <__aeabi_dcmpeq>
 8014362:	2800      	cmp	r0, #0
 8014364:	f000 8184 	beq.w	8014670 <_svfprintf_r+0x840>
 8014368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801436a:	07df      	lsls	r7, r3, #31
 801436c:	f140 8180 	bpl.w	8014670 <_svfprintf_r+0x840>
 8014370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014372:	9520      	str	r5, [sp, #128]	; 0x80
 8014374:	7bd9      	ldrb	r1, [r3, #15]
 8014376:	2030      	movs	r0, #48	; 0x30
 8014378:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801437a:	1e53      	subs	r3, r2, #1
 801437c:	9320      	str	r3, [sp, #128]	; 0x80
 801437e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014382:	428b      	cmp	r3, r1
 8014384:	f000 8163 	beq.w	801464e <_svfprintf_r+0x81e>
 8014388:	2b39      	cmp	r3, #57	; 0x39
 801438a:	bf0b      	itete	eq
 801438c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801438e:	3301      	addne	r3, #1
 8014390:	7a9b      	ldrbeq	r3, [r3, #10]
 8014392:	b2db      	uxtbne	r3, r3
 8014394:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014398:	eba5 030b 	sub.w	r3, r5, fp
 801439c:	9305      	str	r3, [sp, #20]
 801439e:	9b08      	ldr	r3, [sp, #32]
 80143a0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80143a2:	2b47      	cmp	r3, #71	; 0x47
 80143a4:	f040 81b1 	bne.w	801470a <_svfprintf_r+0x8da>
 80143a8:	1cee      	adds	r6, r5, #3
 80143aa:	db03      	blt.n	80143b4 <_svfprintf_r+0x584>
 80143ac:	9b04      	ldr	r3, [sp, #16]
 80143ae:	42ab      	cmp	r3, r5
 80143b0:	f280 81d6 	bge.w	8014760 <_svfprintf_r+0x930>
 80143b4:	9b07      	ldr	r3, [sp, #28]
 80143b6:	3b02      	subs	r3, #2
 80143b8:	9307      	str	r3, [sp, #28]
 80143ba:	9907      	ldr	r1, [sp, #28]
 80143bc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80143c0:	f021 0120 	bic.w	r1, r1, #32
 80143c4:	2941      	cmp	r1, #65	; 0x41
 80143c6:	bf08      	it	eq
 80143c8:	320f      	addeq	r2, #15
 80143ca:	f105 33ff 	add.w	r3, r5, #4294967295
 80143ce:	bf06      	itte	eq
 80143d0:	b2d2      	uxtbeq	r2, r2
 80143d2:	2101      	moveq	r1, #1
 80143d4:	2100      	movne	r1, #0
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	931c      	str	r3, [sp, #112]	; 0x70
 80143da:	bfb8      	it	lt
 80143dc:	f1c5 0301 	rsblt	r3, r5, #1
 80143e0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80143e4:	bfb4      	ite	lt
 80143e6:	222d      	movlt	r2, #45	; 0x2d
 80143e8:	222b      	movge	r2, #43	; 0x2b
 80143ea:	2b09      	cmp	r3, #9
 80143ec:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80143f0:	f340 81a4 	ble.w	801473c <_svfprintf_r+0x90c>
 80143f4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80143f8:	260a      	movs	r6, #10
 80143fa:	4611      	mov	r1, r2
 80143fc:	fb93 f5f6 	sdiv	r5, r3, r6
 8014400:	fb06 3015 	mls	r0, r6, r5, r3
 8014404:	3030      	adds	r0, #48	; 0x30
 8014406:	f801 0c01 	strb.w	r0, [r1, #-1]
 801440a:	4618      	mov	r0, r3
 801440c:	2863      	cmp	r0, #99	; 0x63
 801440e:	f102 32ff 	add.w	r2, r2, #4294967295
 8014412:	462b      	mov	r3, r5
 8014414:	dcf1      	bgt.n	80143fa <_svfprintf_r+0x5ca>
 8014416:	3330      	adds	r3, #48	; 0x30
 8014418:	1e88      	subs	r0, r1, #2
 801441a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801441e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8014422:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8014426:	4603      	mov	r3, r0
 8014428:	42ab      	cmp	r3, r5
 801442a:	f0c0 8182 	bcc.w	8014732 <_svfprintf_r+0x902>
 801442e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8014432:	1a52      	subs	r2, r2, r1
 8014434:	42a8      	cmp	r0, r5
 8014436:	bf88      	it	hi
 8014438:	2200      	movhi	r2, #0
 801443a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801443e:	441a      	add	r2, r3
 8014440:	ab1e      	add	r3, sp, #120	; 0x78
 8014442:	1ad3      	subs	r3, r2, r3
 8014444:	9a05      	ldr	r2, [sp, #20]
 8014446:	9315      	str	r3, [sp, #84]	; 0x54
 8014448:	2a01      	cmp	r2, #1
 801444a:	4413      	add	r3, r2
 801444c:	9304      	str	r3, [sp, #16]
 801444e:	dc02      	bgt.n	8014456 <_svfprintf_r+0x626>
 8014450:	f018 0f01 	tst.w	r8, #1
 8014454:	d003      	beq.n	801445e <_svfprintf_r+0x62e>
 8014456:	9b04      	ldr	r3, [sp, #16]
 8014458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801445a:	4413      	add	r3, r2
 801445c:	9304      	str	r3, [sp, #16]
 801445e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8014462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014466:	9311      	str	r3, [sp, #68]	; 0x44
 8014468:	2300      	movs	r3, #0
 801446a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801446e:	461d      	mov	r5, r3
 8014470:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014472:	b113      	cbz	r3, 801447a <_svfprintf_r+0x64a>
 8014474:	232d      	movs	r3, #45	; 0x2d
 8014476:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801447a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801447e:	2600      	movs	r6, #0
 8014480:	9b04      	ldr	r3, [sp, #16]
 8014482:	42b3      	cmp	r3, r6
 8014484:	bfb8      	it	lt
 8014486:	4633      	movlt	r3, r6
 8014488:	9311      	str	r3, [sp, #68]	; 0x44
 801448a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801448e:	b113      	cbz	r3, 8014496 <_svfprintf_r+0x666>
 8014490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014492:	3301      	adds	r3, #1
 8014494:	9311      	str	r3, [sp, #68]	; 0x44
 8014496:	f018 0302 	ands.w	r3, r8, #2
 801449a:	9317      	str	r3, [sp, #92]	; 0x5c
 801449c:	bf1e      	ittt	ne
 801449e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80144a0:	3302      	addne	r3, #2
 80144a2:	9311      	strne	r3, [sp, #68]	; 0x44
 80144a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80144a8:	9318      	str	r3, [sp, #96]	; 0x60
 80144aa:	d11f      	bne.n	80144ec <_svfprintf_r+0x6bc>
 80144ac:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80144b0:	1a9f      	subs	r7, r3, r2
 80144b2:	2f00      	cmp	r7, #0
 80144b4:	dd1a      	ble.n	80144ec <_svfprintf_r+0x6bc>
 80144b6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80144ba:	4843      	ldr	r0, [pc, #268]	; (80145c8 <_svfprintf_r+0x798>)
 80144bc:	6020      	str	r0, [r4, #0]
 80144be:	2f10      	cmp	r7, #16
 80144c0:	f103 0301 	add.w	r3, r3, #1
 80144c4:	f104 0108 	add.w	r1, r4, #8
 80144c8:	f300 82e6 	bgt.w	8014a98 <_svfprintf_r+0xc68>
 80144cc:	6067      	str	r7, [r4, #4]
 80144ce:	2b07      	cmp	r3, #7
 80144d0:	4417      	add	r7, r2
 80144d2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80144d6:	f340 82f2 	ble.w	8014abe <_svfprintf_r+0xc8e>
 80144da:	aa22      	add	r2, sp, #136	; 0x88
 80144dc:	4649      	mov	r1, r9
 80144de:	4650      	mov	r0, sl
 80144e0:	f004 fb84 	bl	8018bec <__ssprint_r>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	f040 861d 	bne.w	8015124 <_svfprintf_r+0x12f4>
 80144ea:	ac25      	add	r4, sp, #148	; 0x94
 80144ec:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80144f0:	b173      	cbz	r3, 8014510 <_svfprintf_r+0x6e0>
 80144f2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80144f6:	6023      	str	r3, [r4, #0]
 80144f8:	2301      	movs	r3, #1
 80144fa:	6063      	str	r3, [r4, #4]
 80144fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80144fe:	3301      	adds	r3, #1
 8014500:	9324      	str	r3, [sp, #144]	; 0x90
 8014502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014504:	3301      	adds	r3, #1
 8014506:	2b07      	cmp	r3, #7
 8014508:	9323      	str	r3, [sp, #140]	; 0x8c
 801450a:	f300 82da 	bgt.w	8014ac2 <_svfprintf_r+0xc92>
 801450e:	3408      	adds	r4, #8
 8014510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014512:	b16b      	cbz	r3, 8014530 <_svfprintf_r+0x700>
 8014514:	ab1b      	add	r3, sp, #108	; 0x6c
 8014516:	6023      	str	r3, [r4, #0]
 8014518:	2302      	movs	r3, #2
 801451a:	6063      	str	r3, [r4, #4]
 801451c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801451e:	3302      	adds	r3, #2
 8014520:	9324      	str	r3, [sp, #144]	; 0x90
 8014522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014524:	3301      	adds	r3, #1
 8014526:	2b07      	cmp	r3, #7
 8014528:	9323      	str	r3, [sp, #140]	; 0x8c
 801452a:	f300 82d4 	bgt.w	8014ad6 <_svfprintf_r+0xca6>
 801452e:	3408      	adds	r4, #8
 8014530:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014532:	2b80      	cmp	r3, #128	; 0x80
 8014534:	d11f      	bne.n	8014576 <_svfprintf_r+0x746>
 8014536:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801453a:	1a9f      	subs	r7, r3, r2
 801453c:	2f00      	cmp	r7, #0
 801453e:	dd1a      	ble.n	8014576 <_svfprintf_r+0x746>
 8014540:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014544:	4821      	ldr	r0, [pc, #132]	; (80145cc <_svfprintf_r+0x79c>)
 8014546:	6020      	str	r0, [r4, #0]
 8014548:	2f10      	cmp	r7, #16
 801454a:	f103 0301 	add.w	r3, r3, #1
 801454e:	f104 0108 	add.w	r1, r4, #8
 8014552:	f300 82ca 	bgt.w	8014aea <_svfprintf_r+0xcba>
 8014556:	6067      	str	r7, [r4, #4]
 8014558:	2b07      	cmp	r3, #7
 801455a:	4417      	add	r7, r2
 801455c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8014560:	f340 82d6 	ble.w	8014b10 <_svfprintf_r+0xce0>
 8014564:	aa22      	add	r2, sp, #136	; 0x88
 8014566:	4649      	mov	r1, r9
 8014568:	4650      	mov	r0, sl
 801456a:	f004 fb3f 	bl	8018bec <__ssprint_r>
 801456e:	2800      	cmp	r0, #0
 8014570:	f040 85d8 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014574:	ac25      	add	r4, sp, #148	; 0x94
 8014576:	9b04      	ldr	r3, [sp, #16]
 8014578:	1af6      	subs	r6, r6, r3
 801457a:	2e00      	cmp	r6, #0
 801457c:	dd28      	ble.n	80145d0 <_svfprintf_r+0x7a0>
 801457e:	4f13      	ldr	r7, [pc, #76]	; (80145cc <_svfprintf_r+0x79c>)
 8014580:	6027      	str	r7, [r4, #0]
 8014582:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014586:	2e10      	cmp	r6, #16
 8014588:	f103 0301 	add.w	r3, r3, #1
 801458c:	f104 0108 	add.w	r1, r4, #8
 8014590:	f300 82c0 	bgt.w	8014b14 <_svfprintf_r+0xce4>
 8014594:	6066      	str	r6, [r4, #4]
 8014596:	2b07      	cmp	r3, #7
 8014598:	4416      	add	r6, r2
 801459a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801459e:	f340 82cc 	ble.w	8014b3a <_svfprintf_r+0xd0a>
 80145a2:	aa22      	add	r2, sp, #136	; 0x88
 80145a4:	4649      	mov	r1, r9
 80145a6:	4650      	mov	r0, sl
 80145a8:	f004 fb20 	bl	8018bec <__ssprint_r>
 80145ac:	2800      	cmp	r0, #0
 80145ae:	f040 85b9 	bne.w	8015124 <_svfprintf_r+0x12f4>
 80145b2:	ac25      	add	r4, sp, #148	; 0x94
 80145b4:	e00c      	b.n	80145d0 <_svfprintf_r+0x7a0>
 80145b6:	bf00      	nop
 80145b8:	0801c041 	.word	0x0801c041
 80145bc:	0801c030 	.word	0x0801c030
 80145c0:	40300000 	.word	0x40300000
 80145c4:	3fe00000 	.word	0x3fe00000
 80145c8:	0801c054 	.word	0x0801c054
 80145cc:	0801c064 	.word	0x0801c064
 80145d0:	f418 7f80 	tst.w	r8, #256	; 0x100
 80145d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80145d6:	f040 82b7 	bne.w	8014b48 <_svfprintf_r+0xd18>
 80145da:	9b04      	ldr	r3, [sp, #16]
 80145dc:	f8c4 b000 	str.w	fp, [r4]
 80145e0:	441e      	add	r6, r3
 80145e2:	6063      	str	r3, [r4, #4]
 80145e4:	9624      	str	r6, [sp, #144]	; 0x90
 80145e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80145e8:	3301      	adds	r3, #1
 80145ea:	2b07      	cmp	r3, #7
 80145ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80145ee:	f300 82f0 	bgt.w	8014bd2 <_svfprintf_r+0xda2>
 80145f2:	3408      	adds	r4, #8
 80145f4:	f018 0f04 	tst.w	r8, #4
 80145f8:	f040 8576 	bne.w	80150e8 <_svfprintf_r+0x12b8>
 80145fc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8014600:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014602:	428a      	cmp	r2, r1
 8014604:	bfac      	ite	ge
 8014606:	189b      	addge	r3, r3, r2
 8014608:	185b      	addlt	r3, r3, r1
 801460a:	930f      	str	r3, [sp, #60]	; 0x3c
 801460c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801460e:	b13b      	cbz	r3, 8014620 <_svfprintf_r+0x7f0>
 8014610:	aa22      	add	r2, sp, #136	; 0x88
 8014612:	4649      	mov	r1, r9
 8014614:	4650      	mov	r0, sl
 8014616:	f004 fae9 	bl	8018bec <__ssprint_r>
 801461a:	2800      	cmp	r0, #0
 801461c:	f040 8582 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014620:	2300      	movs	r3, #0
 8014622:	9323      	str	r3, [sp, #140]	; 0x8c
 8014624:	9b03      	ldr	r3, [sp, #12]
 8014626:	2b00      	cmp	r3, #0
 8014628:	f040 8598 	bne.w	801515c <_svfprintf_r+0x132c>
 801462c:	ac25      	add	r4, sp, #148	; 0x94
 801462e:	e0ed      	b.n	801480c <_svfprintf_r+0x9dc>
 8014630:	9003      	str	r0, [sp, #12]
 8014632:	e62c      	b.n	801428e <_svfprintf_r+0x45e>
 8014634:	9003      	str	r0, [sp, #12]
 8014636:	2306      	movs	r3, #6
 8014638:	e619      	b.n	801426e <_svfprintf_r+0x43e>
 801463a:	9003      	str	r0, [sp, #12]
 801463c:	e627      	b.n	801428e <_svfprintf_r+0x45e>
 801463e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8014642:	2300      	movs	r3, #0
 8014644:	eeb0 8a47 	vmov.f32	s16, s14
 8014648:	eef0 8a67 	vmov.f32	s17, s15
 801464c:	e62f      	b.n	80142ae <_svfprintf_r+0x47e>
 801464e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8014652:	e691      	b.n	8014378 <_svfprintf_r+0x548>
 8014654:	f803 0b01 	strb.w	r0, [r3], #1
 8014658:	1aca      	subs	r2, r1, r3
 801465a:	2a00      	cmp	r2, #0
 801465c:	dafa      	bge.n	8014654 <_svfprintf_r+0x824>
 801465e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014662:	3201      	adds	r2, #1
 8014664:	f103 0301 	add.w	r3, r3, #1
 8014668:	bfb8      	it	lt
 801466a:	2300      	movlt	r3, #0
 801466c:	441d      	add	r5, r3
 801466e:	e693      	b.n	8014398 <_svfprintf_r+0x568>
 8014670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014672:	462b      	mov	r3, r5
 8014674:	18a9      	adds	r1, r5, r2
 8014676:	2030      	movs	r0, #48	; 0x30
 8014678:	e7ee      	b.n	8014658 <_svfprintf_r+0x828>
 801467a:	9b08      	ldr	r3, [sp, #32]
 801467c:	2b46      	cmp	r3, #70	; 0x46
 801467e:	d005      	beq.n	801468c <_svfprintf_r+0x85c>
 8014680:	2b45      	cmp	r3, #69	; 0x45
 8014682:	d11b      	bne.n	80146bc <_svfprintf_r+0x88c>
 8014684:	9b04      	ldr	r3, [sp, #16]
 8014686:	1c5d      	adds	r5, r3, #1
 8014688:	2102      	movs	r1, #2
 801468a:	e001      	b.n	8014690 <_svfprintf_r+0x860>
 801468c:	9d04      	ldr	r5, [sp, #16]
 801468e:	2103      	movs	r1, #3
 8014690:	ab20      	add	r3, sp, #128	; 0x80
 8014692:	9301      	str	r3, [sp, #4]
 8014694:	ab1d      	add	r3, sp, #116	; 0x74
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	462a      	mov	r2, r5
 801469a:	ab1c      	add	r3, sp, #112	; 0x70
 801469c:	4650      	mov	r0, sl
 801469e:	eeb0 0a48 	vmov.f32	s0, s16
 80146a2:	eef0 0a68 	vmov.f32	s1, s17
 80146a6:	f002 f95f 	bl	8016968 <_dtoa_r>
 80146aa:	9b08      	ldr	r3, [sp, #32]
 80146ac:	2b47      	cmp	r3, #71	; 0x47
 80146ae:	4683      	mov	fp, r0
 80146b0:	d106      	bne.n	80146c0 <_svfprintf_r+0x890>
 80146b2:	f018 0f01 	tst.w	r8, #1
 80146b6:	d103      	bne.n	80146c0 <_svfprintf_r+0x890>
 80146b8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80146ba:	e66d      	b.n	8014398 <_svfprintf_r+0x568>
 80146bc:	9d04      	ldr	r5, [sp, #16]
 80146be:	e7e3      	b.n	8014688 <_svfprintf_r+0x858>
 80146c0:	9b08      	ldr	r3, [sp, #32]
 80146c2:	2b46      	cmp	r3, #70	; 0x46
 80146c4:	eb0b 0605 	add.w	r6, fp, r5
 80146c8:	d10f      	bne.n	80146ea <_svfprintf_r+0x8ba>
 80146ca:	f89b 3000 	ldrb.w	r3, [fp]
 80146ce:	2b30      	cmp	r3, #48	; 0x30
 80146d0:	d109      	bne.n	80146e6 <_svfprintf_r+0x8b6>
 80146d2:	ec51 0b18 	vmov	r0, r1, d8
 80146d6:	2200      	movs	r2, #0
 80146d8:	2300      	movs	r3, #0
 80146da:	f7ec fa15 	bl	8000b08 <__aeabi_dcmpeq>
 80146de:	b910      	cbnz	r0, 80146e6 <_svfprintf_r+0x8b6>
 80146e0:	f1c5 0501 	rsb	r5, r5, #1
 80146e4:	951c      	str	r5, [sp, #112]	; 0x70
 80146e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80146e8:	441e      	add	r6, r3
 80146ea:	ec51 0b18 	vmov	r0, r1, d8
 80146ee:	2200      	movs	r2, #0
 80146f0:	2300      	movs	r3, #0
 80146f2:	f7ec fa09 	bl	8000b08 <__aeabi_dcmpeq>
 80146f6:	b100      	cbz	r0, 80146fa <_svfprintf_r+0x8ca>
 80146f8:	9620      	str	r6, [sp, #128]	; 0x80
 80146fa:	2230      	movs	r2, #48	; 0x30
 80146fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80146fe:	429e      	cmp	r6, r3
 8014700:	d9da      	bls.n	80146b8 <_svfprintf_r+0x888>
 8014702:	1c59      	adds	r1, r3, #1
 8014704:	9120      	str	r1, [sp, #128]	; 0x80
 8014706:	701a      	strb	r2, [r3, #0]
 8014708:	e7f8      	b.n	80146fc <_svfprintf_r+0x8cc>
 801470a:	9b08      	ldr	r3, [sp, #32]
 801470c:	2b46      	cmp	r3, #70	; 0x46
 801470e:	f47f ae54 	bne.w	80143ba <_svfprintf_r+0x58a>
 8014712:	9a04      	ldr	r2, [sp, #16]
 8014714:	f008 0301 	and.w	r3, r8, #1
 8014718:	2d00      	cmp	r5, #0
 801471a:	ea43 0302 	orr.w	r3, r3, r2
 801471e:	dd1a      	ble.n	8014756 <_svfprintf_r+0x926>
 8014720:	2b00      	cmp	r3, #0
 8014722:	d034      	beq.n	801478e <_svfprintf_r+0x95e>
 8014724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014726:	18eb      	adds	r3, r5, r3
 8014728:	441a      	add	r2, r3
 801472a:	9204      	str	r2, [sp, #16]
 801472c:	2366      	movs	r3, #102	; 0x66
 801472e:	9307      	str	r3, [sp, #28]
 8014730:	e033      	b.n	801479a <_svfprintf_r+0x96a>
 8014732:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014736:	f802 6b01 	strb.w	r6, [r2], #1
 801473a:	e675      	b.n	8014428 <_svfprintf_r+0x5f8>
 801473c:	b941      	cbnz	r1, 8014750 <_svfprintf_r+0x920>
 801473e:	2230      	movs	r2, #48	; 0x30
 8014740:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8014744:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8014748:	3330      	adds	r3, #48	; 0x30
 801474a:	f802 3b01 	strb.w	r3, [r2], #1
 801474e:	e677      	b.n	8014440 <_svfprintf_r+0x610>
 8014750:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8014754:	e7f8      	b.n	8014748 <_svfprintf_r+0x918>
 8014756:	b1e3      	cbz	r3, 8014792 <_svfprintf_r+0x962>
 8014758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801475a:	9a04      	ldr	r2, [sp, #16]
 801475c:	3301      	adds	r3, #1
 801475e:	e7e3      	b.n	8014728 <_svfprintf_r+0x8f8>
 8014760:	9b05      	ldr	r3, [sp, #20]
 8014762:	429d      	cmp	r5, r3
 8014764:	db07      	blt.n	8014776 <_svfprintf_r+0x946>
 8014766:	f018 0f01 	tst.w	r8, #1
 801476a:	d02d      	beq.n	80147c8 <_svfprintf_r+0x998>
 801476c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801476e:	18eb      	adds	r3, r5, r3
 8014770:	9304      	str	r3, [sp, #16]
 8014772:	2367      	movs	r3, #103	; 0x67
 8014774:	e7db      	b.n	801472e <_svfprintf_r+0x8fe>
 8014776:	9b05      	ldr	r3, [sp, #20]
 8014778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801477a:	2d00      	cmp	r5, #0
 801477c:	4413      	add	r3, r2
 801477e:	9304      	str	r3, [sp, #16]
 8014780:	dcf7      	bgt.n	8014772 <_svfprintf_r+0x942>
 8014782:	9a04      	ldr	r2, [sp, #16]
 8014784:	f1c5 0301 	rsb	r3, r5, #1
 8014788:	441a      	add	r2, r3
 801478a:	4613      	mov	r3, r2
 801478c:	e7f0      	b.n	8014770 <_svfprintf_r+0x940>
 801478e:	9504      	str	r5, [sp, #16]
 8014790:	e7cc      	b.n	801472c <_svfprintf_r+0x8fc>
 8014792:	2366      	movs	r3, #102	; 0x66
 8014794:	9307      	str	r3, [sp, #28]
 8014796:	2301      	movs	r3, #1
 8014798:	9304      	str	r3, [sp, #16]
 801479a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801479e:	9309      	str	r3, [sp, #36]	; 0x24
 80147a0:	d025      	beq.n	80147ee <_svfprintf_r+0x9be>
 80147a2:	2300      	movs	r3, #0
 80147a4:	2d00      	cmp	r5, #0
 80147a6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80147aa:	f77f ae61 	ble.w	8014470 <_svfprintf_r+0x640>
 80147ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	2bff      	cmp	r3, #255	; 0xff
 80147b4:	d10a      	bne.n	80147cc <_svfprintf_r+0x99c>
 80147b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80147ba:	9904      	ldr	r1, [sp, #16]
 80147bc:	4413      	add	r3, r2
 80147be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80147c0:	fb02 1303 	mla	r3, r2, r3, r1
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	e653      	b.n	8014470 <_svfprintf_r+0x640>
 80147c8:	9504      	str	r5, [sp, #16]
 80147ca:	e7d2      	b.n	8014772 <_svfprintf_r+0x942>
 80147cc:	42ab      	cmp	r3, r5
 80147ce:	daf2      	bge.n	80147b6 <_svfprintf_r+0x986>
 80147d0:	1aed      	subs	r5, r5, r3
 80147d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147d4:	785b      	ldrb	r3, [r3, #1]
 80147d6:	b133      	cbz	r3, 80147e6 <_svfprintf_r+0x9b6>
 80147d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147da:	3301      	adds	r3, #1
 80147dc:	9309      	str	r3, [sp, #36]	; 0x24
 80147de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147e0:	3301      	adds	r3, #1
 80147e2:	930a      	str	r3, [sp, #40]	; 0x28
 80147e4:	e7e3      	b.n	80147ae <_svfprintf_r+0x97e>
 80147e6:	9b08      	ldr	r3, [sp, #32]
 80147e8:	3301      	adds	r3, #1
 80147ea:	9308      	str	r3, [sp, #32]
 80147ec:	e7df      	b.n	80147ae <_svfprintf_r+0x97e>
 80147ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f0:	9308      	str	r3, [sp, #32]
 80147f2:	e63d      	b.n	8014470 <_svfprintf_r+0x640>
 80147f4:	4632      	mov	r2, r6
 80147f6:	f018 0f20 	tst.w	r8, #32
 80147fa:	f852 3b04 	ldr.w	r3, [r2], #4
 80147fe:	9206      	str	r2, [sp, #24]
 8014800:	d009      	beq.n	8014816 <_svfprintf_r+0x9e6>
 8014802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014804:	4610      	mov	r0, r2
 8014806:	17d1      	asrs	r1, r2, #31
 8014808:	e9c3 0100 	strd	r0, r1, [r3]
 801480c:	9e06      	ldr	r6, [sp, #24]
 801480e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8014812:	f7ff bb4d 	b.w	8013eb0 <_svfprintf_r+0x80>
 8014816:	f018 0f10 	tst.w	r8, #16
 801481a:	d002      	beq.n	8014822 <_svfprintf_r+0x9f2>
 801481c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801481e:	601a      	str	r2, [r3, #0]
 8014820:	e7f4      	b.n	801480c <_svfprintf_r+0x9dc>
 8014822:	f018 0f40 	tst.w	r8, #64	; 0x40
 8014826:	d002      	beq.n	801482e <_svfprintf_r+0x9fe>
 8014828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801482a:	801a      	strh	r2, [r3, #0]
 801482c:	e7ee      	b.n	801480c <_svfprintf_r+0x9dc>
 801482e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8014832:	d0f3      	beq.n	801481c <_svfprintf_r+0x9ec>
 8014834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014836:	701a      	strb	r2, [r3, #0]
 8014838:	e7e8      	b.n	801480c <_svfprintf_r+0x9dc>
 801483a:	f048 0810 	orr.w	r8, r8, #16
 801483e:	f018 0f20 	tst.w	r8, #32
 8014842:	d01e      	beq.n	8014882 <_svfprintf_r+0xa52>
 8014844:	3607      	adds	r6, #7
 8014846:	f026 0307 	bic.w	r3, r6, #7
 801484a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801484e:	9306      	str	r3, [sp, #24]
 8014850:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8014854:	2300      	movs	r3, #0
 8014856:	2200      	movs	r2, #0
 8014858:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801485c:	9a04      	ldr	r2, [sp, #16]
 801485e:	3201      	adds	r2, #1
 8014860:	f000 848d 	beq.w	801517e <_svfprintf_r+0x134e>
 8014864:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8014868:	9203      	str	r2, [sp, #12]
 801486a:	ea56 0207 	orrs.w	r2, r6, r7
 801486e:	f040 848c 	bne.w	801518a <_svfprintf_r+0x135a>
 8014872:	9a04      	ldr	r2, [sp, #16]
 8014874:	2a00      	cmp	r2, #0
 8014876:	f000 80f5 	beq.w	8014a64 <_svfprintf_r+0xc34>
 801487a:	2b01      	cmp	r3, #1
 801487c:	f040 8488 	bne.w	8015190 <_svfprintf_r+0x1360>
 8014880:	e097      	b.n	80149b2 <_svfprintf_r+0xb82>
 8014882:	1d33      	adds	r3, r6, #4
 8014884:	f018 0f10 	tst.w	r8, #16
 8014888:	9306      	str	r3, [sp, #24]
 801488a:	d001      	beq.n	8014890 <_svfprintf_r+0xa60>
 801488c:	6836      	ldr	r6, [r6, #0]
 801488e:	e003      	b.n	8014898 <_svfprintf_r+0xa68>
 8014890:	f018 0f40 	tst.w	r8, #64	; 0x40
 8014894:	d002      	beq.n	801489c <_svfprintf_r+0xa6c>
 8014896:	8836      	ldrh	r6, [r6, #0]
 8014898:	2700      	movs	r7, #0
 801489a:	e7d9      	b.n	8014850 <_svfprintf_r+0xa20>
 801489c:	f418 7f00 	tst.w	r8, #512	; 0x200
 80148a0:	d0f4      	beq.n	801488c <_svfprintf_r+0xa5c>
 80148a2:	7836      	ldrb	r6, [r6, #0]
 80148a4:	e7f8      	b.n	8014898 <_svfprintf_r+0xa68>
 80148a6:	4633      	mov	r3, r6
 80148a8:	2278      	movs	r2, #120	; 0x78
 80148aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80148ae:	9306      	str	r3, [sp, #24]
 80148b0:	f647 0330 	movw	r3, #30768	; 0x7830
 80148b4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 80148b8:	4ba1      	ldr	r3, [pc, #644]	; (8014b40 <_svfprintf_r+0xd10>)
 80148ba:	9316      	str	r3, [sp, #88]	; 0x58
 80148bc:	2700      	movs	r7, #0
 80148be:	f048 0802 	orr.w	r8, r8, #2
 80148c2:	2302      	movs	r3, #2
 80148c4:	9207      	str	r2, [sp, #28]
 80148c6:	e7c6      	b.n	8014856 <_svfprintf_r+0xa26>
 80148c8:	4633      	mov	r3, r6
 80148ca:	2500      	movs	r5, #0
 80148cc:	f853 bb04 	ldr.w	fp, [r3], #4
 80148d0:	9306      	str	r3, [sp, #24]
 80148d2:	9b04      	ldr	r3, [sp, #16]
 80148d4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80148d8:	1c59      	adds	r1, r3, #1
 80148da:	d010      	beq.n	80148fe <_svfprintf_r+0xace>
 80148dc:	461a      	mov	r2, r3
 80148de:	4629      	mov	r1, r5
 80148e0:	4658      	mov	r0, fp
 80148e2:	f7eb fc9d 	bl	8000220 <memchr>
 80148e6:	9003      	str	r0, [sp, #12]
 80148e8:	2800      	cmp	r0, #0
 80148ea:	f000 80d2 	beq.w	8014a92 <_svfprintf_r+0xc62>
 80148ee:	eba0 030b 	sub.w	r3, r0, fp
 80148f2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80148f6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80148fa:	462e      	mov	r6, r5
 80148fc:	e5c0      	b.n	8014480 <_svfprintf_r+0x650>
 80148fe:	4658      	mov	r0, fp
 8014900:	f7eb fc80 	bl	8000204 <strlen>
 8014904:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8014908:	e463      	b.n	80141d2 <_svfprintf_r+0x3a2>
 801490a:	f048 0810 	orr.w	r8, r8, #16
 801490e:	f018 0f20 	tst.w	r8, #32
 8014912:	d007      	beq.n	8014924 <_svfprintf_r+0xaf4>
 8014914:	3607      	adds	r6, #7
 8014916:	f026 0307 	bic.w	r3, r6, #7
 801491a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801491e:	9306      	str	r3, [sp, #24]
 8014920:	2301      	movs	r3, #1
 8014922:	e798      	b.n	8014856 <_svfprintf_r+0xa26>
 8014924:	1d33      	adds	r3, r6, #4
 8014926:	f018 0f10 	tst.w	r8, #16
 801492a:	9306      	str	r3, [sp, #24]
 801492c:	d001      	beq.n	8014932 <_svfprintf_r+0xb02>
 801492e:	6836      	ldr	r6, [r6, #0]
 8014930:	e003      	b.n	801493a <_svfprintf_r+0xb0a>
 8014932:	f018 0f40 	tst.w	r8, #64	; 0x40
 8014936:	d002      	beq.n	801493e <_svfprintf_r+0xb0e>
 8014938:	8836      	ldrh	r6, [r6, #0]
 801493a:	2700      	movs	r7, #0
 801493c:	e7f0      	b.n	8014920 <_svfprintf_r+0xaf0>
 801493e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8014942:	d0f4      	beq.n	801492e <_svfprintf_r+0xafe>
 8014944:	7836      	ldrb	r6, [r6, #0]
 8014946:	e7f8      	b.n	801493a <_svfprintf_r+0xb0a>
 8014948:	4b7e      	ldr	r3, [pc, #504]	; (8014b44 <_svfprintf_r+0xd14>)
 801494a:	9316      	str	r3, [sp, #88]	; 0x58
 801494c:	f018 0f20 	tst.w	r8, #32
 8014950:	d019      	beq.n	8014986 <_svfprintf_r+0xb56>
 8014952:	3607      	adds	r6, #7
 8014954:	f026 0307 	bic.w	r3, r6, #7
 8014958:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801495c:	9306      	str	r3, [sp, #24]
 801495e:	f018 0f01 	tst.w	r8, #1
 8014962:	d00a      	beq.n	801497a <_svfprintf_r+0xb4a>
 8014964:	ea56 0307 	orrs.w	r3, r6, r7
 8014968:	d007      	beq.n	801497a <_svfprintf_r+0xb4a>
 801496a:	2330      	movs	r3, #48	; 0x30
 801496c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8014970:	9b07      	ldr	r3, [sp, #28]
 8014972:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8014976:	f048 0802 	orr.w	r8, r8, #2
 801497a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801497e:	2302      	movs	r3, #2
 8014980:	e769      	b.n	8014856 <_svfprintf_r+0xa26>
 8014982:	4b6f      	ldr	r3, [pc, #444]	; (8014b40 <_svfprintf_r+0xd10>)
 8014984:	e7e1      	b.n	801494a <_svfprintf_r+0xb1a>
 8014986:	1d33      	adds	r3, r6, #4
 8014988:	f018 0f10 	tst.w	r8, #16
 801498c:	9306      	str	r3, [sp, #24]
 801498e:	d001      	beq.n	8014994 <_svfprintf_r+0xb64>
 8014990:	6836      	ldr	r6, [r6, #0]
 8014992:	e003      	b.n	801499c <_svfprintf_r+0xb6c>
 8014994:	f018 0f40 	tst.w	r8, #64	; 0x40
 8014998:	d002      	beq.n	80149a0 <_svfprintf_r+0xb70>
 801499a:	8836      	ldrh	r6, [r6, #0]
 801499c:	2700      	movs	r7, #0
 801499e:	e7de      	b.n	801495e <_svfprintf_r+0xb2e>
 80149a0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80149a4:	d0f4      	beq.n	8014990 <_svfprintf_r+0xb60>
 80149a6:	7836      	ldrb	r6, [r6, #0]
 80149a8:	e7f8      	b.n	801499c <_svfprintf_r+0xb6c>
 80149aa:	2f00      	cmp	r7, #0
 80149ac:	bf08      	it	eq
 80149ae:	2e0a      	cmpeq	r6, #10
 80149b0:	d206      	bcs.n	80149c0 <_svfprintf_r+0xb90>
 80149b2:	3630      	adds	r6, #48	; 0x30
 80149b4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80149b8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 80149bc:	f000 bc06 	b.w	80151cc <_svfprintf_r+0x139c>
 80149c0:	2300      	movs	r3, #0
 80149c2:	9305      	str	r3, [sp, #20]
 80149c4:	9b03      	ldr	r3, [sp, #12]
 80149c6:	ad4e      	add	r5, sp, #312	; 0x138
 80149c8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 80149cc:	220a      	movs	r2, #10
 80149ce:	2300      	movs	r3, #0
 80149d0:	4630      	mov	r0, r6
 80149d2:	4639      	mov	r1, r7
 80149d4:	f7ec f978 	bl	8000cc8 <__aeabi_uldivmod>
 80149d8:	9b05      	ldr	r3, [sp, #20]
 80149da:	3230      	adds	r2, #48	; 0x30
 80149dc:	3301      	adds	r3, #1
 80149de:	f105 3bff 	add.w	fp, r5, #4294967295
 80149e2:	f805 2c01 	strb.w	r2, [r5, #-1]
 80149e6:	9305      	str	r3, [sp, #20]
 80149e8:	f1b8 0f00 	cmp.w	r8, #0
 80149ec:	d019      	beq.n	8014a22 <_svfprintf_r+0xbf2>
 80149ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149f0:	9a05      	ldr	r2, [sp, #20]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d114      	bne.n	8014a22 <_svfprintf_r+0xbf2>
 80149f8:	2aff      	cmp	r2, #255	; 0xff
 80149fa:	d012      	beq.n	8014a22 <_svfprintf_r+0xbf2>
 80149fc:	2f00      	cmp	r7, #0
 80149fe:	bf08      	it	eq
 8014a00:	2e0a      	cmpeq	r6, #10
 8014a02:	d30e      	bcc.n	8014a22 <_svfprintf_r+0xbf2>
 8014a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a06:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014a08:	ebab 0b03 	sub.w	fp, fp, r3
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	4658      	mov	r0, fp
 8014a10:	f004 f8d9 	bl	8018bc6 <strncpy>
 8014a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a16:	785d      	ldrb	r5, [r3, #1]
 8014a18:	b195      	cbz	r5, 8014a40 <_svfprintf_r+0xc10>
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8014a1e:	2300      	movs	r3, #0
 8014a20:	9305      	str	r3, [sp, #20]
 8014a22:	220a      	movs	r2, #10
 8014a24:	2300      	movs	r3, #0
 8014a26:	4630      	mov	r0, r6
 8014a28:	4639      	mov	r1, r7
 8014a2a:	f7ec f94d 	bl	8000cc8 <__aeabi_uldivmod>
 8014a2e:	2f00      	cmp	r7, #0
 8014a30:	bf08      	it	eq
 8014a32:	2e0a      	cmpeq	r6, #10
 8014a34:	f0c0 83ca 	bcc.w	80151cc <_svfprintf_r+0x139c>
 8014a38:	4606      	mov	r6, r0
 8014a3a:	460f      	mov	r7, r1
 8014a3c:	465d      	mov	r5, fp
 8014a3e:	e7c5      	b.n	80149cc <_svfprintf_r+0xb9c>
 8014a40:	9505      	str	r5, [sp, #20]
 8014a42:	e7ee      	b.n	8014a22 <_svfprintf_r+0xbf2>
 8014a44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014a46:	f006 030f 	and.w	r3, r6, #15
 8014a4a:	5cd3      	ldrb	r3, [r2, r3]
 8014a4c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8014a50:	0933      	lsrs	r3, r6, #4
 8014a52:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8014a56:	093a      	lsrs	r2, r7, #4
 8014a58:	461e      	mov	r6, r3
 8014a5a:	4617      	mov	r7, r2
 8014a5c:	ea56 0307 	orrs.w	r3, r6, r7
 8014a60:	d1f0      	bne.n	8014a44 <_svfprintf_r+0xc14>
 8014a62:	e3b3      	b.n	80151cc <_svfprintf_r+0x139c>
 8014a64:	b933      	cbnz	r3, 8014a74 <_svfprintf_r+0xc44>
 8014a66:	f018 0f01 	tst.w	r8, #1
 8014a6a:	d003      	beq.n	8014a74 <_svfprintf_r+0xc44>
 8014a6c:	2330      	movs	r3, #48	; 0x30
 8014a6e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8014a72:	e7a1      	b.n	80149b8 <_svfprintf_r+0xb88>
 8014a74:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8014a78:	e3a8      	b.n	80151cc <_svfprintf_r+0x139c>
 8014a7a:	9b07      	ldr	r3, [sp, #28]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 8373 	beq.w	8015168 <_svfprintf_r+0x1338>
 8014a82:	2000      	movs	r0, #0
 8014a84:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8014a88:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8014a8c:	9606      	str	r6, [sp, #24]
 8014a8e:	f7ff bb34 	b.w	80140fa <_svfprintf_r+0x2ca>
 8014a92:	9e03      	ldr	r6, [sp, #12]
 8014a94:	f7ff bb9e 	b.w	80141d4 <_svfprintf_r+0x3a4>
 8014a98:	2010      	movs	r0, #16
 8014a9a:	4402      	add	r2, r0
 8014a9c:	2b07      	cmp	r3, #7
 8014a9e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014aa2:	6060      	str	r0, [r4, #4]
 8014aa4:	dd08      	ble.n	8014ab8 <_svfprintf_r+0xc88>
 8014aa6:	aa22      	add	r2, sp, #136	; 0x88
 8014aa8:	4649      	mov	r1, r9
 8014aaa:	4650      	mov	r0, sl
 8014aac:	f004 f89e 	bl	8018bec <__ssprint_r>
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	f040 8337 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014ab6:	a925      	add	r1, sp, #148	; 0x94
 8014ab8:	3f10      	subs	r7, #16
 8014aba:	460c      	mov	r4, r1
 8014abc:	e4fb      	b.n	80144b6 <_svfprintf_r+0x686>
 8014abe:	460c      	mov	r4, r1
 8014ac0:	e514      	b.n	80144ec <_svfprintf_r+0x6bc>
 8014ac2:	aa22      	add	r2, sp, #136	; 0x88
 8014ac4:	4649      	mov	r1, r9
 8014ac6:	4650      	mov	r0, sl
 8014ac8:	f004 f890 	bl	8018bec <__ssprint_r>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	f040 8329 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014ad2:	ac25      	add	r4, sp, #148	; 0x94
 8014ad4:	e51c      	b.n	8014510 <_svfprintf_r+0x6e0>
 8014ad6:	aa22      	add	r2, sp, #136	; 0x88
 8014ad8:	4649      	mov	r1, r9
 8014ada:	4650      	mov	r0, sl
 8014adc:	f004 f886 	bl	8018bec <__ssprint_r>
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f040 831f 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014ae6:	ac25      	add	r4, sp, #148	; 0x94
 8014ae8:	e522      	b.n	8014530 <_svfprintf_r+0x700>
 8014aea:	2010      	movs	r0, #16
 8014aec:	4402      	add	r2, r0
 8014aee:	2b07      	cmp	r3, #7
 8014af0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014af4:	6060      	str	r0, [r4, #4]
 8014af6:	dd08      	ble.n	8014b0a <_svfprintf_r+0xcda>
 8014af8:	aa22      	add	r2, sp, #136	; 0x88
 8014afa:	4649      	mov	r1, r9
 8014afc:	4650      	mov	r0, sl
 8014afe:	f004 f875 	bl	8018bec <__ssprint_r>
 8014b02:	2800      	cmp	r0, #0
 8014b04:	f040 830e 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014b08:	a925      	add	r1, sp, #148	; 0x94
 8014b0a:	3f10      	subs	r7, #16
 8014b0c:	460c      	mov	r4, r1
 8014b0e:	e517      	b.n	8014540 <_svfprintf_r+0x710>
 8014b10:	460c      	mov	r4, r1
 8014b12:	e530      	b.n	8014576 <_svfprintf_r+0x746>
 8014b14:	2010      	movs	r0, #16
 8014b16:	4402      	add	r2, r0
 8014b18:	2b07      	cmp	r3, #7
 8014b1a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014b1e:	6060      	str	r0, [r4, #4]
 8014b20:	dd08      	ble.n	8014b34 <_svfprintf_r+0xd04>
 8014b22:	aa22      	add	r2, sp, #136	; 0x88
 8014b24:	4649      	mov	r1, r9
 8014b26:	4650      	mov	r0, sl
 8014b28:	f004 f860 	bl	8018bec <__ssprint_r>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	f040 82f9 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014b32:	a925      	add	r1, sp, #148	; 0x94
 8014b34:	3e10      	subs	r6, #16
 8014b36:	460c      	mov	r4, r1
 8014b38:	e522      	b.n	8014580 <_svfprintf_r+0x750>
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	e548      	b.n	80145d0 <_svfprintf_r+0x7a0>
 8014b3e:	bf00      	nop
 8014b40:	0801c030 	.word	0x0801c030
 8014b44:	0801c041 	.word	0x0801c041
 8014b48:	9b07      	ldr	r3, [sp, #28]
 8014b4a:	2b65      	cmp	r3, #101	; 0x65
 8014b4c:	f340 8232 	ble.w	8014fb4 <_svfprintf_r+0x1184>
 8014b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b54:	2200      	movs	r2, #0
 8014b56:	2300      	movs	r3, #0
 8014b58:	f7eb ffd6 	bl	8000b08 <__aeabi_dcmpeq>
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d068      	beq.n	8014c32 <_svfprintf_r+0xe02>
 8014b60:	4b6d      	ldr	r3, [pc, #436]	; (8014d18 <_svfprintf_r+0xee8>)
 8014b62:	6023      	str	r3, [r4, #0]
 8014b64:	2301      	movs	r3, #1
 8014b66:	441e      	add	r6, r3
 8014b68:	6063      	str	r3, [r4, #4]
 8014b6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b6c:	9624      	str	r6, [sp, #144]	; 0x90
 8014b6e:	3301      	adds	r3, #1
 8014b70:	2b07      	cmp	r3, #7
 8014b72:	9323      	str	r3, [sp, #140]	; 0x8c
 8014b74:	dc37      	bgt.n	8014be6 <_svfprintf_r+0xdb6>
 8014b76:	3408      	adds	r4, #8
 8014b78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014b7a:	9a05      	ldr	r2, [sp, #20]
 8014b7c:	4293      	cmp	r3, r2
 8014b7e:	db03      	blt.n	8014b88 <_svfprintf_r+0xd58>
 8014b80:	f018 0f01 	tst.w	r8, #1
 8014b84:	f43f ad36 	beq.w	80145f4 <_svfprintf_r+0x7c4>
 8014b88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b8a:	6023      	str	r3, [r4, #0]
 8014b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b90:	6063      	str	r3, [r4, #4]
 8014b92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b94:	4413      	add	r3, r2
 8014b96:	9324      	str	r3, [sp, #144]	; 0x90
 8014b98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	2b07      	cmp	r3, #7
 8014b9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8014ba0:	dc2b      	bgt.n	8014bfa <_svfprintf_r+0xdca>
 8014ba2:	3408      	adds	r4, #8
 8014ba4:	9b05      	ldr	r3, [sp, #20]
 8014ba6:	1e5d      	subs	r5, r3, #1
 8014ba8:	2d00      	cmp	r5, #0
 8014baa:	f77f ad23 	ble.w	80145f4 <_svfprintf_r+0x7c4>
 8014bae:	4e5b      	ldr	r6, [pc, #364]	; (8014d1c <_svfprintf_r+0xeec>)
 8014bb0:	2710      	movs	r7, #16
 8014bb2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014bb6:	2d10      	cmp	r5, #16
 8014bb8:	f103 0301 	add.w	r3, r3, #1
 8014bbc:	f104 0108 	add.w	r1, r4, #8
 8014bc0:	6026      	str	r6, [r4, #0]
 8014bc2:	dc24      	bgt.n	8014c0e <_svfprintf_r+0xdde>
 8014bc4:	6065      	str	r5, [r4, #4]
 8014bc6:	2b07      	cmp	r3, #7
 8014bc8:	4415      	add	r5, r2
 8014bca:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8014bce:	f340 8288 	ble.w	80150e2 <_svfprintf_r+0x12b2>
 8014bd2:	aa22      	add	r2, sp, #136	; 0x88
 8014bd4:	4649      	mov	r1, r9
 8014bd6:	4650      	mov	r0, sl
 8014bd8:	f004 f808 	bl	8018bec <__ssprint_r>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	f040 82a1 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014be2:	ac25      	add	r4, sp, #148	; 0x94
 8014be4:	e506      	b.n	80145f4 <_svfprintf_r+0x7c4>
 8014be6:	aa22      	add	r2, sp, #136	; 0x88
 8014be8:	4649      	mov	r1, r9
 8014bea:	4650      	mov	r0, sl
 8014bec:	f003 fffe 	bl	8018bec <__ssprint_r>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	f040 8297 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014bf6:	ac25      	add	r4, sp, #148	; 0x94
 8014bf8:	e7be      	b.n	8014b78 <_svfprintf_r+0xd48>
 8014bfa:	aa22      	add	r2, sp, #136	; 0x88
 8014bfc:	4649      	mov	r1, r9
 8014bfe:	4650      	mov	r0, sl
 8014c00:	f003 fff4 	bl	8018bec <__ssprint_r>
 8014c04:	2800      	cmp	r0, #0
 8014c06:	f040 828d 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014c0a:	ac25      	add	r4, sp, #148	; 0x94
 8014c0c:	e7ca      	b.n	8014ba4 <_svfprintf_r+0xd74>
 8014c0e:	3210      	adds	r2, #16
 8014c10:	2b07      	cmp	r3, #7
 8014c12:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014c16:	6067      	str	r7, [r4, #4]
 8014c18:	dd08      	ble.n	8014c2c <_svfprintf_r+0xdfc>
 8014c1a:	aa22      	add	r2, sp, #136	; 0x88
 8014c1c:	4649      	mov	r1, r9
 8014c1e:	4650      	mov	r0, sl
 8014c20:	f003 ffe4 	bl	8018bec <__ssprint_r>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	f040 827d 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014c2a:	a925      	add	r1, sp, #148	; 0x94
 8014c2c:	3d10      	subs	r5, #16
 8014c2e:	460c      	mov	r4, r1
 8014c30:	e7bf      	b.n	8014bb2 <_svfprintf_r+0xd82>
 8014c32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	dc73      	bgt.n	8014d20 <_svfprintf_r+0xef0>
 8014c38:	4b37      	ldr	r3, [pc, #220]	; (8014d18 <_svfprintf_r+0xee8>)
 8014c3a:	6023      	str	r3, [r4, #0]
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	441e      	add	r6, r3
 8014c40:	6063      	str	r3, [r4, #4]
 8014c42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c44:	9624      	str	r6, [sp, #144]	; 0x90
 8014c46:	3301      	adds	r3, #1
 8014c48:	2b07      	cmp	r3, #7
 8014c4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8014c4c:	dc3d      	bgt.n	8014cca <_svfprintf_r+0xe9a>
 8014c4e:	3408      	adds	r4, #8
 8014c50:	9905      	ldr	r1, [sp, #20]
 8014c52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014c56:	430a      	orrs	r2, r1
 8014c58:	f008 0101 	and.w	r1, r8, #1
 8014c5c:	430a      	orrs	r2, r1
 8014c5e:	f43f acc9 	beq.w	80145f4 <_svfprintf_r+0x7c4>
 8014c62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014c64:	6022      	str	r2, [r4, #0]
 8014c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c68:	6062      	str	r2, [r4, #4]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	9324      	str	r3, [sp, #144]	; 0x90
 8014c6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c70:	3301      	adds	r3, #1
 8014c72:	2b07      	cmp	r3, #7
 8014c74:	9323      	str	r3, [sp, #140]	; 0x8c
 8014c76:	dc32      	bgt.n	8014cde <_svfprintf_r+0xeae>
 8014c78:	3408      	adds	r4, #8
 8014c7a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8014c7c:	2d00      	cmp	r5, #0
 8014c7e:	da1b      	bge.n	8014cb8 <_svfprintf_r+0xe88>
 8014c80:	4e26      	ldr	r6, [pc, #152]	; (8014d1c <_svfprintf_r+0xeec>)
 8014c82:	426d      	negs	r5, r5
 8014c84:	4623      	mov	r3, r4
 8014c86:	2710      	movs	r7, #16
 8014c88:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8014c8c:	2d10      	cmp	r5, #16
 8014c8e:	f102 0201 	add.w	r2, r2, #1
 8014c92:	f104 0408 	add.w	r4, r4, #8
 8014c96:	601e      	str	r6, [r3, #0]
 8014c98:	dc2b      	bgt.n	8014cf2 <_svfprintf_r+0xec2>
 8014c9a:	605d      	str	r5, [r3, #4]
 8014c9c:	2a07      	cmp	r2, #7
 8014c9e:	440d      	add	r5, r1
 8014ca0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8014ca4:	dd08      	ble.n	8014cb8 <_svfprintf_r+0xe88>
 8014ca6:	aa22      	add	r2, sp, #136	; 0x88
 8014ca8:	4649      	mov	r1, r9
 8014caa:	4650      	mov	r0, sl
 8014cac:	f003 ff9e 	bl	8018bec <__ssprint_r>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	f040 8237 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014cb6:	ac25      	add	r4, sp, #148	; 0x94
 8014cb8:	9b05      	ldr	r3, [sp, #20]
 8014cba:	9a05      	ldr	r2, [sp, #20]
 8014cbc:	6063      	str	r3, [r4, #4]
 8014cbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014cc0:	f8c4 b000 	str.w	fp, [r4]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	9324      	str	r3, [sp, #144]	; 0x90
 8014cc8:	e48d      	b.n	80145e6 <_svfprintf_r+0x7b6>
 8014cca:	aa22      	add	r2, sp, #136	; 0x88
 8014ccc:	4649      	mov	r1, r9
 8014cce:	4650      	mov	r0, sl
 8014cd0:	f003 ff8c 	bl	8018bec <__ssprint_r>
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	f040 8225 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014cda:	ac25      	add	r4, sp, #148	; 0x94
 8014cdc:	e7b8      	b.n	8014c50 <_svfprintf_r+0xe20>
 8014cde:	aa22      	add	r2, sp, #136	; 0x88
 8014ce0:	4649      	mov	r1, r9
 8014ce2:	4650      	mov	r0, sl
 8014ce4:	f003 ff82 	bl	8018bec <__ssprint_r>
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	f040 821b 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014cee:	ac25      	add	r4, sp, #148	; 0x94
 8014cf0:	e7c3      	b.n	8014c7a <_svfprintf_r+0xe4a>
 8014cf2:	3110      	adds	r1, #16
 8014cf4:	2a07      	cmp	r2, #7
 8014cf6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8014cfa:	605f      	str	r7, [r3, #4]
 8014cfc:	dd08      	ble.n	8014d10 <_svfprintf_r+0xee0>
 8014cfe:	aa22      	add	r2, sp, #136	; 0x88
 8014d00:	4649      	mov	r1, r9
 8014d02:	4650      	mov	r0, sl
 8014d04:	f003 ff72 	bl	8018bec <__ssprint_r>
 8014d08:	2800      	cmp	r0, #0
 8014d0a:	f040 820b 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014d0e:	ac25      	add	r4, sp, #148	; 0x94
 8014d10:	3d10      	subs	r5, #16
 8014d12:	4623      	mov	r3, r4
 8014d14:	e7b8      	b.n	8014c88 <_svfprintf_r+0xe58>
 8014d16:	bf00      	nop
 8014d18:	0801c052 	.word	0x0801c052
 8014d1c:	0801c064 	.word	0x0801c064
 8014d20:	9b05      	ldr	r3, [sp, #20]
 8014d22:	42ab      	cmp	r3, r5
 8014d24:	bfa8      	it	ge
 8014d26:	462b      	movge	r3, r5
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	461f      	mov	r7, r3
 8014d2c:	dd0a      	ble.n	8014d44 <_svfprintf_r+0xf14>
 8014d2e:	441e      	add	r6, r3
 8014d30:	e9c4 b300 	strd	fp, r3, [r4]
 8014d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014d36:	9624      	str	r6, [sp, #144]	; 0x90
 8014d38:	3301      	adds	r3, #1
 8014d3a:	2b07      	cmp	r3, #7
 8014d3c:	9323      	str	r3, [sp, #140]	; 0x8c
 8014d3e:	f300 8086 	bgt.w	8014e4e <_svfprintf_r+0x101e>
 8014d42:	3408      	adds	r4, #8
 8014d44:	2f00      	cmp	r7, #0
 8014d46:	bfac      	ite	ge
 8014d48:	1bee      	subge	r6, r5, r7
 8014d4a:	462e      	movlt	r6, r5
 8014d4c:	2e00      	cmp	r6, #0
 8014d4e:	dd19      	ble.n	8014d84 <_svfprintf_r+0xf54>
 8014d50:	4f97      	ldr	r7, [pc, #604]	; (8014fb0 <_svfprintf_r+0x1180>)
 8014d52:	6027      	str	r7, [r4, #0]
 8014d54:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014d58:	2e10      	cmp	r6, #16
 8014d5a:	f103 0301 	add.w	r3, r3, #1
 8014d5e:	f104 0108 	add.w	r1, r4, #8
 8014d62:	dc7e      	bgt.n	8014e62 <_svfprintf_r+0x1032>
 8014d64:	6066      	str	r6, [r4, #4]
 8014d66:	2b07      	cmp	r3, #7
 8014d68:	4416      	add	r6, r2
 8014d6a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8014d6e:	f340 808b 	ble.w	8014e88 <_svfprintf_r+0x1058>
 8014d72:	aa22      	add	r2, sp, #136	; 0x88
 8014d74:	4649      	mov	r1, r9
 8014d76:	4650      	mov	r0, sl
 8014d78:	f003 ff38 	bl	8018bec <__ssprint_r>
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	f040 81d1 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014d82:	ac25      	add	r4, sp, #148	; 0x94
 8014d84:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8014d88:	445d      	add	r5, fp
 8014d8a:	d00b      	beq.n	8014da4 <_svfprintf_r+0xf74>
 8014d8c:	4e88      	ldr	r6, [pc, #544]	; (8014fb0 <_svfprintf_r+0x1180>)
 8014d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d17b      	bne.n	8014e8c <_svfprintf_r+0x105c>
 8014d94:	9b08      	ldr	r3, [sp, #32]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d17b      	bne.n	8014e92 <_svfprintf_r+0x1062>
 8014d9a:	9b05      	ldr	r3, [sp, #20]
 8014d9c:	445b      	add	r3, fp
 8014d9e:	429d      	cmp	r5, r3
 8014da0:	bf28      	it	cs
 8014da2:	461d      	movcs	r5, r3
 8014da4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014da6:	9a05      	ldr	r2, [sp, #20]
 8014da8:	4293      	cmp	r3, r2
 8014daa:	db02      	blt.n	8014db2 <_svfprintf_r+0xf82>
 8014dac:	f018 0f01 	tst.w	r8, #1
 8014db0:	d00e      	beq.n	8014dd0 <_svfprintf_r+0xfa0>
 8014db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014db4:	6023      	str	r3, [r4, #0]
 8014db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014dba:	6063      	str	r3, [r4, #4]
 8014dbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014dbe:	4413      	add	r3, r2
 8014dc0:	9324      	str	r3, [sp, #144]	; 0x90
 8014dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	2b07      	cmp	r3, #7
 8014dc8:	9323      	str	r3, [sp, #140]	; 0x8c
 8014dca:	f300 80dd 	bgt.w	8014f88 <_svfprintf_r+0x1158>
 8014dce:	3408      	adds	r4, #8
 8014dd0:	9b05      	ldr	r3, [sp, #20]
 8014dd2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8014dd4:	eb0b 0203 	add.w	r2, fp, r3
 8014dd8:	1b9e      	subs	r6, r3, r6
 8014dda:	1b52      	subs	r2, r2, r5
 8014ddc:	4296      	cmp	r6, r2
 8014dde:	bfa8      	it	ge
 8014de0:	4616      	movge	r6, r2
 8014de2:	2e00      	cmp	r6, #0
 8014de4:	dd0b      	ble.n	8014dfe <_svfprintf_r+0xfce>
 8014de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014de8:	4433      	add	r3, r6
 8014dea:	9324      	str	r3, [sp, #144]	; 0x90
 8014dec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014dee:	3301      	adds	r3, #1
 8014df0:	2b07      	cmp	r3, #7
 8014df2:	e9c4 5600 	strd	r5, r6, [r4]
 8014df6:	9323      	str	r3, [sp, #140]	; 0x8c
 8014df8:	f300 80d0 	bgt.w	8014f9c <_svfprintf_r+0x116c>
 8014dfc:	3408      	adds	r4, #8
 8014dfe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8014e00:	9b05      	ldr	r3, [sp, #20]
 8014e02:	2e00      	cmp	r6, #0
 8014e04:	eba3 0505 	sub.w	r5, r3, r5
 8014e08:	bfa8      	it	ge
 8014e0a:	1bad      	subge	r5, r5, r6
 8014e0c:	2d00      	cmp	r5, #0
 8014e0e:	f77f abf1 	ble.w	80145f4 <_svfprintf_r+0x7c4>
 8014e12:	4e67      	ldr	r6, [pc, #412]	; (8014fb0 <_svfprintf_r+0x1180>)
 8014e14:	2710      	movs	r7, #16
 8014e16:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014e1a:	2d10      	cmp	r5, #16
 8014e1c:	f103 0301 	add.w	r3, r3, #1
 8014e20:	f104 0108 	add.w	r1, r4, #8
 8014e24:	6026      	str	r6, [r4, #0]
 8014e26:	f77f aecd 	ble.w	8014bc4 <_svfprintf_r+0xd94>
 8014e2a:	3210      	adds	r2, #16
 8014e2c:	2b07      	cmp	r3, #7
 8014e2e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014e32:	6067      	str	r7, [r4, #4]
 8014e34:	dd08      	ble.n	8014e48 <_svfprintf_r+0x1018>
 8014e36:	aa22      	add	r2, sp, #136	; 0x88
 8014e38:	4649      	mov	r1, r9
 8014e3a:	4650      	mov	r0, sl
 8014e3c:	f003 fed6 	bl	8018bec <__ssprint_r>
 8014e40:	2800      	cmp	r0, #0
 8014e42:	f040 816f 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014e46:	a925      	add	r1, sp, #148	; 0x94
 8014e48:	3d10      	subs	r5, #16
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	e7e3      	b.n	8014e16 <_svfprintf_r+0xfe6>
 8014e4e:	aa22      	add	r2, sp, #136	; 0x88
 8014e50:	4649      	mov	r1, r9
 8014e52:	4650      	mov	r0, sl
 8014e54:	f003 feca 	bl	8018bec <__ssprint_r>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	f040 8163 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014e5e:	ac25      	add	r4, sp, #148	; 0x94
 8014e60:	e770      	b.n	8014d44 <_svfprintf_r+0xf14>
 8014e62:	2010      	movs	r0, #16
 8014e64:	4402      	add	r2, r0
 8014e66:	2b07      	cmp	r3, #7
 8014e68:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8014e6c:	6060      	str	r0, [r4, #4]
 8014e6e:	dd08      	ble.n	8014e82 <_svfprintf_r+0x1052>
 8014e70:	aa22      	add	r2, sp, #136	; 0x88
 8014e72:	4649      	mov	r1, r9
 8014e74:	4650      	mov	r0, sl
 8014e76:	f003 feb9 	bl	8018bec <__ssprint_r>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	f040 8152 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014e80:	a925      	add	r1, sp, #148	; 0x94
 8014e82:	3e10      	subs	r6, #16
 8014e84:	460c      	mov	r4, r1
 8014e86:	e764      	b.n	8014d52 <_svfprintf_r+0xf22>
 8014e88:	460c      	mov	r4, r1
 8014e8a:	e77b      	b.n	8014d84 <_svfprintf_r+0xf54>
 8014e8c:	9b08      	ldr	r3, [sp, #32]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d04a      	beq.n	8014f28 <_svfprintf_r+0x10f8>
 8014e92:	9b08      	ldr	r3, [sp, #32]
 8014e94:	3b01      	subs	r3, #1
 8014e96:	9308      	str	r3, [sp, #32]
 8014e98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e9a:	6023      	str	r3, [r4, #0]
 8014e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ea0:	6063      	str	r3, [r4, #4]
 8014ea2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ea4:	4413      	add	r3, r2
 8014ea6:	9324      	str	r3, [sp, #144]	; 0x90
 8014ea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014eaa:	3301      	adds	r3, #1
 8014eac:	2b07      	cmp	r3, #7
 8014eae:	9323      	str	r3, [sp, #140]	; 0x8c
 8014eb0:	dc41      	bgt.n	8014f36 <_svfprintf_r+0x1106>
 8014eb2:	3408      	adds	r4, #8
 8014eb4:	9b05      	ldr	r3, [sp, #20]
 8014eb6:	445b      	add	r3, fp
 8014eb8:	1b5a      	subs	r2, r3, r5
 8014eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ebc:	781b      	ldrb	r3, [r3, #0]
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	bfa8      	it	ge
 8014ec2:	4613      	movge	r3, r2
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	461f      	mov	r7, r3
 8014ec8:	dd0a      	ble.n	8014ee0 <_svfprintf_r+0x10b0>
 8014eca:	e9c4 5300 	strd	r5, r3, [r4]
 8014ece:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ed0:	443b      	add	r3, r7
 8014ed2:	9324      	str	r3, [sp, #144]	; 0x90
 8014ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	2b07      	cmp	r3, #7
 8014eda:	9323      	str	r3, [sp, #140]	; 0x8c
 8014edc:	dc35      	bgt.n	8014f4a <_svfprintf_r+0x111a>
 8014ede:	3408      	adds	r4, #8
 8014ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	2f00      	cmp	r7, #0
 8014ee6:	bfac      	ite	ge
 8014ee8:	1bdf      	subge	r7, r3, r7
 8014eea:	461f      	movlt	r7, r3
 8014eec:	2f00      	cmp	r7, #0
 8014eee:	dd17      	ble.n	8014f20 <_svfprintf_r+0x10f0>
 8014ef0:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8014ef4:	2f10      	cmp	r7, #16
 8014ef6:	f102 0201 	add.w	r2, r2, #1
 8014efa:	f104 0108 	add.w	r1, r4, #8
 8014efe:	6026      	str	r6, [r4, #0]
 8014f00:	dc2d      	bgt.n	8014f5e <_svfprintf_r+0x112e>
 8014f02:	443b      	add	r3, r7
 8014f04:	2a07      	cmp	r2, #7
 8014f06:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8014f0a:	6067      	str	r7, [r4, #4]
 8014f0c:	dd3a      	ble.n	8014f84 <_svfprintf_r+0x1154>
 8014f0e:	aa22      	add	r2, sp, #136	; 0x88
 8014f10:	4649      	mov	r1, r9
 8014f12:	4650      	mov	r0, sl
 8014f14:	f003 fe6a 	bl	8018bec <__ssprint_r>
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	f040 8103 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014f1e:	ac25      	add	r4, sp, #148	; 0x94
 8014f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f22:	781b      	ldrb	r3, [r3, #0]
 8014f24:	441d      	add	r5, r3
 8014f26:	e732      	b.n	8014d8e <_svfprintf_r+0xf5e>
 8014f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f2a:	3b01      	subs	r3, #1
 8014f2c:	930a      	str	r3, [sp, #40]	; 0x28
 8014f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f30:	3b01      	subs	r3, #1
 8014f32:	9309      	str	r3, [sp, #36]	; 0x24
 8014f34:	e7b0      	b.n	8014e98 <_svfprintf_r+0x1068>
 8014f36:	aa22      	add	r2, sp, #136	; 0x88
 8014f38:	4649      	mov	r1, r9
 8014f3a:	4650      	mov	r0, sl
 8014f3c:	f003 fe56 	bl	8018bec <__ssprint_r>
 8014f40:	2800      	cmp	r0, #0
 8014f42:	f040 80ef 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014f46:	ac25      	add	r4, sp, #148	; 0x94
 8014f48:	e7b4      	b.n	8014eb4 <_svfprintf_r+0x1084>
 8014f4a:	aa22      	add	r2, sp, #136	; 0x88
 8014f4c:	4649      	mov	r1, r9
 8014f4e:	4650      	mov	r0, sl
 8014f50:	f003 fe4c 	bl	8018bec <__ssprint_r>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	f040 80e5 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014f5a:	ac25      	add	r4, sp, #148	; 0x94
 8014f5c:	e7c0      	b.n	8014ee0 <_svfprintf_r+0x10b0>
 8014f5e:	2010      	movs	r0, #16
 8014f60:	4403      	add	r3, r0
 8014f62:	2a07      	cmp	r2, #7
 8014f64:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8014f68:	6060      	str	r0, [r4, #4]
 8014f6a:	dd08      	ble.n	8014f7e <_svfprintf_r+0x114e>
 8014f6c:	aa22      	add	r2, sp, #136	; 0x88
 8014f6e:	4649      	mov	r1, r9
 8014f70:	4650      	mov	r0, sl
 8014f72:	f003 fe3b 	bl	8018bec <__ssprint_r>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	f040 80d4 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014f7c:	a925      	add	r1, sp, #148	; 0x94
 8014f7e:	3f10      	subs	r7, #16
 8014f80:	460c      	mov	r4, r1
 8014f82:	e7b5      	b.n	8014ef0 <_svfprintf_r+0x10c0>
 8014f84:	460c      	mov	r4, r1
 8014f86:	e7cb      	b.n	8014f20 <_svfprintf_r+0x10f0>
 8014f88:	aa22      	add	r2, sp, #136	; 0x88
 8014f8a:	4649      	mov	r1, r9
 8014f8c:	4650      	mov	r0, sl
 8014f8e:	f003 fe2d 	bl	8018bec <__ssprint_r>
 8014f92:	2800      	cmp	r0, #0
 8014f94:	f040 80c6 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014f98:	ac25      	add	r4, sp, #148	; 0x94
 8014f9a:	e719      	b.n	8014dd0 <_svfprintf_r+0xfa0>
 8014f9c:	aa22      	add	r2, sp, #136	; 0x88
 8014f9e:	4649      	mov	r1, r9
 8014fa0:	4650      	mov	r0, sl
 8014fa2:	f003 fe23 	bl	8018bec <__ssprint_r>
 8014fa6:	2800      	cmp	r0, #0
 8014fa8:	f040 80bc 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014fac:	ac25      	add	r4, sp, #148	; 0x94
 8014fae:	e726      	b.n	8014dfe <_svfprintf_r+0xfce>
 8014fb0:	0801c064 	.word	0x0801c064
 8014fb4:	9a05      	ldr	r2, [sp, #20]
 8014fb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014fb8:	2a01      	cmp	r2, #1
 8014fba:	f106 0601 	add.w	r6, r6, #1
 8014fbe:	f103 0301 	add.w	r3, r3, #1
 8014fc2:	f104 0508 	add.w	r5, r4, #8
 8014fc6:	dc02      	bgt.n	8014fce <_svfprintf_r+0x119e>
 8014fc8:	f018 0f01 	tst.w	r8, #1
 8014fcc:	d07e      	beq.n	80150cc <_svfprintf_r+0x129c>
 8014fce:	2201      	movs	r2, #1
 8014fd0:	2b07      	cmp	r3, #7
 8014fd2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8014fd6:	f8c4 b000 	str.w	fp, [r4]
 8014fda:	6062      	str	r2, [r4, #4]
 8014fdc:	dd08      	ble.n	8014ff0 <_svfprintf_r+0x11c0>
 8014fde:	aa22      	add	r2, sp, #136	; 0x88
 8014fe0:	4649      	mov	r1, r9
 8014fe2:	4650      	mov	r0, sl
 8014fe4:	f003 fe02 	bl	8018bec <__ssprint_r>
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	f040 809b 	bne.w	8015124 <_svfprintf_r+0x12f4>
 8014fee:	ad25      	add	r5, sp, #148	; 0x94
 8014ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ff2:	602b      	str	r3, [r5, #0]
 8014ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ff8:	606b      	str	r3, [r5, #4]
 8014ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ffc:	4413      	add	r3, r2
 8014ffe:	9324      	str	r3, [sp, #144]	; 0x90
 8015000:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015002:	3301      	adds	r3, #1
 8015004:	2b07      	cmp	r3, #7
 8015006:	9323      	str	r3, [sp, #140]	; 0x8c
 8015008:	dc32      	bgt.n	8015070 <_svfprintf_r+0x1240>
 801500a:	3508      	adds	r5, #8
 801500c:	9b05      	ldr	r3, [sp, #20]
 801500e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015012:	1e5c      	subs	r4, r3, #1
 8015014:	2200      	movs	r2, #0
 8015016:	2300      	movs	r3, #0
 8015018:	f7eb fd76 	bl	8000b08 <__aeabi_dcmpeq>
 801501c:	2800      	cmp	r0, #0
 801501e:	d130      	bne.n	8015082 <_svfprintf_r+0x1252>
 8015020:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015024:	9a05      	ldr	r2, [sp, #20]
 8015026:	3101      	adds	r1, #1
 8015028:	3b01      	subs	r3, #1
 801502a:	f10b 0001 	add.w	r0, fp, #1
 801502e:	4413      	add	r3, r2
 8015030:	2907      	cmp	r1, #7
 8015032:	e9c5 0400 	strd	r0, r4, [r5]
 8015036:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801503a:	dd50      	ble.n	80150de <_svfprintf_r+0x12ae>
 801503c:	aa22      	add	r2, sp, #136	; 0x88
 801503e:	4649      	mov	r1, r9
 8015040:	4650      	mov	r0, sl
 8015042:	f003 fdd3 	bl	8018bec <__ssprint_r>
 8015046:	2800      	cmp	r0, #0
 8015048:	d16c      	bne.n	8015124 <_svfprintf_r+0x12f4>
 801504a:	ad25      	add	r5, sp, #148	; 0x94
 801504c:	ab1e      	add	r3, sp, #120	; 0x78
 801504e:	602b      	str	r3, [r5, #0]
 8015050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015052:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015054:	606b      	str	r3, [r5, #4]
 8015056:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015058:	4413      	add	r3, r2
 801505a:	9324      	str	r3, [sp, #144]	; 0x90
 801505c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801505e:	3301      	adds	r3, #1
 8015060:	2b07      	cmp	r3, #7
 8015062:	9323      	str	r3, [sp, #140]	; 0x8c
 8015064:	f73f adb5 	bgt.w	8014bd2 <_svfprintf_r+0xda2>
 8015068:	f105 0408 	add.w	r4, r5, #8
 801506c:	f7ff bac2 	b.w	80145f4 <_svfprintf_r+0x7c4>
 8015070:	aa22      	add	r2, sp, #136	; 0x88
 8015072:	4649      	mov	r1, r9
 8015074:	4650      	mov	r0, sl
 8015076:	f003 fdb9 	bl	8018bec <__ssprint_r>
 801507a:	2800      	cmp	r0, #0
 801507c:	d152      	bne.n	8015124 <_svfprintf_r+0x12f4>
 801507e:	ad25      	add	r5, sp, #148	; 0x94
 8015080:	e7c4      	b.n	801500c <_svfprintf_r+0x11dc>
 8015082:	2c00      	cmp	r4, #0
 8015084:	dde2      	ble.n	801504c <_svfprintf_r+0x121c>
 8015086:	4e58      	ldr	r6, [pc, #352]	; (80151e8 <_svfprintf_r+0x13b8>)
 8015088:	2710      	movs	r7, #16
 801508a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801508e:	2c10      	cmp	r4, #16
 8015090:	f103 0301 	add.w	r3, r3, #1
 8015094:	f105 0108 	add.w	r1, r5, #8
 8015098:	602e      	str	r6, [r5, #0]
 801509a:	dc07      	bgt.n	80150ac <_svfprintf_r+0x127c>
 801509c:	606c      	str	r4, [r5, #4]
 801509e:	2b07      	cmp	r3, #7
 80150a0:	4414      	add	r4, r2
 80150a2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80150a6:	dcc9      	bgt.n	801503c <_svfprintf_r+0x120c>
 80150a8:	460d      	mov	r5, r1
 80150aa:	e7cf      	b.n	801504c <_svfprintf_r+0x121c>
 80150ac:	3210      	adds	r2, #16
 80150ae:	2b07      	cmp	r3, #7
 80150b0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80150b4:	606f      	str	r7, [r5, #4]
 80150b6:	dd06      	ble.n	80150c6 <_svfprintf_r+0x1296>
 80150b8:	aa22      	add	r2, sp, #136	; 0x88
 80150ba:	4649      	mov	r1, r9
 80150bc:	4650      	mov	r0, sl
 80150be:	f003 fd95 	bl	8018bec <__ssprint_r>
 80150c2:	bb78      	cbnz	r0, 8015124 <_svfprintf_r+0x12f4>
 80150c4:	a925      	add	r1, sp, #148	; 0x94
 80150c6:	3c10      	subs	r4, #16
 80150c8:	460d      	mov	r5, r1
 80150ca:	e7de      	b.n	801508a <_svfprintf_r+0x125a>
 80150cc:	2201      	movs	r2, #1
 80150ce:	2b07      	cmp	r3, #7
 80150d0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80150d4:	f8c4 b000 	str.w	fp, [r4]
 80150d8:	6062      	str	r2, [r4, #4]
 80150da:	ddb7      	ble.n	801504c <_svfprintf_r+0x121c>
 80150dc:	e7ae      	b.n	801503c <_svfprintf_r+0x120c>
 80150de:	3508      	adds	r5, #8
 80150e0:	e7b4      	b.n	801504c <_svfprintf_r+0x121c>
 80150e2:	460c      	mov	r4, r1
 80150e4:	f7ff ba86 	b.w	80145f4 <_svfprintf_r+0x7c4>
 80150e8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80150ec:	1a9d      	subs	r5, r3, r2
 80150ee:	2d00      	cmp	r5, #0
 80150f0:	f77f aa84 	ble.w	80145fc <_svfprintf_r+0x7cc>
 80150f4:	4e3d      	ldr	r6, [pc, #244]	; (80151ec <_svfprintf_r+0x13bc>)
 80150f6:	2710      	movs	r7, #16
 80150f8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80150fc:	2d10      	cmp	r5, #16
 80150fe:	f103 0301 	add.w	r3, r3, #1
 8015102:	6026      	str	r6, [r4, #0]
 8015104:	dc18      	bgt.n	8015138 <_svfprintf_r+0x1308>
 8015106:	6065      	str	r5, [r4, #4]
 8015108:	2b07      	cmp	r3, #7
 801510a:	4415      	add	r5, r2
 801510c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8015110:	f77f aa74 	ble.w	80145fc <_svfprintf_r+0x7cc>
 8015114:	aa22      	add	r2, sp, #136	; 0x88
 8015116:	4649      	mov	r1, r9
 8015118:	4650      	mov	r0, sl
 801511a:	f003 fd67 	bl	8018bec <__ssprint_r>
 801511e:	2800      	cmp	r0, #0
 8015120:	f43f aa6c 	beq.w	80145fc <_svfprintf_r+0x7cc>
 8015124:	9b03      	ldr	r3, [sp, #12]
 8015126:	2b00      	cmp	r3, #0
 8015128:	f43f a88a 	beq.w	8014240 <_svfprintf_r+0x410>
 801512c:	4619      	mov	r1, r3
 801512e:	4650      	mov	r0, sl
 8015130:	f002 fb7e 	bl	8017830 <_free_r>
 8015134:	f7ff b884 	b.w	8014240 <_svfprintf_r+0x410>
 8015138:	3210      	adds	r2, #16
 801513a:	2b07      	cmp	r3, #7
 801513c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015140:	6067      	str	r7, [r4, #4]
 8015142:	dc02      	bgt.n	801514a <_svfprintf_r+0x131a>
 8015144:	3408      	adds	r4, #8
 8015146:	3d10      	subs	r5, #16
 8015148:	e7d6      	b.n	80150f8 <_svfprintf_r+0x12c8>
 801514a:	aa22      	add	r2, sp, #136	; 0x88
 801514c:	4649      	mov	r1, r9
 801514e:	4650      	mov	r0, sl
 8015150:	f003 fd4c 	bl	8018bec <__ssprint_r>
 8015154:	2800      	cmp	r0, #0
 8015156:	d1e5      	bne.n	8015124 <_svfprintf_r+0x12f4>
 8015158:	ac25      	add	r4, sp, #148	; 0x94
 801515a:	e7f4      	b.n	8015146 <_svfprintf_r+0x1316>
 801515c:	9903      	ldr	r1, [sp, #12]
 801515e:	4650      	mov	r0, sl
 8015160:	f002 fb66 	bl	8017830 <_free_r>
 8015164:	f7ff ba62 	b.w	801462c <_svfprintf_r+0x7fc>
 8015168:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801516a:	2b00      	cmp	r3, #0
 801516c:	f43f a868 	beq.w	8014240 <_svfprintf_r+0x410>
 8015170:	aa22      	add	r2, sp, #136	; 0x88
 8015172:	4649      	mov	r1, r9
 8015174:	4650      	mov	r0, sl
 8015176:	f003 fd39 	bl	8018bec <__ssprint_r>
 801517a:	f7ff b861 	b.w	8014240 <_svfprintf_r+0x410>
 801517e:	ea56 0207 	orrs.w	r2, r6, r7
 8015182:	f8cd 800c 	str.w	r8, [sp, #12]
 8015186:	f43f ab78 	beq.w	801487a <_svfprintf_r+0xa4a>
 801518a:	2b01      	cmp	r3, #1
 801518c:	f43f ac0d 	beq.w	80149aa <_svfprintf_r+0xb7a>
 8015190:	2b02      	cmp	r3, #2
 8015192:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8015196:	f43f ac55 	beq.w	8014a44 <_svfprintf_r+0xc14>
 801519a:	08f2      	lsrs	r2, r6, #3
 801519c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80151a0:	08f8      	lsrs	r0, r7, #3
 80151a2:	f006 0307 	and.w	r3, r6, #7
 80151a6:	4607      	mov	r7, r0
 80151a8:	4616      	mov	r6, r2
 80151aa:	3330      	adds	r3, #48	; 0x30
 80151ac:	ea56 0207 	orrs.w	r2, r6, r7
 80151b0:	4659      	mov	r1, fp
 80151b2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80151b6:	d1f0      	bne.n	801519a <_svfprintf_r+0x136a>
 80151b8:	9a03      	ldr	r2, [sp, #12]
 80151ba:	07d2      	lsls	r2, r2, #31
 80151bc:	d506      	bpl.n	80151cc <_svfprintf_r+0x139c>
 80151be:	2b30      	cmp	r3, #48	; 0x30
 80151c0:	d004      	beq.n	80151cc <_svfprintf_r+0x139c>
 80151c2:	2330      	movs	r3, #48	; 0x30
 80151c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80151c8:	f1a1 0b02 	sub.w	fp, r1, #2
 80151cc:	ab4e      	add	r3, sp, #312	; 0x138
 80151ce:	eba3 030b 	sub.w	r3, r3, fp
 80151d2:	9e04      	ldr	r6, [sp, #16]
 80151d4:	9304      	str	r3, [sp, #16]
 80151d6:	2300      	movs	r3, #0
 80151d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80151dc:	9303      	str	r3, [sp, #12]
 80151de:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80151e2:	461d      	mov	r5, r3
 80151e4:	f7ff b94c 	b.w	8014480 <_svfprintf_r+0x650>
 80151e8:	0801c064 	.word	0x0801c064
 80151ec:	0801c054 	.word	0x0801c054

080151f0 <sysconf>:
 80151f0:	2808      	cmp	r0, #8
 80151f2:	b508      	push	{r3, lr}
 80151f4:	d006      	beq.n	8015204 <sysconf+0x14>
 80151f6:	f002 f98b 	bl	8017510 <__errno>
 80151fa:	2316      	movs	r3, #22
 80151fc:	6003      	str	r3, [r0, #0]
 80151fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015202:	bd08      	pop	{r3, pc}
 8015204:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015208:	e7fb      	b.n	8015202 <sysconf+0x12>
	...

0801520c <__utoa>:
 801520c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801520e:	4c1f      	ldr	r4, [pc, #124]	; (801528c <__utoa+0x80>)
 8015210:	b08b      	sub	sp, #44	; 0x2c
 8015212:	4605      	mov	r5, r0
 8015214:	460b      	mov	r3, r1
 8015216:	466e      	mov	r6, sp
 8015218:	f104 0c20 	add.w	ip, r4, #32
 801521c:	6820      	ldr	r0, [r4, #0]
 801521e:	6861      	ldr	r1, [r4, #4]
 8015220:	4637      	mov	r7, r6
 8015222:	c703      	stmia	r7!, {r0, r1}
 8015224:	3408      	adds	r4, #8
 8015226:	4564      	cmp	r4, ip
 8015228:	463e      	mov	r6, r7
 801522a:	d1f7      	bne.n	801521c <__utoa+0x10>
 801522c:	7921      	ldrb	r1, [r4, #4]
 801522e:	7139      	strb	r1, [r7, #4]
 8015230:	1e91      	subs	r1, r2, #2
 8015232:	6820      	ldr	r0, [r4, #0]
 8015234:	6038      	str	r0, [r7, #0]
 8015236:	2922      	cmp	r1, #34	; 0x22
 8015238:	f04f 0100 	mov.w	r1, #0
 801523c:	d904      	bls.n	8015248 <__utoa+0x3c>
 801523e:	7019      	strb	r1, [r3, #0]
 8015240:	460b      	mov	r3, r1
 8015242:	4618      	mov	r0, r3
 8015244:	b00b      	add	sp, #44	; 0x2c
 8015246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015248:	1e58      	subs	r0, r3, #1
 801524a:	4684      	mov	ip, r0
 801524c:	fbb5 f7f2 	udiv	r7, r5, r2
 8015250:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015254:	fb02 5617 	mls	r6, r2, r7, r5
 8015258:	4476      	add	r6, lr
 801525a:	460c      	mov	r4, r1
 801525c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8015260:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8015264:	462e      	mov	r6, r5
 8015266:	42b2      	cmp	r2, r6
 8015268:	f101 0101 	add.w	r1, r1, #1
 801526c:	463d      	mov	r5, r7
 801526e:	d9ed      	bls.n	801524c <__utoa+0x40>
 8015270:	2200      	movs	r2, #0
 8015272:	545a      	strb	r2, [r3, r1]
 8015274:	1919      	adds	r1, r3, r4
 8015276:	1aa5      	subs	r5, r4, r2
 8015278:	42aa      	cmp	r2, r5
 801527a:	dae2      	bge.n	8015242 <__utoa+0x36>
 801527c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8015280:	780e      	ldrb	r6, [r1, #0]
 8015282:	7006      	strb	r6, [r0, #0]
 8015284:	3201      	adds	r2, #1
 8015286:	f801 5901 	strb.w	r5, [r1], #-1
 801528a:	e7f4      	b.n	8015276 <__utoa+0x6a>
 801528c:	0801c074 	.word	0x0801c074

08015290 <_vfprintf_r>:
 8015290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015294:	ed2d 8b04 	vpush	{d8-d9}
 8015298:	b0cf      	sub	sp, #316	; 0x13c
 801529a:	4689      	mov	r9, r1
 801529c:	9203      	str	r2, [sp, #12]
 801529e:	461c      	mov	r4, r3
 80152a0:	461e      	mov	r6, r3
 80152a2:	4682      	mov	sl, r0
 80152a4:	f002 ff18 	bl	80180d8 <_localeconv_r>
 80152a8:	6803      	ldr	r3, [r0, #0]
 80152aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ea ffa9 	bl	8000204 <strlen>
 80152b2:	900e      	str	r0, [sp, #56]	; 0x38
 80152b4:	f1ba 0f00 	cmp.w	sl, #0
 80152b8:	d005      	beq.n	80152c6 <_vfprintf_r+0x36>
 80152ba:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80152be:	b913      	cbnz	r3, 80152c6 <_vfprintf_r+0x36>
 80152c0:	4650      	mov	r0, sl
 80152c2:	f002 fa25 	bl	8017710 <__sinit>
 80152c6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80152ca:	07d8      	lsls	r0, r3, #31
 80152cc:	d407      	bmi.n	80152de <_vfprintf_r+0x4e>
 80152ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80152d2:	0599      	lsls	r1, r3, #22
 80152d4:	d403      	bmi.n	80152de <_vfprintf_r+0x4e>
 80152d6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80152da:	f002 ff03 	bl	80180e4 <__retarget_lock_acquire_recursive>
 80152de:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 80152e2:	049a      	lsls	r2, r3, #18
 80152e4:	d409      	bmi.n	80152fa <_vfprintf_r+0x6a>
 80152e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80152ea:	f8a9 300c 	strh.w	r3, [r9, #12]
 80152ee:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80152f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80152f6:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 80152fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80152fe:	071f      	lsls	r7, r3, #28
 8015300:	d502      	bpl.n	8015308 <_vfprintf_r+0x78>
 8015302:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015306:	b9d3      	cbnz	r3, 801533e <_vfprintf_r+0xae>
 8015308:	4649      	mov	r1, r9
 801530a:	4650      	mov	r0, sl
 801530c:	f001 fa36 	bl	801677c <__swsetup_r>
 8015310:	b1a8      	cbz	r0, 801533e <_vfprintf_r+0xae>
 8015312:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8015316:	07dd      	lsls	r5, r3, #31
 8015318:	d508      	bpl.n	801532c <_vfprintf_r+0x9c>
 801531a:	f04f 33ff 	mov.w	r3, #4294967295
 801531e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015320:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015322:	b04f      	add	sp, #316	; 0x13c
 8015324:	ecbd 8b04 	vpop	{d8-d9}
 8015328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015330:	059c      	lsls	r4, r3, #22
 8015332:	d4f2      	bmi.n	801531a <_vfprintf_r+0x8a>
 8015334:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015338:	f002 fed5 	bl	80180e6 <__retarget_lock_release_recursive>
 801533c:	e7ed      	b.n	801531a <_vfprintf_r+0x8a>
 801533e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015342:	f003 021a 	and.w	r2, r3, #26
 8015346:	2a0a      	cmp	r2, #10
 8015348:	d115      	bne.n	8015376 <_vfprintf_r+0xe6>
 801534a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801534e:	2a00      	cmp	r2, #0
 8015350:	db11      	blt.n	8015376 <_vfprintf_r+0xe6>
 8015352:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8015356:	07d0      	lsls	r0, r2, #31
 8015358:	d405      	bmi.n	8015366 <_vfprintf_r+0xd6>
 801535a:	0599      	lsls	r1, r3, #22
 801535c:	d403      	bmi.n	8015366 <_vfprintf_r+0xd6>
 801535e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015362:	f002 fec0 	bl	80180e6 <__retarget_lock_release_recursive>
 8015366:	9a03      	ldr	r2, [sp, #12]
 8015368:	4623      	mov	r3, r4
 801536a:	4649      	mov	r1, r9
 801536c:	4650      	mov	r0, sl
 801536e:	f001 f9c5 	bl	80166fc <__sbprintf>
 8015372:	900f      	str	r0, [sp, #60]	; 0x3c
 8015374:	e7d4      	b.n	8015320 <_vfprintf_r+0x90>
 8015376:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 80155e0 <_vfprintf_r+0x350>
 801537a:	2500      	movs	r5, #0
 801537c:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8015380:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015384:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8015388:	ac25      	add	r4, sp, #148	; 0x94
 801538a:	9422      	str	r4, [sp, #136]	; 0x88
 801538c:	9505      	str	r5, [sp, #20]
 801538e:	950a      	str	r5, [sp, #40]	; 0x28
 8015390:	9512      	str	r5, [sp, #72]	; 0x48
 8015392:	9514      	str	r5, [sp, #80]	; 0x50
 8015394:	950f      	str	r5, [sp, #60]	; 0x3c
 8015396:	9b03      	ldr	r3, [sp, #12]
 8015398:	461d      	mov	r5, r3
 801539a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801539e:	b10a      	cbz	r2, 80153a4 <_vfprintf_r+0x114>
 80153a0:	2a25      	cmp	r2, #37	; 0x25
 80153a2:	d1f9      	bne.n	8015398 <_vfprintf_r+0x108>
 80153a4:	9b03      	ldr	r3, [sp, #12]
 80153a6:	1aef      	subs	r7, r5, r3
 80153a8:	d00d      	beq.n	80153c6 <_vfprintf_r+0x136>
 80153aa:	e9c4 3700 	strd	r3, r7, [r4]
 80153ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80153b0:	443b      	add	r3, r7
 80153b2:	9324      	str	r3, [sp, #144]	; 0x90
 80153b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80153b6:	3301      	adds	r3, #1
 80153b8:	2b07      	cmp	r3, #7
 80153ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80153bc:	dc79      	bgt.n	80154b2 <_vfprintf_r+0x222>
 80153be:	3408      	adds	r4, #8
 80153c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153c2:	443b      	add	r3, r7
 80153c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80153c6:	782b      	ldrb	r3, [r5, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f001 8156 	beq.w	801667a <_vfprintf_r+0x13ea>
 80153ce:	2300      	movs	r3, #0
 80153d0:	3501      	adds	r5, #1
 80153d2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80153d6:	f04f 38ff 	mov.w	r8, #4294967295
 80153da:	9310      	str	r3, [sp, #64]	; 0x40
 80153dc:	469b      	mov	fp, r3
 80153de:	270a      	movs	r7, #10
 80153e0:	212b      	movs	r1, #43	; 0x2b
 80153e2:	462a      	mov	r2, r5
 80153e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80153e8:	9307      	str	r3, [sp, #28]
 80153ea:	4613      	mov	r3, r2
 80153ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80153ee:	9b07      	ldr	r3, [sp, #28]
 80153f0:	3b20      	subs	r3, #32
 80153f2:	2b5a      	cmp	r3, #90	; 0x5a
 80153f4:	f200 85c0 	bhi.w	8015f78 <_vfprintf_r+0xce8>
 80153f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80153fc:	05be007e 	.word	0x05be007e
 8015400:	008605be 	.word	0x008605be
 8015404:	05be05be 	.word	0x05be05be
 8015408:	006505be 	.word	0x006505be
 801540c:	05be05be 	.word	0x05be05be
 8015410:	00930089 	.word	0x00930089
 8015414:	009005be 	.word	0x009005be
 8015418:	05be0096 	.word	0x05be0096
 801541c:	00b200af 	.word	0x00b200af
 8015420:	00b200b2 	.word	0x00b200b2
 8015424:	00b200b2 	.word	0x00b200b2
 8015428:	00b200b2 	.word	0x00b200b2
 801542c:	00b200b2 	.word	0x00b200b2
 8015430:	05be05be 	.word	0x05be05be
 8015434:	05be05be 	.word	0x05be05be
 8015438:	05be05be 	.word	0x05be05be
 801543c:	012105be 	.word	0x012105be
 8015440:	00df05be 	.word	0x00df05be
 8015444:	012100f6 	.word	0x012100f6
 8015448:	01210121 	.word	0x01210121
 801544c:	05be05be 	.word	0x05be05be
 8015450:	05be05be 	.word	0x05be05be
 8015454:	05be00c2 	.word	0x05be00c2
 8015458:	049005be 	.word	0x049005be
 801545c:	05be05be 	.word	0x05be05be
 8015460:	04d705be 	.word	0x04d705be
 8015464:	04fb05be 	.word	0x04fb05be
 8015468:	05be05be 	.word	0x05be05be
 801546c:	05be051a 	.word	0x05be051a
 8015470:	05be05be 	.word	0x05be05be
 8015474:	05be05be 	.word	0x05be05be
 8015478:	05be05be 	.word	0x05be05be
 801547c:	012105be 	.word	0x012105be
 8015480:	00df05be 	.word	0x00df05be
 8015484:	012100f8 	.word	0x012100f8
 8015488:	01210121 	.word	0x01210121
 801548c:	00f800c5 	.word	0x00f800c5
 8015490:	05be00d9 	.word	0x05be00d9
 8015494:	05be00d2 	.word	0x05be00d2
 8015498:	0492046d 	.word	0x0492046d
 801549c:	00d904c6 	.word	0x00d904c6
 80154a0:	04d705be 	.word	0x04d705be
 80154a4:	04fd007c 	.word	0x04fd007c
 80154a8:	05be05be 	.word	0x05be05be
 80154ac:	05be0537 	.word	0x05be0537
 80154b0:	007c      	.short	0x007c
 80154b2:	aa22      	add	r2, sp, #136	; 0x88
 80154b4:	4649      	mov	r1, r9
 80154b6:	4650      	mov	r0, sl
 80154b8:	f003 fc13 	bl	8018ce2 <__sprint_r>
 80154bc:	2800      	cmp	r0, #0
 80154be:	f040 8130 	bne.w	8015722 <_vfprintf_r+0x492>
 80154c2:	ac25      	add	r4, sp, #148	; 0x94
 80154c4:	e77c      	b.n	80153c0 <_vfprintf_r+0x130>
 80154c6:	4650      	mov	r0, sl
 80154c8:	f002 fe06 	bl	80180d8 <_localeconv_r>
 80154cc:	6843      	ldr	r3, [r0, #4]
 80154ce:	9314      	str	r3, [sp, #80]	; 0x50
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7ea fe97 	bl	8000204 <strlen>
 80154d6:	9012      	str	r0, [sp, #72]	; 0x48
 80154d8:	4650      	mov	r0, sl
 80154da:	f002 fdfd 	bl	80180d8 <_localeconv_r>
 80154de:	6883      	ldr	r3, [r0, #8]
 80154e0:	930a      	str	r3, [sp, #40]	; 0x28
 80154e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154e4:	212b      	movs	r1, #43	; 0x2b
 80154e6:	b12b      	cbz	r3, 80154f4 <_vfprintf_r+0x264>
 80154e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154ea:	b11b      	cbz	r3, 80154f4 <_vfprintf_r+0x264>
 80154ec:	781b      	ldrb	r3, [r3, #0]
 80154ee:	b10b      	cbz	r3, 80154f4 <_vfprintf_r+0x264>
 80154f0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80154f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80154f6:	e774      	b.n	80153e2 <_vfprintf_r+0x152>
 80154f8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d1f9      	bne.n	80154f4 <_vfprintf_r+0x264>
 8015500:	2320      	movs	r3, #32
 8015502:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015506:	e7f5      	b.n	80154f4 <_vfprintf_r+0x264>
 8015508:	f04b 0b01 	orr.w	fp, fp, #1
 801550c:	e7f2      	b.n	80154f4 <_vfprintf_r+0x264>
 801550e:	f856 3b04 	ldr.w	r3, [r6], #4
 8015512:	9310      	str	r3, [sp, #64]	; 0x40
 8015514:	2b00      	cmp	r3, #0
 8015516:	daed      	bge.n	80154f4 <_vfprintf_r+0x264>
 8015518:	425b      	negs	r3, r3
 801551a:	9310      	str	r3, [sp, #64]	; 0x40
 801551c:	f04b 0b04 	orr.w	fp, fp, #4
 8015520:	e7e8      	b.n	80154f4 <_vfprintf_r+0x264>
 8015522:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8015526:	e7e5      	b.n	80154f4 <_vfprintf_r+0x264>
 8015528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801552a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801552e:	9207      	str	r2, [sp, #28]
 8015530:	2a2a      	cmp	r2, #42	; 0x2a
 8015532:	d10f      	bne.n	8015554 <_vfprintf_r+0x2c4>
 8015534:	f856 0b04 	ldr.w	r0, [r6], #4
 8015538:	930b      	str	r3, [sp, #44]	; 0x2c
 801553a:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801553e:	e7d9      	b.n	80154f4 <_vfprintf_r+0x264>
 8015540:	fb07 2808 	mla	r8, r7, r8, r2
 8015544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015548:	9207      	str	r2, [sp, #28]
 801554a:	9a07      	ldr	r2, [sp, #28]
 801554c:	3a30      	subs	r2, #48	; 0x30
 801554e:	2a09      	cmp	r2, #9
 8015550:	d9f6      	bls.n	8015540 <_vfprintf_r+0x2b0>
 8015552:	e74b      	b.n	80153ec <_vfprintf_r+0x15c>
 8015554:	f04f 0800 	mov.w	r8, #0
 8015558:	e7f7      	b.n	801554a <_vfprintf_r+0x2ba>
 801555a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801555e:	e7c9      	b.n	80154f4 <_vfprintf_r+0x264>
 8015560:	2200      	movs	r2, #0
 8015562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015564:	9210      	str	r2, [sp, #64]	; 0x40
 8015566:	9a07      	ldr	r2, [sp, #28]
 8015568:	9810      	ldr	r0, [sp, #64]	; 0x40
 801556a:	3a30      	subs	r2, #48	; 0x30
 801556c:	fb07 2200 	mla	r2, r7, r0, r2
 8015570:	9210      	str	r2, [sp, #64]	; 0x40
 8015572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015576:	9207      	str	r2, [sp, #28]
 8015578:	3a30      	subs	r2, #48	; 0x30
 801557a:	2a09      	cmp	r2, #9
 801557c:	d9f3      	bls.n	8015566 <_vfprintf_r+0x2d6>
 801557e:	e735      	b.n	80153ec <_vfprintf_r+0x15c>
 8015580:	f04b 0b08 	orr.w	fp, fp, #8
 8015584:	e7b6      	b.n	80154f4 <_vfprintf_r+0x264>
 8015586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	2b68      	cmp	r3, #104	; 0x68
 801558c:	bf01      	itttt	eq
 801558e:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8015590:	3301      	addeq	r3, #1
 8015592:	930b      	streq	r3, [sp, #44]	; 0x2c
 8015594:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8015598:	bf18      	it	ne
 801559a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801559e:	e7a9      	b.n	80154f4 <_vfprintf_r+0x264>
 80155a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	2b6c      	cmp	r3, #108	; 0x6c
 80155a6:	d105      	bne.n	80155b4 <_vfprintf_r+0x324>
 80155a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155aa:	3301      	adds	r3, #1
 80155ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80155ae:	f04b 0b20 	orr.w	fp, fp, #32
 80155b2:	e79f      	b.n	80154f4 <_vfprintf_r+0x264>
 80155b4:	f04b 0b10 	orr.w	fp, fp, #16
 80155b8:	e79c      	b.n	80154f4 <_vfprintf_r+0x264>
 80155ba:	4632      	mov	r2, r6
 80155bc:	2000      	movs	r0, #0
 80155be:	f852 3b04 	ldr.w	r3, [r2], #4
 80155c2:	9206      	str	r2, [sp, #24]
 80155c4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80155c8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80155cc:	ab35      	add	r3, sp, #212	; 0xd4
 80155ce:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80155d2:	9004      	str	r0, [sp, #16]
 80155d4:	f04f 0801 	mov.w	r8, #1
 80155d8:	4606      	mov	r6, r0
 80155da:	4605      	mov	r5, r0
 80155dc:	9303      	str	r3, [sp, #12]
 80155de:	e1c3      	b.n	8015968 <_vfprintf_r+0x6d8>
	...
 80155e8:	f04b 0b10 	orr.w	fp, fp, #16
 80155ec:	f01b 0f20 	tst.w	fp, #32
 80155f0:	d012      	beq.n	8015618 <_vfprintf_r+0x388>
 80155f2:	3607      	adds	r6, #7
 80155f4:	f026 0307 	bic.w	r3, r6, #7
 80155f8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80155fc:	9306      	str	r3, [sp, #24]
 80155fe:	2e00      	cmp	r6, #0
 8015600:	f177 0300 	sbcs.w	r3, r7, #0
 8015604:	da06      	bge.n	8015614 <_vfprintf_r+0x384>
 8015606:	4276      	negs	r6, r6
 8015608:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801560c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8015610:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015614:	2301      	movs	r3, #1
 8015616:	e392      	b.n	8015d3e <_vfprintf_r+0xaae>
 8015618:	1d33      	adds	r3, r6, #4
 801561a:	f01b 0f10 	tst.w	fp, #16
 801561e:	9306      	str	r3, [sp, #24]
 8015620:	d002      	beq.n	8015628 <_vfprintf_r+0x398>
 8015622:	6836      	ldr	r6, [r6, #0]
 8015624:	17f7      	asrs	r7, r6, #31
 8015626:	e7ea      	b.n	80155fe <_vfprintf_r+0x36e>
 8015628:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801562c:	6836      	ldr	r6, [r6, #0]
 801562e:	d001      	beq.n	8015634 <_vfprintf_r+0x3a4>
 8015630:	b236      	sxth	r6, r6
 8015632:	e7f7      	b.n	8015624 <_vfprintf_r+0x394>
 8015634:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015638:	bf18      	it	ne
 801563a:	b276      	sxtbne	r6, r6
 801563c:	e7f2      	b.n	8015624 <_vfprintf_r+0x394>
 801563e:	3607      	adds	r6, #7
 8015640:	f026 0307 	bic.w	r3, r6, #7
 8015644:	ecb3 7b02 	vldmia	r3!, {d7}
 8015648:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801564c:	9306      	str	r3, [sp, #24]
 801564e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015650:	ee09 3a10 	vmov	s18, r3
 8015654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801565a:	ee09 3a90 	vmov	s19, r3
 801565e:	f04f 32ff 	mov.w	r2, #4294967295
 8015662:	4b39      	ldr	r3, [pc, #228]	; (8015748 <_vfprintf_r+0x4b8>)
 8015664:	ec51 0b19 	vmov	r0, r1, d9
 8015668:	f7eb fa80 	bl	8000b6c <__aeabi_dcmpun>
 801566c:	bb20      	cbnz	r0, 80156b8 <_vfprintf_r+0x428>
 801566e:	4b36      	ldr	r3, [pc, #216]	; (8015748 <_vfprintf_r+0x4b8>)
 8015670:	ec51 0b19 	vmov	r0, r1, d9
 8015674:	f04f 32ff 	mov.w	r2, #4294967295
 8015678:	f7eb fa5a 	bl	8000b30 <__aeabi_dcmple>
 801567c:	b9e0      	cbnz	r0, 80156b8 <_vfprintf_r+0x428>
 801567e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015682:	2200      	movs	r2, #0
 8015684:	2300      	movs	r3, #0
 8015686:	f7eb fa49 	bl	8000b1c <__aeabi_dcmplt>
 801568a:	b110      	cbz	r0, 8015692 <_vfprintf_r+0x402>
 801568c:	232d      	movs	r3, #45	; 0x2d
 801568e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015692:	4a2e      	ldr	r2, [pc, #184]	; (801574c <_vfprintf_r+0x4bc>)
 8015694:	482e      	ldr	r0, [pc, #184]	; (8015750 <_vfprintf_r+0x4c0>)
 8015696:	9907      	ldr	r1, [sp, #28]
 8015698:	4613      	mov	r3, r2
 801569a:	2947      	cmp	r1, #71	; 0x47
 801569c:	bfc8      	it	gt
 801569e:	4603      	movgt	r3, r0
 80156a0:	9303      	str	r3, [sp, #12]
 80156a2:	2300      	movs	r3, #0
 80156a4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80156a8:	9304      	str	r3, [sp, #16]
 80156aa:	f04f 0803 	mov.w	r8, #3
 80156ae:	461e      	mov	r6, r3
 80156b0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80156b4:	461d      	mov	r5, r3
 80156b6:	e157      	b.n	8015968 <_vfprintf_r+0x6d8>
 80156b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80156bc:	4610      	mov	r0, r2
 80156be:	4619      	mov	r1, r3
 80156c0:	f7eb fa54 	bl	8000b6c <__aeabi_dcmpun>
 80156c4:	b140      	cbz	r0, 80156d8 <_vfprintf_r+0x448>
 80156c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156c8:	4a22      	ldr	r2, [pc, #136]	; (8015754 <_vfprintf_r+0x4c4>)
 80156ca:	4823      	ldr	r0, [pc, #140]	; (8015758 <_vfprintf_r+0x4c8>)
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	bfbc      	itt	lt
 80156d0:	232d      	movlt	r3, #45	; 0x2d
 80156d2:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80156d6:	e7de      	b.n	8015696 <_vfprintf_r+0x406>
 80156d8:	9b07      	ldr	r3, [sp, #28]
 80156da:	f023 0320 	bic.w	r3, r3, #32
 80156de:	2b41      	cmp	r3, #65	; 0x41
 80156e0:	9308      	str	r3, [sp, #32]
 80156e2:	d13b      	bne.n	801575c <_vfprintf_r+0x4cc>
 80156e4:	2330      	movs	r3, #48	; 0x30
 80156e6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80156ea:	9b07      	ldr	r3, [sp, #28]
 80156ec:	2b61      	cmp	r3, #97	; 0x61
 80156ee:	bf0c      	ite	eq
 80156f0:	2378      	moveq	r3, #120	; 0x78
 80156f2:	2358      	movne	r3, #88	; 0x58
 80156f4:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80156f8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80156fc:	f04b 0b02 	orr.w	fp, fp, #2
 8015700:	f340 8209 	ble.w	8015b16 <_vfprintf_r+0x886>
 8015704:	f108 0101 	add.w	r1, r8, #1
 8015708:	4650      	mov	r0, sl
 801570a:	f7fd f98b 	bl	8012a24 <_malloc_r>
 801570e:	9003      	str	r0, [sp, #12]
 8015710:	2800      	cmp	r0, #0
 8015712:	f040 8204 	bne.w	8015b1e <_vfprintf_r+0x88e>
 8015716:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801571a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801571e:	f8a9 300c 	strh.w	r3, [r9, #12]
 8015722:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8015726:	07d9      	lsls	r1, r3, #31
 8015728:	d407      	bmi.n	801573a <_vfprintf_r+0x4aa>
 801572a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801572e:	059a      	lsls	r2, r3, #22
 8015730:	d403      	bmi.n	801573a <_vfprintf_r+0x4aa>
 8015732:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015736:	f002 fcd6 	bl	80180e6 <__retarget_lock_release_recursive>
 801573a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801573e:	065b      	lsls	r3, r3, #25
 8015740:	f57f adee 	bpl.w	8015320 <_vfprintf_r+0x90>
 8015744:	e5e9      	b.n	801531a <_vfprintf_r+0x8a>
 8015746:	bf00      	nop
 8015748:	7fefffff 	.word	0x7fefffff
 801574c:	0801c020 	.word	0x0801c020
 8015750:	0801c024 	.word	0x0801c024
 8015754:	0801c028 	.word	0x0801c028
 8015758:	0801c02c 	.word	0x0801c02c
 801575c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8015760:	f000 81e0 	beq.w	8015b24 <_vfprintf_r+0x894>
 8015764:	9b08      	ldr	r3, [sp, #32]
 8015766:	2b47      	cmp	r3, #71	; 0x47
 8015768:	f040 81e0 	bne.w	8015b2c <_vfprintf_r+0x89c>
 801576c:	f1b8 0f00 	cmp.w	r8, #0
 8015770:	f040 81dc 	bne.w	8015b2c <_vfprintf_r+0x89c>
 8015774:	f8cd 8010 	str.w	r8, [sp, #16]
 8015778:	f04f 0801 	mov.w	r8, #1
 801577c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8015780:	9311      	str	r3, [sp, #68]	; 0x44
 8015782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015784:	2b00      	cmp	r3, #0
 8015786:	f280 81d3 	bge.w	8015b30 <_vfprintf_r+0x8a0>
 801578a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801578c:	ee08 3a10 	vmov	s16, r3
 8015790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015792:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015796:	ee08 3a90 	vmov	s17, r3
 801579a:	232d      	movs	r3, #45	; 0x2d
 801579c:	9318      	str	r3, [sp, #96]	; 0x60
 801579e:	9b08      	ldr	r3, [sp, #32]
 80157a0:	2b41      	cmp	r3, #65	; 0x41
 80157a2:	f040 81e3 	bne.w	8015b6c <_vfprintf_r+0x8dc>
 80157a6:	eeb0 0a48 	vmov.f32	s0, s16
 80157aa:	eef0 0a68 	vmov.f32	s1, s17
 80157ae:	a81c      	add	r0, sp, #112	; 0x70
 80157b0:	f003 f986 	bl	8018ac0 <frexp>
 80157b4:	2200      	movs	r2, #0
 80157b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80157ba:	ec51 0b10 	vmov	r0, r1, d0
 80157be:	f7ea ff3b 	bl	8000638 <__aeabi_dmul>
 80157c2:	2200      	movs	r2, #0
 80157c4:	2300      	movs	r3, #0
 80157c6:	4606      	mov	r6, r0
 80157c8:	460f      	mov	r7, r1
 80157ca:	f7eb f99d 	bl	8000b08 <__aeabi_dcmpeq>
 80157ce:	b108      	cbz	r0, 80157d4 <_vfprintf_r+0x544>
 80157d0:	2301      	movs	r3, #1
 80157d2:	931c      	str	r3, [sp, #112]	; 0x70
 80157d4:	4bb7      	ldr	r3, [pc, #732]	; (8015ab4 <_vfprintf_r+0x824>)
 80157d6:	4ab8      	ldr	r2, [pc, #736]	; (8015ab8 <_vfprintf_r+0x828>)
 80157d8:	9907      	ldr	r1, [sp, #28]
 80157da:	9d03      	ldr	r5, [sp, #12]
 80157dc:	2961      	cmp	r1, #97	; 0x61
 80157de:	bf18      	it	ne
 80157e0:	461a      	movne	r2, r3
 80157e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80157e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80157e8:	9305      	str	r3, [sp, #20]
 80157ea:	4bb4      	ldr	r3, [pc, #720]	; (8015abc <_vfprintf_r+0x82c>)
 80157ec:	2200      	movs	r2, #0
 80157ee:	4630      	mov	r0, r6
 80157f0:	4639      	mov	r1, r7
 80157f2:	f7ea ff21 	bl	8000638 <__aeabi_dmul>
 80157f6:	460f      	mov	r7, r1
 80157f8:	4606      	mov	r6, r0
 80157fa:	f7eb f9cd 	bl	8000b98 <__aeabi_d2iz>
 80157fe:	9019      	str	r0, [sp, #100]	; 0x64
 8015800:	f7ea feb0 	bl	8000564 <__aeabi_i2d>
 8015804:	4602      	mov	r2, r0
 8015806:	460b      	mov	r3, r1
 8015808:	4630      	mov	r0, r6
 801580a:	4639      	mov	r1, r7
 801580c:	f7ea fd5c 	bl	80002c8 <__aeabi_dsub>
 8015810:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015814:	5c9b      	ldrb	r3, [r3, r2]
 8015816:	f805 3b01 	strb.w	r3, [r5], #1
 801581a:	9b05      	ldr	r3, [sp, #20]
 801581c:	9309      	str	r3, [sp, #36]	; 0x24
 801581e:	1c5a      	adds	r2, r3, #1
 8015820:	4606      	mov	r6, r0
 8015822:	460f      	mov	r7, r1
 8015824:	d007      	beq.n	8015836 <_vfprintf_r+0x5a6>
 8015826:	3b01      	subs	r3, #1
 8015828:	9305      	str	r3, [sp, #20]
 801582a:	2200      	movs	r2, #0
 801582c:	2300      	movs	r3, #0
 801582e:	f7eb f96b 	bl	8000b08 <__aeabi_dcmpeq>
 8015832:	2800      	cmp	r0, #0
 8015834:	d0d9      	beq.n	80157ea <_vfprintf_r+0x55a>
 8015836:	4ba2      	ldr	r3, [pc, #648]	; (8015ac0 <_vfprintf_r+0x830>)
 8015838:	2200      	movs	r2, #0
 801583a:	4630      	mov	r0, r6
 801583c:	4639      	mov	r1, r7
 801583e:	f7eb f98b 	bl	8000b58 <__aeabi_dcmpgt>
 8015842:	b960      	cbnz	r0, 801585e <_vfprintf_r+0x5ce>
 8015844:	4b9e      	ldr	r3, [pc, #632]	; (8015ac0 <_vfprintf_r+0x830>)
 8015846:	2200      	movs	r2, #0
 8015848:	4630      	mov	r0, r6
 801584a:	4639      	mov	r1, r7
 801584c:	f7eb f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8015850:	2800      	cmp	r0, #0
 8015852:	f000 8186 	beq.w	8015b62 <_vfprintf_r+0x8d2>
 8015856:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015858:	07df      	lsls	r7, r3, #31
 801585a:	f140 8182 	bpl.w	8015b62 <_vfprintf_r+0x8d2>
 801585e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015860:	9520      	str	r5, [sp, #128]	; 0x80
 8015862:	7bd9      	ldrb	r1, [r3, #15]
 8015864:	2030      	movs	r0, #48	; 0x30
 8015866:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015868:	1e53      	subs	r3, r2, #1
 801586a:	9320      	str	r3, [sp, #128]	; 0x80
 801586c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8015870:	428b      	cmp	r3, r1
 8015872:	f000 8165 	beq.w	8015b40 <_vfprintf_r+0x8b0>
 8015876:	2b39      	cmp	r3, #57	; 0x39
 8015878:	bf0b      	itete	eq
 801587a:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801587c:	3301      	addne	r3, #1
 801587e:	7a9b      	ldrbeq	r3, [r3, #10]
 8015880:	b2db      	uxtbne	r3, r3
 8015882:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015886:	9b03      	ldr	r3, [sp, #12]
 8015888:	1aeb      	subs	r3, r5, r3
 801588a:	9305      	str	r3, [sp, #20]
 801588c:	9b08      	ldr	r3, [sp, #32]
 801588e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015890:	2b47      	cmp	r3, #71	; 0x47
 8015892:	f040 81b3 	bne.w	8015bfc <_vfprintf_r+0x96c>
 8015896:	1cee      	adds	r6, r5, #3
 8015898:	db02      	blt.n	80158a0 <_vfprintf_r+0x610>
 801589a:	4545      	cmp	r5, r8
 801589c:	f340 81d5 	ble.w	8015c4a <_vfprintf_r+0x9ba>
 80158a0:	9b07      	ldr	r3, [sp, #28]
 80158a2:	3b02      	subs	r3, #2
 80158a4:	9307      	str	r3, [sp, #28]
 80158a6:	9907      	ldr	r1, [sp, #28]
 80158a8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80158ac:	f021 0120 	bic.w	r1, r1, #32
 80158b0:	2941      	cmp	r1, #65	; 0x41
 80158b2:	bf08      	it	eq
 80158b4:	320f      	addeq	r2, #15
 80158b6:	f105 33ff 	add.w	r3, r5, #4294967295
 80158ba:	bf06      	itte	eq
 80158bc:	b2d2      	uxtbeq	r2, r2
 80158be:	2101      	moveq	r1, #1
 80158c0:	2100      	movne	r1, #0
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	931c      	str	r3, [sp, #112]	; 0x70
 80158c6:	bfb8      	it	lt
 80158c8:	f1c5 0301 	rsblt	r3, r5, #1
 80158cc:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80158d0:	bfb4      	ite	lt
 80158d2:	222d      	movlt	r2, #45	; 0x2d
 80158d4:	222b      	movge	r2, #43	; 0x2b
 80158d6:	2b09      	cmp	r3, #9
 80158d8:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80158dc:	f340 81a4 	ble.w	8015c28 <_vfprintf_r+0x998>
 80158e0:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80158e4:	260a      	movs	r6, #10
 80158e6:	4611      	mov	r1, r2
 80158e8:	fb93 f5f6 	sdiv	r5, r3, r6
 80158ec:	fb06 3015 	mls	r0, r6, r5, r3
 80158f0:	3030      	adds	r0, #48	; 0x30
 80158f2:	f801 0c01 	strb.w	r0, [r1, #-1]
 80158f6:	4618      	mov	r0, r3
 80158f8:	2863      	cmp	r0, #99	; 0x63
 80158fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80158fe:	462b      	mov	r3, r5
 8015900:	dcf1      	bgt.n	80158e6 <_vfprintf_r+0x656>
 8015902:	3330      	adds	r3, #48	; 0x30
 8015904:	1e88      	subs	r0, r1, #2
 8015906:	f802 3c01 	strb.w	r3, [r2, #-1]
 801590a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801590e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8015912:	4603      	mov	r3, r0
 8015914:	42ab      	cmp	r3, r5
 8015916:	f0c0 8182 	bcc.w	8015c1e <_vfprintf_r+0x98e>
 801591a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801591e:	1a52      	subs	r2, r2, r1
 8015920:	42a8      	cmp	r0, r5
 8015922:	bf88      	it	hi
 8015924:	2200      	movhi	r2, #0
 8015926:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801592a:	441a      	add	r2, r3
 801592c:	ab1e      	add	r3, sp, #120	; 0x78
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	9a05      	ldr	r2, [sp, #20]
 8015932:	9315      	str	r3, [sp, #84]	; 0x54
 8015934:	2a01      	cmp	r2, #1
 8015936:	eb03 0802 	add.w	r8, r3, r2
 801593a:	dc02      	bgt.n	8015942 <_vfprintf_r+0x6b2>
 801593c:	f01b 0f01 	tst.w	fp, #1
 8015940:	d001      	beq.n	8015946 <_vfprintf_r+0x6b6>
 8015942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015944:	4498      	add	r8, r3
 8015946:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801594e:	9311      	str	r3, [sp, #68]	; 0x44
 8015950:	2300      	movs	r3, #0
 8015952:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015956:	461d      	mov	r5, r3
 8015958:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801595a:	b113      	cbz	r3, 8015962 <_vfprintf_r+0x6d2>
 801595c:	232d      	movs	r3, #45	; 0x2d
 801595e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015962:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8015966:	2600      	movs	r6, #0
 8015968:	4546      	cmp	r6, r8
 801596a:	4633      	mov	r3, r6
 801596c:	bfb8      	it	lt
 801596e:	4643      	movlt	r3, r8
 8015970:	9311      	str	r3, [sp, #68]	; 0x44
 8015972:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8015976:	b113      	cbz	r3, 801597e <_vfprintf_r+0x6ee>
 8015978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801597a:	3301      	adds	r3, #1
 801597c:	9311      	str	r3, [sp, #68]	; 0x44
 801597e:	f01b 0302 	ands.w	r3, fp, #2
 8015982:	9317      	str	r3, [sp, #92]	; 0x5c
 8015984:	bf1e      	ittt	ne
 8015986:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8015988:	3302      	addne	r3, #2
 801598a:	9311      	strne	r3, [sp, #68]	; 0x44
 801598c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8015990:	9318      	str	r3, [sp, #96]	; 0x60
 8015992:	d11f      	bne.n	80159d4 <_vfprintf_r+0x744>
 8015994:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8015998:	1a9f      	subs	r7, r3, r2
 801599a:	2f00      	cmp	r7, #0
 801599c:	dd1a      	ble.n	80159d4 <_vfprintf_r+0x744>
 801599e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80159a2:	4848      	ldr	r0, [pc, #288]	; (8015ac4 <_vfprintf_r+0x834>)
 80159a4:	6020      	str	r0, [r4, #0]
 80159a6:	2f10      	cmp	r7, #16
 80159a8:	f103 0301 	add.w	r3, r3, #1
 80159ac:	f104 0108 	add.w	r1, r4, #8
 80159b0:	f300 82f0 	bgt.w	8015f94 <_vfprintf_r+0xd04>
 80159b4:	6067      	str	r7, [r4, #4]
 80159b6:	2b07      	cmp	r3, #7
 80159b8:	4417      	add	r7, r2
 80159ba:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80159be:	f340 82fc 	ble.w	8015fba <_vfprintf_r+0xd2a>
 80159c2:	aa22      	add	r2, sp, #136	; 0x88
 80159c4:	4649      	mov	r1, r9
 80159c6:	4650      	mov	r0, sl
 80159c8:	f003 f98b 	bl	8018ce2 <__sprint_r>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	f040 8632 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80159d2:	ac25      	add	r4, sp, #148	; 0x94
 80159d4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80159d8:	b173      	cbz	r3, 80159f8 <_vfprintf_r+0x768>
 80159da:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 80159de:	6023      	str	r3, [r4, #0]
 80159e0:	2301      	movs	r3, #1
 80159e2:	6063      	str	r3, [r4, #4]
 80159e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80159e6:	3301      	adds	r3, #1
 80159e8:	9324      	str	r3, [sp, #144]	; 0x90
 80159ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80159ec:	3301      	adds	r3, #1
 80159ee:	2b07      	cmp	r3, #7
 80159f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80159f2:	f300 82e4 	bgt.w	8015fbe <_vfprintf_r+0xd2e>
 80159f6:	3408      	adds	r4, #8
 80159f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80159fa:	b16b      	cbz	r3, 8015a18 <_vfprintf_r+0x788>
 80159fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80159fe:	6023      	str	r3, [r4, #0]
 8015a00:	2302      	movs	r3, #2
 8015a02:	6063      	str	r3, [r4, #4]
 8015a04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015a06:	3302      	adds	r3, #2
 8015a08:	9324      	str	r3, [sp, #144]	; 0x90
 8015a0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	2b07      	cmp	r3, #7
 8015a10:	9323      	str	r3, [sp, #140]	; 0x8c
 8015a12:	f300 82de 	bgt.w	8015fd2 <_vfprintf_r+0xd42>
 8015a16:	3408      	adds	r4, #8
 8015a18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a1a:	2b80      	cmp	r3, #128	; 0x80
 8015a1c:	d11f      	bne.n	8015a5e <_vfprintf_r+0x7ce>
 8015a1e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8015a22:	1a9f      	subs	r7, r3, r2
 8015a24:	2f00      	cmp	r7, #0
 8015a26:	dd1a      	ble.n	8015a5e <_vfprintf_r+0x7ce>
 8015a28:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015a2c:	4826      	ldr	r0, [pc, #152]	; (8015ac8 <_vfprintf_r+0x838>)
 8015a2e:	6020      	str	r0, [r4, #0]
 8015a30:	2f10      	cmp	r7, #16
 8015a32:	f103 0301 	add.w	r3, r3, #1
 8015a36:	f104 0108 	add.w	r1, r4, #8
 8015a3a:	f300 82d4 	bgt.w	8015fe6 <_vfprintf_r+0xd56>
 8015a3e:	6067      	str	r7, [r4, #4]
 8015a40:	2b07      	cmp	r3, #7
 8015a42:	4417      	add	r7, r2
 8015a44:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8015a48:	f340 82e0 	ble.w	801600c <_vfprintf_r+0xd7c>
 8015a4c:	aa22      	add	r2, sp, #136	; 0x88
 8015a4e:	4649      	mov	r1, r9
 8015a50:	4650      	mov	r0, sl
 8015a52:	f003 f946 	bl	8018ce2 <__sprint_r>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	f040 85ed 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8015a5c:	ac25      	add	r4, sp, #148	; 0x94
 8015a5e:	eba6 0608 	sub.w	r6, r6, r8
 8015a62:	2e00      	cmp	r6, #0
 8015a64:	dd1a      	ble.n	8015a9c <_vfprintf_r+0x80c>
 8015a66:	4f18      	ldr	r7, [pc, #96]	; (8015ac8 <_vfprintf_r+0x838>)
 8015a68:	6027      	str	r7, [r4, #0]
 8015a6a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015a6e:	2e10      	cmp	r6, #16
 8015a70:	f103 0301 	add.w	r3, r3, #1
 8015a74:	f104 0108 	add.w	r1, r4, #8
 8015a78:	f300 82ca 	bgt.w	8016010 <_vfprintf_r+0xd80>
 8015a7c:	6066      	str	r6, [r4, #4]
 8015a7e:	2b07      	cmp	r3, #7
 8015a80:	4416      	add	r6, r2
 8015a82:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8015a86:	f340 82d6 	ble.w	8016036 <_vfprintf_r+0xda6>
 8015a8a:	aa22      	add	r2, sp, #136	; 0x88
 8015a8c:	4649      	mov	r1, r9
 8015a8e:	4650      	mov	r0, sl
 8015a90:	f003 f927 	bl	8018ce2 <__sprint_r>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	f040 85ce 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8015a9a:	ac25      	add	r4, sp, #148	; 0x94
 8015a9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015aa0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015aa2:	f040 82cf 	bne.w	8016044 <_vfprintf_r+0xdb4>
 8015aa6:	9b03      	ldr	r3, [sp, #12]
 8015aa8:	e9c4 3800 	strd	r3, r8, [r4]
 8015aac:	4446      	add	r6, r8
 8015aae:	9624      	str	r6, [sp, #144]	; 0x90
 8015ab0:	e00c      	b.n	8015acc <_vfprintf_r+0x83c>
 8015ab2:	bf00      	nop
 8015ab4:	0801c041 	.word	0x0801c041
 8015ab8:	0801c030 	.word	0x0801c030
 8015abc:	40300000 	.word	0x40300000
 8015ac0:	3fe00000 	.word	0x3fe00000
 8015ac4:	0801c099 	.word	0x0801c099
 8015ac8:	0801c0a9 	.word	0x0801c0a9
 8015acc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ace:	3301      	adds	r3, #1
 8015ad0:	2b07      	cmp	r3, #7
 8015ad2:	9323      	str	r3, [sp, #140]	; 0x8c
 8015ad4:	f300 82fb 	bgt.w	80160ce <_vfprintf_r+0xe3e>
 8015ad8:	3408      	adds	r4, #8
 8015ada:	f01b 0f04 	tst.w	fp, #4
 8015ade:	f040 858c 	bne.w	80165fa <_vfprintf_r+0x136a>
 8015ae2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8015ae6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ae8:	428a      	cmp	r2, r1
 8015aea:	bfac      	ite	ge
 8015aec:	189b      	addge	r3, r3, r2
 8015aee:	185b      	addlt	r3, r3, r1
 8015af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8015af2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015af4:	b13b      	cbz	r3, 8015b06 <_vfprintf_r+0x876>
 8015af6:	aa22      	add	r2, sp, #136	; 0x88
 8015af8:	4649      	mov	r1, r9
 8015afa:	4650      	mov	r0, sl
 8015afc:	f003 f8f1 	bl	8018ce2 <__sprint_r>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	f040 8598 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8015b06:	2300      	movs	r3, #0
 8015b08:	9323      	str	r3, [sp, #140]	; 0x8c
 8015b0a:	9b04      	ldr	r3, [sp, #16]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f040 85ae 	bne.w	801666e <_vfprintf_r+0x13de>
 8015b12:	ac25      	add	r4, sp, #148	; 0x94
 8015b14:	e0eb      	b.n	8015cee <_vfprintf_r+0xa5e>
 8015b16:	ab35      	add	r3, sp, #212	; 0xd4
 8015b18:	9004      	str	r0, [sp, #16]
 8015b1a:	9303      	str	r3, [sp, #12]
 8015b1c:	e62e      	b.n	801577c <_vfprintf_r+0x4ec>
 8015b1e:	9b03      	ldr	r3, [sp, #12]
 8015b20:	9304      	str	r3, [sp, #16]
 8015b22:	e62b      	b.n	801577c <_vfprintf_r+0x4ec>
 8015b24:	9004      	str	r0, [sp, #16]
 8015b26:	f04f 0806 	mov.w	r8, #6
 8015b2a:	e627      	b.n	801577c <_vfprintf_r+0x4ec>
 8015b2c:	9004      	str	r0, [sp, #16]
 8015b2e:	e625      	b.n	801577c <_vfprintf_r+0x4ec>
 8015b30:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8015b34:	2300      	movs	r3, #0
 8015b36:	eeb0 8a47 	vmov.f32	s16, s14
 8015b3a:	eef0 8a67 	vmov.f32	s17, s15
 8015b3e:	e62d      	b.n	801579c <_vfprintf_r+0x50c>
 8015b40:	f802 0c01 	strb.w	r0, [r2, #-1]
 8015b44:	e68f      	b.n	8015866 <_vfprintf_r+0x5d6>
 8015b46:	f803 0b01 	strb.w	r0, [r3], #1
 8015b4a:	1aca      	subs	r2, r1, r3
 8015b4c:	2a00      	cmp	r2, #0
 8015b4e:	dafa      	bge.n	8015b46 <_vfprintf_r+0x8b6>
 8015b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b54:	3201      	adds	r2, #1
 8015b56:	f103 0301 	add.w	r3, r3, #1
 8015b5a:	bfb8      	it	lt
 8015b5c:	2300      	movlt	r3, #0
 8015b5e:	441d      	add	r5, r3
 8015b60:	e691      	b.n	8015886 <_vfprintf_r+0x5f6>
 8015b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b64:	462b      	mov	r3, r5
 8015b66:	18a9      	adds	r1, r5, r2
 8015b68:	2030      	movs	r0, #48	; 0x30
 8015b6a:	e7ee      	b.n	8015b4a <_vfprintf_r+0x8ba>
 8015b6c:	9b08      	ldr	r3, [sp, #32]
 8015b6e:	2b46      	cmp	r3, #70	; 0x46
 8015b70:	d005      	beq.n	8015b7e <_vfprintf_r+0x8ee>
 8015b72:	2b45      	cmp	r3, #69	; 0x45
 8015b74:	d11b      	bne.n	8015bae <_vfprintf_r+0x91e>
 8015b76:	f108 0501 	add.w	r5, r8, #1
 8015b7a:	2102      	movs	r1, #2
 8015b7c:	e001      	b.n	8015b82 <_vfprintf_r+0x8f2>
 8015b7e:	4645      	mov	r5, r8
 8015b80:	2103      	movs	r1, #3
 8015b82:	ab20      	add	r3, sp, #128	; 0x80
 8015b84:	9301      	str	r3, [sp, #4]
 8015b86:	ab1d      	add	r3, sp, #116	; 0x74
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	462a      	mov	r2, r5
 8015b8c:	ab1c      	add	r3, sp, #112	; 0x70
 8015b8e:	4650      	mov	r0, sl
 8015b90:	eeb0 0a48 	vmov.f32	s0, s16
 8015b94:	eef0 0a68 	vmov.f32	s1, s17
 8015b98:	f000 fee6 	bl	8016968 <_dtoa_r>
 8015b9c:	9b08      	ldr	r3, [sp, #32]
 8015b9e:	9003      	str	r0, [sp, #12]
 8015ba0:	2b47      	cmp	r3, #71	; 0x47
 8015ba2:	d106      	bne.n	8015bb2 <_vfprintf_r+0x922>
 8015ba4:	f01b 0f01 	tst.w	fp, #1
 8015ba8:	d103      	bne.n	8015bb2 <_vfprintf_r+0x922>
 8015baa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015bac:	e66b      	b.n	8015886 <_vfprintf_r+0x5f6>
 8015bae:	4645      	mov	r5, r8
 8015bb0:	e7e3      	b.n	8015b7a <_vfprintf_r+0x8ea>
 8015bb2:	9b03      	ldr	r3, [sp, #12]
 8015bb4:	195e      	adds	r6, r3, r5
 8015bb6:	9b08      	ldr	r3, [sp, #32]
 8015bb8:	2b46      	cmp	r3, #70	; 0x46
 8015bba:	d10f      	bne.n	8015bdc <_vfprintf_r+0x94c>
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	2b30      	cmp	r3, #48	; 0x30
 8015bc2:	d109      	bne.n	8015bd8 <_vfprintf_r+0x948>
 8015bc4:	ec51 0b18 	vmov	r0, r1, d8
 8015bc8:	2200      	movs	r2, #0
 8015bca:	2300      	movs	r3, #0
 8015bcc:	f7ea ff9c 	bl	8000b08 <__aeabi_dcmpeq>
 8015bd0:	b910      	cbnz	r0, 8015bd8 <_vfprintf_r+0x948>
 8015bd2:	f1c5 0501 	rsb	r5, r5, #1
 8015bd6:	951c      	str	r5, [sp, #112]	; 0x70
 8015bd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015bda:	441e      	add	r6, r3
 8015bdc:	ec51 0b18 	vmov	r0, r1, d8
 8015be0:	2200      	movs	r2, #0
 8015be2:	2300      	movs	r3, #0
 8015be4:	f7ea ff90 	bl	8000b08 <__aeabi_dcmpeq>
 8015be8:	b100      	cbz	r0, 8015bec <_vfprintf_r+0x95c>
 8015bea:	9620      	str	r6, [sp, #128]	; 0x80
 8015bec:	2230      	movs	r2, #48	; 0x30
 8015bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015bf0:	429e      	cmp	r6, r3
 8015bf2:	d9da      	bls.n	8015baa <_vfprintf_r+0x91a>
 8015bf4:	1c59      	adds	r1, r3, #1
 8015bf6:	9120      	str	r1, [sp, #128]	; 0x80
 8015bf8:	701a      	strb	r2, [r3, #0]
 8015bfa:	e7f8      	b.n	8015bee <_vfprintf_r+0x95e>
 8015bfc:	9b08      	ldr	r3, [sp, #32]
 8015bfe:	2b46      	cmp	r3, #70	; 0x46
 8015c00:	f47f ae51 	bne.w	80158a6 <_vfprintf_r+0x616>
 8015c04:	f00b 0301 	and.w	r3, fp, #1
 8015c08:	2d00      	cmp	r5, #0
 8015c0a:	ea43 0308 	orr.w	r3, r3, r8
 8015c0e:	dd18      	ble.n	8015c42 <_vfprintf_r+0x9b2>
 8015c10:	b383      	cbz	r3, 8015c74 <_vfprintf_r+0x9e4>
 8015c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c14:	18eb      	adds	r3, r5, r3
 8015c16:	4498      	add	r8, r3
 8015c18:	2366      	movs	r3, #102	; 0x66
 8015c1a:	9307      	str	r3, [sp, #28]
 8015c1c:	e030      	b.n	8015c80 <_vfprintf_r+0x9f0>
 8015c1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015c22:	f802 6b01 	strb.w	r6, [r2], #1
 8015c26:	e675      	b.n	8015914 <_vfprintf_r+0x684>
 8015c28:	b941      	cbnz	r1, 8015c3c <_vfprintf_r+0x9ac>
 8015c2a:	2230      	movs	r2, #48	; 0x30
 8015c2c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8015c30:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8015c34:	3330      	adds	r3, #48	; 0x30
 8015c36:	f802 3b01 	strb.w	r3, [r2], #1
 8015c3a:	e677      	b.n	801592c <_vfprintf_r+0x69c>
 8015c3c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8015c40:	e7f8      	b.n	8015c34 <_vfprintf_r+0x9a4>
 8015c42:	b1cb      	cbz	r3, 8015c78 <_vfprintf_r+0x9e8>
 8015c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c46:	3301      	adds	r3, #1
 8015c48:	e7e5      	b.n	8015c16 <_vfprintf_r+0x986>
 8015c4a:	9b05      	ldr	r3, [sp, #20]
 8015c4c:	429d      	cmp	r5, r3
 8015c4e:	db07      	blt.n	8015c60 <_vfprintf_r+0x9d0>
 8015c50:	f01b 0f01 	tst.w	fp, #1
 8015c54:	d029      	beq.n	8015caa <_vfprintf_r+0xa1a>
 8015c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c58:	eb05 0803 	add.w	r8, r5, r3
 8015c5c:	2367      	movs	r3, #103	; 0x67
 8015c5e:	e7dc      	b.n	8015c1a <_vfprintf_r+0x98a>
 8015c60:	9b05      	ldr	r3, [sp, #20]
 8015c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c64:	2d00      	cmp	r5, #0
 8015c66:	eb03 0802 	add.w	r8, r3, r2
 8015c6a:	dcf7      	bgt.n	8015c5c <_vfprintf_r+0x9cc>
 8015c6c:	f1c5 0301 	rsb	r3, r5, #1
 8015c70:	4498      	add	r8, r3
 8015c72:	e7f3      	b.n	8015c5c <_vfprintf_r+0x9cc>
 8015c74:	46a8      	mov	r8, r5
 8015c76:	e7cf      	b.n	8015c18 <_vfprintf_r+0x988>
 8015c78:	2366      	movs	r3, #102	; 0x66
 8015c7a:	9307      	str	r3, [sp, #28]
 8015c7c:	f04f 0801 	mov.w	r8, #1
 8015c80:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8015c84:	9309      	str	r3, [sp, #36]	; 0x24
 8015c86:	d023      	beq.n	8015cd0 <_vfprintf_r+0xa40>
 8015c88:	2300      	movs	r3, #0
 8015c8a:	2d00      	cmp	r5, #0
 8015c8c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015c90:	f77f ae62 	ble.w	8015958 <_vfprintf_r+0x6c8>
 8015c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	2bff      	cmp	r3, #255	; 0xff
 8015c9a:	d108      	bne.n	8015cae <_vfprintf_r+0xa1e>
 8015c9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015ca0:	4413      	add	r3, r2
 8015ca2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ca4:	fb02 8803 	mla	r8, r2, r3, r8
 8015ca8:	e656      	b.n	8015958 <_vfprintf_r+0x6c8>
 8015caa:	46a8      	mov	r8, r5
 8015cac:	e7d6      	b.n	8015c5c <_vfprintf_r+0x9cc>
 8015cae:	42ab      	cmp	r3, r5
 8015cb0:	daf4      	bge.n	8015c9c <_vfprintf_r+0xa0c>
 8015cb2:	1aed      	subs	r5, r5, r3
 8015cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cb6:	785b      	ldrb	r3, [r3, #1]
 8015cb8:	b133      	cbz	r3, 8015cc8 <_vfprintf_r+0xa38>
 8015cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8015cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8015cc6:	e7e5      	b.n	8015c94 <_vfprintf_r+0xa04>
 8015cc8:	9b08      	ldr	r3, [sp, #32]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	9308      	str	r3, [sp, #32]
 8015cce:	e7e1      	b.n	8015c94 <_vfprintf_r+0xa04>
 8015cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd2:	9308      	str	r3, [sp, #32]
 8015cd4:	e640      	b.n	8015958 <_vfprintf_r+0x6c8>
 8015cd6:	4632      	mov	r2, r6
 8015cd8:	f01b 0f20 	tst.w	fp, #32
 8015cdc:	f852 3b04 	ldr.w	r3, [r2], #4
 8015ce0:	9206      	str	r2, [sp, #24]
 8015ce2:	d009      	beq.n	8015cf8 <_vfprintf_r+0xa68>
 8015ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ce6:	4610      	mov	r0, r2
 8015ce8:	17d1      	asrs	r1, r2, #31
 8015cea:	e9c3 0100 	strd	r0, r1, [r3]
 8015cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cf0:	9e06      	ldr	r6, [sp, #24]
 8015cf2:	9303      	str	r3, [sp, #12]
 8015cf4:	f7ff bb4f 	b.w	8015396 <_vfprintf_r+0x106>
 8015cf8:	f01b 0f10 	tst.w	fp, #16
 8015cfc:	d002      	beq.n	8015d04 <_vfprintf_r+0xa74>
 8015cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d00:	601a      	str	r2, [r3, #0]
 8015d02:	e7f4      	b.n	8015cee <_vfprintf_r+0xa5e>
 8015d04:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015d08:	d002      	beq.n	8015d10 <_vfprintf_r+0xa80>
 8015d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d0c:	801a      	strh	r2, [r3, #0]
 8015d0e:	e7ee      	b.n	8015cee <_vfprintf_r+0xa5e>
 8015d10:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015d14:	d0f3      	beq.n	8015cfe <_vfprintf_r+0xa6e>
 8015d16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d18:	701a      	strb	r2, [r3, #0]
 8015d1a:	e7e8      	b.n	8015cee <_vfprintf_r+0xa5e>
 8015d1c:	f04b 0b10 	orr.w	fp, fp, #16
 8015d20:	f01b 0f20 	tst.w	fp, #32
 8015d24:	d01e      	beq.n	8015d64 <_vfprintf_r+0xad4>
 8015d26:	3607      	adds	r6, #7
 8015d28:	f026 0307 	bic.w	r3, r6, #7
 8015d2c:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015d30:	9306      	str	r3, [sp, #24]
 8015d32:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8015d36:	2300      	movs	r3, #0
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8015d3e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8015d42:	f000 84a9 	beq.w	8016698 <_vfprintf_r+0x1408>
 8015d46:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8015d4a:	9204      	str	r2, [sp, #16]
 8015d4c:	ea56 0207 	orrs.w	r2, r6, r7
 8015d50:	f040 84a8 	bne.w	80166a4 <_vfprintf_r+0x1414>
 8015d54:	f1b8 0f00 	cmp.w	r8, #0
 8015d58:	f000 8104 	beq.w	8015f64 <_vfprintf_r+0xcd4>
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	f040 84a4 	bne.w	80166aa <_vfprintf_r+0x141a>
 8015d62:	e09a      	b.n	8015e9a <_vfprintf_r+0xc0a>
 8015d64:	1d33      	adds	r3, r6, #4
 8015d66:	f01b 0f10 	tst.w	fp, #16
 8015d6a:	9306      	str	r3, [sp, #24]
 8015d6c:	d001      	beq.n	8015d72 <_vfprintf_r+0xae2>
 8015d6e:	6836      	ldr	r6, [r6, #0]
 8015d70:	e003      	b.n	8015d7a <_vfprintf_r+0xaea>
 8015d72:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015d76:	d002      	beq.n	8015d7e <_vfprintf_r+0xaee>
 8015d78:	8836      	ldrh	r6, [r6, #0]
 8015d7a:	2700      	movs	r7, #0
 8015d7c:	e7d9      	b.n	8015d32 <_vfprintf_r+0xaa2>
 8015d7e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015d82:	d0f4      	beq.n	8015d6e <_vfprintf_r+0xade>
 8015d84:	7836      	ldrb	r6, [r6, #0]
 8015d86:	e7f8      	b.n	8015d7a <_vfprintf_r+0xaea>
 8015d88:	4633      	mov	r3, r6
 8015d8a:	2278      	movs	r2, #120	; 0x78
 8015d8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d90:	9306      	str	r3, [sp, #24]
 8015d92:	f647 0330 	movw	r3, #30768	; 0x7830
 8015d96:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8015d9a:	4ba8      	ldr	r3, [pc, #672]	; (801603c <_vfprintf_r+0xdac>)
 8015d9c:	9316      	str	r3, [sp, #88]	; 0x58
 8015d9e:	2700      	movs	r7, #0
 8015da0:	f04b 0b02 	orr.w	fp, fp, #2
 8015da4:	2302      	movs	r3, #2
 8015da6:	9207      	str	r2, [sp, #28]
 8015da8:	e7c6      	b.n	8015d38 <_vfprintf_r+0xaa8>
 8015daa:	4632      	mov	r2, r6
 8015dac:	2500      	movs	r5, #0
 8015dae:	f852 3b04 	ldr.w	r3, [r2], #4
 8015db2:	9303      	str	r3, [sp, #12]
 8015db4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8015db8:	9206      	str	r2, [sp, #24]
 8015dba:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8015dbe:	d010      	beq.n	8015de2 <_vfprintf_r+0xb52>
 8015dc0:	9803      	ldr	r0, [sp, #12]
 8015dc2:	4642      	mov	r2, r8
 8015dc4:	4629      	mov	r1, r5
 8015dc6:	f7ea fa2b 	bl	8000220 <memchr>
 8015dca:	9004      	str	r0, [sp, #16]
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	f000 80df 	beq.w	8015f90 <_vfprintf_r+0xd00>
 8015dd2:	9a03      	ldr	r2, [sp, #12]
 8015dd4:	9504      	str	r5, [sp, #16]
 8015dd6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8015dda:	eba0 0802 	sub.w	r8, r0, r2
 8015dde:	462e      	mov	r6, r5
 8015de0:	e5c2      	b.n	8015968 <_vfprintf_r+0x6d8>
 8015de2:	9803      	ldr	r0, [sp, #12]
 8015de4:	f7ea fa0e 	bl	8000204 <strlen>
 8015de8:	462e      	mov	r6, r5
 8015dea:	4680      	mov	r8, r0
 8015dec:	9504      	str	r5, [sp, #16]
 8015dee:	4633      	mov	r3, r6
 8015df0:	e45e      	b.n	80156b0 <_vfprintf_r+0x420>
 8015df2:	f04b 0b10 	orr.w	fp, fp, #16
 8015df6:	f01b 0f20 	tst.w	fp, #32
 8015dfa:	d007      	beq.n	8015e0c <_vfprintf_r+0xb7c>
 8015dfc:	3607      	adds	r6, #7
 8015dfe:	f026 0307 	bic.w	r3, r6, #7
 8015e02:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015e06:	9306      	str	r3, [sp, #24]
 8015e08:	2301      	movs	r3, #1
 8015e0a:	e795      	b.n	8015d38 <_vfprintf_r+0xaa8>
 8015e0c:	1d33      	adds	r3, r6, #4
 8015e0e:	f01b 0f10 	tst.w	fp, #16
 8015e12:	9306      	str	r3, [sp, #24]
 8015e14:	d001      	beq.n	8015e1a <_vfprintf_r+0xb8a>
 8015e16:	6836      	ldr	r6, [r6, #0]
 8015e18:	e003      	b.n	8015e22 <_vfprintf_r+0xb92>
 8015e1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015e1e:	d002      	beq.n	8015e26 <_vfprintf_r+0xb96>
 8015e20:	8836      	ldrh	r6, [r6, #0]
 8015e22:	2700      	movs	r7, #0
 8015e24:	e7f0      	b.n	8015e08 <_vfprintf_r+0xb78>
 8015e26:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015e2a:	d0f4      	beq.n	8015e16 <_vfprintf_r+0xb86>
 8015e2c:	7836      	ldrb	r6, [r6, #0]
 8015e2e:	e7f8      	b.n	8015e22 <_vfprintf_r+0xb92>
 8015e30:	4b83      	ldr	r3, [pc, #524]	; (8016040 <_vfprintf_r+0xdb0>)
 8015e32:	9316      	str	r3, [sp, #88]	; 0x58
 8015e34:	f01b 0f20 	tst.w	fp, #32
 8015e38:	d019      	beq.n	8015e6e <_vfprintf_r+0xbde>
 8015e3a:	3607      	adds	r6, #7
 8015e3c:	f026 0307 	bic.w	r3, r6, #7
 8015e40:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015e44:	9306      	str	r3, [sp, #24]
 8015e46:	f01b 0f01 	tst.w	fp, #1
 8015e4a:	d00a      	beq.n	8015e62 <_vfprintf_r+0xbd2>
 8015e4c:	ea56 0307 	orrs.w	r3, r6, r7
 8015e50:	d007      	beq.n	8015e62 <_vfprintf_r+0xbd2>
 8015e52:	2330      	movs	r3, #48	; 0x30
 8015e54:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8015e58:	9b07      	ldr	r3, [sp, #28]
 8015e5a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8015e5e:	f04b 0b02 	orr.w	fp, fp, #2
 8015e62:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8015e66:	2302      	movs	r3, #2
 8015e68:	e766      	b.n	8015d38 <_vfprintf_r+0xaa8>
 8015e6a:	4b74      	ldr	r3, [pc, #464]	; (801603c <_vfprintf_r+0xdac>)
 8015e6c:	e7e1      	b.n	8015e32 <_vfprintf_r+0xba2>
 8015e6e:	1d33      	adds	r3, r6, #4
 8015e70:	f01b 0f10 	tst.w	fp, #16
 8015e74:	9306      	str	r3, [sp, #24]
 8015e76:	d001      	beq.n	8015e7c <_vfprintf_r+0xbec>
 8015e78:	6836      	ldr	r6, [r6, #0]
 8015e7a:	e003      	b.n	8015e84 <_vfprintf_r+0xbf4>
 8015e7c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015e80:	d002      	beq.n	8015e88 <_vfprintf_r+0xbf8>
 8015e82:	8836      	ldrh	r6, [r6, #0]
 8015e84:	2700      	movs	r7, #0
 8015e86:	e7de      	b.n	8015e46 <_vfprintf_r+0xbb6>
 8015e88:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015e8c:	d0f4      	beq.n	8015e78 <_vfprintf_r+0xbe8>
 8015e8e:	7836      	ldrb	r6, [r6, #0]
 8015e90:	e7f8      	b.n	8015e84 <_vfprintf_r+0xbf4>
 8015e92:	2f00      	cmp	r7, #0
 8015e94:	bf08      	it	eq
 8015e96:	2e0a      	cmpeq	r6, #10
 8015e98:	d206      	bcs.n	8015ea8 <_vfprintf_r+0xc18>
 8015e9a:	3630      	adds	r6, #48	; 0x30
 8015e9c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8015ea0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8015ea4:	f000 bc23 	b.w	80166ee <_vfprintf_r+0x145e>
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	9305      	str	r3, [sp, #20]
 8015eac:	9b04      	ldr	r3, [sp, #16]
 8015eae:	ad4e      	add	r5, sp, #312	; 0x138
 8015eb0:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8015eb4:	1e6b      	subs	r3, r5, #1
 8015eb6:	9303      	str	r3, [sp, #12]
 8015eb8:	220a      	movs	r2, #10
 8015eba:	2300      	movs	r3, #0
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	4639      	mov	r1, r7
 8015ec0:	f7ea ff02 	bl	8000cc8 <__aeabi_uldivmod>
 8015ec4:	9b05      	ldr	r3, [sp, #20]
 8015ec6:	3230      	adds	r2, #48	; 0x30
 8015ec8:	3301      	adds	r3, #1
 8015eca:	f805 2c01 	strb.w	r2, [r5, #-1]
 8015ece:	9305      	str	r3, [sp, #20]
 8015ed0:	f1bb 0f00 	cmp.w	fp, #0
 8015ed4:	d019      	beq.n	8015f0a <_vfprintf_r+0xc7a>
 8015ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ed8:	9a05      	ldr	r2, [sp, #20]
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d114      	bne.n	8015f0a <_vfprintf_r+0xc7a>
 8015ee0:	2aff      	cmp	r2, #255	; 0xff
 8015ee2:	d012      	beq.n	8015f0a <_vfprintf_r+0xc7a>
 8015ee4:	2f00      	cmp	r7, #0
 8015ee6:	bf08      	it	eq
 8015ee8:	2e0a      	cmpeq	r6, #10
 8015eea:	d30e      	bcc.n	8015f0a <_vfprintf_r+0xc7a>
 8015eec:	9b03      	ldr	r3, [sp, #12]
 8015eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ef0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015ef2:	1a9b      	subs	r3, r3, r2
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	9303      	str	r3, [sp, #12]
 8015ef8:	f002 fe65 	bl	8018bc6 <strncpy>
 8015efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015efe:	785d      	ldrb	r5, [r3, #1]
 8015f00:	b1e5      	cbz	r5, 8015f3c <_vfprintf_r+0xcac>
 8015f02:	3301      	adds	r3, #1
 8015f04:	930a      	str	r3, [sp, #40]	; 0x28
 8015f06:	2300      	movs	r3, #0
 8015f08:	9305      	str	r3, [sp, #20]
 8015f0a:	220a      	movs	r2, #10
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	4630      	mov	r0, r6
 8015f10:	4639      	mov	r1, r7
 8015f12:	f7ea fed9 	bl	8000cc8 <__aeabi_uldivmod>
 8015f16:	2f00      	cmp	r7, #0
 8015f18:	bf08      	it	eq
 8015f1a:	2e0a      	cmpeq	r6, #10
 8015f1c:	d20a      	bcs.n	8015f34 <_vfprintf_r+0xca4>
 8015f1e:	9b03      	ldr	r3, [sp, #12]
 8015f20:	f8dd b010 	ldr.w	fp, [sp, #16]
 8015f24:	aa4e      	add	r2, sp, #312	; 0x138
 8015f26:	4646      	mov	r6, r8
 8015f28:	eba2 0803 	sub.w	r8, r2, r3
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	9304      	str	r3, [sp, #16]
 8015f30:	f7ff bbbe 	b.w	80156b0 <_vfprintf_r+0x420>
 8015f34:	9d03      	ldr	r5, [sp, #12]
 8015f36:	4606      	mov	r6, r0
 8015f38:	460f      	mov	r7, r1
 8015f3a:	e7bb      	b.n	8015eb4 <_vfprintf_r+0xc24>
 8015f3c:	9505      	str	r5, [sp, #20]
 8015f3e:	e7e4      	b.n	8015f0a <_vfprintf_r+0xc7a>
 8015f40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f42:	f006 030f 	and.w	r3, r6, #15
 8015f46:	5cd3      	ldrb	r3, [r2, r3]
 8015f48:	9a03      	ldr	r2, [sp, #12]
 8015f4a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8015f4e:	0933      	lsrs	r3, r6, #4
 8015f50:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8015f54:	9203      	str	r2, [sp, #12]
 8015f56:	093a      	lsrs	r2, r7, #4
 8015f58:	461e      	mov	r6, r3
 8015f5a:	4617      	mov	r7, r2
 8015f5c:	ea56 0307 	orrs.w	r3, r6, r7
 8015f60:	d1ee      	bne.n	8015f40 <_vfprintf_r+0xcb0>
 8015f62:	e7dc      	b.n	8015f1e <_vfprintf_r+0xc8e>
 8015f64:	b933      	cbnz	r3, 8015f74 <_vfprintf_r+0xce4>
 8015f66:	f01b 0f01 	tst.w	fp, #1
 8015f6a:	d003      	beq.n	8015f74 <_vfprintf_r+0xce4>
 8015f6c:	2330      	movs	r3, #48	; 0x30
 8015f6e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8015f72:	e795      	b.n	8015ea0 <_vfprintf_r+0xc10>
 8015f74:	ab4e      	add	r3, sp, #312	; 0x138
 8015f76:	e3ba      	b.n	80166ee <_vfprintf_r+0x145e>
 8015f78:	9b07      	ldr	r3, [sp, #28]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f000 837d 	beq.w	801667a <_vfprintf_r+0x13ea>
 8015f80:	2000      	movs	r0, #0
 8015f82:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8015f86:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8015f8a:	9606      	str	r6, [sp, #24]
 8015f8c:	f7ff bb1e 	b.w	80155cc <_vfprintf_r+0x33c>
 8015f90:	9e04      	ldr	r6, [sp, #16]
 8015f92:	e72c      	b.n	8015dee <_vfprintf_r+0xb5e>
 8015f94:	2010      	movs	r0, #16
 8015f96:	4402      	add	r2, r0
 8015f98:	2b07      	cmp	r3, #7
 8015f9a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015f9e:	6060      	str	r0, [r4, #4]
 8015fa0:	dd08      	ble.n	8015fb4 <_vfprintf_r+0xd24>
 8015fa2:	aa22      	add	r2, sp, #136	; 0x88
 8015fa4:	4649      	mov	r1, r9
 8015fa6:	4650      	mov	r0, sl
 8015fa8:	f002 fe9b 	bl	8018ce2 <__sprint_r>
 8015fac:	2800      	cmp	r0, #0
 8015fae:	f040 8342 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8015fb2:	a925      	add	r1, sp, #148	; 0x94
 8015fb4:	3f10      	subs	r7, #16
 8015fb6:	460c      	mov	r4, r1
 8015fb8:	e4f1      	b.n	801599e <_vfprintf_r+0x70e>
 8015fba:	460c      	mov	r4, r1
 8015fbc:	e50a      	b.n	80159d4 <_vfprintf_r+0x744>
 8015fbe:	aa22      	add	r2, sp, #136	; 0x88
 8015fc0:	4649      	mov	r1, r9
 8015fc2:	4650      	mov	r0, sl
 8015fc4:	f002 fe8d 	bl	8018ce2 <__sprint_r>
 8015fc8:	2800      	cmp	r0, #0
 8015fca:	f040 8334 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8015fce:	ac25      	add	r4, sp, #148	; 0x94
 8015fd0:	e512      	b.n	80159f8 <_vfprintf_r+0x768>
 8015fd2:	aa22      	add	r2, sp, #136	; 0x88
 8015fd4:	4649      	mov	r1, r9
 8015fd6:	4650      	mov	r0, sl
 8015fd8:	f002 fe83 	bl	8018ce2 <__sprint_r>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	f040 832a 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8015fe2:	ac25      	add	r4, sp, #148	; 0x94
 8015fe4:	e518      	b.n	8015a18 <_vfprintf_r+0x788>
 8015fe6:	2010      	movs	r0, #16
 8015fe8:	4402      	add	r2, r0
 8015fea:	2b07      	cmp	r3, #7
 8015fec:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015ff0:	6060      	str	r0, [r4, #4]
 8015ff2:	dd08      	ble.n	8016006 <_vfprintf_r+0xd76>
 8015ff4:	aa22      	add	r2, sp, #136	; 0x88
 8015ff6:	4649      	mov	r1, r9
 8015ff8:	4650      	mov	r0, sl
 8015ffa:	f002 fe72 	bl	8018ce2 <__sprint_r>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f040 8319 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016004:	a925      	add	r1, sp, #148	; 0x94
 8016006:	3f10      	subs	r7, #16
 8016008:	460c      	mov	r4, r1
 801600a:	e50d      	b.n	8015a28 <_vfprintf_r+0x798>
 801600c:	460c      	mov	r4, r1
 801600e:	e526      	b.n	8015a5e <_vfprintf_r+0x7ce>
 8016010:	2010      	movs	r0, #16
 8016012:	4402      	add	r2, r0
 8016014:	2b07      	cmp	r3, #7
 8016016:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801601a:	6060      	str	r0, [r4, #4]
 801601c:	dd08      	ble.n	8016030 <_vfprintf_r+0xda0>
 801601e:	aa22      	add	r2, sp, #136	; 0x88
 8016020:	4649      	mov	r1, r9
 8016022:	4650      	mov	r0, sl
 8016024:	f002 fe5d 	bl	8018ce2 <__sprint_r>
 8016028:	2800      	cmp	r0, #0
 801602a:	f040 8304 	bne.w	8016636 <_vfprintf_r+0x13a6>
 801602e:	a925      	add	r1, sp, #148	; 0x94
 8016030:	3e10      	subs	r6, #16
 8016032:	460c      	mov	r4, r1
 8016034:	e518      	b.n	8015a68 <_vfprintf_r+0x7d8>
 8016036:	460c      	mov	r4, r1
 8016038:	e530      	b.n	8015a9c <_vfprintf_r+0x80c>
 801603a:	bf00      	nop
 801603c:	0801c030 	.word	0x0801c030
 8016040:	0801c041 	.word	0x0801c041
 8016044:	9b07      	ldr	r3, [sp, #28]
 8016046:	2b65      	cmp	r3, #101	; 0x65
 8016048:	f340 8242 	ble.w	80164d0 <_vfprintf_r+0x1240>
 801604c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016050:	2200      	movs	r2, #0
 8016052:	2300      	movs	r3, #0
 8016054:	f7ea fd58 	bl	8000b08 <__aeabi_dcmpeq>
 8016058:	2800      	cmp	r0, #0
 801605a:	d068      	beq.n	801612e <_vfprintf_r+0xe9e>
 801605c:	4b6d      	ldr	r3, [pc, #436]	; (8016214 <_vfprintf_r+0xf84>)
 801605e:	6023      	str	r3, [r4, #0]
 8016060:	2301      	movs	r3, #1
 8016062:	441e      	add	r6, r3
 8016064:	6063      	str	r3, [r4, #4]
 8016066:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016068:	9624      	str	r6, [sp, #144]	; 0x90
 801606a:	3301      	adds	r3, #1
 801606c:	2b07      	cmp	r3, #7
 801606e:	9323      	str	r3, [sp, #140]	; 0x8c
 8016070:	dc37      	bgt.n	80160e2 <_vfprintf_r+0xe52>
 8016072:	3408      	adds	r4, #8
 8016074:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016076:	9a05      	ldr	r2, [sp, #20]
 8016078:	4293      	cmp	r3, r2
 801607a:	db03      	blt.n	8016084 <_vfprintf_r+0xdf4>
 801607c:	f01b 0f01 	tst.w	fp, #1
 8016080:	f43f ad2b 	beq.w	8015ada <_vfprintf_r+0x84a>
 8016084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016086:	6023      	str	r3, [r4, #0]
 8016088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801608a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801608c:	6063      	str	r3, [r4, #4]
 801608e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016090:	4413      	add	r3, r2
 8016092:	9324      	str	r3, [sp, #144]	; 0x90
 8016094:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016096:	3301      	adds	r3, #1
 8016098:	2b07      	cmp	r3, #7
 801609a:	9323      	str	r3, [sp, #140]	; 0x8c
 801609c:	dc2b      	bgt.n	80160f6 <_vfprintf_r+0xe66>
 801609e:	3408      	adds	r4, #8
 80160a0:	9b05      	ldr	r3, [sp, #20]
 80160a2:	1e5d      	subs	r5, r3, #1
 80160a4:	2d00      	cmp	r5, #0
 80160a6:	f77f ad18 	ble.w	8015ada <_vfprintf_r+0x84a>
 80160aa:	4e5b      	ldr	r6, [pc, #364]	; (8016218 <_vfprintf_r+0xf88>)
 80160ac:	2710      	movs	r7, #16
 80160ae:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80160b2:	2d10      	cmp	r5, #16
 80160b4:	f103 0301 	add.w	r3, r3, #1
 80160b8:	f104 0108 	add.w	r1, r4, #8
 80160bc:	6026      	str	r6, [r4, #0]
 80160be:	dc24      	bgt.n	801610a <_vfprintf_r+0xe7a>
 80160c0:	6065      	str	r5, [r4, #4]
 80160c2:	2b07      	cmp	r3, #7
 80160c4:	4415      	add	r5, r2
 80160c6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80160ca:	f340 8293 	ble.w	80165f4 <_vfprintf_r+0x1364>
 80160ce:	aa22      	add	r2, sp, #136	; 0x88
 80160d0:	4649      	mov	r1, r9
 80160d2:	4650      	mov	r0, sl
 80160d4:	f002 fe05 	bl	8018ce2 <__sprint_r>
 80160d8:	2800      	cmp	r0, #0
 80160da:	f040 82ac 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80160de:	ac25      	add	r4, sp, #148	; 0x94
 80160e0:	e4fb      	b.n	8015ada <_vfprintf_r+0x84a>
 80160e2:	aa22      	add	r2, sp, #136	; 0x88
 80160e4:	4649      	mov	r1, r9
 80160e6:	4650      	mov	r0, sl
 80160e8:	f002 fdfb 	bl	8018ce2 <__sprint_r>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	f040 82a2 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80160f2:	ac25      	add	r4, sp, #148	; 0x94
 80160f4:	e7be      	b.n	8016074 <_vfprintf_r+0xde4>
 80160f6:	aa22      	add	r2, sp, #136	; 0x88
 80160f8:	4649      	mov	r1, r9
 80160fa:	4650      	mov	r0, sl
 80160fc:	f002 fdf1 	bl	8018ce2 <__sprint_r>
 8016100:	2800      	cmp	r0, #0
 8016102:	f040 8298 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016106:	ac25      	add	r4, sp, #148	; 0x94
 8016108:	e7ca      	b.n	80160a0 <_vfprintf_r+0xe10>
 801610a:	3210      	adds	r2, #16
 801610c:	2b07      	cmp	r3, #7
 801610e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016112:	6067      	str	r7, [r4, #4]
 8016114:	dd08      	ble.n	8016128 <_vfprintf_r+0xe98>
 8016116:	aa22      	add	r2, sp, #136	; 0x88
 8016118:	4649      	mov	r1, r9
 801611a:	4650      	mov	r0, sl
 801611c:	f002 fde1 	bl	8018ce2 <__sprint_r>
 8016120:	2800      	cmp	r0, #0
 8016122:	f040 8288 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016126:	a925      	add	r1, sp, #148	; 0x94
 8016128:	3d10      	subs	r5, #16
 801612a:	460c      	mov	r4, r1
 801612c:	e7bf      	b.n	80160ae <_vfprintf_r+0xe1e>
 801612e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016130:	2b00      	cmp	r3, #0
 8016132:	dc73      	bgt.n	801621c <_vfprintf_r+0xf8c>
 8016134:	4b37      	ldr	r3, [pc, #220]	; (8016214 <_vfprintf_r+0xf84>)
 8016136:	6023      	str	r3, [r4, #0]
 8016138:	2301      	movs	r3, #1
 801613a:	441e      	add	r6, r3
 801613c:	6063      	str	r3, [r4, #4]
 801613e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016140:	9624      	str	r6, [sp, #144]	; 0x90
 8016142:	3301      	adds	r3, #1
 8016144:	2b07      	cmp	r3, #7
 8016146:	9323      	str	r3, [sp, #140]	; 0x8c
 8016148:	dc3d      	bgt.n	80161c6 <_vfprintf_r+0xf36>
 801614a:	3408      	adds	r4, #8
 801614c:	9905      	ldr	r1, [sp, #20]
 801614e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016152:	430a      	orrs	r2, r1
 8016154:	f00b 0101 	and.w	r1, fp, #1
 8016158:	430a      	orrs	r2, r1
 801615a:	f43f acbe 	beq.w	8015ada <_vfprintf_r+0x84a>
 801615e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016160:	6022      	str	r2, [r4, #0]
 8016162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016164:	6062      	str	r2, [r4, #4]
 8016166:	4413      	add	r3, r2
 8016168:	9324      	str	r3, [sp, #144]	; 0x90
 801616a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801616c:	3301      	adds	r3, #1
 801616e:	2b07      	cmp	r3, #7
 8016170:	9323      	str	r3, [sp, #140]	; 0x8c
 8016172:	dc32      	bgt.n	80161da <_vfprintf_r+0xf4a>
 8016174:	3408      	adds	r4, #8
 8016176:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016178:	2d00      	cmp	r5, #0
 801617a:	da1b      	bge.n	80161b4 <_vfprintf_r+0xf24>
 801617c:	4e26      	ldr	r6, [pc, #152]	; (8016218 <_vfprintf_r+0xf88>)
 801617e:	426d      	negs	r5, r5
 8016180:	4623      	mov	r3, r4
 8016182:	2710      	movs	r7, #16
 8016184:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8016188:	2d10      	cmp	r5, #16
 801618a:	f102 0201 	add.w	r2, r2, #1
 801618e:	f104 0408 	add.w	r4, r4, #8
 8016192:	601e      	str	r6, [r3, #0]
 8016194:	dc2b      	bgt.n	80161ee <_vfprintf_r+0xf5e>
 8016196:	605d      	str	r5, [r3, #4]
 8016198:	2a07      	cmp	r2, #7
 801619a:	440d      	add	r5, r1
 801619c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80161a0:	dd08      	ble.n	80161b4 <_vfprintf_r+0xf24>
 80161a2:	aa22      	add	r2, sp, #136	; 0x88
 80161a4:	4649      	mov	r1, r9
 80161a6:	4650      	mov	r0, sl
 80161a8:	f002 fd9b 	bl	8018ce2 <__sprint_r>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	f040 8242 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80161b2:	ac25      	add	r4, sp, #148	; 0x94
 80161b4:	9b03      	ldr	r3, [sp, #12]
 80161b6:	6023      	str	r3, [r4, #0]
 80161b8:	9b05      	ldr	r3, [sp, #20]
 80161ba:	9a05      	ldr	r2, [sp, #20]
 80161bc:	6063      	str	r3, [r4, #4]
 80161be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80161c0:	4413      	add	r3, r2
 80161c2:	9324      	str	r3, [sp, #144]	; 0x90
 80161c4:	e482      	b.n	8015acc <_vfprintf_r+0x83c>
 80161c6:	aa22      	add	r2, sp, #136	; 0x88
 80161c8:	4649      	mov	r1, r9
 80161ca:	4650      	mov	r0, sl
 80161cc:	f002 fd89 	bl	8018ce2 <__sprint_r>
 80161d0:	2800      	cmp	r0, #0
 80161d2:	f040 8230 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80161d6:	ac25      	add	r4, sp, #148	; 0x94
 80161d8:	e7b8      	b.n	801614c <_vfprintf_r+0xebc>
 80161da:	aa22      	add	r2, sp, #136	; 0x88
 80161dc:	4649      	mov	r1, r9
 80161de:	4650      	mov	r0, sl
 80161e0:	f002 fd7f 	bl	8018ce2 <__sprint_r>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	f040 8226 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80161ea:	ac25      	add	r4, sp, #148	; 0x94
 80161ec:	e7c3      	b.n	8016176 <_vfprintf_r+0xee6>
 80161ee:	3110      	adds	r1, #16
 80161f0:	2a07      	cmp	r2, #7
 80161f2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80161f6:	605f      	str	r7, [r3, #4]
 80161f8:	dd08      	ble.n	801620c <_vfprintf_r+0xf7c>
 80161fa:	aa22      	add	r2, sp, #136	; 0x88
 80161fc:	4649      	mov	r1, r9
 80161fe:	4650      	mov	r0, sl
 8016200:	f002 fd6f 	bl	8018ce2 <__sprint_r>
 8016204:	2800      	cmp	r0, #0
 8016206:	f040 8216 	bne.w	8016636 <_vfprintf_r+0x13a6>
 801620a:	ac25      	add	r4, sp, #148	; 0x94
 801620c:	3d10      	subs	r5, #16
 801620e:	4623      	mov	r3, r4
 8016210:	e7b8      	b.n	8016184 <_vfprintf_r+0xef4>
 8016212:	bf00      	nop
 8016214:	0801c052 	.word	0x0801c052
 8016218:	0801c0a9 	.word	0x0801c0a9
 801621c:	9b05      	ldr	r3, [sp, #20]
 801621e:	42ab      	cmp	r3, r5
 8016220:	bfa8      	it	ge
 8016222:	462b      	movge	r3, r5
 8016224:	2b00      	cmp	r3, #0
 8016226:	461f      	mov	r7, r3
 8016228:	dd0b      	ble.n	8016242 <_vfprintf_r+0xfb2>
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	e9c4 3700 	strd	r3, r7, [r4]
 8016230:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016232:	3301      	adds	r3, #1
 8016234:	443e      	add	r6, r7
 8016236:	2b07      	cmp	r3, #7
 8016238:	9624      	str	r6, [sp, #144]	; 0x90
 801623a:	9323      	str	r3, [sp, #140]	; 0x8c
 801623c:	f300 808c 	bgt.w	8016358 <_vfprintf_r+0x10c8>
 8016240:	3408      	adds	r4, #8
 8016242:	2f00      	cmp	r7, #0
 8016244:	bfac      	ite	ge
 8016246:	1bee      	subge	r6, r5, r7
 8016248:	462e      	movlt	r6, r5
 801624a:	2e00      	cmp	r6, #0
 801624c:	dd1c      	ble.n	8016288 <_vfprintf_r+0xff8>
 801624e:	4f9f      	ldr	r7, [pc, #636]	; (80164cc <_vfprintf_r+0x123c>)
 8016250:	f04f 0810 	mov.w	r8, #16
 8016254:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016258:	2e10      	cmp	r6, #16
 801625a:	f103 0301 	add.w	r3, r3, #1
 801625e:	f104 0108 	add.w	r1, r4, #8
 8016262:	6027      	str	r7, [r4, #0]
 8016264:	f300 8082 	bgt.w	801636c <_vfprintf_r+0x10dc>
 8016268:	6066      	str	r6, [r4, #4]
 801626a:	2b07      	cmp	r3, #7
 801626c:	4416      	add	r6, r2
 801626e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8016272:	f340 808e 	ble.w	8016392 <_vfprintf_r+0x1102>
 8016276:	aa22      	add	r2, sp, #136	; 0x88
 8016278:	4649      	mov	r1, r9
 801627a:	4650      	mov	r0, sl
 801627c:	f002 fd31 	bl	8018ce2 <__sprint_r>
 8016280:	2800      	cmp	r0, #0
 8016282:	f040 81d8 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016286:	ac25      	add	r4, sp, #148	; 0x94
 8016288:	9b03      	ldr	r3, [sp, #12]
 801628a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801628e:	441d      	add	r5, r3
 8016290:	d00d      	beq.n	80162ae <_vfprintf_r+0x101e>
 8016292:	4e8e      	ldr	r6, [pc, #568]	; (80164cc <_vfprintf_r+0x123c>)
 8016294:	2710      	movs	r7, #16
 8016296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016298:	2b00      	cmp	r3, #0
 801629a:	d17c      	bne.n	8016396 <_vfprintf_r+0x1106>
 801629c:	9b08      	ldr	r3, [sp, #32]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d17c      	bne.n	801639c <_vfprintf_r+0x110c>
 80162a2:	9b03      	ldr	r3, [sp, #12]
 80162a4:	9a05      	ldr	r2, [sp, #20]
 80162a6:	4413      	add	r3, r2
 80162a8:	429d      	cmp	r5, r3
 80162aa:	bf28      	it	cs
 80162ac:	461d      	movcs	r5, r3
 80162ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80162b0:	9a05      	ldr	r2, [sp, #20]
 80162b2:	4293      	cmp	r3, r2
 80162b4:	db02      	blt.n	80162bc <_vfprintf_r+0x102c>
 80162b6:	f01b 0f01 	tst.w	fp, #1
 80162ba:	d00e      	beq.n	80162da <_vfprintf_r+0x104a>
 80162bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162be:	6023      	str	r3, [r4, #0]
 80162c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162c4:	6063      	str	r3, [r4, #4]
 80162c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80162c8:	4413      	add	r3, r2
 80162ca:	9324      	str	r3, [sp, #144]	; 0x90
 80162cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80162ce:	3301      	adds	r3, #1
 80162d0:	2b07      	cmp	r3, #7
 80162d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80162d4:	f300 80e5 	bgt.w	80164a2 <_vfprintf_r+0x1212>
 80162d8:	3408      	adds	r4, #8
 80162da:	9905      	ldr	r1, [sp, #20]
 80162dc:	9b03      	ldr	r3, [sp, #12]
 80162de:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80162e0:	440b      	add	r3, r1
 80162e2:	1b8e      	subs	r6, r1, r6
 80162e4:	1b5a      	subs	r2, r3, r5
 80162e6:	4296      	cmp	r6, r2
 80162e8:	bfa8      	it	ge
 80162ea:	4616      	movge	r6, r2
 80162ec:	2e00      	cmp	r6, #0
 80162ee:	dd0b      	ble.n	8016308 <_vfprintf_r+0x1078>
 80162f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80162f2:	4433      	add	r3, r6
 80162f4:	9324      	str	r3, [sp, #144]	; 0x90
 80162f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80162f8:	3301      	adds	r3, #1
 80162fa:	2b07      	cmp	r3, #7
 80162fc:	e9c4 5600 	strd	r5, r6, [r4]
 8016300:	9323      	str	r3, [sp, #140]	; 0x8c
 8016302:	f300 80d8 	bgt.w	80164b6 <_vfprintf_r+0x1226>
 8016306:	3408      	adds	r4, #8
 8016308:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801630a:	9b05      	ldr	r3, [sp, #20]
 801630c:	2e00      	cmp	r6, #0
 801630e:	eba3 0505 	sub.w	r5, r3, r5
 8016312:	bfa8      	it	ge
 8016314:	1bad      	subge	r5, r5, r6
 8016316:	2d00      	cmp	r5, #0
 8016318:	f77f abdf 	ble.w	8015ada <_vfprintf_r+0x84a>
 801631c:	4e6b      	ldr	r6, [pc, #428]	; (80164cc <_vfprintf_r+0x123c>)
 801631e:	2710      	movs	r7, #16
 8016320:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016324:	2d10      	cmp	r5, #16
 8016326:	f103 0301 	add.w	r3, r3, #1
 801632a:	f104 0108 	add.w	r1, r4, #8
 801632e:	6026      	str	r6, [r4, #0]
 8016330:	f77f aec6 	ble.w	80160c0 <_vfprintf_r+0xe30>
 8016334:	3210      	adds	r2, #16
 8016336:	2b07      	cmp	r3, #7
 8016338:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801633c:	6067      	str	r7, [r4, #4]
 801633e:	dd08      	ble.n	8016352 <_vfprintf_r+0x10c2>
 8016340:	aa22      	add	r2, sp, #136	; 0x88
 8016342:	4649      	mov	r1, r9
 8016344:	4650      	mov	r0, sl
 8016346:	f002 fccc 	bl	8018ce2 <__sprint_r>
 801634a:	2800      	cmp	r0, #0
 801634c:	f040 8173 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016350:	a925      	add	r1, sp, #148	; 0x94
 8016352:	3d10      	subs	r5, #16
 8016354:	460c      	mov	r4, r1
 8016356:	e7e3      	b.n	8016320 <_vfprintf_r+0x1090>
 8016358:	aa22      	add	r2, sp, #136	; 0x88
 801635a:	4649      	mov	r1, r9
 801635c:	4650      	mov	r0, sl
 801635e:	f002 fcc0 	bl	8018ce2 <__sprint_r>
 8016362:	2800      	cmp	r0, #0
 8016364:	f040 8167 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016368:	ac25      	add	r4, sp, #148	; 0x94
 801636a:	e76a      	b.n	8016242 <_vfprintf_r+0xfb2>
 801636c:	3210      	adds	r2, #16
 801636e:	2b07      	cmp	r3, #7
 8016370:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016374:	f8c4 8004 	str.w	r8, [r4, #4]
 8016378:	dd08      	ble.n	801638c <_vfprintf_r+0x10fc>
 801637a:	aa22      	add	r2, sp, #136	; 0x88
 801637c:	4649      	mov	r1, r9
 801637e:	4650      	mov	r0, sl
 8016380:	f002 fcaf 	bl	8018ce2 <__sprint_r>
 8016384:	2800      	cmp	r0, #0
 8016386:	f040 8156 	bne.w	8016636 <_vfprintf_r+0x13a6>
 801638a:	a925      	add	r1, sp, #148	; 0x94
 801638c:	3e10      	subs	r6, #16
 801638e:	460c      	mov	r4, r1
 8016390:	e760      	b.n	8016254 <_vfprintf_r+0xfc4>
 8016392:	460c      	mov	r4, r1
 8016394:	e778      	b.n	8016288 <_vfprintf_r+0xff8>
 8016396:	9b08      	ldr	r3, [sp, #32]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d052      	beq.n	8016442 <_vfprintf_r+0x11b2>
 801639c:	9b08      	ldr	r3, [sp, #32]
 801639e:	3b01      	subs	r3, #1
 80163a0:	9308      	str	r3, [sp, #32]
 80163a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163a4:	6023      	str	r3, [r4, #0]
 80163a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80163a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163aa:	6063      	str	r3, [r4, #4]
 80163ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163ae:	4413      	add	r3, r2
 80163b0:	9324      	str	r3, [sp, #144]	; 0x90
 80163b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80163b4:	3301      	adds	r3, #1
 80163b6:	2b07      	cmp	r3, #7
 80163b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80163ba:	dc49      	bgt.n	8016450 <_vfprintf_r+0x11c0>
 80163bc:	3408      	adds	r4, #8
 80163be:	9b03      	ldr	r3, [sp, #12]
 80163c0:	9a05      	ldr	r2, [sp, #20]
 80163c2:	eb03 0802 	add.w	r8, r3, r2
 80163c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	eba8 0805 	sub.w	r8, r8, r5
 80163ce:	4598      	cmp	r8, r3
 80163d0:	bfa8      	it	ge
 80163d2:	4698      	movge	r8, r3
 80163d4:	f1b8 0f00 	cmp.w	r8, #0
 80163d8:	dd0a      	ble.n	80163f0 <_vfprintf_r+0x1160>
 80163da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80163dc:	4443      	add	r3, r8
 80163de:	9324      	str	r3, [sp, #144]	; 0x90
 80163e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80163e2:	3301      	adds	r3, #1
 80163e4:	2b07      	cmp	r3, #7
 80163e6:	e9c4 5800 	strd	r5, r8, [r4]
 80163ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80163ec:	dc3a      	bgt.n	8016464 <_vfprintf_r+0x11d4>
 80163ee:	3408      	adds	r4, #8
 80163f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	f1b8 0f00 	cmp.w	r8, #0
 80163f8:	bfac      	ite	ge
 80163fa:	eba3 0808 	subge.w	r8, r3, r8
 80163fe:	4698      	movlt	r8, r3
 8016400:	f1b8 0f00 	cmp.w	r8, #0
 8016404:	dd19      	ble.n	801643a <_vfprintf_r+0x11aa>
 8016406:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801640a:	f1b8 0f10 	cmp.w	r8, #16
 801640e:	f102 0201 	add.w	r2, r2, #1
 8016412:	f104 0108 	add.w	r1, r4, #8
 8016416:	6026      	str	r6, [r4, #0]
 8016418:	dc2e      	bgt.n	8016478 <_vfprintf_r+0x11e8>
 801641a:	4443      	add	r3, r8
 801641c:	2a07      	cmp	r2, #7
 801641e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8016422:	f8c4 8004 	str.w	r8, [r4, #4]
 8016426:	dd3a      	ble.n	801649e <_vfprintf_r+0x120e>
 8016428:	aa22      	add	r2, sp, #136	; 0x88
 801642a:	4649      	mov	r1, r9
 801642c:	4650      	mov	r0, sl
 801642e:	f002 fc58 	bl	8018ce2 <__sprint_r>
 8016432:	2800      	cmp	r0, #0
 8016434:	f040 80ff 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016438:	ac25      	add	r4, sp, #148	; 0x94
 801643a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	441d      	add	r5, r3
 8016440:	e729      	b.n	8016296 <_vfprintf_r+0x1006>
 8016442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016444:	3b01      	subs	r3, #1
 8016446:	930a      	str	r3, [sp, #40]	; 0x28
 8016448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801644a:	3b01      	subs	r3, #1
 801644c:	9309      	str	r3, [sp, #36]	; 0x24
 801644e:	e7a8      	b.n	80163a2 <_vfprintf_r+0x1112>
 8016450:	aa22      	add	r2, sp, #136	; 0x88
 8016452:	4649      	mov	r1, r9
 8016454:	4650      	mov	r0, sl
 8016456:	f002 fc44 	bl	8018ce2 <__sprint_r>
 801645a:	2800      	cmp	r0, #0
 801645c:	f040 80eb 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016460:	ac25      	add	r4, sp, #148	; 0x94
 8016462:	e7ac      	b.n	80163be <_vfprintf_r+0x112e>
 8016464:	aa22      	add	r2, sp, #136	; 0x88
 8016466:	4649      	mov	r1, r9
 8016468:	4650      	mov	r0, sl
 801646a:	f002 fc3a 	bl	8018ce2 <__sprint_r>
 801646e:	2800      	cmp	r0, #0
 8016470:	f040 80e1 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016474:	ac25      	add	r4, sp, #148	; 0x94
 8016476:	e7bb      	b.n	80163f0 <_vfprintf_r+0x1160>
 8016478:	3310      	adds	r3, #16
 801647a:	2a07      	cmp	r2, #7
 801647c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8016480:	6067      	str	r7, [r4, #4]
 8016482:	dd08      	ble.n	8016496 <_vfprintf_r+0x1206>
 8016484:	aa22      	add	r2, sp, #136	; 0x88
 8016486:	4649      	mov	r1, r9
 8016488:	4650      	mov	r0, sl
 801648a:	f002 fc2a 	bl	8018ce2 <__sprint_r>
 801648e:	2800      	cmp	r0, #0
 8016490:	f040 80d1 	bne.w	8016636 <_vfprintf_r+0x13a6>
 8016494:	a925      	add	r1, sp, #148	; 0x94
 8016496:	f1a8 0810 	sub.w	r8, r8, #16
 801649a:	460c      	mov	r4, r1
 801649c:	e7b3      	b.n	8016406 <_vfprintf_r+0x1176>
 801649e:	460c      	mov	r4, r1
 80164a0:	e7cb      	b.n	801643a <_vfprintf_r+0x11aa>
 80164a2:	aa22      	add	r2, sp, #136	; 0x88
 80164a4:	4649      	mov	r1, r9
 80164a6:	4650      	mov	r0, sl
 80164a8:	f002 fc1b 	bl	8018ce2 <__sprint_r>
 80164ac:	2800      	cmp	r0, #0
 80164ae:	f040 80c2 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80164b2:	ac25      	add	r4, sp, #148	; 0x94
 80164b4:	e711      	b.n	80162da <_vfprintf_r+0x104a>
 80164b6:	aa22      	add	r2, sp, #136	; 0x88
 80164b8:	4649      	mov	r1, r9
 80164ba:	4650      	mov	r0, sl
 80164bc:	f002 fc11 	bl	8018ce2 <__sprint_r>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	f040 80b8 	bne.w	8016636 <_vfprintf_r+0x13a6>
 80164c6:	ac25      	add	r4, sp, #148	; 0x94
 80164c8:	e71e      	b.n	8016308 <_vfprintf_r+0x1078>
 80164ca:	bf00      	nop
 80164cc:	0801c0a9 	.word	0x0801c0a9
 80164d0:	9a05      	ldr	r2, [sp, #20]
 80164d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80164d4:	2a01      	cmp	r2, #1
 80164d6:	9a03      	ldr	r2, [sp, #12]
 80164d8:	6022      	str	r2, [r4, #0]
 80164da:	f106 0601 	add.w	r6, r6, #1
 80164de:	f103 0301 	add.w	r3, r3, #1
 80164e2:	f04f 0201 	mov.w	r2, #1
 80164e6:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80164ea:	f104 0508 	add.w	r5, r4, #8
 80164ee:	6062      	str	r2, [r4, #4]
 80164f0:	dc02      	bgt.n	80164f8 <_vfprintf_r+0x1268>
 80164f2:	f01b 0f01 	tst.w	fp, #1
 80164f6:	d078      	beq.n	80165ea <_vfprintf_r+0x135a>
 80164f8:	2b07      	cmp	r3, #7
 80164fa:	dd08      	ble.n	801650e <_vfprintf_r+0x127e>
 80164fc:	aa22      	add	r2, sp, #136	; 0x88
 80164fe:	4649      	mov	r1, r9
 8016500:	4650      	mov	r0, sl
 8016502:	f002 fbee 	bl	8018ce2 <__sprint_r>
 8016506:	2800      	cmp	r0, #0
 8016508:	f040 8095 	bne.w	8016636 <_vfprintf_r+0x13a6>
 801650c:	ad25      	add	r5, sp, #148	; 0x94
 801650e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016510:	602b      	str	r3, [r5, #0]
 8016512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016516:	606b      	str	r3, [r5, #4]
 8016518:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801651a:	4413      	add	r3, r2
 801651c:	9324      	str	r3, [sp, #144]	; 0x90
 801651e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016520:	3301      	adds	r3, #1
 8016522:	2b07      	cmp	r3, #7
 8016524:	9323      	str	r3, [sp, #140]	; 0x8c
 8016526:	dc32      	bgt.n	801658e <_vfprintf_r+0x12fe>
 8016528:	3508      	adds	r5, #8
 801652a:	9b05      	ldr	r3, [sp, #20]
 801652c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016530:	1e5c      	subs	r4, r3, #1
 8016532:	2200      	movs	r2, #0
 8016534:	2300      	movs	r3, #0
 8016536:	f7ea fae7 	bl	8000b08 <__aeabi_dcmpeq>
 801653a:	2800      	cmp	r0, #0
 801653c:	d130      	bne.n	80165a0 <_vfprintf_r+0x1310>
 801653e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016540:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016542:	9803      	ldr	r0, [sp, #12]
 8016544:	9a05      	ldr	r2, [sp, #20]
 8016546:	3101      	adds	r1, #1
 8016548:	3b01      	subs	r3, #1
 801654a:	3001      	adds	r0, #1
 801654c:	4413      	add	r3, r2
 801654e:	2907      	cmp	r1, #7
 8016550:	e9c5 0400 	strd	r0, r4, [r5]
 8016554:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8016558:	dd4a      	ble.n	80165f0 <_vfprintf_r+0x1360>
 801655a:	aa22      	add	r2, sp, #136	; 0x88
 801655c:	4649      	mov	r1, r9
 801655e:	4650      	mov	r0, sl
 8016560:	f002 fbbf 	bl	8018ce2 <__sprint_r>
 8016564:	2800      	cmp	r0, #0
 8016566:	d166      	bne.n	8016636 <_vfprintf_r+0x13a6>
 8016568:	ad25      	add	r5, sp, #148	; 0x94
 801656a:	ab1e      	add	r3, sp, #120	; 0x78
 801656c:	602b      	str	r3, [r5, #0]
 801656e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016570:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016572:	606b      	str	r3, [r5, #4]
 8016574:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016576:	4413      	add	r3, r2
 8016578:	9324      	str	r3, [sp, #144]	; 0x90
 801657a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801657c:	3301      	adds	r3, #1
 801657e:	2b07      	cmp	r3, #7
 8016580:	9323      	str	r3, [sp, #140]	; 0x8c
 8016582:	f73f ada4 	bgt.w	80160ce <_vfprintf_r+0xe3e>
 8016586:	f105 0408 	add.w	r4, r5, #8
 801658a:	f7ff baa6 	b.w	8015ada <_vfprintf_r+0x84a>
 801658e:	aa22      	add	r2, sp, #136	; 0x88
 8016590:	4649      	mov	r1, r9
 8016592:	4650      	mov	r0, sl
 8016594:	f002 fba5 	bl	8018ce2 <__sprint_r>
 8016598:	2800      	cmp	r0, #0
 801659a:	d14c      	bne.n	8016636 <_vfprintf_r+0x13a6>
 801659c:	ad25      	add	r5, sp, #148	; 0x94
 801659e:	e7c4      	b.n	801652a <_vfprintf_r+0x129a>
 80165a0:	2c00      	cmp	r4, #0
 80165a2:	dde2      	ble.n	801656a <_vfprintf_r+0x12da>
 80165a4:	4e53      	ldr	r6, [pc, #332]	; (80166f4 <_vfprintf_r+0x1464>)
 80165a6:	2710      	movs	r7, #16
 80165a8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80165ac:	2c10      	cmp	r4, #16
 80165ae:	f103 0301 	add.w	r3, r3, #1
 80165b2:	f105 0108 	add.w	r1, r5, #8
 80165b6:	602e      	str	r6, [r5, #0]
 80165b8:	dc07      	bgt.n	80165ca <_vfprintf_r+0x133a>
 80165ba:	606c      	str	r4, [r5, #4]
 80165bc:	2b07      	cmp	r3, #7
 80165be:	4414      	add	r4, r2
 80165c0:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80165c4:	dcc9      	bgt.n	801655a <_vfprintf_r+0x12ca>
 80165c6:	460d      	mov	r5, r1
 80165c8:	e7cf      	b.n	801656a <_vfprintf_r+0x12da>
 80165ca:	3210      	adds	r2, #16
 80165cc:	2b07      	cmp	r3, #7
 80165ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80165d2:	606f      	str	r7, [r5, #4]
 80165d4:	dd06      	ble.n	80165e4 <_vfprintf_r+0x1354>
 80165d6:	aa22      	add	r2, sp, #136	; 0x88
 80165d8:	4649      	mov	r1, r9
 80165da:	4650      	mov	r0, sl
 80165dc:	f002 fb81 	bl	8018ce2 <__sprint_r>
 80165e0:	bb48      	cbnz	r0, 8016636 <_vfprintf_r+0x13a6>
 80165e2:	a925      	add	r1, sp, #148	; 0x94
 80165e4:	3c10      	subs	r4, #16
 80165e6:	460d      	mov	r5, r1
 80165e8:	e7de      	b.n	80165a8 <_vfprintf_r+0x1318>
 80165ea:	2b07      	cmp	r3, #7
 80165ec:	ddbd      	ble.n	801656a <_vfprintf_r+0x12da>
 80165ee:	e7b4      	b.n	801655a <_vfprintf_r+0x12ca>
 80165f0:	3508      	adds	r5, #8
 80165f2:	e7ba      	b.n	801656a <_vfprintf_r+0x12da>
 80165f4:	460c      	mov	r4, r1
 80165f6:	f7ff ba70 	b.w	8015ada <_vfprintf_r+0x84a>
 80165fa:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80165fe:	1a9d      	subs	r5, r3, r2
 8016600:	2d00      	cmp	r5, #0
 8016602:	f77f aa6e 	ble.w	8015ae2 <_vfprintf_r+0x852>
 8016606:	4e3c      	ldr	r6, [pc, #240]	; (80166f8 <_vfprintf_r+0x1468>)
 8016608:	2710      	movs	r7, #16
 801660a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801660e:	2d10      	cmp	r5, #16
 8016610:	f103 0301 	add.w	r3, r3, #1
 8016614:	6026      	str	r6, [r4, #0]
 8016616:	dc18      	bgt.n	801664a <_vfprintf_r+0x13ba>
 8016618:	6065      	str	r5, [r4, #4]
 801661a:	2b07      	cmp	r3, #7
 801661c:	4415      	add	r5, r2
 801661e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8016622:	f77f aa5e 	ble.w	8015ae2 <_vfprintf_r+0x852>
 8016626:	aa22      	add	r2, sp, #136	; 0x88
 8016628:	4649      	mov	r1, r9
 801662a:	4650      	mov	r0, sl
 801662c:	f002 fb59 	bl	8018ce2 <__sprint_r>
 8016630:	2800      	cmp	r0, #0
 8016632:	f43f aa56 	beq.w	8015ae2 <_vfprintf_r+0x852>
 8016636:	9b04      	ldr	r3, [sp, #16]
 8016638:	2b00      	cmp	r3, #0
 801663a:	f43f a872 	beq.w	8015722 <_vfprintf_r+0x492>
 801663e:	4619      	mov	r1, r3
 8016640:	4650      	mov	r0, sl
 8016642:	f001 f8f5 	bl	8017830 <_free_r>
 8016646:	f7ff b86c 	b.w	8015722 <_vfprintf_r+0x492>
 801664a:	3210      	adds	r2, #16
 801664c:	2b07      	cmp	r3, #7
 801664e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016652:	6067      	str	r7, [r4, #4]
 8016654:	dc02      	bgt.n	801665c <_vfprintf_r+0x13cc>
 8016656:	3408      	adds	r4, #8
 8016658:	3d10      	subs	r5, #16
 801665a:	e7d6      	b.n	801660a <_vfprintf_r+0x137a>
 801665c:	aa22      	add	r2, sp, #136	; 0x88
 801665e:	4649      	mov	r1, r9
 8016660:	4650      	mov	r0, sl
 8016662:	f002 fb3e 	bl	8018ce2 <__sprint_r>
 8016666:	2800      	cmp	r0, #0
 8016668:	d1e5      	bne.n	8016636 <_vfprintf_r+0x13a6>
 801666a:	ac25      	add	r4, sp, #148	; 0x94
 801666c:	e7f4      	b.n	8016658 <_vfprintf_r+0x13c8>
 801666e:	9904      	ldr	r1, [sp, #16]
 8016670:	4650      	mov	r0, sl
 8016672:	f001 f8dd 	bl	8017830 <_free_r>
 8016676:	f7ff ba4c 	b.w	8015b12 <_vfprintf_r+0x882>
 801667a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801667c:	b91b      	cbnz	r3, 8016686 <_vfprintf_r+0x13f6>
 801667e:	2300      	movs	r3, #0
 8016680:	9323      	str	r3, [sp, #140]	; 0x8c
 8016682:	f7ff b84e 	b.w	8015722 <_vfprintf_r+0x492>
 8016686:	aa22      	add	r2, sp, #136	; 0x88
 8016688:	4649      	mov	r1, r9
 801668a:	4650      	mov	r0, sl
 801668c:	f002 fb29 	bl	8018ce2 <__sprint_r>
 8016690:	2800      	cmp	r0, #0
 8016692:	d0f4      	beq.n	801667e <_vfprintf_r+0x13ee>
 8016694:	f7ff b845 	b.w	8015722 <_vfprintf_r+0x492>
 8016698:	ea56 0207 	orrs.w	r2, r6, r7
 801669c:	f8cd b010 	str.w	fp, [sp, #16]
 80166a0:	f43f ab5c 	beq.w	8015d5c <_vfprintf_r+0xacc>
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	f43f abf4 	beq.w	8015e92 <_vfprintf_r+0xc02>
 80166aa:	2b02      	cmp	r3, #2
 80166ac:	ab4e      	add	r3, sp, #312	; 0x138
 80166ae:	9303      	str	r3, [sp, #12]
 80166b0:	f43f ac46 	beq.w	8015f40 <_vfprintf_r+0xcb0>
 80166b4:	9903      	ldr	r1, [sp, #12]
 80166b6:	f006 0307 	and.w	r3, r6, #7
 80166ba:	460a      	mov	r2, r1
 80166bc:	3330      	adds	r3, #48	; 0x30
 80166be:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80166c2:	9203      	str	r2, [sp, #12]
 80166c4:	08f2      	lsrs	r2, r6, #3
 80166c6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80166ca:	08f8      	lsrs	r0, r7, #3
 80166cc:	4616      	mov	r6, r2
 80166ce:	4607      	mov	r7, r0
 80166d0:	ea56 0207 	orrs.w	r2, r6, r7
 80166d4:	d1ee      	bne.n	80166b4 <_vfprintf_r+0x1424>
 80166d6:	9a04      	ldr	r2, [sp, #16]
 80166d8:	07d0      	lsls	r0, r2, #31
 80166da:	f57f ac20 	bpl.w	8015f1e <_vfprintf_r+0xc8e>
 80166de:	2b30      	cmp	r3, #48	; 0x30
 80166e0:	f43f ac1d 	beq.w	8015f1e <_vfprintf_r+0xc8e>
 80166e4:	9a03      	ldr	r2, [sp, #12]
 80166e6:	2330      	movs	r3, #48	; 0x30
 80166e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80166ec:	1e8b      	subs	r3, r1, #2
 80166ee:	9303      	str	r3, [sp, #12]
 80166f0:	e415      	b.n	8015f1e <_vfprintf_r+0xc8e>
 80166f2:	bf00      	nop
 80166f4:	0801c0a9 	.word	0x0801c0a9
 80166f8:	0801c099 	.word	0x0801c099

080166fc <__sbprintf>:
 80166fc:	b570      	push	{r4, r5, r6, lr}
 80166fe:	460c      	mov	r4, r1
 8016700:	8989      	ldrh	r1, [r1, #12]
 8016702:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8016706:	f021 0102 	bic.w	r1, r1, #2
 801670a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801670e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8016710:	911b      	str	r1, [sp, #108]	; 0x6c
 8016712:	89e1      	ldrh	r1, [r4, #14]
 8016714:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016718:	69e1      	ldr	r1, [r4, #28]
 801671a:	9109      	str	r1, [sp, #36]	; 0x24
 801671c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801671e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016720:	a91c      	add	r1, sp, #112	; 0x70
 8016722:	9102      	str	r1, [sp, #8]
 8016724:	9106      	str	r1, [sp, #24]
 8016726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801672a:	4606      	mov	r6, r0
 801672c:	9104      	str	r1, [sp, #16]
 801672e:	9107      	str	r1, [sp, #28]
 8016730:	a818      	add	r0, sp, #96	; 0x60
 8016732:	2100      	movs	r1, #0
 8016734:	e9cd 3200 	strd	r3, r2, [sp]
 8016738:	9108      	str	r1, [sp, #32]
 801673a:	f001 fcd1 	bl	80180e0 <__retarget_lock_init_recursive>
 801673e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016742:	a902      	add	r1, sp, #8
 8016744:	4630      	mov	r0, r6
 8016746:	f7fe fda3 	bl	8015290 <_vfprintf_r>
 801674a:	1e05      	subs	r5, r0, #0
 801674c:	db07      	blt.n	801675e <__sbprintf+0x62>
 801674e:	a902      	add	r1, sp, #8
 8016750:	4630      	mov	r0, r6
 8016752:	f000 ff71 	bl	8017638 <_fflush_r>
 8016756:	2800      	cmp	r0, #0
 8016758:	bf18      	it	ne
 801675a:	f04f 35ff 	movne.w	r5, #4294967295
 801675e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016762:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016764:	065b      	lsls	r3, r3, #25
 8016766:	bf42      	ittt	mi
 8016768:	89a3      	ldrhmi	r3, [r4, #12]
 801676a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801676e:	81a3      	strhmi	r3, [r4, #12]
 8016770:	f001 fcb7 	bl	80180e2 <__retarget_lock_close_recursive>
 8016774:	4628      	mov	r0, r5
 8016776:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801677a:	bd70      	pop	{r4, r5, r6, pc}

0801677c <__swsetup_r>:
 801677c:	b538      	push	{r3, r4, r5, lr}
 801677e:	4b2a      	ldr	r3, [pc, #168]	; (8016828 <__swsetup_r+0xac>)
 8016780:	4605      	mov	r5, r0
 8016782:	6818      	ldr	r0, [r3, #0]
 8016784:	460c      	mov	r4, r1
 8016786:	b118      	cbz	r0, 8016790 <__swsetup_r+0x14>
 8016788:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801678a:	b90b      	cbnz	r3, 8016790 <__swsetup_r+0x14>
 801678c:	f000 ffc0 	bl	8017710 <__sinit>
 8016790:	89a3      	ldrh	r3, [r4, #12]
 8016792:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016796:	0718      	lsls	r0, r3, #28
 8016798:	d422      	bmi.n	80167e0 <__swsetup_r+0x64>
 801679a:	06d9      	lsls	r1, r3, #27
 801679c:	d407      	bmi.n	80167ae <__swsetup_r+0x32>
 801679e:	2309      	movs	r3, #9
 80167a0:	602b      	str	r3, [r5, #0]
 80167a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80167a6:	81a3      	strh	r3, [r4, #12]
 80167a8:	f04f 30ff 	mov.w	r0, #4294967295
 80167ac:	e034      	b.n	8016818 <__swsetup_r+0x9c>
 80167ae:	0758      	lsls	r0, r3, #29
 80167b0:	d512      	bpl.n	80167d8 <__swsetup_r+0x5c>
 80167b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80167b4:	b141      	cbz	r1, 80167c8 <__swsetup_r+0x4c>
 80167b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80167ba:	4299      	cmp	r1, r3
 80167bc:	d002      	beq.n	80167c4 <__swsetup_r+0x48>
 80167be:	4628      	mov	r0, r5
 80167c0:	f001 f836 	bl	8017830 <_free_r>
 80167c4:	2300      	movs	r3, #0
 80167c6:	6323      	str	r3, [r4, #48]	; 0x30
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80167ce:	81a3      	strh	r3, [r4, #12]
 80167d0:	2300      	movs	r3, #0
 80167d2:	6063      	str	r3, [r4, #4]
 80167d4:	6923      	ldr	r3, [r4, #16]
 80167d6:	6023      	str	r3, [r4, #0]
 80167d8:	89a3      	ldrh	r3, [r4, #12]
 80167da:	f043 0308 	orr.w	r3, r3, #8
 80167de:	81a3      	strh	r3, [r4, #12]
 80167e0:	6923      	ldr	r3, [r4, #16]
 80167e2:	b94b      	cbnz	r3, 80167f8 <__swsetup_r+0x7c>
 80167e4:	89a3      	ldrh	r3, [r4, #12]
 80167e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80167ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167ee:	d003      	beq.n	80167f8 <__swsetup_r+0x7c>
 80167f0:	4621      	mov	r1, r4
 80167f2:	4628      	mov	r0, r5
 80167f4:	f001 fca4 	bl	8018140 <__smakebuf_r>
 80167f8:	89a0      	ldrh	r0, [r4, #12]
 80167fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167fe:	f010 0301 	ands.w	r3, r0, #1
 8016802:	d00a      	beq.n	801681a <__swsetup_r+0x9e>
 8016804:	2300      	movs	r3, #0
 8016806:	60a3      	str	r3, [r4, #8]
 8016808:	6963      	ldr	r3, [r4, #20]
 801680a:	425b      	negs	r3, r3
 801680c:	61a3      	str	r3, [r4, #24]
 801680e:	6923      	ldr	r3, [r4, #16]
 8016810:	b943      	cbnz	r3, 8016824 <__swsetup_r+0xa8>
 8016812:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016816:	d1c4      	bne.n	80167a2 <__swsetup_r+0x26>
 8016818:	bd38      	pop	{r3, r4, r5, pc}
 801681a:	0781      	lsls	r1, r0, #30
 801681c:	bf58      	it	pl
 801681e:	6963      	ldrpl	r3, [r4, #20]
 8016820:	60a3      	str	r3, [r4, #8]
 8016822:	e7f4      	b.n	801680e <__swsetup_r+0x92>
 8016824:	2000      	movs	r0, #0
 8016826:	e7f7      	b.n	8016818 <__swsetup_r+0x9c>
 8016828:	200029c4 	.word	0x200029c4

0801682c <register_fini>:
 801682c:	4b02      	ldr	r3, [pc, #8]	; (8016838 <register_fini+0xc>)
 801682e:	b113      	cbz	r3, 8016836 <register_fini+0xa>
 8016830:	4802      	ldr	r0, [pc, #8]	; (801683c <register_fini+0x10>)
 8016832:	f000 b805 	b.w	8016840 <atexit>
 8016836:	4770      	bx	lr
 8016838:	00000000 	.word	0x00000000
 801683c:	08017761 	.word	0x08017761

08016840 <atexit>:
 8016840:	2300      	movs	r3, #0
 8016842:	4601      	mov	r1, r0
 8016844:	461a      	mov	r2, r3
 8016846:	4618      	mov	r0, r3
 8016848:	f002 bf66 	b.w	8019718 <__register_exitproc>

0801684c <quorem>:
 801684c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016850:	6903      	ldr	r3, [r0, #16]
 8016852:	690c      	ldr	r4, [r1, #16]
 8016854:	42a3      	cmp	r3, r4
 8016856:	4607      	mov	r7, r0
 8016858:	f2c0 8081 	blt.w	801695e <quorem+0x112>
 801685c:	3c01      	subs	r4, #1
 801685e:	f101 0814 	add.w	r8, r1, #20
 8016862:	f100 0514 	add.w	r5, r0, #20
 8016866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801686a:	9301      	str	r3, [sp, #4]
 801686c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016874:	3301      	adds	r3, #1
 8016876:	429a      	cmp	r2, r3
 8016878:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801687c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016880:	fbb2 f6f3 	udiv	r6, r2, r3
 8016884:	d331      	bcc.n	80168ea <quorem+0x9e>
 8016886:	f04f 0e00 	mov.w	lr, #0
 801688a:	4640      	mov	r0, r8
 801688c:	46ac      	mov	ip, r5
 801688e:	46f2      	mov	sl, lr
 8016890:	f850 2b04 	ldr.w	r2, [r0], #4
 8016894:	b293      	uxth	r3, r2
 8016896:	fb06 e303 	mla	r3, r6, r3, lr
 801689a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801689e:	b29b      	uxth	r3, r3
 80168a0:	ebaa 0303 	sub.w	r3, sl, r3
 80168a4:	0c12      	lsrs	r2, r2, #16
 80168a6:	f8dc a000 	ldr.w	sl, [ip]
 80168aa:	fb06 e202 	mla	r2, r6, r2, lr
 80168ae:	fa13 f38a 	uxtah	r3, r3, sl
 80168b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80168b6:	fa1f fa82 	uxth.w	sl, r2
 80168ba:	f8dc 2000 	ldr.w	r2, [ip]
 80168be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80168c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80168cc:	4581      	cmp	r9, r0
 80168ce:	f84c 3b04 	str.w	r3, [ip], #4
 80168d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80168d6:	d2db      	bcs.n	8016890 <quorem+0x44>
 80168d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80168dc:	b92b      	cbnz	r3, 80168ea <quorem+0x9e>
 80168de:	9b01      	ldr	r3, [sp, #4]
 80168e0:	3b04      	subs	r3, #4
 80168e2:	429d      	cmp	r5, r3
 80168e4:	461a      	mov	r2, r3
 80168e6:	d32e      	bcc.n	8016946 <quorem+0xfa>
 80168e8:	613c      	str	r4, [r7, #16]
 80168ea:	4638      	mov	r0, r7
 80168ec:	f001 fef4 	bl	80186d8 <__mcmp>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	db24      	blt.n	801693e <quorem+0xf2>
 80168f4:	3601      	adds	r6, #1
 80168f6:	4628      	mov	r0, r5
 80168f8:	f04f 0c00 	mov.w	ip, #0
 80168fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8016900:	f8d0 e000 	ldr.w	lr, [r0]
 8016904:	b293      	uxth	r3, r2
 8016906:	ebac 0303 	sub.w	r3, ip, r3
 801690a:	0c12      	lsrs	r2, r2, #16
 801690c:	fa13 f38e 	uxtah	r3, r3, lr
 8016910:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016918:	b29b      	uxth	r3, r3
 801691a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801691e:	45c1      	cmp	r9, r8
 8016920:	f840 3b04 	str.w	r3, [r0], #4
 8016924:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016928:	d2e8      	bcs.n	80168fc <quorem+0xb0>
 801692a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801692e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016932:	b922      	cbnz	r2, 801693e <quorem+0xf2>
 8016934:	3b04      	subs	r3, #4
 8016936:	429d      	cmp	r5, r3
 8016938:	461a      	mov	r2, r3
 801693a:	d30a      	bcc.n	8016952 <quorem+0x106>
 801693c:	613c      	str	r4, [r7, #16]
 801693e:	4630      	mov	r0, r6
 8016940:	b003      	add	sp, #12
 8016942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016946:	6812      	ldr	r2, [r2, #0]
 8016948:	3b04      	subs	r3, #4
 801694a:	2a00      	cmp	r2, #0
 801694c:	d1cc      	bne.n	80168e8 <quorem+0x9c>
 801694e:	3c01      	subs	r4, #1
 8016950:	e7c7      	b.n	80168e2 <quorem+0x96>
 8016952:	6812      	ldr	r2, [r2, #0]
 8016954:	3b04      	subs	r3, #4
 8016956:	2a00      	cmp	r2, #0
 8016958:	d1f0      	bne.n	801693c <quorem+0xf0>
 801695a:	3c01      	subs	r4, #1
 801695c:	e7eb      	b.n	8016936 <quorem+0xea>
 801695e:	2000      	movs	r0, #0
 8016960:	e7ee      	b.n	8016940 <quorem+0xf4>
 8016962:	0000      	movs	r0, r0
 8016964:	0000      	movs	r0, r0
	...

08016968 <_dtoa_r>:
 8016968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801696c:	ed2d 8b02 	vpush	{d8}
 8016970:	b095      	sub	sp, #84	; 0x54
 8016972:	ec57 6b10 	vmov	r6, r7, d0
 8016976:	9105      	str	r1, [sp, #20]
 8016978:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801697a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801697c:	9209      	str	r2, [sp, #36]	; 0x24
 801697e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8016982:	4604      	mov	r4, r0
 8016984:	930f      	str	r3, [sp, #60]	; 0x3c
 8016986:	b141      	cbz	r1, 801699a <_dtoa_r+0x32>
 8016988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801698a:	604a      	str	r2, [r1, #4]
 801698c:	2301      	movs	r3, #1
 801698e:	4093      	lsls	r3, r2
 8016990:	608b      	str	r3, [r1, #8]
 8016992:	f001 fc4c 	bl	801822e <_Bfree>
 8016996:	2300      	movs	r3, #0
 8016998:	6423      	str	r3, [r4, #64]	; 0x40
 801699a:	1e3b      	subs	r3, r7, #0
 801699c:	bfb9      	ittee	lt
 801699e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80169a2:	9303      	strlt	r3, [sp, #12]
 80169a4:	2300      	movge	r3, #0
 80169a6:	602b      	strge	r3, [r5, #0]
 80169a8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80169ac:	4ba2      	ldr	r3, [pc, #648]	; (8016c38 <_dtoa_r+0x2d0>)
 80169ae:	bfbc      	itt	lt
 80169b0:	2201      	movlt	r2, #1
 80169b2:	602a      	strlt	r2, [r5, #0]
 80169b4:	ea33 0309 	bics.w	r3, r3, r9
 80169b8:	d11b      	bne.n	80169f2 <_dtoa_r+0x8a>
 80169ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80169c0:	6013      	str	r3, [r2, #0]
 80169c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80169c6:	4333      	orrs	r3, r6
 80169c8:	f000 8578 	beq.w	80174bc <_dtoa_r+0xb54>
 80169cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169ce:	b90b      	cbnz	r3, 80169d4 <_dtoa_r+0x6c>
 80169d0:	4b9a      	ldr	r3, [pc, #616]	; (8016c3c <_dtoa_r+0x2d4>)
 80169d2:	e024      	b.n	8016a1e <_dtoa_r+0xb6>
 80169d4:	4b99      	ldr	r3, [pc, #612]	; (8016c3c <_dtoa_r+0x2d4>)
 80169d6:	9300      	str	r3, [sp, #0]
 80169d8:	3303      	adds	r3, #3
 80169da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	9800      	ldr	r0, [sp, #0]
 80169e0:	b015      	add	sp, #84	; 0x54
 80169e2:	ecbd 8b02 	vpop	{d8}
 80169e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ea:	4b95      	ldr	r3, [pc, #596]	; (8016c40 <_dtoa_r+0x2d8>)
 80169ec:	9300      	str	r3, [sp, #0]
 80169ee:	3308      	adds	r3, #8
 80169f0:	e7f3      	b.n	80169da <_dtoa_r+0x72>
 80169f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80169f6:	2200      	movs	r2, #0
 80169f8:	ec51 0b17 	vmov	r0, r1, d7
 80169fc:	2300      	movs	r3, #0
 80169fe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8016a02:	f7ea f881 	bl	8000b08 <__aeabi_dcmpeq>
 8016a06:	4680      	mov	r8, r0
 8016a08:	b158      	cbz	r0, 8016a22 <_dtoa_r+0xba>
 8016a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	6013      	str	r3, [r2, #0]
 8016a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	f000 854f 	beq.w	80174b6 <_dtoa_r+0xb4e>
 8016a18:	488a      	ldr	r0, [pc, #552]	; (8016c44 <_dtoa_r+0x2dc>)
 8016a1a:	6018      	str	r0, [r3, #0]
 8016a1c:	1e43      	subs	r3, r0, #1
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	e7dd      	b.n	80169de <_dtoa_r+0x76>
 8016a22:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016a26:	aa12      	add	r2, sp, #72	; 0x48
 8016a28:	a913      	add	r1, sp, #76	; 0x4c
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f001 ff74 	bl	8018918 <__d2b>
 8016a30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016a34:	4683      	mov	fp, r0
 8016a36:	2d00      	cmp	r5, #0
 8016a38:	d07c      	beq.n	8016b34 <_dtoa_r+0x1cc>
 8016a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a3c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8016a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a44:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8016a48:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016a4c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016a50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016a54:	4b7c      	ldr	r3, [pc, #496]	; (8016c48 <_dtoa_r+0x2e0>)
 8016a56:	2200      	movs	r2, #0
 8016a58:	4630      	mov	r0, r6
 8016a5a:	4639      	mov	r1, r7
 8016a5c:	f7e9 fc34 	bl	80002c8 <__aeabi_dsub>
 8016a60:	a36f      	add	r3, pc, #444	; (adr r3, 8016c20 <_dtoa_r+0x2b8>)
 8016a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a66:	f7e9 fde7 	bl	8000638 <__aeabi_dmul>
 8016a6a:	a36f      	add	r3, pc, #444	; (adr r3, 8016c28 <_dtoa_r+0x2c0>)
 8016a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a70:	f7e9 fc2c 	bl	80002cc <__adddf3>
 8016a74:	4606      	mov	r6, r0
 8016a76:	4628      	mov	r0, r5
 8016a78:	460f      	mov	r7, r1
 8016a7a:	f7e9 fd73 	bl	8000564 <__aeabi_i2d>
 8016a7e:	a36c      	add	r3, pc, #432	; (adr r3, 8016c30 <_dtoa_r+0x2c8>)
 8016a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a84:	f7e9 fdd8 	bl	8000638 <__aeabi_dmul>
 8016a88:	4602      	mov	r2, r0
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	4639      	mov	r1, r7
 8016a90:	f7e9 fc1c 	bl	80002cc <__adddf3>
 8016a94:	4606      	mov	r6, r0
 8016a96:	460f      	mov	r7, r1
 8016a98:	f7ea f87e 	bl	8000b98 <__aeabi_d2iz>
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	4682      	mov	sl, r0
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	4639      	mov	r1, r7
 8016aa6:	f7ea f839 	bl	8000b1c <__aeabi_dcmplt>
 8016aaa:	b148      	cbz	r0, 8016ac0 <_dtoa_r+0x158>
 8016aac:	4650      	mov	r0, sl
 8016aae:	f7e9 fd59 	bl	8000564 <__aeabi_i2d>
 8016ab2:	4632      	mov	r2, r6
 8016ab4:	463b      	mov	r3, r7
 8016ab6:	f7ea f827 	bl	8000b08 <__aeabi_dcmpeq>
 8016aba:	b908      	cbnz	r0, 8016ac0 <_dtoa_r+0x158>
 8016abc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ac0:	f1ba 0f16 	cmp.w	sl, #22
 8016ac4:	d854      	bhi.n	8016b70 <_dtoa_r+0x208>
 8016ac6:	4b61      	ldr	r3, [pc, #388]	; (8016c4c <_dtoa_r+0x2e4>)
 8016ac8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ad4:	f7ea f822 	bl	8000b1c <__aeabi_dcmplt>
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d04b      	beq.n	8016b74 <_dtoa_r+0x20c>
 8016adc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	930e      	str	r3, [sp, #56]	; 0x38
 8016ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016ae6:	1b5d      	subs	r5, r3, r5
 8016ae8:	1e6b      	subs	r3, r5, #1
 8016aea:	9304      	str	r3, [sp, #16]
 8016aec:	bf43      	ittte	mi
 8016aee:	2300      	movmi	r3, #0
 8016af0:	f1c5 0801 	rsbmi	r8, r5, #1
 8016af4:	9304      	strmi	r3, [sp, #16]
 8016af6:	f04f 0800 	movpl.w	r8, #0
 8016afa:	f1ba 0f00 	cmp.w	sl, #0
 8016afe:	db3b      	blt.n	8016b78 <_dtoa_r+0x210>
 8016b00:	9b04      	ldr	r3, [sp, #16]
 8016b02:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8016b06:	4453      	add	r3, sl
 8016b08:	9304      	str	r3, [sp, #16]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	9306      	str	r3, [sp, #24]
 8016b0e:	9b05      	ldr	r3, [sp, #20]
 8016b10:	2b09      	cmp	r3, #9
 8016b12:	d86a      	bhi.n	8016bea <_dtoa_r+0x282>
 8016b14:	2b05      	cmp	r3, #5
 8016b16:	bfc4      	itt	gt
 8016b18:	3b04      	subgt	r3, #4
 8016b1a:	9305      	strgt	r3, [sp, #20]
 8016b1c:	9b05      	ldr	r3, [sp, #20]
 8016b1e:	f1a3 0302 	sub.w	r3, r3, #2
 8016b22:	bfcc      	ite	gt
 8016b24:	2500      	movgt	r5, #0
 8016b26:	2501      	movle	r5, #1
 8016b28:	2b03      	cmp	r3, #3
 8016b2a:	d86a      	bhi.n	8016c02 <_dtoa_r+0x29a>
 8016b2c:	e8df f003 	tbb	[pc, r3]
 8016b30:	5b4d4f2c 	.word	0x5b4d4f2c
 8016b34:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8016b38:	441d      	add	r5, r3
 8016b3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016b3e:	2b20      	cmp	r3, #32
 8016b40:	bfc1      	itttt	gt
 8016b42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016b46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016b4a:	fa09 f303 	lslgt.w	r3, r9, r3
 8016b4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016b52:	bfda      	itte	le
 8016b54:	f1c3 0320 	rsble	r3, r3, #32
 8016b58:	fa06 f003 	lslle.w	r0, r6, r3
 8016b5c:	4318      	orrgt	r0, r3
 8016b5e:	f7e9 fcf1 	bl	8000544 <__aeabi_ui2d>
 8016b62:	2301      	movs	r3, #1
 8016b64:	4606      	mov	r6, r0
 8016b66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016b6a:	3d01      	subs	r5, #1
 8016b6c:	9310      	str	r3, [sp, #64]	; 0x40
 8016b6e:	e771      	b.n	8016a54 <_dtoa_r+0xec>
 8016b70:	2301      	movs	r3, #1
 8016b72:	e7b6      	b.n	8016ae2 <_dtoa_r+0x17a>
 8016b74:	900e      	str	r0, [sp, #56]	; 0x38
 8016b76:	e7b5      	b.n	8016ae4 <_dtoa_r+0x17c>
 8016b78:	f1ca 0300 	rsb	r3, sl, #0
 8016b7c:	9306      	str	r3, [sp, #24]
 8016b7e:	2300      	movs	r3, #0
 8016b80:	eba8 080a 	sub.w	r8, r8, sl
 8016b84:	930d      	str	r3, [sp, #52]	; 0x34
 8016b86:	e7c2      	b.n	8016b0e <_dtoa_r+0x1a6>
 8016b88:	2300      	movs	r3, #0
 8016b8a:	9308      	str	r3, [sp, #32]
 8016b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	dc3a      	bgt.n	8016c08 <_dtoa_r+0x2a0>
 8016b92:	f04f 0901 	mov.w	r9, #1
 8016b96:	f8cd 9004 	str.w	r9, [sp, #4]
 8016b9a:	464b      	mov	r3, r9
 8016b9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	6462      	str	r2, [r4, #68]	; 0x44
 8016ba4:	2204      	movs	r2, #4
 8016ba6:	f102 0014 	add.w	r0, r2, #20
 8016baa:	4298      	cmp	r0, r3
 8016bac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016bae:	d931      	bls.n	8016c14 <_dtoa_r+0x2ac>
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	f001 fb17 	bl	80181e4 <_Balloc>
 8016bb6:	9000      	str	r0, [sp, #0]
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	d14d      	bne.n	8016c58 <_dtoa_r+0x2f0>
 8016bbc:	4b24      	ldr	r3, [pc, #144]	; (8016c50 <_dtoa_r+0x2e8>)
 8016bbe:	4602      	mov	r2, r0
 8016bc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016bc4:	4823      	ldr	r0, [pc, #140]	; (8016c54 <_dtoa_r+0x2ec>)
 8016bc6:	f002 fde7 	bl	8019798 <__assert_func>
 8016bca:	2301      	movs	r3, #1
 8016bcc:	e7dd      	b.n	8016b8a <_dtoa_r+0x222>
 8016bce:	2300      	movs	r3, #0
 8016bd0:	9308      	str	r3, [sp, #32]
 8016bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bd4:	eb0a 0903 	add.w	r9, sl, r3
 8016bd8:	f109 0301 	add.w	r3, r9, #1
 8016bdc:	2b01      	cmp	r3, #1
 8016bde:	9301      	str	r3, [sp, #4]
 8016be0:	bfb8      	it	lt
 8016be2:	2301      	movlt	r3, #1
 8016be4:	e7dc      	b.n	8016ba0 <_dtoa_r+0x238>
 8016be6:	2301      	movs	r3, #1
 8016be8:	e7f2      	b.n	8016bd0 <_dtoa_r+0x268>
 8016bea:	2501      	movs	r5, #1
 8016bec:	2300      	movs	r3, #0
 8016bee:	9305      	str	r3, [sp, #20]
 8016bf0:	9508      	str	r5, [sp, #32]
 8016bf2:	f04f 39ff 	mov.w	r9, #4294967295
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8016bfc:	2312      	movs	r3, #18
 8016bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8016c00:	e7ce      	b.n	8016ba0 <_dtoa_r+0x238>
 8016c02:	2301      	movs	r3, #1
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	e7f4      	b.n	8016bf2 <_dtoa_r+0x28a>
 8016c08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016c10:	464b      	mov	r3, r9
 8016c12:	e7c5      	b.n	8016ba0 <_dtoa_r+0x238>
 8016c14:	3101      	adds	r1, #1
 8016c16:	6461      	str	r1, [r4, #68]	; 0x44
 8016c18:	0052      	lsls	r2, r2, #1
 8016c1a:	e7c4      	b.n	8016ba6 <_dtoa_r+0x23e>
 8016c1c:	f3af 8000 	nop.w
 8016c20:	636f4361 	.word	0x636f4361
 8016c24:	3fd287a7 	.word	0x3fd287a7
 8016c28:	8b60c8b3 	.word	0x8b60c8b3
 8016c2c:	3fc68a28 	.word	0x3fc68a28
 8016c30:	509f79fb 	.word	0x509f79fb
 8016c34:	3fd34413 	.word	0x3fd34413
 8016c38:	7ff00000 	.word	0x7ff00000
 8016c3c:	0801c1ba 	.word	0x0801c1ba
 8016c40:	0801c1be 	.word	0x0801c1be
 8016c44:	0801c053 	.word	0x0801c053
 8016c48:	3ff80000 	.word	0x3ff80000
 8016c4c:	0801c340 	.word	0x0801c340
 8016c50:	0801c1c7 	.word	0x0801c1c7
 8016c54:	0801c1d8 	.word	0x0801c1d8
 8016c58:	9b00      	ldr	r3, [sp, #0]
 8016c5a:	6423      	str	r3, [r4, #64]	; 0x40
 8016c5c:	9b01      	ldr	r3, [sp, #4]
 8016c5e:	2b0e      	cmp	r3, #14
 8016c60:	f200 80ad 	bhi.w	8016dbe <_dtoa_r+0x456>
 8016c64:	2d00      	cmp	r5, #0
 8016c66:	f000 80aa 	beq.w	8016dbe <_dtoa_r+0x456>
 8016c6a:	f1ba 0f00 	cmp.w	sl, #0
 8016c6e:	dd36      	ble.n	8016cde <_dtoa_r+0x376>
 8016c70:	4ac2      	ldr	r2, [pc, #776]	; (8016f7c <_dtoa_r+0x614>)
 8016c72:	f00a 030f 	and.w	r3, sl, #15
 8016c76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016c7a:	ed93 7b00 	vldr	d7, [r3]
 8016c7e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8016c82:	ea4f 172a 	mov.w	r7, sl, asr #4
 8016c86:	eeb0 8a47 	vmov.f32	s16, s14
 8016c8a:	eef0 8a67 	vmov.f32	s17, s15
 8016c8e:	d016      	beq.n	8016cbe <_dtoa_r+0x356>
 8016c90:	4bbb      	ldr	r3, [pc, #748]	; (8016f80 <_dtoa_r+0x618>)
 8016c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016c96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016c9a:	f7e9 fdf7 	bl	800088c <__aeabi_ddiv>
 8016c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ca2:	f007 070f 	and.w	r7, r7, #15
 8016ca6:	2503      	movs	r5, #3
 8016ca8:	4eb5      	ldr	r6, [pc, #724]	; (8016f80 <_dtoa_r+0x618>)
 8016caa:	b957      	cbnz	r7, 8016cc2 <_dtoa_r+0x35a>
 8016cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016cb0:	ec53 2b18 	vmov	r2, r3, d8
 8016cb4:	f7e9 fdea 	bl	800088c <__aeabi_ddiv>
 8016cb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016cbc:	e029      	b.n	8016d12 <_dtoa_r+0x3aa>
 8016cbe:	2502      	movs	r5, #2
 8016cc0:	e7f2      	b.n	8016ca8 <_dtoa_r+0x340>
 8016cc2:	07f9      	lsls	r1, r7, #31
 8016cc4:	d508      	bpl.n	8016cd8 <_dtoa_r+0x370>
 8016cc6:	ec51 0b18 	vmov	r0, r1, d8
 8016cca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016cce:	f7e9 fcb3 	bl	8000638 <__aeabi_dmul>
 8016cd2:	ec41 0b18 	vmov	d8, r0, r1
 8016cd6:	3501      	adds	r5, #1
 8016cd8:	107f      	asrs	r7, r7, #1
 8016cda:	3608      	adds	r6, #8
 8016cdc:	e7e5      	b.n	8016caa <_dtoa_r+0x342>
 8016cde:	f000 80a6 	beq.w	8016e2e <_dtoa_r+0x4c6>
 8016ce2:	f1ca 0600 	rsb	r6, sl, #0
 8016ce6:	4ba5      	ldr	r3, [pc, #660]	; (8016f7c <_dtoa_r+0x614>)
 8016ce8:	4fa5      	ldr	r7, [pc, #660]	; (8016f80 <_dtoa_r+0x618>)
 8016cea:	f006 020f 	and.w	r2, r6, #15
 8016cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016cfa:	f7e9 fc9d 	bl	8000638 <__aeabi_dmul>
 8016cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d02:	1136      	asrs	r6, r6, #4
 8016d04:	2300      	movs	r3, #0
 8016d06:	2502      	movs	r5, #2
 8016d08:	2e00      	cmp	r6, #0
 8016d0a:	f040 8085 	bne.w	8016e18 <_dtoa_r+0x4b0>
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d1d2      	bne.n	8016cb8 <_dtoa_r+0x350>
 8016d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	f000 808c 	beq.w	8016e32 <_dtoa_r+0x4ca>
 8016d1a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016d1e:	4b99      	ldr	r3, [pc, #612]	; (8016f84 <_dtoa_r+0x61c>)
 8016d20:	2200      	movs	r2, #0
 8016d22:	4630      	mov	r0, r6
 8016d24:	4639      	mov	r1, r7
 8016d26:	f7e9 fef9 	bl	8000b1c <__aeabi_dcmplt>
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	f000 8081 	beq.w	8016e32 <_dtoa_r+0x4ca>
 8016d30:	9b01      	ldr	r3, [sp, #4]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d07d      	beq.n	8016e32 <_dtoa_r+0x4ca>
 8016d36:	f1b9 0f00 	cmp.w	r9, #0
 8016d3a:	dd3c      	ble.n	8016db6 <_dtoa_r+0x44e>
 8016d3c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016d40:	9307      	str	r3, [sp, #28]
 8016d42:	2200      	movs	r2, #0
 8016d44:	4b90      	ldr	r3, [pc, #576]	; (8016f88 <_dtoa_r+0x620>)
 8016d46:	4630      	mov	r0, r6
 8016d48:	4639      	mov	r1, r7
 8016d4a:	f7e9 fc75 	bl	8000638 <__aeabi_dmul>
 8016d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d52:	3501      	adds	r5, #1
 8016d54:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8016d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f7e9 fc01 	bl	8000564 <__aeabi_i2d>
 8016d62:	4632      	mov	r2, r6
 8016d64:	463b      	mov	r3, r7
 8016d66:	f7e9 fc67 	bl	8000638 <__aeabi_dmul>
 8016d6a:	4b88      	ldr	r3, [pc, #544]	; (8016f8c <_dtoa_r+0x624>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	f7e9 faad 	bl	80002cc <__adddf3>
 8016d72:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d7a:	9303      	str	r3, [sp, #12]
 8016d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d15c      	bne.n	8016e3c <_dtoa_r+0x4d4>
 8016d82:	4b83      	ldr	r3, [pc, #524]	; (8016f90 <_dtoa_r+0x628>)
 8016d84:	2200      	movs	r2, #0
 8016d86:	4630      	mov	r0, r6
 8016d88:	4639      	mov	r1, r7
 8016d8a:	f7e9 fa9d 	bl	80002c8 <__aeabi_dsub>
 8016d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016d92:	4606      	mov	r6, r0
 8016d94:	460f      	mov	r7, r1
 8016d96:	f7e9 fedf 	bl	8000b58 <__aeabi_dcmpgt>
 8016d9a:	2800      	cmp	r0, #0
 8016d9c:	f040 8295 	bne.w	80172ca <_dtoa_r+0x962>
 8016da0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016da4:	4630      	mov	r0, r6
 8016da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016daa:	4639      	mov	r1, r7
 8016dac:	f7e9 feb6 	bl	8000b1c <__aeabi_dcmplt>
 8016db0:	2800      	cmp	r0, #0
 8016db2:	f040 8287 	bne.w	80172c4 <_dtoa_r+0x95c>
 8016db6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016dba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016dbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f2c0 8157 	blt.w	8017074 <_dtoa_r+0x70c>
 8016dc6:	f1ba 0f0e 	cmp.w	sl, #14
 8016dca:	f300 8153 	bgt.w	8017074 <_dtoa_r+0x70c>
 8016dce:	4b6b      	ldr	r3, [pc, #428]	; (8016f7c <_dtoa_r+0x614>)
 8016dd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f280 80e2 	bge.w	8016fa4 <_dtoa_r+0x63c>
 8016de0:	9b01      	ldr	r3, [sp, #4]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f300 80de 	bgt.w	8016fa4 <_dtoa_r+0x63c>
 8016de8:	f040 826c 	bne.w	80172c4 <_dtoa_r+0x95c>
 8016dec:	4b68      	ldr	r3, [pc, #416]	; (8016f90 <_dtoa_r+0x628>)
 8016dee:	2200      	movs	r2, #0
 8016df0:	4640      	mov	r0, r8
 8016df2:	4649      	mov	r1, r9
 8016df4:	f7e9 fc20 	bl	8000638 <__aeabi_dmul>
 8016df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016dfc:	f7e9 fea2 	bl	8000b44 <__aeabi_dcmpge>
 8016e00:	9e01      	ldr	r6, [sp, #4]
 8016e02:	4637      	mov	r7, r6
 8016e04:	2800      	cmp	r0, #0
 8016e06:	f040 8242 	bne.w	801728e <_dtoa_r+0x926>
 8016e0a:	9d00      	ldr	r5, [sp, #0]
 8016e0c:	2331      	movs	r3, #49	; 0x31
 8016e0e:	f805 3b01 	strb.w	r3, [r5], #1
 8016e12:	f10a 0a01 	add.w	sl, sl, #1
 8016e16:	e23e      	b.n	8017296 <_dtoa_r+0x92e>
 8016e18:	07f2      	lsls	r2, r6, #31
 8016e1a:	d505      	bpl.n	8016e28 <_dtoa_r+0x4c0>
 8016e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e20:	f7e9 fc0a 	bl	8000638 <__aeabi_dmul>
 8016e24:	3501      	adds	r5, #1
 8016e26:	2301      	movs	r3, #1
 8016e28:	1076      	asrs	r6, r6, #1
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	e76c      	b.n	8016d08 <_dtoa_r+0x3a0>
 8016e2e:	2502      	movs	r5, #2
 8016e30:	e76f      	b.n	8016d12 <_dtoa_r+0x3aa>
 8016e32:	9b01      	ldr	r3, [sp, #4]
 8016e34:	f8cd a01c 	str.w	sl, [sp, #28]
 8016e38:	930c      	str	r3, [sp, #48]	; 0x30
 8016e3a:	e78d      	b.n	8016d58 <_dtoa_r+0x3f0>
 8016e3c:	9900      	ldr	r1, [sp, #0]
 8016e3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e42:	4b4e      	ldr	r3, [pc, #312]	; (8016f7c <_dtoa_r+0x614>)
 8016e44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e48:	4401      	add	r1, r0
 8016e4a:	9102      	str	r1, [sp, #8]
 8016e4c:	9908      	ldr	r1, [sp, #32]
 8016e4e:	eeb0 8a47 	vmov.f32	s16, s14
 8016e52:	eef0 8a67 	vmov.f32	s17, s15
 8016e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016e5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016e5e:	2900      	cmp	r1, #0
 8016e60:	d045      	beq.n	8016eee <_dtoa_r+0x586>
 8016e62:	494c      	ldr	r1, [pc, #304]	; (8016f94 <_dtoa_r+0x62c>)
 8016e64:	2000      	movs	r0, #0
 8016e66:	f7e9 fd11 	bl	800088c <__aeabi_ddiv>
 8016e6a:	ec53 2b18 	vmov	r2, r3, d8
 8016e6e:	f7e9 fa2b 	bl	80002c8 <__aeabi_dsub>
 8016e72:	9d00      	ldr	r5, [sp, #0]
 8016e74:	ec41 0b18 	vmov	d8, r0, r1
 8016e78:	4639      	mov	r1, r7
 8016e7a:	4630      	mov	r0, r6
 8016e7c:	f7e9 fe8c 	bl	8000b98 <__aeabi_d2iz>
 8016e80:	900c      	str	r0, [sp, #48]	; 0x30
 8016e82:	f7e9 fb6f 	bl	8000564 <__aeabi_i2d>
 8016e86:	4602      	mov	r2, r0
 8016e88:	460b      	mov	r3, r1
 8016e8a:	4630      	mov	r0, r6
 8016e8c:	4639      	mov	r1, r7
 8016e8e:	f7e9 fa1b 	bl	80002c8 <__aeabi_dsub>
 8016e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e94:	3330      	adds	r3, #48	; 0x30
 8016e96:	f805 3b01 	strb.w	r3, [r5], #1
 8016e9a:	ec53 2b18 	vmov	r2, r3, d8
 8016e9e:	4606      	mov	r6, r0
 8016ea0:	460f      	mov	r7, r1
 8016ea2:	f7e9 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	d165      	bne.n	8016f76 <_dtoa_r+0x60e>
 8016eaa:	4632      	mov	r2, r6
 8016eac:	463b      	mov	r3, r7
 8016eae:	4935      	ldr	r1, [pc, #212]	; (8016f84 <_dtoa_r+0x61c>)
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	f7e9 fa09 	bl	80002c8 <__aeabi_dsub>
 8016eb6:	ec53 2b18 	vmov	r2, r3, d8
 8016eba:	f7e9 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f040 80b8 	bne.w	8017034 <_dtoa_r+0x6cc>
 8016ec4:	9b02      	ldr	r3, [sp, #8]
 8016ec6:	429d      	cmp	r5, r3
 8016ec8:	f43f af75 	beq.w	8016db6 <_dtoa_r+0x44e>
 8016ecc:	4b2e      	ldr	r3, [pc, #184]	; (8016f88 <_dtoa_r+0x620>)
 8016ece:	ec51 0b18 	vmov	r0, r1, d8
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	f7e9 fbb0 	bl	8000638 <__aeabi_dmul>
 8016ed8:	4b2b      	ldr	r3, [pc, #172]	; (8016f88 <_dtoa_r+0x620>)
 8016eda:	ec41 0b18 	vmov	d8, r0, r1
 8016ede:	2200      	movs	r2, #0
 8016ee0:	4630      	mov	r0, r6
 8016ee2:	4639      	mov	r1, r7
 8016ee4:	f7e9 fba8 	bl	8000638 <__aeabi_dmul>
 8016ee8:	4606      	mov	r6, r0
 8016eea:	460f      	mov	r7, r1
 8016eec:	e7c4      	b.n	8016e78 <_dtoa_r+0x510>
 8016eee:	ec51 0b17 	vmov	r0, r1, d7
 8016ef2:	f7e9 fba1 	bl	8000638 <__aeabi_dmul>
 8016ef6:	9b02      	ldr	r3, [sp, #8]
 8016ef8:	9d00      	ldr	r5, [sp, #0]
 8016efa:	930c      	str	r3, [sp, #48]	; 0x30
 8016efc:	ec41 0b18 	vmov	d8, r0, r1
 8016f00:	4639      	mov	r1, r7
 8016f02:	4630      	mov	r0, r6
 8016f04:	f7e9 fe48 	bl	8000b98 <__aeabi_d2iz>
 8016f08:	9011      	str	r0, [sp, #68]	; 0x44
 8016f0a:	f7e9 fb2b 	bl	8000564 <__aeabi_i2d>
 8016f0e:	4602      	mov	r2, r0
 8016f10:	460b      	mov	r3, r1
 8016f12:	4630      	mov	r0, r6
 8016f14:	4639      	mov	r1, r7
 8016f16:	f7e9 f9d7 	bl	80002c8 <__aeabi_dsub>
 8016f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f1c:	3330      	adds	r3, #48	; 0x30
 8016f1e:	f805 3b01 	strb.w	r3, [r5], #1
 8016f22:	9b02      	ldr	r3, [sp, #8]
 8016f24:	429d      	cmp	r5, r3
 8016f26:	4606      	mov	r6, r0
 8016f28:	460f      	mov	r7, r1
 8016f2a:	f04f 0200 	mov.w	r2, #0
 8016f2e:	d133      	bne.n	8016f98 <_dtoa_r+0x630>
 8016f30:	4b18      	ldr	r3, [pc, #96]	; (8016f94 <_dtoa_r+0x62c>)
 8016f32:	ec51 0b18 	vmov	r0, r1, d8
 8016f36:	f7e9 f9c9 	bl	80002cc <__adddf3>
 8016f3a:	4602      	mov	r2, r0
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	4630      	mov	r0, r6
 8016f40:	4639      	mov	r1, r7
 8016f42:	f7e9 fe09 	bl	8000b58 <__aeabi_dcmpgt>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	d174      	bne.n	8017034 <_dtoa_r+0x6cc>
 8016f4a:	ec53 2b18 	vmov	r2, r3, d8
 8016f4e:	4911      	ldr	r1, [pc, #68]	; (8016f94 <_dtoa_r+0x62c>)
 8016f50:	2000      	movs	r0, #0
 8016f52:	f7e9 f9b9 	bl	80002c8 <__aeabi_dsub>
 8016f56:	4602      	mov	r2, r0
 8016f58:	460b      	mov	r3, r1
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	4639      	mov	r1, r7
 8016f5e:	f7e9 fddd 	bl	8000b1c <__aeabi_dcmplt>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	f43f af27 	beq.w	8016db6 <_dtoa_r+0x44e>
 8016f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016f6a:	1e6b      	subs	r3, r5, #1
 8016f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8016f6e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f72:	2b30      	cmp	r3, #48	; 0x30
 8016f74:	d0f8      	beq.n	8016f68 <_dtoa_r+0x600>
 8016f76:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016f7a:	e049      	b.n	8017010 <_dtoa_r+0x6a8>
 8016f7c:	0801c340 	.word	0x0801c340
 8016f80:	0801c318 	.word	0x0801c318
 8016f84:	3ff00000 	.word	0x3ff00000
 8016f88:	40240000 	.word	0x40240000
 8016f8c:	401c0000 	.word	0x401c0000
 8016f90:	40140000 	.word	0x40140000
 8016f94:	3fe00000 	.word	0x3fe00000
 8016f98:	4baf      	ldr	r3, [pc, #700]	; (8017258 <_dtoa_r+0x8f0>)
 8016f9a:	f7e9 fb4d 	bl	8000638 <__aeabi_dmul>
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	460f      	mov	r7, r1
 8016fa2:	e7ad      	b.n	8016f00 <_dtoa_r+0x598>
 8016fa4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016fa8:	9d00      	ldr	r5, [sp, #0]
 8016faa:	4642      	mov	r2, r8
 8016fac:	464b      	mov	r3, r9
 8016fae:	4630      	mov	r0, r6
 8016fb0:	4639      	mov	r1, r7
 8016fb2:	f7e9 fc6b 	bl	800088c <__aeabi_ddiv>
 8016fb6:	f7e9 fdef 	bl	8000b98 <__aeabi_d2iz>
 8016fba:	9002      	str	r0, [sp, #8]
 8016fbc:	f7e9 fad2 	bl	8000564 <__aeabi_i2d>
 8016fc0:	4642      	mov	r2, r8
 8016fc2:	464b      	mov	r3, r9
 8016fc4:	f7e9 fb38 	bl	8000638 <__aeabi_dmul>
 8016fc8:	4602      	mov	r2, r0
 8016fca:	460b      	mov	r3, r1
 8016fcc:	4630      	mov	r0, r6
 8016fce:	4639      	mov	r1, r7
 8016fd0:	f7e9 f97a 	bl	80002c8 <__aeabi_dsub>
 8016fd4:	9e02      	ldr	r6, [sp, #8]
 8016fd6:	9f01      	ldr	r7, [sp, #4]
 8016fd8:	3630      	adds	r6, #48	; 0x30
 8016fda:	f805 6b01 	strb.w	r6, [r5], #1
 8016fde:	9e00      	ldr	r6, [sp, #0]
 8016fe0:	1bae      	subs	r6, r5, r6
 8016fe2:	42b7      	cmp	r7, r6
 8016fe4:	4602      	mov	r2, r0
 8016fe6:	460b      	mov	r3, r1
 8016fe8:	d137      	bne.n	801705a <_dtoa_r+0x6f2>
 8016fea:	f7e9 f96f 	bl	80002cc <__adddf3>
 8016fee:	4642      	mov	r2, r8
 8016ff0:	464b      	mov	r3, r9
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	460f      	mov	r7, r1
 8016ff6:	f7e9 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 8016ffa:	b9c8      	cbnz	r0, 8017030 <_dtoa_r+0x6c8>
 8016ffc:	4642      	mov	r2, r8
 8016ffe:	464b      	mov	r3, r9
 8017000:	4630      	mov	r0, r6
 8017002:	4639      	mov	r1, r7
 8017004:	f7e9 fd80 	bl	8000b08 <__aeabi_dcmpeq>
 8017008:	b110      	cbz	r0, 8017010 <_dtoa_r+0x6a8>
 801700a:	9b02      	ldr	r3, [sp, #8]
 801700c:	07d9      	lsls	r1, r3, #31
 801700e:	d40f      	bmi.n	8017030 <_dtoa_r+0x6c8>
 8017010:	4620      	mov	r0, r4
 8017012:	4659      	mov	r1, fp
 8017014:	f001 f90b 	bl	801822e <_Bfree>
 8017018:	2300      	movs	r3, #0
 801701a:	702b      	strb	r3, [r5, #0]
 801701c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801701e:	f10a 0001 	add.w	r0, sl, #1
 8017022:	6018      	str	r0, [r3, #0]
 8017024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017026:	2b00      	cmp	r3, #0
 8017028:	f43f acd9 	beq.w	80169de <_dtoa_r+0x76>
 801702c:	601d      	str	r5, [r3, #0]
 801702e:	e4d6      	b.n	80169de <_dtoa_r+0x76>
 8017030:	f8cd a01c 	str.w	sl, [sp, #28]
 8017034:	462b      	mov	r3, r5
 8017036:	461d      	mov	r5, r3
 8017038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801703c:	2a39      	cmp	r2, #57	; 0x39
 801703e:	d108      	bne.n	8017052 <_dtoa_r+0x6ea>
 8017040:	9a00      	ldr	r2, [sp, #0]
 8017042:	429a      	cmp	r2, r3
 8017044:	d1f7      	bne.n	8017036 <_dtoa_r+0x6ce>
 8017046:	9a07      	ldr	r2, [sp, #28]
 8017048:	9900      	ldr	r1, [sp, #0]
 801704a:	3201      	adds	r2, #1
 801704c:	9207      	str	r2, [sp, #28]
 801704e:	2230      	movs	r2, #48	; 0x30
 8017050:	700a      	strb	r2, [r1, #0]
 8017052:	781a      	ldrb	r2, [r3, #0]
 8017054:	3201      	adds	r2, #1
 8017056:	701a      	strb	r2, [r3, #0]
 8017058:	e78d      	b.n	8016f76 <_dtoa_r+0x60e>
 801705a:	4b7f      	ldr	r3, [pc, #508]	; (8017258 <_dtoa_r+0x8f0>)
 801705c:	2200      	movs	r2, #0
 801705e:	f7e9 faeb 	bl	8000638 <__aeabi_dmul>
 8017062:	2200      	movs	r2, #0
 8017064:	2300      	movs	r3, #0
 8017066:	4606      	mov	r6, r0
 8017068:	460f      	mov	r7, r1
 801706a:	f7e9 fd4d 	bl	8000b08 <__aeabi_dcmpeq>
 801706e:	2800      	cmp	r0, #0
 8017070:	d09b      	beq.n	8016faa <_dtoa_r+0x642>
 8017072:	e7cd      	b.n	8017010 <_dtoa_r+0x6a8>
 8017074:	9a08      	ldr	r2, [sp, #32]
 8017076:	2a00      	cmp	r2, #0
 8017078:	f000 80c4 	beq.w	8017204 <_dtoa_r+0x89c>
 801707c:	9a05      	ldr	r2, [sp, #20]
 801707e:	2a01      	cmp	r2, #1
 8017080:	f300 80a8 	bgt.w	80171d4 <_dtoa_r+0x86c>
 8017084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017086:	2a00      	cmp	r2, #0
 8017088:	f000 80a0 	beq.w	80171cc <_dtoa_r+0x864>
 801708c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017090:	9e06      	ldr	r6, [sp, #24]
 8017092:	4645      	mov	r5, r8
 8017094:	9a04      	ldr	r2, [sp, #16]
 8017096:	2101      	movs	r1, #1
 8017098:	441a      	add	r2, r3
 801709a:	4620      	mov	r0, r4
 801709c:	4498      	add	r8, r3
 801709e:	9204      	str	r2, [sp, #16]
 80170a0:	f001 f9b2 	bl	8018408 <__i2b>
 80170a4:	4607      	mov	r7, r0
 80170a6:	2d00      	cmp	r5, #0
 80170a8:	dd0b      	ble.n	80170c2 <_dtoa_r+0x75a>
 80170aa:	9b04      	ldr	r3, [sp, #16]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	dd08      	ble.n	80170c2 <_dtoa_r+0x75a>
 80170b0:	42ab      	cmp	r3, r5
 80170b2:	9a04      	ldr	r2, [sp, #16]
 80170b4:	bfa8      	it	ge
 80170b6:	462b      	movge	r3, r5
 80170b8:	eba8 0803 	sub.w	r8, r8, r3
 80170bc:	1aed      	subs	r5, r5, r3
 80170be:	1ad3      	subs	r3, r2, r3
 80170c0:	9304      	str	r3, [sp, #16]
 80170c2:	9b06      	ldr	r3, [sp, #24]
 80170c4:	b1fb      	cbz	r3, 8017106 <_dtoa_r+0x79e>
 80170c6:	9b08      	ldr	r3, [sp, #32]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	f000 809f 	beq.w	801720c <_dtoa_r+0x8a4>
 80170ce:	2e00      	cmp	r6, #0
 80170d0:	dd11      	ble.n	80170f6 <_dtoa_r+0x78e>
 80170d2:	4639      	mov	r1, r7
 80170d4:	4632      	mov	r2, r6
 80170d6:	4620      	mov	r0, r4
 80170d8:	f001 fa52 	bl	8018580 <__pow5mult>
 80170dc:	465a      	mov	r2, fp
 80170de:	4601      	mov	r1, r0
 80170e0:	4607      	mov	r7, r0
 80170e2:	4620      	mov	r0, r4
 80170e4:	f001 f9a6 	bl	8018434 <__multiply>
 80170e8:	4659      	mov	r1, fp
 80170ea:	9007      	str	r0, [sp, #28]
 80170ec:	4620      	mov	r0, r4
 80170ee:	f001 f89e 	bl	801822e <_Bfree>
 80170f2:	9b07      	ldr	r3, [sp, #28]
 80170f4:	469b      	mov	fp, r3
 80170f6:	9b06      	ldr	r3, [sp, #24]
 80170f8:	1b9a      	subs	r2, r3, r6
 80170fa:	d004      	beq.n	8017106 <_dtoa_r+0x79e>
 80170fc:	4659      	mov	r1, fp
 80170fe:	4620      	mov	r0, r4
 8017100:	f001 fa3e 	bl	8018580 <__pow5mult>
 8017104:	4683      	mov	fp, r0
 8017106:	2101      	movs	r1, #1
 8017108:	4620      	mov	r0, r4
 801710a:	f001 f97d 	bl	8018408 <__i2b>
 801710e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017110:	2b00      	cmp	r3, #0
 8017112:	4606      	mov	r6, r0
 8017114:	dd7c      	ble.n	8017210 <_dtoa_r+0x8a8>
 8017116:	461a      	mov	r2, r3
 8017118:	4601      	mov	r1, r0
 801711a:	4620      	mov	r0, r4
 801711c:	f001 fa30 	bl	8018580 <__pow5mult>
 8017120:	9b05      	ldr	r3, [sp, #20]
 8017122:	2b01      	cmp	r3, #1
 8017124:	4606      	mov	r6, r0
 8017126:	dd76      	ble.n	8017216 <_dtoa_r+0x8ae>
 8017128:	2300      	movs	r3, #0
 801712a:	9306      	str	r3, [sp, #24]
 801712c:	6933      	ldr	r3, [r6, #16]
 801712e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017132:	6918      	ldr	r0, [r3, #16]
 8017134:	f001 f918 	bl	8018368 <__hi0bits>
 8017138:	f1c0 0020 	rsb	r0, r0, #32
 801713c:	9b04      	ldr	r3, [sp, #16]
 801713e:	4418      	add	r0, r3
 8017140:	f010 001f 	ands.w	r0, r0, #31
 8017144:	f000 8086 	beq.w	8017254 <_dtoa_r+0x8ec>
 8017148:	f1c0 0320 	rsb	r3, r0, #32
 801714c:	2b04      	cmp	r3, #4
 801714e:	dd7f      	ble.n	8017250 <_dtoa_r+0x8e8>
 8017150:	f1c0 001c 	rsb	r0, r0, #28
 8017154:	9b04      	ldr	r3, [sp, #16]
 8017156:	4403      	add	r3, r0
 8017158:	4480      	add	r8, r0
 801715a:	4405      	add	r5, r0
 801715c:	9304      	str	r3, [sp, #16]
 801715e:	f1b8 0f00 	cmp.w	r8, #0
 8017162:	dd05      	ble.n	8017170 <_dtoa_r+0x808>
 8017164:	4659      	mov	r1, fp
 8017166:	4642      	mov	r2, r8
 8017168:	4620      	mov	r0, r4
 801716a:	f001 fa49 	bl	8018600 <__lshift>
 801716e:	4683      	mov	fp, r0
 8017170:	9b04      	ldr	r3, [sp, #16]
 8017172:	2b00      	cmp	r3, #0
 8017174:	dd05      	ble.n	8017182 <_dtoa_r+0x81a>
 8017176:	4631      	mov	r1, r6
 8017178:	461a      	mov	r2, r3
 801717a:	4620      	mov	r0, r4
 801717c:	f001 fa40 	bl	8018600 <__lshift>
 8017180:	4606      	mov	r6, r0
 8017182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017184:	2b00      	cmp	r3, #0
 8017186:	d069      	beq.n	801725c <_dtoa_r+0x8f4>
 8017188:	4631      	mov	r1, r6
 801718a:	4658      	mov	r0, fp
 801718c:	f001 faa4 	bl	80186d8 <__mcmp>
 8017190:	2800      	cmp	r0, #0
 8017192:	da63      	bge.n	801725c <_dtoa_r+0x8f4>
 8017194:	2300      	movs	r3, #0
 8017196:	4659      	mov	r1, fp
 8017198:	220a      	movs	r2, #10
 801719a:	4620      	mov	r0, r4
 801719c:	f001 f850 	bl	8018240 <__multadd>
 80171a0:	9b08      	ldr	r3, [sp, #32]
 80171a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171a6:	4683      	mov	fp, r0
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f000 818e 	beq.w	80174ca <_dtoa_r+0xb62>
 80171ae:	4639      	mov	r1, r7
 80171b0:	2300      	movs	r3, #0
 80171b2:	220a      	movs	r2, #10
 80171b4:	4620      	mov	r0, r4
 80171b6:	f001 f843 	bl	8018240 <__multadd>
 80171ba:	f1b9 0f00 	cmp.w	r9, #0
 80171be:	4607      	mov	r7, r0
 80171c0:	f300 808e 	bgt.w	80172e0 <_dtoa_r+0x978>
 80171c4:	9b05      	ldr	r3, [sp, #20]
 80171c6:	2b02      	cmp	r3, #2
 80171c8:	dc50      	bgt.n	801726c <_dtoa_r+0x904>
 80171ca:	e089      	b.n	80172e0 <_dtoa_r+0x978>
 80171cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80171ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80171d2:	e75d      	b.n	8017090 <_dtoa_r+0x728>
 80171d4:	9b01      	ldr	r3, [sp, #4]
 80171d6:	1e5e      	subs	r6, r3, #1
 80171d8:	9b06      	ldr	r3, [sp, #24]
 80171da:	42b3      	cmp	r3, r6
 80171dc:	bfbf      	itttt	lt
 80171de:	9b06      	ldrlt	r3, [sp, #24]
 80171e0:	9606      	strlt	r6, [sp, #24]
 80171e2:	1af2      	sublt	r2, r6, r3
 80171e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80171e6:	bfb6      	itet	lt
 80171e8:	189b      	addlt	r3, r3, r2
 80171ea:	1b9e      	subge	r6, r3, r6
 80171ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80171ee:	9b01      	ldr	r3, [sp, #4]
 80171f0:	bfb8      	it	lt
 80171f2:	2600      	movlt	r6, #0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	bfb5      	itete	lt
 80171f8:	eba8 0503 	sublt.w	r5, r8, r3
 80171fc:	9b01      	ldrge	r3, [sp, #4]
 80171fe:	2300      	movlt	r3, #0
 8017200:	4645      	movge	r5, r8
 8017202:	e747      	b.n	8017094 <_dtoa_r+0x72c>
 8017204:	9e06      	ldr	r6, [sp, #24]
 8017206:	9f08      	ldr	r7, [sp, #32]
 8017208:	4645      	mov	r5, r8
 801720a:	e74c      	b.n	80170a6 <_dtoa_r+0x73e>
 801720c:	9a06      	ldr	r2, [sp, #24]
 801720e:	e775      	b.n	80170fc <_dtoa_r+0x794>
 8017210:	9b05      	ldr	r3, [sp, #20]
 8017212:	2b01      	cmp	r3, #1
 8017214:	dc18      	bgt.n	8017248 <_dtoa_r+0x8e0>
 8017216:	9b02      	ldr	r3, [sp, #8]
 8017218:	b9b3      	cbnz	r3, 8017248 <_dtoa_r+0x8e0>
 801721a:	9b03      	ldr	r3, [sp, #12]
 801721c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017220:	b9a3      	cbnz	r3, 801724c <_dtoa_r+0x8e4>
 8017222:	9b03      	ldr	r3, [sp, #12]
 8017224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017228:	0d1b      	lsrs	r3, r3, #20
 801722a:	051b      	lsls	r3, r3, #20
 801722c:	b12b      	cbz	r3, 801723a <_dtoa_r+0x8d2>
 801722e:	9b04      	ldr	r3, [sp, #16]
 8017230:	3301      	adds	r3, #1
 8017232:	9304      	str	r3, [sp, #16]
 8017234:	f108 0801 	add.w	r8, r8, #1
 8017238:	2301      	movs	r3, #1
 801723a:	9306      	str	r3, [sp, #24]
 801723c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801723e:	2b00      	cmp	r3, #0
 8017240:	f47f af74 	bne.w	801712c <_dtoa_r+0x7c4>
 8017244:	2001      	movs	r0, #1
 8017246:	e779      	b.n	801713c <_dtoa_r+0x7d4>
 8017248:	2300      	movs	r3, #0
 801724a:	e7f6      	b.n	801723a <_dtoa_r+0x8d2>
 801724c:	9b02      	ldr	r3, [sp, #8]
 801724e:	e7f4      	b.n	801723a <_dtoa_r+0x8d2>
 8017250:	d085      	beq.n	801715e <_dtoa_r+0x7f6>
 8017252:	4618      	mov	r0, r3
 8017254:	301c      	adds	r0, #28
 8017256:	e77d      	b.n	8017154 <_dtoa_r+0x7ec>
 8017258:	40240000 	.word	0x40240000
 801725c:	9b01      	ldr	r3, [sp, #4]
 801725e:	2b00      	cmp	r3, #0
 8017260:	dc38      	bgt.n	80172d4 <_dtoa_r+0x96c>
 8017262:	9b05      	ldr	r3, [sp, #20]
 8017264:	2b02      	cmp	r3, #2
 8017266:	dd35      	ble.n	80172d4 <_dtoa_r+0x96c>
 8017268:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801726c:	f1b9 0f00 	cmp.w	r9, #0
 8017270:	d10d      	bne.n	801728e <_dtoa_r+0x926>
 8017272:	4631      	mov	r1, r6
 8017274:	464b      	mov	r3, r9
 8017276:	2205      	movs	r2, #5
 8017278:	4620      	mov	r0, r4
 801727a:	f000 ffe1 	bl	8018240 <__multadd>
 801727e:	4601      	mov	r1, r0
 8017280:	4606      	mov	r6, r0
 8017282:	4658      	mov	r0, fp
 8017284:	f001 fa28 	bl	80186d8 <__mcmp>
 8017288:	2800      	cmp	r0, #0
 801728a:	f73f adbe 	bgt.w	8016e0a <_dtoa_r+0x4a2>
 801728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017290:	9d00      	ldr	r5, [sp, #0]
 8017292:	ea6f 0a03 	mvn.w	sl, r3
 8017296:	f04f 0800 	mov.w	r8, #0
 801729a:	4631      	mov	r1, r6
 801729c:	4620      	mov	r0, r4
 801729e:	f000 ffc6 	bl	801822e <_Bfree>
 80172a2:	2f00      	cmp	r7, #0
 80172a4:	f43f aeb4 	beq.w	8017010 <_dtoa_r+0x6a8>
 80172a8:	f1b8 0f00 	cmp.w	r8, #0
 80172ac:	d005      	beq.n	80172ba <_dtoa_r+0x952>
 80172ae:	45b8      	cmp	r8, r7
 80172b0:	d003      	beq.n	80172ba <_dtoa_r+0x952>
 80172b2:	4641      	mov	r1, r8
 80172b4:	4620      	mov	r0, r4
 80172b6:	f000 ffba 	bl	801822e <_Bfree>
 80172ba:	4639      	mov	r1, r7
 80172bc:	4620      	mov	r0, r4
 80172be:	f000 ffb6 	bl	801822e <_Bfree>
 80172c2:	e6a5      	b.n	8017010 <_dtoa_r+0x6a8>
 80172c4:	2600      	movs	r6, #0
 80172c6:	4637      	mov	r7, r6
 80172c8:	e7e1      	b.n	801728e <_dtoa_r+0x926>
 80172ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80172cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80172d0:	4637      	mov	r7, r6
 80172d2:	e59a      	b.n	8016e0a <_dtoa_r+0x4a2>
 80172d4:	9b08      	ldr	r3, [sp, #32]
 80172d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 80fc 	beq.w	80174d8 <_dtoa_r+0xb70>
 80172e0:	2d00      	cmp	r5, #0
 80172e2:	dd05      	ble.n	80172f0 <_dtoa_r+0x988>
 80172e4:	4639      	mov	r1, r7
 80172e6:	462a      	mov	r2, r5
 80172e8:	4620      	mov	r0, r4
 80172ea:	f001 f989 	bl	8018600 <__lshift>
 80172ee:	4607      	mov	r7, r0
 80172f0:	9b06      	ldr	r3, [sp, #24]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d05b      	beq.n	80173ae <_dtoa_r+0xa46>
 80172f6:	6879      	ldr	r1, [r7, #4]
 80172f8:	4620      	mov	r0, r4
 80172fa:	f000 ff73 	bl	80181e4 <_Balloc>
 80172fe:	4605      	mov	r5, r0
 8017300:	b920      	cbnz	r0, 801730c <_dtoa_r+0x9a4>
 8017302:	4b80      	ldr	r3, [pc, #512]	; (8017504 <_dtoa_r+0xb9c>)
 8017304:	4602      	mov	r2, r0
 8017306:	f240 21ea 	movw	r1, #746	; 0x2ea
 801730a:	e45b      	b.n	8016bc4 <_dtoa_r+0x25c>
 801730c:	693a      	ldr	r2, [r7, #16]
 801730e:	3202      	adds	r2, #2
 8017310:	0092      	lsls	r2, r2, #2
 8017312:	f107 010c 	add.w	r1, r7, #12
 8017316:	300c      	adds	r0, #12
 8017318:	f7fb fdd4 	bl	8012ec4 <memcpy>
 801731c:	2201      	movs	r2, #1
 801731e:	4629      	mov	r1, r5
 8017320:	4620      	mov	r0, r4
 8017322:	f001 f96d 	bl	8018600 <__lshift>
 8017326:	9b00      	ldr	r3, [sp, #0]
 8017328:	3301      	adds	r3, #1
 801732a:	9301      	str	r3, [sp, #4]
 801732c:	9b00      	ldr	r3, [sp, #0]
 801732e:	444b      	add	r3, r9
 8017330:	9307      	str	r3, [sp, #28]
 8017332:	9b02      	ldr	r3, [sp, #8]
 8017334:	f003 0301 	and.w	r3, r3, #1
 8017338:	46b8      	mov	r8, r7
 801733a:	9306      	str	r3, [sp, #24]
 801733c:	4607      	mov	r7, r0
 801733e:	9b01      	ldr	r3, [sp, #4]
 8017340:	4631      	mov	r1, r6
 8017342:	3b01      	subs	r3, #1
 8017344:	4658      	mov	r0, fp
 8017346:	9302      	str	r3, [sp, #8]
 8017348:	f7ff fa80 	bl	801684c <quorem>
 801734c:	4603      	mov	r3, r0
 801734e:	3330      	adds	r3, #48	; 0x30
 8017350:	9004      	str	r0, [sp, #16]
 8017352:	4641      	mov	r1, r8
 8017354:	4658      	mov	r0, fp
 8017356:	9308      	str	r3, [sp, #32]
 8017358:	f001 f9be 	bl	80186d8 <__mcmp>
 801735c:	463a      	mov	r2, r7
 801735e:	4681      	mov	r9, r0
 8017360:	4631      	mov	r1, r6
 8017362:	4620      	mov	r0, r4
 8017364:	f001 f9d4 	bl	8018710 <__mdiff>
 8017368:	68c2      	ldr	r2, [r0, #12]
 801736a:	9b08      	ldr	r3, [sp, #32]
 801736c:	4605      	mov	r5, r0
 801736e:	bb02      	cbnz	r2, 80173b2 <_dtoa_r+0xa4a>
 8017370:	4601      	mov	r1, r0
 8017372:	4658      	mov	r0, fp
 8017374:	f001 f9b0 	bl	80186d8 <__mcmp>
 8017378:	9b08      	ldr	r3, [sp, #32]
 801737a:	4602      	mov	r2, r0
 801737c:	4629      	mov	r1, r5
 801737e:	4620      	mov	r0, r4
 8017380:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017384:	f000 ff53 	bl	801822e <_Bfree>
 8017388:	9b05      	ldr	r3, [sp, #20]
 801738a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801738c:	9d01      	ldr	r5, [sp, #4]
 801738e:	ea43 0102 	orr.w	r1, r3, r2
 8017392:	9b06      	ldr	r3, [sp, #24]
 8017394:	430b      	orrs	r3, r1
 8017396:	9b08      	ldr	r3, [sp, #32]
 8017398:	d10d      	bne.n	80173b6 <_dtoa_r+0xa4e>
 801739a:	2b39      	cmp	r3, #57	; 0x39
 801739c:	d029      	beq.n	80173f2 <_dtoa_r+0xa8a>
 801739e:	f1b9 0f00 	cmp.w	r9, #0
 80173a2:	dd01      	ble.n	80173a8 <_dtoa_r+0xa40>
 80173a4:	9b04      	ldr	r3, [sp, #16]
 80173a6:	3331      	adds	r3, #49	; 0x31
 80173a8:	9a02      	ldr	r2, [sp, #8]
 80173aa:	7013      	strb	r3, [r2, #0]
 80173ac:	e775      	b.n	801729a <_dtoa_r+0x932>
 80173ae:	4638      	mov	r0, r7
 80173b0:	e7b9      	b.n	8017326 <_dtoa_r+0x9be>
 80173b2:	2201      	movs	r2, #1
 80173b4:	e7e2      	b.n	801737c <_dtoa_r+0xa14>
 80173b6:	f1b9 0f00 	cmp.w	r9, #0
 80173ba:	db06      	blt.n	80173ca <_dtoa_r+0xa62>
 80173bc:	9905      	ldr	r1, [sp, #20]
 80173be:	ea41 0909 	orr.w	r9, r1, r9
 80173c2:	9906      	ldr	r1, [sp, #24]
 80173c4:	ea59 0101 	orrs.w	r1, r9, r1
 80173c8:	d120      	bne.n	801740c <_dtoa_r+0xaa4>
 80173ca:	2a00      	cmp	r2, #0
 80173cc:	ddec      	ble.n	80173a8 <_dtoa_r+0xa40>
 80173ce:	4659      	mov	r1, fp
 80173d0:	2201      	movs	r2, #1
 80173d2:	4620      	mov	r0, r4
 80173d4:	9301      	str	r3, [sp, #4]
 80173d6:	f001 f913 	bl	8018600 <__lshift>
 80173da:	4631      	mov	r1, r6
 80173dc:	4683      	mov	fp, r0
 80173de:	f001 f97b 	bl	80186d8 <__mcmp>
 80173e2:	2800      	cmp	r0, #0
 80173e4:	9b01      	ldr	r3, [sp, #4]
 80173e6:	dc02      	bgt.n	80173ee <_dtoa_r+0xa86>
 80173e8:	d1de      	bne.n	80173a8 <_dtoa_r+0xa40>
 80173ea:	07da      	lsls	r2, r3, #31
 80173ec:	d5dc      	bpl.n	80173a8 <_dtoa_r+0xa40>
 80173ee:	2b39      	cmp	r3, #57	; 0x39
 80173f0:	d1d8      	bne.n	80173a4 <_dtoa_r+0xa3c>
 80173f2:	9a02      	ldr	r2, [sp, #8]
 80173f4:	2339      	movs	r3, #57	; 0x39
 80173f6:	7013      	strb	r3, [r2, #0]
 80173f8:	462b      	mov	r3, r5
 80173fa:	461d      	mov	r5, r3
 80173fc:	3b01      	subs	r3, #1
 80173fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017402:	2a39      	cmp	r2, #57	; 0x39
 8017404:	d050      	beq.n	80174a8 <_dtoa_r+0xb40>
 8017406:	3201      	adds	r2, #1
 8017408:	701a      	strb	r2, [r3, #0]
 801740a:	e746      	b.n	801729a <_dtoa_r+0x932>
 801740c:	2a00      	cmp	r2, #0
 801740e:	dd03      	ble.n	8017418 <_dtoa_r+0xab0>
 8017410:	2b39      	cmp	r3, #57	; 0x39
 8017412:	d0ee      	beq.n	80173f2 <_dtoa_r+0xa8a>
 8017414:	3301      	adds	r3, #1
 8017416:	e7c7      	b.n	80173a8 <_dtoa_r+0xa40>
 8017418:	9a01      	ldr	r2, [sp, #4]
 801741a:	9907      	ldr	r1, [sp, #28]
 801741c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017420:	428a      	cmp	r2, r1
 8017422:	d02a      	beq.n	801747a <_dtoa_r+0xb12>
 8017424:	4659      	mov	r1, fp
 8017426:	2300      	movs	r3, #0
 8017428:	220a      	movs	r2, #10
 801742a:	4620      	mov	r0, r4
 801742c:	f000 ff08 	bl	8018240 <__multadd>
 8017430:	45b8      	cmp	r8, r7
 8017432:	4683      	mov	fp, r0
 8017434:	f04f 0300 	mov.w	r3, #0
 8017438:	f04f 020a 	mov.w	r2, #10
 801743c:	4641      	mov	r1, r8
 801743e:	4620      	mov	r0, r4
 8017440:	d107      	bne.n	8017452 <_dtoa_r+0xaea>
 8017442:	f000 fefd 	bl	8018240 <__multadd>
 8017446:	4680      	mov	r8, r0
 8017448:	4607      	mov	r7, r0
 801744a:	9b01      	ldr	r3, [sp, #4]
 801744c:	3301      	adds	r3, #1
 801744e:	9301      	str	r3, [sp, #4]
 8017450:	e775      	b.n	801733e <_dtoa_r+0x9d6>
 8017452:	f000 fef5 	bl	8018240 <__multadd>
 8017456:	4639      	mov	r1, r7
 8017458:	4680      	mov	r8, r0
 801745a:	2300      	movs	r3, #0
 801745c:	220a      	movs	r2, #10
 801745e:	4620      	mov	r0, r4
 8017460:	f000 feee 	bl	8018240 <__multadd>
 8017464:	4607      	mov	r7, r0
 8017466:	e7f0      	b.n	801744a <_dtoa_r+0xae2>
 8017468:	f1b9 0f00 	cmp.w	r9, #0
 801746c:	9a00      	ldr	r2, [sp, #0]
 801746e:	bfcc      	ite	gt
 8017470:	464d      	movgt	r5, r9
 8017472:	2501      	movle	r5, #1
 8017474:	4415      	add	r5, r2
 8017476:	f04f 0800 	mov.w	r8, #0
 801747a:	4659      	mov	r1, fp
 801747c:	2201      	movs	r2, #1
 801747e:	4620      	mov	r0, r4
 8017480:	9301      	str	r3, [sp, #4]
 8017482:	f001 f8bd 	bl	8018600 <__lshift>
 8017486:	4631      	mov	r1, r6
 8017488:	4683      	mov	fp, r0
 801748a:	f001 f925 	bl	80186d8 <__mcmp>
 801748e:	2800      	cmp	r0, #0
 8017490:	dcb2      	bgt.n	80173f8 <_dtoa_r+0xa90>
 8017492:	d102      	bne.n	801749a <_dtoa_r+0xb32>
 8017494:	9b01      	ldr	r3, [sp, #4]
 8017496:	07db      	lsls	r3, r3, #31
 8017498:	d4ae      	bmi.n	80173f8 <_dtoa_r+0xa90>
 801749a:	462b      	mov	r3, r5
 801749c:	461d      	mov	r5, r3
 801749e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80174a2:	2a30      	cmp	r2, #48	; 0x30
 80174a4:	d0fa      	beq.n	801749c <_dtoa_r+0xb34>
 80174a6:	e6f8      	b.n	801729a <_dtoa_r+0x932>
 80174a8:	9a00      	ldr	r2, [sp, #0]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d1a5      	bne.n	80173fa <_dtoa_r+0xa92>
 80174ae:	f10a 0a01 	add.w	sl, sl, #1
 80174b2:	2331      	movs	r3, #49	; 0x31
 80174b4:	e779      	b.n	80173aa <_dtoa_r+0xa42>
 80174b6:	4b14      	ldr	r3, [pc, #80]	; (8017508 <_dtoa_r+0xba0>)
 80174b8:	f7ff bab1 	b.w	8016a1e <_dtoa_r+0xb6>
 80174bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174be:	2b00      	cmp	r3, #0
 80174c0:	f47f aa93 	bne.w	80169ea <_dtoa_r+0x82>
 80174c4:	4b11      	ldr	r3, [pc, #68]	; (801750c <_dtoa_r+0xba4>)
 80174c6:	f7ff baaa 	b.w	8016a1e <_dtoa_r+0xb6>
 80174ca:	f1b9 0f00 	cmp.w	r9, #0
 80174ce:	dc03      	bgt.n	80174d8 <_dtoa_r+0xb70>
 80174d0:	9b05      	ldr	r3, [sp, #20]
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	f73f aeca 	bgt.w	801726c <_dtoa_r+0x904>
 80174d8:	9d00      	ldr	r5, [sp, #0]
 80174da:	4631      	mov	r1, r6
 80174dc:	4658      	mov	r0, fp
 80174de:	f7ff f9b5 	bl	801684c <quorem>
 80174e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80174e6:	f805 3b01 	strb.w	r3, [r5], #1
 80174ea:	9a00      	ldr	r2, [sp, #0]
 80174ec:	1aaa      	subs	r2, r5, r2
 80174ee:	4591      	cmp	r9, r2
 80174f0:	ddba      	ble.n	8017468 <_dtoa_r+0xb00>
 80174f2:	4659      	mov	r1, fp
 80174f4:	2300      	movs	r3, #0
 80174f6:	220a      	movs	r2, #10
 80174f8:	4620      	mov	r0, r4
 80174fa:	f000 fea1 	bl	8018240 <__multadd>
 80174fe:	4683      	mov	fp, r0
 8017500:	e7eb      	b.n	80174da <_dtoa_r+0xb72>
 8017502:	bf00      	nop
 8017504:	0801c1c7 	.word	0x0801c1c7
 8017508:	0801c052 	.word	0x0801c052
 801750c:	0801c1be 	.word	0x0801c1be

08017510 <__errno>:
 8017510:	4b01      	ldr	r3, [pc, #4]	; (8017518 <__errno+0x8>)
 8017512:	6818      	ldr	r0, [r3, #0]
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop
 8017518:	200029c4 	.word	0x200029c4

0801751c <__sflush_r>:
 801751c:	898b      	ldrh	r3, [r1, #12]
 801751e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017526:	4605      	mov	r5, r0
 8017528:	0718      	lsls	r0, r3, #28
 801752a:	460c      	mov	r4, r1
 801752c:	d45f      	bmi.n	80175ee <__sflush_r+0xd2>
 801752e:	684b      	ldr	r3, [r1, #4]
 8017530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017534:	2b00      	cmp	r3, #0
 8017536:	818a      	strh	r2, [r1, #12]
 8017538:	dc05      	bgt.n	8017546 <__sflush_r+0x2a>
 801753a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801753c:	2b00      	cmp	r3, #0
 801753e:	dc02      	bgt.n	8017546 <__sflush_r+0x2a>
 8017540:	2000      	movs	r0, #0
 8017542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017548:	2e00      	cmp	r6, #0
 801754a:	d0f9      	beq.n	8017540 <__sflush_r+0x24>
 801754c:	2300      	movs	r3, #0
 801754e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017552:	682f      	ldr	r7, [r5, #0]
 8017554:	602b      	str	r3, [r5, #0]
 8017556:	d036      	beq.n	80175c6 <__sflush_r+0xaa>
 8017558:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801755a:	89a3      	ldrh	r3, [r4, #12]
 801755c:	075a      	lsls	r2, r3, #29
 801755e:	d505      	bpl.n	801756c <__sflush_r+0x50>
 8017560:	6863      	ldr	r3, [r4, #4]
 8017562:	1ac0      	subs	r0, r0, r3
 8017564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017566:	b10b      	cbz	r3, 801756c <__sflush_r+0x50>
 8017568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801756a:	1ac0      	subs	r0, r0, r3
 801756c:	2300      	movs	r3, #0
 801756e:	4602      	mov	r2, r0
 8017570:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017572:	69e1      	ldr	r1, [r4, #28]
 8017574:	4628      	mov	r0, r5
 8017576:	47b0      	blx	r6
 8017578:	1c43      	adds	r3, r0, #1
 801757a:	89a3      	ldrh	r3, [r4, #12]
 801757c:	d106      	bne.n	801758c <__sflush_r+0x70>
 801757e:	6829      	ldr	r1, [r5, #0]
 8017580:	291d      	cmp	r1, #29
 8017582:	d830      	bhi.n	80175e6 <__sflush_r+0xca>
 8017584:	4a2b      	ldr	r2, [pc, #172]	; (8017634 <__sflush_r+0x118>)
 8017586:	40ca      	lsrs	r2, r1
 8017588:	07d6      	lsls	r6, r2, #31
 801758a:	d52c      	bpl.n	80175e6 <__sflush_r+0xca>
 801758c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017590:	b21b      	sxth	r3, r3
 8017592:	2200      	movs	r2, #0
 8017594:	6062      	str	r2, [r4, #4]
 8017596:	04d9      	lsls	r1, r3, #19
 8017598:	6922      	ldr	r2, [r4, #16]
 801759a:	81a3      	strh	r3, [r4, #12]
 801759c:	6022      	str	r2, [r4, #0]
 801759e:	d504      	bpl.n	80175aa <__sflush_r+0x8e>
 80175a0:	1c42      	adds	r2, r0, #1
 80175a2:	d101      	bne.n	80175a8 <__sflush_r+0x8c>
 80175a4:	682b      	ldr	r3, [r5, #0]
 80175a6:	b903      	cbnz	r3, 80175aa <__sflush_r+0x8e>
 80175a8:	6520      	str	r0, [r4, #80]	; 0x50
 80175aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80175ac:	602f      	str	r7, [r5, #0]
 80175ae:	2900      	cmp	r1, #0
 80175b0:	d0c6      	beq.n	8017540 <__sflush_r+0x24>
 80175b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80175b6:	4299      	cmp	r1, r3
 80175b8:	d002      	beq.n	80175c0 <__sflush_r+0xa4>
 80175ba:	4628      	mov	r0, r5
 80175bc:	f000 f938 	bl	8017830 <_free_r>
 80175c0:	2000      	movs	r0, #0
 80175c2:	6320      	str	r0, [r4, #48]	; 0x30
 80175c4:	e7bd      	b.n	8017542 <__sflush_r+0x26>
 80175c6:	69e1      	ldr	r1, [r4, #28]
 80175c8:	2301      	movs	r3, #1
 80175ca:	4628      	mov	r0, r5
 80175cc:	47b0      	blx	r6
 80175ce:	1c41      	adds	r1, r0, #1
 80175d0:	d1c3      	bne.n	801755a <__sflush_r+0x3e>
 80175d2:	682b      	ldr	r3, [r5, #0]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d0c0      	beq.n	801755a <__sflush_r+0x3e>
 80175d8:	2b1d      	cmp	r3, #29
 80175da:	d001      	beq.n	80175e0 <__sflush_r+0xc4>
 80175dc:	2b16      	cmp	r3, #22
 80175de:	d101      	bne.n	80175e4 <__sflush_r+0xc8>
 80175e0:	602f      	str	r7, [r5, #0]
 80175e2:	e7ad      	b.n	8017540 <__sflush_r+0x24>
 80175e4:	89a3      	ldrh	r3, [r4, #12]
 80175e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175ea:	81a3      	strh	r3, [r4, #12]
 80175ec:	e7a9      	b.n	8017542 <__sflush_r+0x26>
 80175ee:	690f      	ldr	r7, [r1, #16]
 80175f0:	2f00      	cmp	r7, #0
 80175f2:	d0a5      	beq.n	8017540 <__sflush_r+0x24>
 80175f4:	079b      	lsls	r3, r3, #30
 80175f6:	680e      	ldr	r6, [r1, #0]
 80175f8:	bf08      	it	eq
 80175fa:	694b      	ldreq	r3, [r1, #20]
 80175fc:	600f      	str	r7, [r1, #0]
 80175fe:	bf18      	it	ne
 8017600:	2300      	movne	r3, #0
 8017602:	eba6 0807 	sub.w	r8, r6, r7
 8017606:	608b      	str	r3, [r1, #8]
 8017608:	f1b8 0f00 	cmp.w	r8, #0
 801760c:	dd98      	ble.n	8017540 <__sflush_r+0x24>
 801760e:	69e1      	ldr	r1, [r4, #28]
 8017610:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017612:	4643      	mov	r3, r8
 8017614:	463a      	mov	r2, r7
 8017616:	4628      	mov	r0, r5
 8017618:	47b0      	blx	r6
 801761a:	2800      	cmp	r0, #0
 801761c:	dc06      	bgt.n	801762c <__sflush_r+0x110>
 801761e:	89a3      	ldrh	r3, [r4, #12]
 8017620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017624:	81a3      	strh	r3, [r4, #12]
 8017626:	f04f 30ff 	mov.w	r0, #4294967295
 801762a:	e78a      	b.n	8017542 <__sflush_r+0x26>
 801762c:	4407      	add	r7, r0
 801762e:	eba8 0800 	sub.w	r8, r8, r0
 8017632:	e7e9      	b.n	8017608 <__sflush_r+0xec>
 8017634:	20400001 	.word	0x20400001

08017638 <_fflush_r>:
 8017638:	b538      	push	{r3, r4, r5, lr}
 801763a:	460c      	mov	r4, r1
 801763c:	4605      	mov	r5, r0
 801763e:	b118      	cbz	r0, 8017648 <_fflush_r+0x10>
 8017640:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017642:	b90b      	cbnz	r3, 8017648 <_fflush_r+0x10>
 8017644:	f000 f864 	bl	8017710 <__sinit>
 8017648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801764c:	b1bb      	cbz	r3, 801767e <_fflush_r+0x46>
 801764e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017650:	07d0      	lsls	r0, r2, #31
 8017652:	d404      	bmi.n	801765e <_fflush_r+0x26>
 8017654:	0599      	lsls	r1, r3, #22
 8017656:	d402      	bmi.n	801765e <_fflush_r+0x26>
 8017658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801765a:	f000 fd43 	bl	80180e4 <__retarget_lock_acquire_recursive>
 801765e:	4628      	mov	r0, r5
 8017660:	4621      	mov	r1, r4
 8017662:	f7ff ff5b 	bl	801751c <__sflush_r>
 8017666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017668:	07da      	lsls	r2, r3, #31
 801766a:	4605      	mov	r5, r0
 801766c:	d405      	bmi.n	801767a <_fflush_r+0x42>
 801766e:	89a3      	ldrh	r3, [r4, #12]
 8017670:	059b      	lsls	r3, r3, #22
 8017672:	d402      	bmi.n	801767a <_fflush_r+0x42>
 8017674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017676:	f000 fd36 	bl	80180e6 <__retarget_lock_release_recursive>
 801767a:	4628      	mov	r0, r5
 801767c:	bd38      	pop	{r3, r4, r5, pc}
 801767e:	461d      	mov	r5, r3
 8017680:	e7fb      	b.n	801767a <_fflush_r+0x42>
	...

08017684 <std>:
 8017684:	2300      	movs	r3, #0
 8017686:	b510      	push	{r4, lr}
 8017688:	4604      	mov	r4, r0
 801768a:	e9c0 3300 	strd	r3, r3, [r0]
 801768e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017692:	6083      	str	r3, [r0, #8]
 8017694:	8181      	strh	r1, [r0, #12]
 8017696:	6643      	str	r3, [r0, #100]	; 0x64
 8017698:	81c2      	strh	r2, [r0, #14]
 801769a:	6183      	str	r3, [r0, #24]
 801769c:	4619      	mov	r1, r3
 801769e:	2208      	movs	r2, #8
 80176a0:	305c      	adds	r0, #92	; 0x5c
 80176a2:	f7fb fc1d 	bl	8012ee0 <memset>
 80176a6:	4b07      	ldr	r3, [pc, #28]	; (80176c4 <std+0x40>)
 80176a8:	6223      	str	r3, [r4, #32]
 80176aa:	4b07      	ldr	r3, [pc, #28]	; (80176c8 <std+0x44>)
 80176ac:	6263      	str	r3, [r4, #36]	; 0x24
 80176ae:	4b07      	ldr	r3, [pc, #28]	; (80176cc <std+0x48>)
 80176b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80176b2:	4b07      	ldr	r3, [pc, #28]	; (80176d0 <std+0x4c>)
 80176b4:	61e4      	str	r4, [r4, #28]
 80176b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80176b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80176bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176c0:	f000 bd0e 	b.w	80180e0 <__retarget_lock_init_recursive>
 80176c4:	08018b41 	.word	0x08018b41
 80176c8:	08018b63 	.word	0x08018b63
 80176cc:	08018b9b 	.word	0x08018b9b
 80176d0:	08018bbf 	.word	0x08018bbf

080176d4 <_cleanup_r>:
 80176d4:	4901      	ldr	r1, [pc, #4]	; (80176dc <_cleanup_r+0x8>)
 80176d6:	f000 b96b 	b.w	80179b0 <_fwalk_reent>
 80176da:	bf00      	nop
 80176dc:	08019851 	.word	0x08019851

080176e0 <__sfp_lock_acquire>:
 80176e0:	4801      	ldr	r0, [pc, #4]	; (80176e8 <__sfp_lock_acquire+0x8>)
 80176e2:	f000 bcff 	b.w	80180e4 <__retarget_lock_acquire_recursive>
 80176e6:	bf00      	nop
 80176e8:	20011380 	.word	0x20011380

080176ec <__sfp_lock_release>:
 80176ec:	4801      	ldr	r0, [pc, #4]	; (80176f4 <__sfp_lock_release+0x8>)
 80176ee:	f000 bcfa 	b.w	80180e6 <__retarget_lock_release_recursive>
 80176f2:	bf00      	nop
 80176f4:	20011380 	.word	0x20011380

080176f8 <__sinit_lock_acquire>:
 80176f8:	4801      	ldr	r0, [pc, #4]	; (8017700 <__sinit_lock_acquire+0x8>)
 80176fa:	f000 bcf3 	b.w	80180e4 <__retarget_lock_acquire_recursive>
 80176fe:	bf00      	nop
 8017700:	2001137b 	.word	0x2001137b

08017704 <__sinit_lock_release>:
 8017704:	4801      	ldr	r0, [pc, #4]	; (801770c <__sinit_lock_release+0x8>)
 8017706:	f000 bcee 	b.w	80180e6 <__retarget_lock_release_recursive>
 801770a:	bf00      	nop
 801770c:	2001137b 	.word	0x2001137b

08017710 <__sinit>:
 8017710:	b510      	push	{r4, lr}
 8017712:	4604      	mov	r4, r0
 8017714:	f7ff fff0 	bl	80176f8 <__sinit_lock_acquire>
 8017718:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801771a:	b11a      	cbz	r2, 8017724 <__sinit+0x14>
 801771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017720:	f7ff bff0 	b.w	8017704 <__sinit_lock_release>
 8017724:	4b0d      	ldr	r3, [pc, #52]	; (801775c <__sinit+0x4c>)
 8017726:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017728:	2303      	movs	r3, #3
 801772a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801772e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8017732:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8017736:	6860      	ldr	r0, [r4, #4]
 8017738:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801773c:	2104      	movs	r1, #4
 801773e:	f7ff ffa1 	bl	8017684 <std>
 8017742:	68a0      	ldr	r0, [r4, #8]
 8017744:	2201      	movs	r2, #1
 8017746:	2109      	movs	r1, #9
 8017748:	f7ff ff9c 	bl	8017684 <std>
 801774c:	68e0      	ldr	r0, [r4, #12]
 801774e:	2202      	movs	r2, #2
 8017750:	2112      	movs	r1, #18
 8017752:	f7ff ff97 	bl	8017684 <std>
 8017756:	2301      	movs	r3, #1
 8017758:	63a3      	str	r3, [r4, #56]	; 0x38
 801775a:	e7df      	b.n	801771c <__sinit+0xc>
 801775c:	080176d5 	.word	0x080176d5

08017760 <__libc_fini_array>:
 8017760:	b538      	push	{r3, r4, r5, lr}
 8017762:	4d07      	ldr	r5, [pc, #28]	; (8017780 <__libc_fini_array+0x20>)
 8017764:	4c07      	ldr	r4, [pc, #28]	; (8017784 <__libc_fini_array+0x24>)
 8017766:	1b64      	subs	r4, r4, r5
 8017768:	10a4      	asrs	r4, r4, #2
 801776a:	b91c      	cbnz	r4, 8017774 <__libc_fini_array+0x14>
 801776c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017770:	f002 bd46 	b.w	801a200 <_fini>
 8017774:	3c01      	subs	r4, #1
 8017776:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801777a:	4798      	blx	r3
 801777c:	e7f5      	b.n	801776a <__libc_fini_array+0xa>
 801777e:	bf00      	nop
 8017780:	0801c480 	.word	0x0801c480
 8017784:	0801c484 	.word	0x0801c484

08017788 <_malloc_trim_r>:
 8017788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801778c:	4606      	mov	r6, r0
 801778e:	2008      	movs	r0, #8
 8017790:	460c      	mov	r4, r1
 8017792:	f7fd fd2d 	bl	80151f0 <sysconf>
 8017796:	4f23      	ldr	r7, [pc, #140]	; (8017824 <_malloc_trim_r+0x9c>)
 8017798:	4680      	mov	r8, r0
 801779a:	4630      	mov	r0, r6
 801779c:	f7fb fba8 	bl	8012ef0 <__malloc_lock>
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	685d      	ldr	r5, [r3, #4]
 80177a4:	f025 0503 	bic.w	r5, r5, #3
 80177a8:	1b2c      	subs	r4, r5, r4
 80177aa:	3c11      	subs	r4, #17
 80177ac:	4444      	add	r4, r8
 80177ae:	fbb4 f4f8 	udiv	r4, r4, r8
 80177b2:	3c01      	subs	r4, #1
 80177b4:	fb08 f404 	mul.w	r4, r8, r4
 80177b8:	45a0      	cmp	r8, r4
 80177ba:	dd05      	ble.n	80177c8 <_malloc_trim_r+0x40>
 80177bc:	4630      	mov	r0, r6
 80177be:	f7fb fb9d 	bl	8012efc <__malloc_unlock>
 80177c2:	2000      	movs	r0, #0
 80177c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c8:	2100      	movs	r1, #0
 80177ca:	4630      	mov	r0, r6
 80177cc:	f7fb fbae 	bl	8012f2c <_sbrk_r>
 80177d0:	68bb      	ldr	r3, [r7, #8]
 80177d2:	442b      	add	r3, r5
 80177d4:	4298      	cmp	r0, r3
 80177d6:	d1f1      	bne.n	80177bc <_malloc_trim_r+0x34>
 80177d8:	4261      	negs	r1, r4
 80177da:	4630      	mov	r0, r6
 80177dc:	f7fb fba6 	bl	8012f2c <_sbrk_r>
 80177e0:	3001      	adds	r0, #1
 80177e2:	d110      	bne.n	8017806 <_malloc_trim_r+0x7e>
 80177e4:	2100      	movs	r1, #0
 80177e6:	4630      	mov	r0, r6
 80177e8:	f7fb fba0 	bl	8012f2c <_sbrk_r>
 80177ec:	68ba      	ldr	r2, [r7, #8]
 80177ee:	1a83      	subs	r3, r0, r2
 80177f0:	2b0f      	cmp	r3, #15
 80177f2:	dde3      	ble.n	80177bc <_malloc_trim_r+0x34>
 80177f4:	490c      	ldr	r1, [pc, #48]	; (8017828 <_malloc_trim_r+0xa0>)
 80177f6:	6809      	ldr	r1, [r1, #0]
 80177f8:	1a40      	subs	r0, r0, r1
 80177fa:	490c      	ldr	r1, [pc, #48]	; (801782c <_malloc_trim_r+0xa4>)
 80177fc:	f043 0301 	orr.w	r3, r3, #1
 8017800:	6008      	str	r0, [r1, #0]
 8017802:	6053      	str	r3, [r2, #4]
 8017804:	e7da      	b.n	80177bc <_malloc_trim_r+0x34>
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	4a08      	ldr	r2, [pc, #32]	; (801782c <_malloc_trim_r+0xa4>)
 801780a:	1b2d      	subs	r5, r5, r4
 801780c:	f045 0501 	orr.w	r5, r5, #1
 8017810:	605d      	str	r5, [r3, #4]
 8017812:	6813      	ldr	r3, [r2, #0]
 8017814:	4630      	mov	r0, r6
 8017816:	1b1c      	subs	r4, r3, r4
 8017818:	6014      	str	r4, [r2, #0]
 801781a:	f7fb fb6f 	bl	8012efc <__malloc_unlock>
 801781e:	2001      	movs	r0, #1
 8017820:	e7d0      	b.n	80177c4 <_malloc_trim_r+0x3c>
 8017822:	bf00      	nop
 8017824:	20002df0 	.word	0x20002df0
 8017828:	200031f8 	.word	0x200031f8
 801782c:	20004478 	.word	0x20004478

08017830 <_free_r>:
 8017830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017832:	4605      	mov	r5, r0
 8017834:	460f      	mov	r7, r1
 8017836:	2900      	cmp	r1, #0
 8017838:	f000 80b1 	beq.w	801799e <_free_r+0x16e>
 801783c:	f7fb fb58 	bl	8012ef0 <__malloc_lock>
 8017840:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017844:	4856      	ldr	r0, [pc, #344]	; (80179a0 <_free_r+0x170>)
 8017846:	f022 0401 	bic.w	r4, r2, #1
 801784a:	f1a7 0308 	sub.w	r3, r7, #8
 801784e:	eb03 0c04 	add.w	ip, r3, r4
 8017852:	6881      	ldr	r1, [r0, #8]
 8017854:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8017858:	4561      	cmp	r1, ip
 801785a:	f026 0603 	bic.w	r6, r6, #3
 801785e:	f002 0201 	and.w	r2, r2, #1
 8017862:	d11b      	bne.n	801789c <_free_r+0x6c>
 8017864:	4434      	add	r4, r6
 8017866:	b93a      	cbnz	r2, 8017878 <_free_r+0x48>
 8017868:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801786c:	1a9b      	subs	r3, r3, r2
 801786e:	4414      	add	r4, r2
 8017870:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8017874:	60ca      	str	r2, [r1, #12]
 8017876:	6091      	str	r1, [r2, #8]
 8017878:	f044 0201 	orr.w	r2, r4, #1
 801787c:	605a      	str	r2, [r3, #4]
 801787e:	6083      	str	r3, [r0, #8]
 8017880:	4b48      	ldr	r3, [pc, #288]	; (80179a4 <_free_r+0x174>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	42a3      	cmp	r3, r4
 8017886:	d804      	bhi.n	8017892 <_free_r+0x62>
 8017888:	4b47      	ldr	r3, [pc, #284]	; (80179a8 <_free_r+0x178>)
 801788a:	4628      	mov	r0, r5
 801788c:	6819      	ldr	r1, [r3, #0]
 801788e:	f7ff ff7b 	bl	8017788 <_malloc_trim_r>
 8017892:	4628      	mov	r0, r5
 8017894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017898:	f7fb bb30 	b.w	8012efc <__malloc_unlock>
 801789c:	f8cc 6004 	str.w	r6, [ip, #4]
 80178a0:	2a00      	cmp	r2, #0
 80178a2:	d138      	bne.n	8017916 <_free_r+0xe6>
 80178a4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80178a8:	1a5b      	subs	r3, r3, r1
 80178aa:	440c      	add	r4, r1
 80178ac:	6899      	ldr	r1, [r3, #8]
 80178ae:	f100 0708 	add.w	r7, r0, #8
 80178b2:	42b9      	cmp	r1, r7
 80178b4:	d031      	beq.n	801791a <_free_r+0xea>
 80178b6:	68df      	ldr	r7, [r3, #12]
 80178b8:	60cf      	str	r7, [r1, #12]
 80178ba:	60b9      	str	r1, [r7, #8]
 80178bc:	eb0c 0106 	add.w	r1, ip, r6
 80178c0:	6849      	ldr	r1, [r1, #4]
 80178c2:	07c9      	lsls	r1, r1, #31
 80178c4:	d40b      	bmi.n	80178de <_free_r+0xae>
 80178c6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80178ca:	4434      	add	r4, r6
 80178cc:	bb3a      	cbnz	r2, 801791e <_free_r+0xee>
 80178ce:	4e37      	ldr	r6, [pc, #220]	; (80179ac <_free_r+0x17c>)
 80178d0:	42b1      	cmp	r1, r6
 80178d2:	d124      	bne.n	801791e <_free_r+0xee>
 80178d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80178d8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80178dc:	2201      	movs	r2, #1
 80178de:	f044 0101 	orr.w	r1, r4, #1
 80178e2:	6059      	str	r1, [r3, #4]
 80178e4:	511c      	str	r4, [r3, r4]
 80178e6:	2a00      	cmp	r2, #0
 80178e8:	d1d3      	bne.n	8017892 <_free_r+0x62>
 80178ea:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80178ee:	d21b      	bcs.n	8017928 <_free_r+0xf8>
 80178f0:	0961      	lsrs	r1, r4, #5
 80178f2:	08e2      	lsrs	r2, r4, #3
 80178f4:	2401      	movs	r4, #1
 80178f6:	408c      	lsls	r4, r1
 80178f8:	6841      	ldr	r1, [r0, #4]
 80178fa:	3201      	adds	r2, #1
 80178fc:	430c      	orrs	r4, r1
 80178fe:	6044      	str	r4, [r0, #4]
 8017900:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8017904:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8017908:	3908      	subs	r1, #8
 801790a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801790e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8017912:	60e3      	str	r3, [r4, #12]
 8017914:	e7bd      	b.n	8017892 <_free_r+0x62>
 8017916:	2200      	movs	r2, #0
 8017918:	e7d0      	b.n	80178bc <_free_r+0x8c>
 801791a:	2201      	movs	r2, #1
 801791c:	e7ce      	b.n	80178bc <_free_r+0x8c>
 801791e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8017922:	60ce      	str	r6, [r1, #12]
 8017924:	60b1      	str	r1, [r6, #8]
 8017926:	e7da      	b.n	80178de <_free_r+0xae>
 8017928:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801792c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8017930:	d214      	bcs.n	801795c <_free_r+0x12c>
 8017932:	09a2      	lsrs	r2, r4, #6
 8017934:	3238      	adds	r2, #56	; 0x38
 8017936:	1c51      	adds	r1, r2, #1
 8017938:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801793c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8017940:	428e      	cmp	r6, r1
 8017942:	d125      	bne.n	8017990 <_free_r+0x160>
 8017944:	2401      	movs	r4, #1
 8017946:	1092      	asrs	r2, r2, #2
 8017948:	fa04 f202 	lsl.w	r2, r4, r2
 801794c:	6844      	ldr	r4, [r0, #4]
 801794e:	4322      	orrs	r2, r4
 8017950:	6042      	str	r2, [r0, #4]
 8017952:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8017956:	60b3      	str	r3, [r6, #8]
 8017958:	60cb      	str	r3, [r1, #12]
 801795a:	e79a      	b.n	8017892 <_free_r+0x62>
 801795c:	2a14      	cmp	r2, #20
 801795e:	d801      	bhi.n	8017964 <_free_r+0x134>
 8017960:	325b      	adds	r2, #91	; 0x5b
 8017962:	e7e8      	b.n	8017936 <_free_r+0x106>
 8017964:	2a54      	cmp	r2, #84	; 0x54
 8017966:	d802      	bhi.n	801796e <_free_r+0x13e>
 8017968:	0b22      	lsrs	r2, r4, #12
 801796a:	326e      	adds	r2, #110	; 0x6e
 801796c:	e7e3      	b.n	8017936 <_free_r+0x106>
 801796e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8017972:	d802      	bhi.n	801797a <_free_r+0x14a>
 8017974:	0be2      	lsrs	r2, r4, #15
 8017976:	3277      	adds	r2, #119	; 0x77
 8017978:	e7dd      	b.n	8017936 <_free_r+0x106>
 801797a:	f240 5154 	movw	r1, #1364	; 0x554
 801797e:	428a      	cmp	r2, r1
 8017980:	bf9a      	itte	ls
 8017982:	0ca2      	lsrls	r2, r4, #18
 8017984:	327c      	addls	r2, #124	; 0x7c
 8017986:	227e      	movhi	r2, #126	; 0x7e
 8017988:	e7d5      	b.n	8017936 <_free_r+0x106>
 801798a:	6889      	ldr	r1, [r1, #8]
 801798c:	428e      	cmp	r6, r1
 801798e:	d004      	beq.n	801799a <_free_r+0x16a>
 8017990:	684a      	ldr	r2, [r1, #4]
 8017992:	f022 0203 	bic.w	r2, r2, #3
 8017996:	42a2      	cmp	r2, r4
 8017998:	d8f7      	bhi.n	801798a <_free_r+0x15a>
 801799a:	68ce      	ldr	r6, [r1, #12]
 801799c:	e7d9      	b.n	8017952 <_free_r+0x122>
 801799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179a0:	20002df0 	.word	0x20002df0
 80179a4:	200031fc 	.word	0x200031fc
 80179a8:	200044a8 	.word	0x200044a8
 80179ac:	20002df8 	.word	0x20002df8

080179b0 <_fwalk_reent>:
 80179b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179b4:	4606      	mov	r6, r0
 80179b6:	4688      	mov	r8, r1
 80179b8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80179bc:	2700      	movs	r7, #0
 80179be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179c2:	f1b9 0901 	subs.w	r9, r9, #1
 80179c6:	d505      	bpl.n	80179d4 <_fwalk_reent+0x24>
 80179c8:	6824      	ldr	r4, [r4, #0]
 80179ca:	2c00      	cmp	r4, #0
 80179cc:	d1f7      	bne.n	80179be <_fwalk_reent+0xe>
 80179ce:	4638      	mov	r0, r7
 80179d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179d4:	89ab      	ldrh	r3, [r5, #12]
 80179d6:	2b01      	cmp	r3, #1
 80179d8:	d907      	bls.n	80179ea <_fwalk_reent+0x3a>
 80179da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179de:	3301      	adds	r3, #1
 80179e0:	d003      	beq.n	80179ea <_fwalk_reent+0x3a>
 80179e2:	4629      	mov	r1, r5
 80179e4:	4630      	mov	r0, r6
 80179e6:	47c0      	blx	r8
 80179e8:	4307      	orrs	r7, r0
 80179ea:	3568      	adds	r5, #104	; 0x68
 80179ec:	e7e9      	b.n	80179c2 <_fwalk_reent+0x12>

080179ee <rshift>:
 80179ee:	6903      	ldr	r3, [r0, #16]
 80179f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80179f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80179fc:	f100 0414 	add.w	r4, r0, #20
 8017a00:	dd45      	ble.n	8017a8e <rshift+0xa0>
 8017a02:	f011 011f 	ands.w	r1, r1, #31
 8017a06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017a0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017a0e:	d10c      	bne.n	8017a2a <rshift+0x3c>
 8017a10:	f100 0710 	add.w	r7, r0, #16
 8017a14:	4629      	mov	r1, r5
 8017a16:	42b1      	cmp	r1, r6
 8017a18:	d334      	bcc.n	8017a84 <rshift+0x96>
 8017a1a:	1a9b      	subs	r3, r3, r2
 8017a1c:	009b      	lsls	r3, r3, #2
 8017a1e:	1eea      	subs	r2, r5, #3
 8017a20:	4296      	cmp	r6, r2
 8017a22:	bf38      	it	cc
 8017a24:	2300      	movcc	r3, #0
 8017a26:	4423      	add	r3, r4
 8017a28:	e015      	b.n	8017a56 <rshift+0x68>
 8017a2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017a2e:	f1c1 0820 	rsb	r8, r1, #32
 8017a32:	40cf      	lsrs	r7, r1
 8017a34:	f105 0e04 	add.w	lr, r5, #4
 8017a38:	46a1      	mov	r9, r4
 8017a3a:	4576      	cmp	r6, lr
 8017a3c:	46f4      	mov	ip, lr
 8017a3e:	d815      	bhi.n	8017a6c <rshift+0x7e>
 8017a40:	1a9b      	subs	r3, r3, r2
 8017a42:	009a      	lsls	r2, r3, #2
 8017a44:	3a04      	subs	r2, #4
 8017a46:	3501      	adds	r5, #1
 8017a48:	42ae      	cmp	r6, r5
 8017a4a:	bf38      	it	cc
 8017a4c:	2200      	movcc	r2, #0
 8017a4e:	18a3      	adds	r3, r4, r2
 8017a50:	50a7      	str	r7, [r4, r2]
 8017a52:	b107      	cbz	r7, 8017a56 <rshift+0x68>
 8017a54:	3304      	adds	r3, #4
 8017a56:	1b1a      	subs	r2, r3, r4
 8017a58:	42a3      	cmp	r3, r4
 8017a5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017a5e:	bf08      	it	eq
 8017a60:	2300      	moveq	r3, #0
 8017a62:	6102      	str	r2, [r0, #16]
 8017a64:	bf08      	it	eq
 8017a66:	6143      	streq	r3, [r0, #20]
 8017a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a6c:	f8dc c000 	ldr.w	ip, [ip]
 8017a70:	fa0c fc08 	lsl.w	ip, ip, r8
 8017a74:	ea4c 0707 	orr.w	r7, ip, r7
 8017a78:	f849 7b04 	str.w	r7, [r9], #4
 8017a7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017a80:	40cf      	lsrs	r7, r1
 8017a82:	e7da      	b.n	8017a3a <rshift+0x4c>
 8017a84:	f851 cb04 	ldr.w	ip, [r1], #4
 8017a88:	f847 cf04 	str.w	ip, [r7, #4]!
 8017a8c:	e7c3      	b.n	8017a16 <rshift+0x28>
 8017a8e:	4623      	mov	r3, r4
 8017a90:	e7e1      	b.n	8017a56 <rshift+0x68>

08017a92 <__hexdig_fun>:
 8017a92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017a96:	2b09      	cmp	r3, #9
 8017a98:	d802      	bhi.n	8017aa0 <__hexdig_fun+0xe>
 8017a9a:	3820      	subs	r0, #32
 8017a9c:	b2c0      	uxtb	r0, r0
 8017a9e:	4770      	bx	lr
 8017aa0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017aa4:	2b05      	cmp	r3, #5
 8017aa6:	d801      	bhi.n	8017aac <__hexdig_fun+0x1a>
 8017aa8:	3847      	subs	r0, #71	; 0x47
 8017aaa:	e7f7      	b.n	8017a9c <__hexdig_fun+0xa>
 8017aac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017ab0:	2b05      	cmp	r3, #5
 8017ab2:	d801      	bhi.n	8017ab8 <__hexdig_fun+0x26>
 8017ab4:	3827      	subs	r0, #39	; 0x27
 8017ab6:	e7f1      	b.n	8017a9c <__hexdig_fun+0xa>
 8017ab8:	2000      	movs	r0, #0
 8017aba:	4770      	bx	lr

08017abc <__gethex>:
 8017abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac0:	ed2d 8b02 	vpush	{d8}
 8017ac4:	b089      	sub	sp, #36	; 0x24
 8017ac6:	ee08 0a10 	vmov	s16, r0
 8017aca:	9304      	str	r3, [sp, #16]
 8017acc:	4bbc      	ldr	r3, [pc, #752]	; (8017dc0 <__gethex+0x304>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	9301      	str	r3, [sp, #4]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	468b      	mov	fp, r1
 8017ad6:	4690      	mov	r8, r2
 8017ad8:	f7e8 fb94 	bl	8000204 <strlen>
 8017adc:	9b01      	ldr	r3, [sp, #4]
 8017ade:	f8db 2000 	ldr.w	r2, [fp]
 8017ae2:	4403      	add	r3, r0
 8017ae4:	4682      	mov	sl, r0
 8017ae6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017aea:	9305      	str	r3, [sp, #20]
 8017aec:	1c93      	adds	r3, r2, #2
 8017aee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017af2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017af6:	32fe      	adds	r2, #254	; 0xfe
 8017af8:	18d1      	adds	r1, r2, r3
 8017afa:	461f      	mov	r7, r3
 8017afc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017b00:	9100      	str	r1, [sp, #0]
 8017b02:	2830      	cmp	r0, #48	; 0x30
 8017b04:	d0f8      	beq.n	8017af8 <__gethex+0x3c>
 8017b06:	f7ff ffc4 	bl	8017a92 <__hexdig_fun>
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	d13a      	bne.n	8017b86 <__gethex+0xca>
 8017b10:	9901      	ldr	r1, [sp, #4]
 8017b12:	4652      	mov	r2, sl
 8017b14:	4638      	mov	r0, r7
 8017b16:	f7fb fa70 	bl	8012ffa <strncmp>
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d168      	bne.n	8017bf2 <__gethex+0x136>
 8017b20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017b24:	eb07 060a 	add.w	r6, r7, sl
 8017b28:	f7ff ffb3 	bl	8017a92 <__hexdig_fun>
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	d062      	beq.n	8017bf6 <__gethex+0x13a>
 8017b30:	4633      	mov	r3, r6
 8017b32:	7818      	ldrb	r0, [r3, #0]
 8017b34:	2830      	cmp	r0, #48	; 0x30
 8017b36:	461f      	mov	r7, r3
 8017b38:	f103 0301 	add.w	r3, r3, #1
 8017b3c:	d0f9      	beq.n	8017b32 <__gethex+0x76>
 8017b3e:	f7ff ffa8 	bl	8017a92 <__hexdig_fun>
 8017b42:	2301      	movs	r3, #1
 8017b44:	fab0 f480 	clz	r4, r0
 8017b48:	0964      	lsrs	r4, r4, #5
 8017b4a:	4635      	mov	r5, r6
 8017b4c:	9300      	str	r3, [sp, #0]
 8017b4e:	463a      	mov	r2, r7
 8017b50:	4616      	mov	r6, r2
 8017b52:	3201      	adds	r2, #1
 8017b54:	7830      	ldrb	r0, [r6, #0]
 8017b56:	f7ff ff9c 	bl	8017a92 <__hexdig_fun>
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	d1f8      	bne.n	8017b50 <__gethex+0x94>
 8017b5e:	9901      	ldr	r1, [sp, #4]
 8017b60:	4652      	mov	r2, sl
 8017b62:	4630      	mov	r0, r6
 8017b64:	f7fb fa49 	bl	8012ffa <strncmp>
 8017b68:	b980      	cbnz	r0, 8017b8c <__gethex+0xd0>
 8017b6a:	b94d      	cbnz	r5, 8017b80 <__gethex+0xc4>
 8017b6c:	eb06 050a 	add.w	r5, r6, sl
 8017b70:	462a      	mov	r2, r5
 8017b72:	4616      	mov	r6, r2
 8017b74:	3201      	adds	r2, #1
 8017b76:	7830      	ldrb	r0, [r6, #0]
 8017b78:	f7ff ff8b 	bl	8017a92 <__hexdig_fun>
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	d1f8      	bne.n	8017b72 <__gethex+0xb6>
 8017b80:	1bad      	subs	r5, r5, r6
 8017b82:	00ad      	lsls	r5, r5, #2
 8017b84:	e004      	b.n	8017b90 <__gethex+0xd4>
 8017b86:	2400      	movs	r4, #0
 8017b88:	4625      	mov	r5, r4
 8017b8a:	e7e0      	b.n	8017b4e <__gethex+0x92>
 8017b8c:	2d00      	cmp	r5, #0
 8017b8e:	d1f7      	bne.n	8017b80 <__gethex+0xc4>
 8017b90:	7833      	ldrb	r3, [r6, #0]
 8017b92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017b96:	2b50      	cmp	r3, #80	; 0x50
 8017b98:	d13b      	bne.n	8017c12 <__gethex+0x156>
 8017b9a:	7873      	ldrb	r3, [r6, #1]
 8017b9c:	2b2b      	cmp	r3, #43	; 0x2b
 8017b9e:	d02c      	beq.n	8017bfa <__gethex+0x13e>
 8017ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8017ba2:	d02e      	beq.n	8017c02 <__gethex+0x146>
 8017ba4:	1c71      	adds	r1, r6, #1
 8017ba6:	f04f 0900 	mov.w	r9, #0
 8017baa:	7808      	ldrb	r0, [r1, #0]
 8017bac:	f7ff ff71 	bl	8017a92 <__hexdig_fun>
 8017bb0:	1e43      	subs	r3, r0, #1
 8017bb2:	b2db      	uxtb	r3, r3
 8017bb4:	2b18      	cmp	r3, #24
 8017bb6:	d82c      	bhi.n	8017c12 <__gethex+0x156>
 8017bb8:	f1a0 0210 	sub.w	r2, r0, #16
 8017bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017bc0:	f7ff ff67 	bl	8017a92 <__hexdig_fun>
 8017bc4:	1e43      	subs	r3, r0, #1
 8017bc6:	b2db      	uxtb	r3, r3
 8017bc8:	2b18      	cmp	r3, #24
 8017bca:	d91d      	bls.n	8017c08 <__gethex+0x14c>
 8017bcc:	f1b9 0f00 	cmp.w	r9, #0
 8017bd0:	d000      	beq.n	8017bd4 <__gethex+0x118>
 8017bd2:	4252      	negs	r2, r2
 8017bd4:	4415      	add	r5, r2
 8017bd6:	f8cb 1000 	str.w	r1, [fp]
 8017bda:	b1e4      	cbz	r4, 8017c16 <__gethex+0x15a>
 8017bdc:	9b00      	ldr	r3, [sp, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	bf14      	ite	ne
 8017be2:	2700      	movne	r7, #0
 8017be4:	2706      	moveq	r7, #6
 8017be6:	4638      	mov	r0, r7
 8017be8:	b009      	add	sp, #36	; 0x24
 8017bea:	ecbd 8b02 	vpop	{d8}
 8017bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bf2:	463e      	mov	r6, r7
 8017bf4:	4625      	mov	r5, r4
 8017bf6:	2401      	movs	r4, #1
 8017bf8:	e7ca      	b.n	8017b90 <__gethex+0xd4>
 8017bfa:	f04f 0900 	mov.w	r9, #0
 8017bfe:	1cb1      	adds	r1, r6, #2
 8017c00:	e7d3      	b.n	8017baa <__gethex+0xee>
 8017c02:	f04f 0901 	mov.w	r9, #1
 8017c06:	e7fa      	b.n	8017bfe <__gethex+0x142>
 8017c08:	230a      	movs	r3, #10
 8017c0a:	fb03 0202 	mla	r2, r3, r2, r0
 8017c0e:	3a10      	subs	r2, #16
 8017c10:	e7d4      	b.n	8017bbc <__gethex+0x100>
 8017c12:	4631      	mov	r1, r6
 8017c14:	e7df      	b.n	8017bd6 <__gethex+0x11a>
 8017c16:	1bf3      	subs	r3, r6, r7
 8017c18:	3b01      	subs	r3, #1
 8017c1a:	4621      	mov	r1, r4
 8017c1c:	2b07      	cmp	r3, #7
 8017c1e:	dc0b      	bgt.n	8017c38 <__gethex+0x17c>
 8017c20:	ee18 0a10 	vmov	r0, s16
 8017c24:	f000 fade 	bl	80181e4 <_Balloc>
 8017c28:	4604      	mov	r4, r0
 8017c2a:	b940      	cbnz	r0, 8017c3e <__gethex+0x182>
 8017c2c:	4b65      	ldr	r3, [pc, #404]	; (8017dc4 <__gethex+0x308>)
 8017c2e:	4602      	mov	r2, r0
 8017c30:	21de      	movs	r1, #222	; 0xde
 8017c32:	4865      	ldr	r0, [pc, #404]	; (8017dc8 <__gethex+0x30c>)
 8017c34:	f001 fdb0 	bl	8019798 <__assert_func>
 8017c38:	3101      	adds	r1, #1
 8017c3a:	105b      	asrs	r3, r3, #1
 8017c3c:	e7ee      	b.n	8017c1c <__gethex+0x160>
 8017c3e:	f100 0914 	add.w	r9, r0, #20
 8017c42:	f04f 0b00 	mov.w	fp, #0
 8017c46:	f1ca 0301 	rsb	r3, sl, #1
 8017c4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8017c4e:	f8cd b000 	str.w	fp, [sp]
 8017c52:	9306      	str	r3, [sp, #24]
 8017c54:	42b7      	cmp	r7, r6
 8017c56:	d340      	bcc.n	8017cda <__gethex+0x21e>
 8017c58:	9802      	ldr	r0, [sp, #8]
 8017c5a:	9b00      	ldr	r3, [sp, #0]
 8017c5c:	f840 3b04 	str.w	r3, [r0], #4
 8017c60:	eba0 0009 	sub.w	r0, r0, r9
 8017c64:	1080      	asrs	r0, r0, #2
 8017c66:	0146      	lsls	r6, r0, #5
 8017c68:	6120      	str	r0, [r4, #16]
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f000 fb7c 	bl	8018368 <__hi0bits>
 8017c70:	1a30      	subs	r0, r6, r0
 8017c72:	f8d8 6000 	ldr.w	r6, [r8]
 8017c76:	42b0      	cmp	r0, r6
 8017c78:	dd63      	ble.n	8017d42 <__gethex+0x286>
 8017c7a:	1b87      	subs	r7, r0, r6
 8017c7c:	4639      	mov	r1, r7
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f000 fefc 	bl	8018a7c <__any_on>
 8017c84:	4682      	mov	sl, r0
 8017c86:	b1a8      	cbz	r0, 8017cb4 <__gethex+0x1f8>
 8017c88:	1e7b      	subs	r3, r7, #1
 8017c8a:	1159      	asrs	r1, r3, #5
 8017c8c:	f003 021f 	and.w	r2, r3, #31
 8017c90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017c94:	f04f 0a01 	mov.w	sl, #1
 8017c98:	fa0a f202 	lsl.w	r2, sl, r2
 8017c9c:	420a      	tst	r2, r1
 8017c9e:	d009      	beq.n	8017cb4 <__gethex+0x1f8>
 8017ca0:	4553      	cmp	r3, sl
 8017ca2:	dd05      	ble.n	8017cb0 <__gethex+0x1f4>
 8017ca4:	1eb9      	subs	r1, r7, #2
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f000 fee8 	bl	8018a7c <__any_on>
 8017cac:	2800      	cmp	r0, #0
 8017cae:	d145      	bne.n	8017d3c <__gethex+0x280>
 8017cb0:	f04f 0a02 	mov.w	sl, #2
 8017cb4:	4639      	mov	r1, r7
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	f7ff fe99 	bl	80179ee <rshift>
 8017cbc:	443d      	add	r5, r7
 8017cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017cc2:	42ab      	cmp	r3, r5
 8017cc4:	da4c      	bge.n	8017d60 <__gethex+0x2a4>
 8017cc6:	ee18 0a10 	vmov	r0, s16
 8017cca:	4621      	mov	r1, r4
 8017ccc:	f000 faaf 	bl	801822e <_Bfree>
 8017cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	6013      	str	r3, [r2, #0]
 8017cd6:	27a3      	movs	r7, #163	; 0xa3
 8017cd8:	e785      	b.n	8017be6 <__gethex+0x12a>
 8017cda:	1e73      	subs	r3, r6, #1
 8017cdc:	9a05      	ldr	r2, [sp, #20]
 8017cde:	9303      	str	r3, [sp, #12]
 8017ce0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d019      	beq.n	8017d1c <__gethex+0x260>
 8017ce8:	f1bb 0f20 	cmp.w	fp, #32
 8017cec:	d107      	bne.n	8017cfe <__gethex+0x242>
 8017cee:	9b02      	ldr	r3, [sp, #8]
 8017cf0:	9a00      	ldr	r2, [sp, #0]
 8017cf2:	f843 2b04 	str.w	r2, [r3], #4
 8017cf6:	9302      	str	r3, [sp, #8]
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	9300      	str	r3, [sp, #0]
 8017cfc:	469b      	mov	fp, r3
 8017cfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017d02:	f7ff fec6 	bl	8017a92 <__hexdig_fun>
 8017d06:	9b00      	ldr	r3, [sp, #0]
 8017d08:	f000 000f 	and.w	r0, r0, #15
 8017d0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017d10:	4303      	orrs	r3, r0
 8017d12:	9300      	str	r3, [sp, #0]
 8017d14:	f10b 0b04 	add.w	fp, fp, #4
 8017d18:	9b03      	ldr	r3, [sp, #12]
 8017d1a:	e00d      	b.n	8017d38 <__gethex+0x27c>
 8017d1c:	9b03      	ldr	r3, [sp, #12]
 8017d1e:	9a06      	ldr	r2, [sp, #24]
 8017d20:	4413      	add	r3, r2
 8017d22:	42bb      	cmp	r3, r7
 8017d24:	d3e0      	bcc.n	8017ce8 <__gethex+0x22c>
 8017d26:	4618      	mov	r0, r3
 8017d28:	9901      	ldr	r1, [sp, #4]
 8017d2a:	9307      	str	r3, [sp, #28]
 8017d2c:	4652      	mov	r2, sl
 8017d2e:	f7fb f964 	bl	8012ffa <strncmp>
 8017d32:	9b07      	ldr	r3, [sp, #28]
 8017d34:	2800      	cmp	r0, #0
 8017d36:	d1d7      	bne.n	8017ce8 <__gethex+0x22c>
 8017d38:	461e      	mov	r6, r3
 8017d3a:	e78b      	b.n	8017c54 <__gethex+0x198>
 8017d3c:	f04f 0a03 	mov.w	sl, #3
 8017d40:	e7b8      	b.n	8017cb4 <__gethex+0x1f8>
 8017d42:	da0a      	bge.n	8017d5a <__gethex+0x29e>
 8017d44:	1a37      	subs	r7, r6, r0
 8017d46:	4621      	mov	r1, r4
 8017d48:	ee18 0a10 	vmov	r0, s16
 8017d4c:	463a      	mov	r2, r7
 8017d4e:	f000 fc57 	bl	8018600 <__lshift>
 8017d52:	1bed      	subs	r5, r5, r7
 8017d54:	4604      	mov	r4, r0
 8017d56:	f100 0914 	add.w	r9, r0, #20
 8017d5a:	f04f 0a00 	mov.w	sl, #0
 8017d5e:	e7ae      	b.n	8017cbe <__gethex+0x202>
 8017d60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017d64:	42a8      	cmp	r0, r5
 8017d66:	dd72      	ble.n	8017e4e <__gethex+0x392>
 8017d68:	1b45      	subs	r5, r0, r5
 8017d6a:	42ae      	cmp	r6, r5
 8017d6c:	dc36      	bgt.n	8017ddc <__gethex+0x320>
 8017d6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d72:	2b02      	cmp	r3, #2
 8017d74:	d02a      	beq.n	8017dcc <__gethex+0x310>
 8017d76:	2b03      	cmp	r3, #3
 8017d78:	d02c      	beq.n	8017dd4 <__gethex+0x318>
 8017d7a:	2b01      	cmp	r3, #1
 8017d7c:	d115      	bne.n	8017daa <__gethex+0x2ee>
 8017d7e:	42ae      	cmp	r6, r5
 8017d80:	d113      	bne.n	8017daa <__gethex+0x2ee>
 8017d82:	2e01      	cmp	r6, #1
 8017d84:	d10b      	bne.n	8017d9e <__gethex+0x2e2>
 8017d86:	9a04      	ldr	r2, [sp, #16]
 8017d88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017d8c:	6013      	str	r3, [r2, #0]
 8017d8e:	2301      	movs	r3, #1
 8017d90:	6123      	str	r3, [r4, #16]
 8017d92:	f8c9 3000 	str.w	r3, [r9]
 8017d96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d98:	2762      	movs	r7, #98	; 0x62
 8017d9a:	601c      	str	r4, [r3, #0]
 8017d9c:	e723      	b.n	8017be6 <__gethex+0x12a>
 8017d9e:	1e71      	subs	r1, r6, #1
 8017da0:	4620      	mov	r0, r4
 8017da2:	f000 fe6b 	bl	8018a7c <__any_on>
 8017da6:	2800      	cmp	r0, #0
 8017da8:	d1ed      	bne.n	8017d86 <__gethex+0x2ca>
 8017daa:	ee18 0a10 	vmov	r0, s16
 8017dae:	4621      	mov	r1, r4
 8017db0:	f000 fa3d 	bl	801822e <_Bfree>
 8017db4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017db6:	2300      	movs	r3, #0
 8017db8:	6013      	str	r3, [r2, #0]
 8017dba:	2750      	movs	r7, #80	; 0x50
 8017dbc:	e713      	b.n	8017be6 <__gethex+0x12a>
 8017dbe:	bf00      	nop
 8017dc0:	0801c2a0 	.word	0x0801c2a0
 8017dc4:	0801c1c7 	.word	0x0801c1c7
 8017dc8:	0801c237 	.word	0x0801c237
 8017dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d1eb      	bne.n	8017daa <__gethex+0x2ee>
 8017dd2:	e7d8      	b.n	8017d86 <__gethex+0x2ca>
 8017dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d1d5      	bne.n	8017d86 <__gethex+0x2ca>
 8017dda:	e7e6      	b.n	8017daa <__gethex+0x2ee>
 8017ddc:	1e6f      	subs	r7, r5, #1
 8017dde:	f1ba 0f00 	cmp.w	sl, #0
 8017de2:	d131      	bne.n	8017e48 <__gethex+0x38c>
 8017de4:	b127      	cbz	r7, 8017df0 <__gethex+0x334>
 8017de6:	4639      	mov	r1, r7
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 fe47 	bl	8018a7c <__any_on>
 8017dee:	4682      	mov	sl, r0
 8017df0:	117b      	asrs	r3, r7, #5
 8017df2:	2101      	movs	r1, #1
 8017df4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017df8:	f007 071f 	and.w	r7, r7, #31
 8017dfc:	fa01 f707 	lsl.w	r7, r1, r7
 8017e00:	421f      	tst	r7, r3
 8017e02:	4629      	mov	r1, r5
 8017e04:	4620      	mov	r0, r4
 8017e06:	bf18      	it	ne
 8017e08:	f04a 0a02 	orrne.w	sl, sl, #2
 8017e0c:	1b76      	subs	r6, r6, r5
 8017e0e:	f7ff fdee 	bl	80179ee <rshift>
 8017e12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017e16:	2702      	movs	r7, #2
 8017e18:	f1ba 0f00 	cmp.w	sl, #0
 8017e1c:	d048      	beq.n	8017eb0 <__gethex+0x3f4>
 8017e1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d015      	beq.n	8017e52 <__gethex+0x396>
 8017e26:	2b03      	cmp	r3, #3
 8017e28:	d017      	beq.n	8017e5a <__gethex+0x39e>
 8017e2a:	2b01      	cmp	r3, #1
 8017e2c:	d109      	bne.n	8017e42 <__gethex+0x386>
 8017e2e:	f01a 0f02 	tst.w	sl, #2
 8017e32:	d006      	beq.n	8017e42 <__gethex+0x386>
 8017e34:	f8d9 0000 	ldr.w	r0, [r9]
 8017e38:	ea4a 0a00 	orr.w	sl, sl, r0
 8017e3c:	f01a 0f01 	tst.w	sl, #1
 8017e40:	d10e      	bne.n	8017e60 <__gethex+0x3a4>
 8017e42:	f047 0710 	orr.w	r7, r7, #16
 8017e46:	e033      	b.n	8017eb0 <__gethex+0x3f4>
 8017e48:	f04f 0a01 	mov.w	sl, #1
 8017e4c:	e7d0      	b.n	8017df0 <__gethex+0x334>
 8017e4e:	2701      	movs	r7, #1
 8017e50:	e7e2      	b.n	8017e18 <__gethex+0x35c>
 8017e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e54:	f1c3 0301 	rsb	r3, r3, #1
 8017e58:	9315      	str	r3, [sp, #84]	; 0x54
 8017e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d0f0      	beq.n	8017e42 <__gethex+0x386>
 8017e60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017e64:	f104 0314 	add.w	r3, r4, #20
 8017e68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017e6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017e70:	f04f 0c00 	mov.w	ip, #0
 8017e74:	4618      	mov	r0, r3
 8017e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017e7e:	d01c      	beq.n	8017eba <__gethex+0x3fe>
 8017e80:	3201      	adds	r2, #1
 8017e82:	6002      	str	r2, [r0, #0]
 8017e84:	2f02      	cmp	r7, #2
 8017e86:	f104 0314 	add.w	r3, r4, #20
 8017e8a:	d13f      	bne.n	8017f0c <__gethex+0x450>
 8017e8c:	f8d8 2000 	ldr.w	r2, [r8]
 8017e90:	3a01      	subs	r2, #1
 8017e92:	42b2      	cmp	r2, r6
 8017e94:	d10a      	bne.n	8017eac <__gethex+0x3f0>
 8017e96:	1171      	asrs	r1, r6, #5
 8017e98:	2201      	movs	r2, #1
 8017e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e9e:	f006 061f 	and.w	r6, r6, #31
 8017ea2:	fa02 f606 	lsl.w	r6, r2, r6
 8017ea6:	421e      	tst	r6, r3
 8017ea8:	bf18      	it	ne
 8017eaa:	4617      	movne	r7, r2
 8017eac:	f047 0720 	orr.w	r7, r7, #32
 8017eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017eb2:	601c      	str	r4, [r3, #0]
 8017eb4:	9b04      	ldr	r3, [sp, #16]
 8017eb6:	601d      	str	r5, [r3, #0]
 8017eb8:	e695      	b.n	8017be6 <__gethex+0x12a>
 8017eba:	4299      	cmp	r1, r3
 8017ebc:	f843 cc04 	str.w	ip, [r3, #-4]
 8017ec0:	d8d8      	bhi.n	8017e74 <__gethex+0x3b8>
 8017ec2:	68a3      	ldr	r3, [r4, #8]
 8017ec4:	459b      	cmp	fp, r3
 8017ec6:	db19      	blt.n	8017efc <__gethex+0x440>
 8017ec8:	6861      	ldr	r1, [r4, #4]
 8017eca:	ee18 0a10 	vmov	r0, s16
 8017ece:	3101      	adds	r1, #1
 8017ed0:	f000 f988 	bl	80181e4 <_Balloc>
 8017ed4:	4681      	mov	r9, r0
 8017ed6:	b918      	cbnz	r0, 8017ee0 <__gethex+0x424>
 8017ed8:	4b1a      	ldr	r3, [pc, #104]	; (8017f44 <__gethex+0x488>)
 8017eda:	4602      	mov	r2, r0
 8017edc:	2184      	movs	r1, #132	; 0x84
 8017ede:	e6a8      	b.n	8017c32 <__gethex+0x176>
 8017ee0:	6922      	ldr	r2, [r4, #16]
 8017ee2:	3202      	adds	r2, #2
 8017ee4:	f104 010c 	add.w	r1, r4, #12
 8017ee8:	0092      	lsls	r2, r2, #2
 8017eea:	300c      	adds	r0, #12
 8017eec:	f7fa ffea 	bl	8012ec4 <memcpy>
 8017ef0:	4621      	mov	r1, r4
 8017ef2:	ee18 0a10 	vmov	r0, s16
 8017ef6:	f000 f99a 	bl	801822e <_Bfree>
 8017efa:	464c      	mov	r4, r9
 8017efc:	6923      	ldr	r3, [r4, #16]
 8017efe:	1c5a      	adds	r2, r3, #1
 8017f00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017f04:	6122      	str	r2, [r4, #16]
 8017f06:	2201      	movs	r2, #1
 8017f08:	615a      	str	r2, [r3, #20]
 8017f0a:	e7bb      	b.n	8017e84 <__gethex+0x3c8>
 8017f0c:	6922      	ldr	r2, [r4, #16]
 8017f0e:	455a      	cmp	r2, fp
 8017f10:	dd0b      	ble.n	8017f2a <__gethex+0x46e>
 8017f12:	2101      	movs	r1, #1
 8017f14:	4620      	mov	r0, r4
 8017f16:	f7ff fd6a 	bl	80179ee <rshift>
 8017f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f1e:	3501      	adds	r5, #1
 8017f20:	42ab      	cmp	r3, r5
 8017f22:	f6ff aed0 	blt.w	8017cc6 <__gethex+0x20a>
 8017f26:	2701      	movs	r7, #1
 8017f28:	e7c0      	b.n	8017eac <__gethex+0x3f0>
 8017f2a:	f016 061f 	ands.w	r6, r6, #31
 8017f2e:	d0fa      	beq.n	8017f26 <__gethex+0x46a>
 8017f30:	449a      	add	sl, r3
 8017f32:	f1c6 0620 	rsb	r6, r6, #32
 8017f36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017f3a:	f000 fa15 	bl	8018368 <__hi0bits>
 8017f3e:	42b0      	cmp	r0, r6
 8017f40:	dbe7      	blt.n	8017f12 <__gethex+0x456>
 8017f42:	e7f0      	b.n	8017f26 <__gethex+0x46a>
 8017f44:	0801c1c7 	.word	0x0801c1c7

08017f48 <L_shift>:
 8017f48:	f1c2 0208 	rsb	r2, r2, #8
 8017f4c:	0092      	lsls	r2, r2, #2
 8017f4e:	b570      	push	{r4, r5, r6, lr}
 8017f50:	f1c2 0620 	rsb	r6, r2, #32
 8017f54:	6843      	ldr	r3, [r0, #4]
 8017f56:	6804      	ldr	r4, [r0, #0]
 8017f58:	fa03 f506 	lsl.w	r5, r3, r6
 8017f5c:	432c      	orrs	r4, r5
 8017f5e:	40d3      	lsrs	r3, r2
 8017f60:	6004      	str	r4, [r0, #0]
 8017f62:	f840 3f04 	str.w	r3, [r0, #4]!
 8017f66:	4288      	cmp	r0, r1
 8017f68:	d3f4      	bcc.n	8017f54 <L_shift+0xc>
 8017f6a:	bd70      	pop	{r4, r5, r6, pc}

08017f6c <__match>:
 8017f6c:	b530      	push	{r4, r5, lr}
 8017f6e:	6803      	ldr	r3, [r0, #0]
 8017f70:	3301      	adds	r3, #1
 8017f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f76:	b914      	cbnz	r4, 8017f7e <__match+0x12>
 8017f78:	6003      	str	r3, [r0, #0]
 8017f7a:	2001      	movs	r0, #1
 8017f7c:	bd30      	pop	{r4, r5, pc}
 8017f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017f86:	2d19      	cmp	r5, #25
 8017f88:	bf98      	it	ls
 8017f8a:	3220      	addls	r2, #32
 8017f8c:	42a2      	cmp	r2, r4
 8017f8e:	d0f0      	beq.n	8017f72 <__match+0x6>
 8017f90:	2000      	movs	r0, #0
 8017f92:	e7f3      	b.n	8017f7c <__match+0x10>

08017f94 <__hexnan>:
 8017f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f98:	680b      	ldr	r3, [r1, #0]
 8017f9a:	6801      	ldr	r1, [r0, #0]
 8017f9c:	115e      	asrs	r6, r3, #5
 8017f9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017fa2:	f013 031f 	ands.w	r3, r3, #31
 8017fa6:	b087      	sub	sp, #28
 8017fa8:	bf18      	it	ne
 8017faa:	3604      	addne	r6, #4
 8017fac:	2500      	movs	r5, #0
 8017fae:	1f37      	subs	r7, r6, #4
 8017fb0:	4682      	mov	sl, r0
 8017fb2:	4690      	mov	r8, r2
 8017fb4:	9301      	str	r3, [sp, #4]
 8017fb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8017fba:	46b9      	mov	r9, r7
 8017fbc:	463c      	mov	r4, r7
 8017fbe:	9502      	str	r5, [sp, #8]
 8017fc0:	46ab      	mov	fp, r5
 8017fc2:	784a      	ldrb	r2, [r1, #1]
 8017fc4:	1c4b      	adds	r3, r1, #1
 8017fc6:	9303      	str	r3, [sp, #12]
 8017fc8:	b342      	cbz	r2, 801801c <__hexnan+0x88>
 8017fca:	4610      	mov	r0, r2
 8017fcc:	9105      	str	r1, [sp, #20]
 8017fce:	9204      	str	r2, [sp, #16]
 8017fd0:	f7ff fd5f 	bl	8017a92 <__hexdig_fun>
 8017fd4:	2800      	cmp	r0, #0
 8017fd6:	d14f      	bne.n	8018078 <__hexnan+0xe4>
 8017fd8:	9a04      	ldr	r2, [sp, #16]
 8017fda:	9905      	ldr	r1, [sp, #20]
 8017fdc:	2a20      	cmp	r2, #32
 8017fde:	d818      	bhi.n	8018012 <__hexnan+0x7e>
 8017fe0:	9b02      	ldr	r3, [sp, #8]
 8017fe2:	459b      	cmp	fp, r3
 8017fe4:	dd13      	ble.n	801800e <__hexnan+0x7a>
 8017fe6:	454c      	cmp	r4, r9
 8017fe8:	d206      	bcs.n	8017ff8 <__hexnan+0x64>
 8017fea:	2d07      	cmp	r5, #7
 8017fec:	dc04      	bgt.n	8017ff8 <__hexnan+0x64>
 8017fee:	462a      	mov	r2, r5
 8017ff0:	4649      	mov	r1, r9
 8017ff2:	4620      	mov	r0, r4
 8017ff4:	f7ff ffa8 	bl	8017f48 <L_shift>
 8017ff8:	4544      	cmp	r4, r8
 8017ffa:	d950      	bls.n	801809e <__hexnan+0x10a>
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	f1a4 0904 	sub.w	r9, r4, #4
 8018002:	f844 3c04 	str.w	r3, [r4, #-4]
 8018006:	f8cd b008 	str.w	fp, [sp, #8]
 801800a:	464c      	mov	r4, r9
 801800c:	461d      	mov	r5, r3
 801800e:	9903      	ldr	r1, [sp, #12]
 8018010:	e7d7      	b.n	8017fc2 <__hexnan+0x2e>
 8018012:	2a29      	cmp	r2, #41	; 0x29
 8018014:	d156      	bne.n	80180c4 <__hexnan+0x130>
 8018016:	3102      	adds	r1, #2
 8018018:	f8ca 1000 	str.w	r1, [sl]
 801801c:	f1bb 0f00 	cmp.w	fp, #0
 8018020:	d050      	beq.n	80180c4 <__hexnan+0x130>
 8018022:	454c      	cmp	r4, r9
 8018024:	d206      	bcs.n	8018034 <__hexnan+0xa0>
 8018026:	2d07      	cmp	r5, #7
 8018028:	dc04      	bgt.n	8018034 <__hexnan+0xa0>
 801802a:	462a      	mov	r2, r5
 801802c:	4649      	mov	r1, r9
 801802e:	4620      	mov	r0, r4
 8018030:	f7ff ff8a 	bl	8017f48 <L_shift>
 8018034:	4544      	cmp	r4, r8
 8018036:	d934      	bls.n	80180a2 <__hexnan+0x10e>
 8018038:	f1a8 0204 	sub.w	r2, r8, #4
 801803c:	4623      	mov	r3, r4
 801803e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018042:	f842 1f04 	str.w	r1, [r2, #4]!
 8018046:	429f      	cmp	r7, r3
 8018048:	d2f9      	bcs.n	801803e <__hexnan+0xaa>
 801804a:	1b3b      	subs	r3, r7, r4
 801804c:	f023 0303 	bic.w	r3, r3, #3
 8018050:	3304      	adds	r3, #4
 8018052:	3401      	adds	r4, #1
 8018054:	3e03      	subs	r6, #3
 8018056:	42b4      	cmp	r4, r6
 8018058:	bf88      	it	hi
 801805a:	2304      	movhi	r3, #4
 801805c:	4443      	add	r3, r8
 801805e:	2200      	movs	r2, #0
 8018060:	f843 2b04 	str.w	r2, [r3], #4
 8018064:	429f      	cmp	r7, r3
 8018066:	d2fb      	bcs.n	8018060 <__hexnan+0xcc>
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	b91b      	cbnz	r3, 8018074 <__hexnan+0xe0>
 801806c:	4547      	cmp	r7, r8
 801806e:	d127      	bne.n	80180c0 <__hexnan+0x12c>
 8018070:	2301      	movs	r3, #1
 8018072:	603b      	str	r3, [r7, #0]
 8018074:	2005      	movs	r0, #5
 8018076:	e026      	b.n	80180c6 <__hexnan+0x132>
 8018078:	3501      	adds	r5, #1
 801807a:	2d08      	cmp	r5, #8
 801807c:	f10b 0b01 	add.w	fp, fp, #1
 8018080:	dd06      	ble.n	8018090 <__hexnan+0xfc>
 8018082:	4544      	cmp	r4, r8
 8018084:	d9c3      	bls.n	801800e <__hexnan+0x7a>
 8018086:	2300      	movs	r3, #0
 8018088:	f844 3c04 	str.w	r3, [r4, #-4]
 801808c:	2501      	movs	r5, #1
 801808e:	3c04      	subs	r4, #4
 8018090:	6822      	ldr	r2, [r4, #0]
 8018092:	f000 000f 	and.w	r0, r0, #15
 8018096:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801809a:	6022      	str	r2, [r4, #0]
 801809c:	e7b7      	b.n	801800e <__hexnan+0x7a>
 801809e:	2508      	movs	r5, #8
 80180a0:	e7b5      	b.n	801800e <__hexnan+0x7a>
 80180a2:	9b01      	ldr	r3, [sp, #4]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d0df      	beq.n	8018068 <__hexnan+0xd4>
 80180a8:	f04f 32ff 	mov.w	r2, #4294967295
 80180ac:	f1c3 0320 	rsb	r3, r3, #32
 80180b0:	fa22 f303 	lsr.w	r3, r2, r3
 80180b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80180b8:	401a      	ands	r2, r3
 80180ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80180be:	e7d3      	b.n	8018068 <__hexnan+0xd4>
 80180c0:	3f04      	subs	r7, #4
 80180c2:	e7d1      	b.n	8018068 <__hexnan+0xd4>
 80180c4:	2004      	movs	r0, #4
 80180c6:	b007      	add	sp, #28
 80180c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180cc <__locale_mb_cur_max>:
 80180cc:	4b01      	ldr	r3, [pc, #4]	; (80180d4 <__locale_mb_cur_max+0x8>)
 80180ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80180d2:	4770      	bx	lr
 80180d4:	20003208 	.word	0x20003208

080180d8 <_localeconv_r>:
 80180d8:	4800      	ldr	r0, [pc, #0]	; (80180dc <_localeconv_r+0x4>)
 80180da:	4770      	bx	lr
 80180dc:	200032f8 	.word	0x200032f8

080180e0 <__retarget_lock_init_recursive>:
 80180e0:	4770      	bx	lr

080180e2 <__retarget_lock_close_recursive>:
 80180e2:	4770      	bx	lr

080180e4 <__retarget_lock_acquire_recursive>:
 80180e4:	4770      	bx	lr

080180e6 <__retarget_lock_release_recursive>:
 80180e6:	4770      	bx	lr

080180e8 <__swhatbuf_r>:
 80180e8:	b570      	push	{r4, r5, r6, lr}
 80180ea:	460e      	mov	r6, r1
 80180ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180f0:	2900      	cmp	r1, #0
 80180f2:	b096      	sub	sp, #88	; 0x58
 80180f4:	4614      	mov	r4, r2
 80180f6:	461d      	mov	r5, r3
 80180f8:	da09      	bge.n	801810e <__swhatbuf_r+0x26>
 80180fa:	89b3      	ldrh	r3, [r6, #12]
 80180fc:	2200      	movs	r2, #0
 80180fe:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018102:	602a      	str	r2, [r5, #0]
 8018104:	d116      	bne.n	8018134 <__swhatbuf_r+0x4c>
 8018106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801810a:	6023      	str	r3, [r4, #0]
 801810c:	e015      	b.n	801813a <__swhatbuf_r+0x52>
 801810e:	466a      	mov	r2, sp
 8018110:	f001 fc74 	bl	80199fc <_fstat_r>
 8018114:	2800      	cmp	r0, #0
 8018116:	dbf0      	blt.n	80180fa <__swhatbuf_r+0x12>
 8018118:	9a01      	ldr	r2, [sp, #4]
 801811a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801811e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018122:	425a      	negs	r2, r3
 8018124:	415a      	adcs	r2, r3
 8018126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801812a:	602a      	str	r2, [r5, #0]
 801812c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018130:	6023      	str	r3, [r4, #0]
 8018132:	e002      	b.n	801813a <__swhatbuf_r+0x52>
 8018134:	2340      	movs	r3, #64	; 0x40
 8018136:	6023      	str	r3, [r4, #0]
 8018138:	4610      	mov	r0, r2
 801813a:	b016      	add	sp, #88	; 0x58
 801813c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018140 <__smakebuf_r>:
 8018140:	898b      	ldrh	r3, [r1, #12]
 8018142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018144:	079d      	lsls	r5, r3, #30
 8018146:	4606      	mov	r6, r0
 8018148:	460c      	mov	r4, r1
 801814a:	d507      	bpl.n	801815c <__smakebuf_r+0x1c>
 801814c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8018150:	6023      	str	r3, [r4, #0]
 8018152:	6123      	str	r3, [r4, #16]
 8018154:	2301      	movs	r3, #1
 8018156:	6163      	str	r3, [r4, #20]
 8018158:	b002      	add	sp, #8
 801815a:	bd70      	pop	{r4, r5, r6, pc}
 801815c:	ab01      	add	r3, sp, #4
 801815e:	466a      	mov	r2, sp
 8018160:	f7ff ffc2 	bl	80180e8 <__swhatbuf_r>
 8018164:	9900      	ldr	r1, [sp, #0]
 8018166:	4605      	mov	r5, r0
 8018168:	4630      	mov	r0, r6
 801816a:	f7fa fc5b 	bl	8012a24 <_malloc_r>
 801816e:	b948      	cbnz	r0, 8018184 <__smakebuf_r+0x44>
 8018170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018174:	059a      	lsls	r2, r3, #22
 8018176:	d4ef      	bmi.n	8018158 <__smakebuf_r+0x18>
 8018178:	f023 0303 	bic.w	r3, r3, #3
 801817c:	f043 0302 	orr.w	r3, r3, #2
 8018180:	81a3      	strh	r3, [r4, #12]
 8018182:	e7e3      	b.n	801814c <__smakebuf_r+0xc>
 8018184:	4b0d      	ldr	r3, [pc, #52]	; (80181bc <__smakebuf_r+0x7c>)
 8018186:	63f3      	str	r3, [r6, #60]	; 0x3c
 8018188:	89a3      	ldrh	r3, [r4, #12]
 801818a:	6020      	str	r0, [r4, #0]
 801818c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018190:	81a3      	strh	r3, [r4, #12]
 8018192:	9b00      	ldr	r3, [sp, #0]
 8018194:	6163      	str	r3, [r4, #20]
 8018196:	9b01      	ldr	r3, [sp, #4]
 8018198:	6120      	str	r0, [r4, #16]
 801819a:	b15b      	cbz	r3, 80181b4 <__smakebuf_r+0x74>
 801819c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181a0:	4630      	mov	r0, r6
 80181a2:	f001 fd87 	bl	8019cb4 <_isatty_r>
 80181a6:	b128      	cbz	r0, 80181b4 <__smakebuf_r+0x74>
 80181a8:	89a3      	ldrh	r3, [r4, #12]
 80181aa:	f023 0303 	bic.w	r3, r3, #3
 80181ae:	f043 0301 	orr.w	r3, r3, #1
 80181b2:	81a3      	strh	r3, [r4, #12]
 80181b4:	89a0      	ldrh	r0, [r4, #12]
 80181b6:	4305      	orrs	r5, r0
 80181b8:	81a5      	strh	r5, [r4, #12]
 80181ba:	e7cd      	b.n	8018158 <__smakebuf_r+0x18>
 80181bc:	080176d5 	.word	0x080176d5

080181c0 <__ascii_mbtowc>:
 80181c0:	b082      	sub	sp, #8
 80181c2:	b901      	cbnz	r1, 80181c6 <__ascii_mbtowc+0x6>
 80181c4:	a901      	add	r1, sp, #4
 80181c6:	b142      	cbz	r2, 80181da <__ascii_mbtowc+0x1a>
 80181c8:	b14b      	cbz	r3, 80181de <__ascii_mbtowc+0x1e>
 80181ca:	7813      	ldrb	r3, [r2, #0]
 80181cc:	600b      	str	r3, [r1, #0]
 80181ce:	7812      	ldrb	r2, [r2, #0]
 80181d0:	1e10      	subs	r0, r2, #0
 80181d2:	bf18      	it	ne
 80181d4:	2001      	movne	r0, #1
 80181d6:	b002      	add	sp, #8
 80181d8:	4770      	bx	lr
 80181da:	4610      	mov	r0, r2
 80181dc:	e7fb      	b.n	80181d6 <__ascii_mbtowc+0x16>
 80181de:	f06f 0001 	mvn.w	r0, #1
 80181e2:	e7f8      	b.n	80181d6 <__ascii_mbtowc+0x16>

080181e4 <_Balloc>:
 80181e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80181e6:	b570      	push	{r4, r5, r6, lr}
 80181e8:	4605      	mov	r5, r0
 80181ea:	460c      	mov	r4, r1
 80181ec:	b17b      	cbz	r3, 801820e <_Balloc+0x2a>
 80181ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80181f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80181f4:	b9a0      	cbnz	r0, 8018220 <_Balloc+0x3c>
 80181f6:	2101      	movs	r1, #1
 80181f8:	fa01 f604 	lsl.w	r6, r1, r4
 80181fc:	1d72      	adds	r2, r6, #5
 80181fe:	0092      	lsls	r2, r2, #2
 8018200:	4628      	mov	r0, r5
 8018202:	f001 fae7 	bl	80197d4 <_calloc_r>
 8018206:	b148      	cbz	r0, 801821c <_Balloc+0x38>
 8018208:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801820c:	e00b      	b.n	8018226 <_Balloc+0x42>
 801820e:	2221      	movs	r2, #33	; 0x21
 8018210:	2104      	movs	r1, #4
 8018212:	f001 fadf 	bl	80197d4 <_calloc_r>
 8018216:	64e8      	str	r0, [r5, #76]	; 0x4c
 8018218:	2800      	cmp	r0, #0
 801821a:	d1e8      	bne.n	80181ee <_Balloc+0xa>
 801821c:	2000      	movs	r0, #0
 801821e:	bd70      	pop	{r4, r5, r6, pc}
 8018220:	6802      	ldr	r2, [r0, #0]
 8018222:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8018226:	2300      	movs	r3, #0
 8018228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801822c:	e7f7      	b.n	801821e <_Balloc+0x3a>

0801822e <_Bfree>:
 801822e:	b131      	cbz	r1, 801823e <_Bfree+0x10>
 8018230:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018232:	684a      	ldr	r2, [r1, #4]
 8018234:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018238:	6008      	str	r0, [r1, #0]
 801823a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801823e:	4770      	bx	lr

08018240 <__multadd>:
 8018240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018244:	690e      	ldr	r6, [r1, #16]
 8018246:	4607      	mov	r7, r0
 8018248:	4698      	mov	r8, r3
 801824a:	460c      	mov	r4, r1
 801824c:	f101 0014 	add.w	r0, r1, #20
 8018250:	2300      	movs	r3, #0
 8018252:	6805      	ldr	r5, [r0, #0]
 8018254:	b2a9      	uxth	r1, r5
 8018256:	fb02 8101 	mla	r1, r2, r1, r8
 801825a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801825e:	0c2d      	lsrs	r5, r5, #16
 8018260:	fb02 c505 	mla	r5, r2, r5, ip
 8018264:	b289      	uxth	r1, r1
 8018266:	3301      	adds	r3, #1
 8018268:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801826c:	429e      	cmp	r6, r3
 801826e:	f840 1b04 	str.w	r1, [r0], #4
 8018272:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018276:	dcec      	bgt.n	8018252 <__multadd+0x12>
 8018278:	f1b8 0f00 	cmp.w	r8, #0
 801827c:	d022      	beq.n	80182c4 <__multadd+0x84>
 801827e:	68a3      	ldr	r3, [r4, #8]
 8018280:	42b3      	cmp	r3, r6
 8018282:	dc19      	bgt.n	80182b8 <__multadd+0x78>
 8018284:	6861      	ldr	r1, [r4, #4]
 8018286:	4638      	mov	r0, r7
 8018288:	3101      	adds	r1, #1
 801828a:	f7ff ffab 	bl	80181e4 <_Balloc>
 801828e:	4605      	mov	r5, r0
 8018290:	b928      	cbnz	r0, 801829e <__multadd+0x5e>
 8018292:	4602      	mov	r2, r0
 8018294:	4b0d      	ldr	r3, [pc, #52]	; (80182cc <__multadd+0x8c>)
 8018296:	480e      	ldr	r0, [pc, #56]	; (80182d0 <__multadd+0x90>)
 8018298:	21b5      	movs	r1, #181	; 0xb5
 801829a:	f001 fa7d 	bl	8019798 <__assert_func>
 801829e:	6922      	ldr	r2, [r4, #16]
 80182a0:	3202      	adds	r2, #2
 80182a2:	f104 010c 	add.w	r1, r4, #12
 80182a6:	0092      	lsls	r2, r2, #2
 80182a8:	300c      	adds	r0, #12
 80182aa:	f7fa fe0b 	bl	8012ec4 <memcpy>
 80182ae:	4621      	mov	r1, r4
 80182b0:	4638      	mov	r0, r7
 80182b2:	f7ff ffbc 	bl	801822e <_Bfree>
 80182b6:	462c      	mov	r4, r5
 80182b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80182bc:	3601      	adds	r6, #1
 80182be:	f8c3 8014 	str.w	r8, [r3, #20]
 80182c2:	6126      	str	r6, [r4, #16]
 80182c4:	4620      	mov	r0, r4
 80182c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ca:	bf00      	nop
 80182cc:	0801c1c7 	.word	0x0801c1c7
 80182d0:	0801c2b4 	.word	0x0801c2b4

080182d4 <__s2b>:
 80182d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182d8:	460c      	mov	r4, r1
 80182da:	4615      	mov	r5, r2
 80182dc:	461f      	mov	r7, r3
 80182de:	2209      	movs	r2, #9
 80182e0:	3308      	adds	r3, #8
 80182e2:	4606      	mov	r6, r0
 80182e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80182e8:	2100      	movs	r1, #0
 80182ea:	2201      	movs	r2, #1
 80182ec:	429a      	cmp	r2, r3
 80182ee:	db09      	blt.n	8018304 <__s2b+0x30>
 80182f0:	4630      	mov	r0, r6
 80182f2:	f7ff ff77 	bl	80181e4 <_Balloc>
 80182f6:	b940      	cbnz	r0, 801830a <__s2b+0x36>
 80182f8:	4602      	mov	r2, r0
 80182fa:	4b19      	ldr	r3, [pc, #100]	; (8018360 <__s2b+0x8c>)
 80182fc:	4819      	ldr	r0, [pc, #100]	; (8018364 <__s2b+0x90>)
 80182fe:	21ce      	movs	r1, #206	; 0xce
 8018300:	f001 fa4a 	bl	8019798 <__assert_func>
 8018304:	0052      	lsls	r2, r2, #1
 8018306:	3101      	adds	r1, #1
 8018308:	e7f0      	b.n	80182ec <__s2b+0x18>
 801830a:	9b08      	ldr	r3, [sp, #32]
 801830c:	6143      	str	r3, [r0, #20]
 801830e:	2d09      	cmp	r5, #9
 8018310:	f04f 0301 	mov.w	r3, #1
 8018314:	6103      	str	r3, [r0, #16]
 8018316:	dd16      	ble.n	8018346 <__s2b+0x72>
 8018318:	f104 0909 	add.w	r9, r4, #9
 801831c:	46c8      	mov	r8, r9
 801831e:	442c      	add	r4, r5
 8018320:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018324:	4601      	mov	r1, r0
 8018326:	3b30      	subs	r3, #48	; 0x30
 8018328:	220a      	movs	r2, #10
 801832a:	4630      	mov	r0, r6
 801832c:	f7ff ff88 	bl	8018240 <__multadd>
 8018330:	45a0      	cmp	r8, r4
 8018332:	d1f5      	bne.n	8018320 <__s2b+0x4c>
 8018334:	f1a5 0408 	sub.w	r4, r5, #8
 8018338:	444c      	add	r4, r9
 801833a:	1b2d      	subs	r5, r5, r4
 801833c:	1963      	adds	r3, r4, r5
 801833e:	42bb      	cmp	r3, r7
 8018340:	db04      	blt.n	801834c <__s2b+0x78>
 8018342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018346:	340a      	adds	r4, #10
 8018348:	2509      	movs	r5, #9
 801834a:	e7f6      	b.n	801833a <__s2b+0x66>
 801834c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018350:	4601      	mov	r1, r0
 8018352:	3b30      	subs	r3, #48	; 0x30
 8018354:	220a      	movs	r2, #10
 8018356:	4630      	mov	r0, r6
 8018358:	f7ff ff72 	bl	8018240 <__multadd>
 801835c:	e7ee      	b.n	801833c <__s2b+0x68>
 801835e:	bf00      	nop
 8018360:	0801c1c7 	.word	0x0801c1c7
 8018364:	0801c2b4 	.word	0x0801c2b4

08018368 <__hi0bits>:
 8018368:	0c03      	lsrs	r3, r0, #16
 801836a:	041b      	lsls	r3, r3, #16
 801836c:	b9d3      	cbnz	r3, 80183a4 <__hi0bits+0x3c>
 801836e:	0400      	lsls	r0, r0, #16
 8018370:	2310      	movs	r3, #16
 8018372:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018376:	bf04      	itt	eq
 8018378:	0200      	lsleq	r0, r0, #8
 801837a:	3308      	addeq	r3, #8
 801837c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018380:	bf04      	itt	eq
 8018382:	0100      	lsleq	r0, r0, #4
 8018384:	3304      	addeq	r3, #4
 8018386:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801838a:	bf04      	itt	eq
 801838c:	0080      	lsleq	r0, r0, #2
 801838e:	3302      	addeq	r3, #2
 8018390:	2800      	cmp	r0, #0
 8018392:	db05      	blt.n	80183a0 <__hi0bits+0x38>
 8018394:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018398:	f103 0301 	add.w	r3, r3, #1
 801839c:	bf08      	it	eq
 801839e:	2320      	moveq	r3, #32
 80183a0:	4618      	mov	r0, r3
 80183a2:	4770      	bx	lr
 80183a4:	2300      	movs	r3, #0
 80183a6:	e7e4      	b.n	8018372 <__hi0bits+0xa>

080183a8 <__lo0bits>:
 80183a8:	6803      	ldr	r3, [r0, #0]
 80183aa:	f013 0207 	ands.w	r2, r3, #7
 80183ae:	4601      	mov	r1, r0
 80183b0:	d00b      	beq.n	80183ca <__lo0bits+0x22>
 80183b2:	07da      	lsls	r2, r3, #31
 80183b4:	d424      	bmi.n	8018400 <__lo0bits+0x58>
 80183b6:	0798      	lsls	r0, r3, #30
 80183b8:	bf49      	itett	mi
 80183ba:	085b      	lsrmi	r3, r3, #1
 80183bc:	089b      	lsrpl	r3, r3, #2
 80183be:	2001      	movmi	r0, #1
 80183c0:	600b      	strmi	r3, [r1, #0]
 80183c2:	bf5c      	itt	pl
 80183c4:	600b      	strpl	r3, [r1, #0]
 80183c6:	2002      	movpl	r0, #2
 80183c8:	4770      	bx	lr
 80183ca:	b298      	uxth	r0, r3
 80183cc:	b9b0      	cbnz	r0, 80183fc <__lo0bits+0x54>
 80183ce:	0c1b      	lsrs	r3, r3, #16
 80183d0:	2010      	movs	r0, #16
 80183d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80183d6:	bf04      	itt	eq
 80183d8:	0a1b      	lsreq	r3, r3, #8
 80183da:	3008      	addeq	r0, #8
 80183dc:	071a      	lsls	r2, r3, #28
 80183de:	bf04      	itt	eq
 80183e0:	091b      	lsreq	r3, r3, #4
 80183e2:	3004      	addeq	r0, #4
 80183e4:	079a      	lsls	r2, r3, #30
 80183e6:	bf04      	itt	eq
 80183e8:	089b      	lsreq	r3, r3, #2
 80183ea:	3002      	addeq	r0, #2
 80183ec:	07da      	lsls	r2, r3, #31
 80183ee:	d403      	bmi.n	80183f8 <__lo0bits+0x50>
 80183f0:	085b      	lsrs	r3, r3, #1
 80183f2:	f100 0001 	add.w	r0, r0, #1
 80183f6:	d005      	beq.n	8018404 <__lo0bits+0x5c>
 80183f8:	600b      	str	r3, [r1, #0]
 80183fa:	4770      	bx	lr
 80183fc:	4610      	mov	r0, r2
 80183fe:	e7e8      	b.n	80183d2 <__lo0bits+0x2a>
 8018400:	2000      	movs	r0, #0
 8018402:	4770      	bx	lr
 8018404:	2020      	movs	r0, #32
 8018406:	4770      	bx	lr

08018408 <__i2b>:
 8018408:	b510      	push	{r4, lr}
 801840a:	460c      	mov	r4, r1
 801840c:	2101      	movs	r1, #1
 801840e:	f7ff fee9 	bl	80181e4 <_Balloc>
 8018412:	4602      	mov	r2, r0
 8018414:	b928      	cbnz	r0, 8018422 <__i2b+0x1a>
 8018416:	4b05      	ldr	r3, [pc, #20]	; (801842c <__i2b+0x24>)
 8018418:	4805      	ldr	r0, [pc, #20]	; (8018430 <__i2b+0x28>)
 801841a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801841e:	f001 f9bb 	bl	8019798 <__assert_func>
 8018422:	2301      	movs	r3, #1
 8018424:	6144      	str	r4, [r0, #20]
 8018426:	6103      	str	r3, [r0, #16]
 8018428:	bd10      	pop	{r4, pc}
 801842a:	bf00      	nop
 801842c:	0801c1c7 	.word	0x0801c1c7
 8018430:	0801c2b4 	.word	0x0801c2b4

08018434 <__multiply>:
 8018434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018438:	4614      	mov	r4, r2
 801843a:	690a      	ldr	r2, [r1, #16]
 801843c:	6923      	ldr	r3, [r4, #16]
 801843e:	429a      	cmp	r2, r3
 8018440:	bfb8      	it	lt
 8018442:	460b      	movlt	r3, r1
 8018444:	460d      	mov	r5, r1
 8018446:	bfbc      	itt	lt
 8018448:	4625      	movlt	r5, r4
 801844a:	461c      	movlt	r4, r3
 801844c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018450:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018454:	68ab      	ldr	r3, [r5, #8]
 8018456:	6869      	ldr	r1, [r5, #4]
 8018458:	eb0a 0709 	add.w	r7, sl, r9
 801845c:	42bb      	cmp	r3, r7
 801845e:	b085      	sub	sp, #20
 8018460:	bfb8      	it	lt
 8018462:	3101      	addlt	r1, #1
 8018464:	f7ff febe 	bl	80181e4 <_Balloc>
 8018468:	b930      	cbnz	r0, 8018478 <__multiply+0x44>
 801846a:	4602      	mov	r2, r0
 801846c:	4b42      	ldr	r3, [pc, #264]	; (8018578 <__multiply+0x144>)
 801846e:	4843      	ldr	r0, [pc, #268]	; (801857c <__multiply+0x148>)
 8018470:	f240 115d 	movw	r1, #349	; 0x15d
 8018474:	f001 f990 	bl	8019798 <__assert_func>
 8018478:	f100 0614 	add.w	r6, r0, #20
 801847c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018480:	4633      	mov	r3, r6
 8018482:	2200      	movs	r2, #0
 8018484:	4543      	cmp	r3, r8
 8018486:	d31e      	bcc.n	80184c6 <__multiply+0x92>
 8018488:	f105 0c14 	add.w	ip, r5, #20
 801848c:	f104 0314 	add.w	r3, r4, #20
 8018490:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018494:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018498:	9202      	str	r2, [sp, #8]
 801849a:	ebac 0205 	sub.w	r2, ip, r5
 801849e:	3a15      	subs	r2, #21
 80184a0:	f022 0203 	bic.w	r2, r2, #3
 80184a4:	3204      	adds	r2, #4
 80184a6:	f105 0115 	add.w	r1, r5, #21
 80184aa:	458c      	cmp	ip, r1
 80184ac:	bf38      	it	cc
 80184ae:	2204      	movcc	r2, #4
 80184b0:	9201      	str	r2, [sp, #4]
 80184b2:	9a02      	ldr	r2, [sp, #8]
 80184b4:	9303      	str	r3, [sp, #12]
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d808      	bhi.n	80184cc <__multiply+0x98>
 80184ba:	2f00      	cmp	r7, #0
 80184bc:	dc55      	bgt.n	801856a <__multiply+0x136>
 80184be:	6107      	str	r7, [r0, #16]
 80184c0:	b005      	add	sp, #20
 80184c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184c6:	f843 2b04 	str.w	r2, [r3], #4
 80184ca:	e7db      	b.n	8018484 <__multiply+0x50>
 80184cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80184d0:	f1ba 0f00 	cmp.w	sl, #0
 80184d4:	d020      	beq.n	8018518 <__multiply+0xe4>
 80184d6:	f105 0e14 	add.w	lr, r5, #20
 80184da:	46b1      	mov	r9, r6
 80184dc:	2200      	movs	r2, #0
 80184de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80184e2:	f8d9 b000 	ldr.w	fp, [r9]
 80184e6:	b2a1      	uxth	r1, r4
 80184e8:	fa1f fb8b 	uxth.w	fp, fp
 80184ec:	fb0a b101 	mla	r1, sl, r1, fp
 80184f0:	4411      	add	r1, r2
 80184f2:	f8d9 2000 	ldr.w	r2, [r9]
 80184f6:	0c24      	lsrs	r4, r4, #16
 80184f8:	0c12      	lsrs	r2, r2, #16
 80184fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80184fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018502:	b289      	uxth	r1, r1
 8018504:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018508:	45f4      	cmp	ip, lr
 801850a:	f849 1b04 	str.w	r1, [r9], #4
 801850e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018512:	d8e4      	bhi.n	80184de <__multiply+0xaa>
 8018514:	9901      	ldr	r1, [sp, #4]
 8018516:	5072      	str	r2, [r6, r1]
 8018518:	9a03      	ldr	r2, [sp, #12]
 801851a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801851e:	3304      	adds	r3, #4
 8018520:	f1b9 0f00 	cmp.w	r9, #0
 8018524:	d01f      	beq.n	8018566 <__multiply+0x132>
 8018526:	6834      	ldr	r4, [r6, #0]
 8018528:	f105 0114 	add.w	r1, r5, #20
 801852c:	46b6      	mov	lr, r6
 801852e:	f04f 0a00 	mov.w	sl, #0
 8018532:	880a      	ldrh	r2, [r1, #0]
 8018534:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018538:	fb09 b202 	mla	r2, r9, r2, fp
 801853c:	4492      	add	sl, r2
 801853e:	b2a4      	uxth	r4, r4
 8018540:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018544:	f84e 4b04 	str.w	r4, [lr], #4
 8018548:	f851 4b04 	ldr.w	r4, [r1], #4
 801854c:	f8be 2000 	ldrh.w	r2, [lr]
 8018550:	0c24      	lsrs	r4, r4, #16
 8018552:	fb09 2404 	mla	r4, r9, r4, r2
 8018556:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801855a:	458c      	cmp	ip, r1
 801855c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018560:	d8e7      	bhi.n	8018532 <__multiply+0xfe>
 8018562:	9a01      	ldr	r2, [sp, #4]
 8018564:	50b4      	str	r4, [r6, r2]
 8018566:	3604      	adds	r6, #4
 8018568:	e7a3      	b.n	80184b2 <__multiply+0x7e>
 801856a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801856e:	2b00      	cmp	r3, #0
 8018570:	d1a5      	bne.n	80184be <__multiply+0x8a>
 8018572:	3f01      	subs	r7, #1
 8018574:	e7a1      	b.n	80184ba <__multiply+0x86>
 8018576:	bf00      	nop
 8018578:	0801c1c7 	.word	0x0801c1c7
 801857c:	0801c2b4 	.word	0x0801c2b4

08018580 <__pow5mult>:
 8018580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018584:	4615      	mov	r5, r2
 8018586:	f012 0203 	ands.w	r2, r2, #3
 801858a:	4606      	mov	r6, r0
 801858c:	460f      	mov	r7, r1
 801858e:	d007      	beq.n	80185a0 <__pow5mult+0x20>
 8018590:	4c1a      	ldr	r4, [pc, #104]	; (80185fc <__pow5mult+0x7c>)
 8018592:	3a01      	subs	r2, #1
 8018594:	2300      	movs	r3, #0
 8018596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801859a:	f7ff fe51 	bl	8018240 <__multadd>
 801859e:	4607      	mov	r7, r0
 80185a0:	10ad      	asrs	r5, r5, #2
 80185a2:	d027      	beq.n	80185f4 <__pow5mult+0x74>
 80185a4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80185a6:	b944      	cbnz	r4, 80185ba <__pow5mult+0x3a>
 80185a8:	f240 2171 	movw	r1, #625	; 0x271
 80185ac:	4630      	mov	r0, r6
 80185ae:	f7ff ff2b 	bl	8018408 <__i2b>
 80185b2:	2300      	movs	r3, #0
 80185b4:	64b0      	str	r0, [r6, #72]	; 0x48
 80185b6:	4604      	mov	r4, r0
 80185b8:	6003      	str	r3, [r0, #0]
 80185ba:	f04f 0900 	mov.w	r9, #0
 80185be:	07eb      	lsls	r3, r5, #31
 80185c0:	d50a      	bpl.n	80185d8 <__pow5mult+0x58>
 80185c2:	4639      	mov	r1, r7
 80185c4:	4622      	mov	r2, r4
 80185c6:	4630      	mov	r0, r6
 80185c8:	f7ff ff34 	bl	8018434 <__multiply>
 80185cc:	4639      	mov	r1, r7
 80185ce:	4680      	mov	r8, r0
 80185d0:	4630      	mov	r0, r6
 80185d2:	f7ff fe2c 	bl	801822e <_Bfree>
 80185d6:	4647      	mov	r7, r8
 80185d8:	106d      	asrs	r5, r5, #1
 80185da:	d00b      	beq.n	80185f4 <__pow5mult+0x74>
 80185dc:	6820      	ldr	r0, [r4, #0]
 80185de:	b938      	cbnz	r0, 80185f0 <__pow5mult+0x70>
 80185e0:	4622      	mov	r2, r4
 80185e2:	4621      	mov	r1, r4
 80185e4:	4630      	mov	r0, r6
 80185e6:	f7ff ff25 	bl	8018434 <__multiply>
 80185ea:	6020      	str	r0, [r4, #0]
 80185ec:	f8c0 9000 	str.w	r9, [r0]
 80185f0:	4604      	mov	r4, r0
 80185f2:	e7e4      	b.n	80185be <__pow5mult+0x3e>
 80185f4:	4638      	mov	r0, r7
 80185f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185fa:	bf00      	nop
 80185fc:	0801c408 	.word	0x0801c408

08018600 <__lshift>:
 8018600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018604:	460c      	mov	r4, r1
 8018606:	6849      	ldr	r1, [r1, #4]
 8018608:	6923      	ldr	r3, [r4, #16]
 801860a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801860e:	68a3      	ldr	r3, [r4, #8]
 8018610:	4607      	mov	r7, r0
 8018612:	4691      	mov	r9, r2
 8018614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018618:	f108 0601 	add.w	r6, r8, #1
 801861c:	42b3      	cmp	r3, r6
 801861e:	db0b      	blt.n	8018638 <__lshift+0x38>
 8018620:	4638      	mov	r0, r7
 8018622:	f7ff fddf 	bl	80181e4 <_Balloc>
 8018626:	4605      	mov	r5, r0
 8018628:	b948      	cbnz	r0, 801863e <__lshift+0x3e>
 801862a:	4602      	mov	r2, r0
 801862c:	4b28      	ldr	r3, [pc, #160]	; (80186d0 <__lshift+0xd0>)
 801862e:	4829      	ldr	r0, [pc, #164]	; (80186d4 <__lshift+0xd4>)
 8018630:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018634:	f001 f8b0 	bl	8019798 <__assert_func>
 8018638:	3101      	adds	r1, #1
 801863a:	005b      	lsls	r3, r3, #1
 801863c:	e7ee      	b.n	801861c <__lshift+0x1c>
 801863e:	2300      	movs	r3, #0
 8018640:	f100 0114 	add.w	r1, r0, #20
 8018644:	f100 0210 	add.w	r2, r0, #16
 8018648:	4618      	mov	r0, r3
 801864a:	4553      	cmp	r3, sl
 801864c:	db33      	blt.n	80186b6 <__lshift+0xb6>
 801864e:	6920      	ldr	r0, [r4, #16]
 8018650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018654:	f104 0314 	add.w	r3, r4, #20
 8018658:	f019 091f 	ands.w	r9, r9, #31
 801865c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018664:	d02b      	beq.n	80186be <__lshift+0xbe>
 8018666:	f1c9 0e20 	rsb	lr, r9, #32
 801866a:	468a      	mov	sl, r1
 801866c:	2200      	movs	r2, #0
 801866e:	6818      	ldr	r0, [r3, #0]
 8018670:	fa00 f009 	lsl.w	r0, r0, r9
 8018674:	4302      	orrs	r2, r0
 8018676:	f84a 2b04 	str.w	r2, [sl], #4
 801867a:	f853 2b04 	ldr.w	r2, [r3], #4
 801867e:	459c      	cmp	ip, r3
 8018680:	fa22 f20e 	lsr.w	r2, r2, lr
 8018684:	d8f3      	bhi.n	801866e <__lshift+0x6e>
 8018686:	ebac 0304 	sub.w	r3, ip, r4
 801868a:	3b15      	subs	r3, #21
 801868c:	f023 0303 	bic.w	r3, r3, #3
 8018690:	3304      	adds	r3, #4
 8018692:	f104 0015 	add.w	r0, r4, #21
 8018696:	4584      	cmp	ip, r0
 8018698:	bf38      	it	cc
 801869a:	2304      	movcc	r3, #4
 801869c:	50ca      	str	r2, [r1, r3]
 801869e:	b10a      	cbz	r2, 80186a4 <__lshift+0xa4>
 80186a0:	f108 0602 	add.w	r6, r8, #2
 80186a4:	3e01      	subs	r6, #1
 80186a6:	4638      	mov	r0, r7
 80186a8:	612e      	str	r6, [r5, #16]
 80186aa:	4621      	mov	r1, r4
 80186ac:	f7ff fdbf 	bl	801822e <_Bfree>
 80186b0:	4628      	mov	r0, r5
 80186b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80186ba:	3301      	adds	r3, #1
 80186bc:	e7c5      	b.n	801864a <__lshift+0x4a>
 80186be:	3904      	subs	r1, #4
 80186c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80186c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80186c8:	459c      	cmp	ip, r3
 80186ca:	d8f9      	bhi.n	80186c0 <__lshift+0xc0>
 80186cc:	e7ea      	b.n	80186a4 <__lshift+0xa4>
 80186ce:	bf00      	nop
 80186d0:	0801c1c7 	.word	0x0801c1c7
 80186d4:	0801c2b4 	.word	0x0801c2b4

080186d8 <__mcmp>:
 80186d8:	b530      	push	{r4, r5, lr}
 80186da:	6902      	ldr	r2, [r0, #16]
 80186dc:	690c      	ldr	r4, [r1, #16]
 80186de:	1b12      	subs	r2, r2, r4
 80186e0:	d10e      	bne.n	8018700 <__mcmp+0x28>
 80186e2:	f100 0314 	add.w	r3, r0, #20
 80186e6:	3114      	adds	r1, #20
 80186e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80186ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80186f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80186f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80186f8:	42a5      	cmp	r5, r4
 80186fa:	d003      	beq.n	8018704 <__mcmp+0x2c>
 80186fc:	d305      	bcc.n	801870a <__mcmp+0x32>
 80186fe:	2201      	movs	r2, #1
 8018700:	4610      	mov	r0, r2
 8018702:	bd30      	pop	{r4, r5, pc}
 8018704:	4283      	cmp	r3, r0
 8018706:	d3f3      	bcc.n	80186f0 <__mcmp+0x18>
 8018708:	e7fa      	b.n	8018700 <__mcmp+0x28>
 801870a:	f04f 32ff 	mov.w	r2, #4294967295
 801870e:	e7f7      	b.n	8018700 <__mcmp+0x28>

08018710 <__mdiff>:
 8018710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018714:	460c      	mov	r4, r1
 8018716:	4606      	mov	r6, r0
 8018718:	4611      	mov	r1, r2
 801871a:	4620      	mov	r0, r4
 801871c:	4617      	mov	r7, r2
 801871e:	f7ff ffdb 	bl	80186d8 <__mcmp>
 8018722:	1e05      	subs	r5, r0, #0
 8018724:	d110      	bne.n	8018748 <__mdiff+0x38>
 8018726:	4629      	mov	r1, r5
 8018728:	4630      	mov	r0, r6
 801872a:	f7ff fd5b 	bl	80181e4 <_Balloc>
 801872e:	b930      	cbnz	r0, 801873e <__mdiff+0x2e>
 8018730:	4b39      	ldr	r3, [pc, #228]	; (8018818 <__mdiff+0x108>)
 8018732:	4602      	mov	r2, r0
 8018734:	f240 2132 	movw	r1, #562	; 0x232
 8018738:	4838      	ldr	r0, [pc, #224]	; (801881c <__mdiff+0x10c>)
 801873a:	f001 f82d 	bl	8019798 <__assert_func>
 801873e:	2301      	movs	r3, #1
 8018740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018748:	bfa4      	itt	ge
 801874a:	463b      	movge	r3, r7
 801874c:	4627      	movge	r7, r4
 801874e:	4630      	mov	r0, r6
 8018750:	6879      	ldr	r1, [r7, #4]
 8018752:	bfa6      	itte	ge
 8018754:	461c      	movge	r4, r3
 8018756:	2500      	movge	r5, #0
 8018758:	2501      	movlt	r5, #1
 801875a:	f7ff fd43 	bl	80181e4 <_Balloc>
 801875e:	b920      	cbnz	r0, 801876a <__mdiff+0x5a>
 8018760:	4b2d      	ldr	r3, [pc, #180]	; (8018818 <__mdiff+0x108>)
 8018762:	4602      	mov	r2, r0
 8018764:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018768:	e7e6      	b.n	8018738 <__mdiff+0x28>
 801876a:	693e      	ldr	r6, [r7, #16]
 801876c:	60c5      	str	r5, [r0, #12]
 801876e:	6925      	ldr	r5, [r4, #16]
 8018770:	f107 0114 	add.w	r1, r7, #20
 8018774:	f104 0914 	add.w	r9, r4, #20
 8018778:	f100 0e14 	add.w	lr, r0, #20
 801877c:	f107 0210 	add.w	r2, r7, #16
 8018780:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018784:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018788:	46f2      	mov	sl, lr
 801878a:	2700      	movs	r7, #0
 801878c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018794:	fa1f f883 	uxth.w	r8, r3
 8018798:	fa17 f78b 	uxtah	r7, r7, fp
 801879c:	0c1b      	lsrs	r3, r3, #16
 801879e:	eba7 0808 	sub.w	r8, r7, r8
 80187a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80187a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80187aa:	fa1f f888 	uxth.w	r8, r8
 80187ae:	141f      	asrs	r7, r3, #16
 80187b0:	454d      	cmp	r5, r9
 80187b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80187b6:	f84a 3b04 	str.w	r3, [sl], #4
 80187ba:	d8e7      	bhi.n	801878c <__mdiff+0x7c>
 80187bc:	1b2b      	subs	r3, r5, r4
 80187be:	3b15      	subs	r3, #21
 80187c0:	f023 0303 	bic.w	r3, r3, #3
 80187c4:	3304      	adds	r3, #4
 80187c6:	3415      	adds	r4, #21
 80187c8:	42a5      	cmp	r5, r4
 80187ca:	bf38      	it	cc
 80187cc:	2304      	movcc	r3, #4
 80187ce:	4419      	add	r1, r3
 80187d0:	4473      	add	r3, lr
 80187d2:	469e      	mov	lr, r3
 80187d4:	460d      	mov	r5, r1
 80187d6:	4565      	cmp	r5, ip
 80187d8:	d30e      	bcc.n	80187f8 <__mdiff+0xe8>
 80187da:	f10c 0203 	add.w	r2, ip, #3
 80187de:	1a52      	subs	r2, r2, r1
 80187e0:	f022 0203 	bic.w	r2, r2, #3
 80187e4:	3903      	subs	r1, #3
 80187e6:	458c      	cmp	ip, r1
 80187e8:	bf38      	it	cc
 80187ea:	2200      	movcc	r2, #0
 80187ec:	441a      	add	r2, r3
 80187ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80187f2:	b17b      	cbz	r3, 8018814 <__mdiff+0x104>
 80187f4:	6106      	str	r6, [r0, #16]
 80187f6:	e7a5      	b.n	8018744 <__mdiff+0x34>
 80187f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80187fc:	fa17 f488 	uxtah	r4, r7, r8
 8018800:	1422      	asrs	r2, r4, #16
 8018802:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018806:	b2a4      	uxth	r4, r4
 8018808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801880c:	f84e 4b04 	str.w	r4, [lr], #4
 8018810:	1417      	asrs	r7, r2, #16
 8018812:	e7e0      	b.n	80187d6 <__mdiff+0xc6>
 8018814:	3e01      	subs	r6, #1
 8018816:	e7ea      	b.n	80187ee <__mdiff+0xde>
 8018818:	0801c1c7 	.word	0x0801c1c7
 801881c:	0801c2b4 	.word	0x0801c2b4

08018820 <__ulp>:
 8018820:	b082      	sub	sp, #8
 8018822:	ed8d 0b00 	vstr	d0, [sp]
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	4912      	ldr	r1, [pc, #72]	; (8018874 <__ulp+0x54>)
 801882a:	4019      	ands	r1, r3
 801882c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018830:	2900      	cmp	r1, #0
 8018832:	dd05      	ble.n	8018840 <__ulp+0x20>
 8018834:	2200      	movs	r2, #0
 8018836:	460b      	mov	r3, r1
 8018838:	ec43 2b10 	vmov	d0, r2, r3
 801883c:	b002      	add	sp, #8
 801883e:	4770      	bx	lr
 8018840:	4249      	negs	r1, r1
 8018842:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018846:	ea4f 5021 	mov.w	r0, r1, asr #20
 801884a:	f04f 0200 	mov.w	r2, #0
 801884e:	f04f 0300 	mov.w	r3, #0
 8018852:	da04      	bge.n	801885e <__ulp+0x3e>
 8018854:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018858:	fa41 f300 	asr.w	r3, r1, r0
 801885c:	e7ec      	b.n	8018838 <__ulp+0x18>
 801885e:	f1a0 0114 	sub.w	r1, r0, #20
 8018862:	291e      	cmp	r1, #30
 8018864:	bfda      	itte	le
 8018866:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801886a:	fa20 f101 	lsrle.w	r1, r0, r1
 801886e:	2101      	movgt	r1, #1
 8018870:	460a      	mov	r2, r1
 8018872:	e7e1      	b.n	8018838 <__ulp+0x18>
 8018874:	7ff00000 	.word	0x7ff00000

08018878 <__b2d>:
 8018878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801887a:	6905      	ldr	r5, [r0, #16]
 801887c:	f100 0714 	add.w	r7, r0, #20
 8018880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018884:	1f2e      	subs	r6, r5, #4
 8018886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801888a:	4620      	mov	r0, r4
 801888c:	f7ff fd6c 	bl	8018368 <__hi0bits>
 8018890:	f1c0 0320 	rsb	r3, r0, #32
 8018894:	280a      	cmp	r0, #10
 8018896:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018914 <__b2d+0x9c>
 801889a:	600b      	str	r3, [r1, #0]
 801889c:	dc14      	bgt.n	80188c8 <__b2d+0x50>
 801889e:	f1c0 0e0b 	rsb	lr, r0, #11
 80188a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80188a6:	42b7      	cmp	r7, r6
 80188a8:	ea41 030c 	orr.w	r3, r1, ip
 80188ac:	bf34      	ite	cc
 80188ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80188b2:	2100      	movcs	r1, #0
 80188b4:	3015      	adds	r0, #21
 80188b6:	fa04 f000 	lsl.w	r0, r4, r0
 80188ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80188be:	ea40 0201 	orr.w	r2, r0, r1
 80188c2:	ec43 2b10 	vmov	d0, r2, r3
 80188c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188c8:	42b7      	cmp	r7, r6
 80188ca:	bf3a      	itte	cc
 80188cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80188d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80188d4:	2100      	movcs	r1, #0
 80188d6:	380b      	subs	r0, #11
 80188d8:	d017      	beq.n	801890a <__b2d+0x92>
 80188da:	f1c0 0c20 	rsb	ip, r0, #32
 80188de:	fa04 f500 	lsl.w	r5, r4, r0
 80188e2:	42be      	cmp	r6, r7
 80188e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80188e8:	ea45 0504 	orr.w	r5, r5, r4
 80188ec:	bf8c      	ite	hi
 80188ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80188f2:	2400      	movls	r4, #0
 80188f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80188f8:	fa01 f000 	lsl.w	r0, r1, r0
 80188fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8018900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018904:	ea40 0204 	orr.w	r2, r0, r4
 8018908:	e7db      	b.n	80188c2 <__b2d+0x4a>
 801890a:	ea44 030c 	orr.w	r3, r4, ip
 801890e:	460a      	mov	r2, r1
 8018910:	e7d7      	b.n	80188c2 <__b2d+0x4a>
 8018912:	bf00      	nop
 8018914:	3ff00000 	.word	0x3ff00000

08018918 <__d2b>:
 8018918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801891c:	4689      	mov	r9, r1
 801891e:	2101      	movs	r1, #1
 8018920:	ec57 6b10 	vmov	r6, r7, d0
 8018924:	4690      	mov	r8, r2
 8018926:	f7ff fc5d 	bl	80181e4 <_Balloc>
 801892a:	4604      	mov	r4, r0
 801892c:	b930      	cbnz	r0, 801893c <__d2b+0x24>
 801892e:	4602      	mov	r2, r0
 8018930:	4b25      	ldr	r3, [pc, #148]	; (80189c8 <__d2b+0xb0>)
 8018932:	4826      	ldr	r0, [pc, #152]	; (80189cc <__d2b+0xb4>)
 8018934:	f240 310a 	movw	r1, #778	; 0x30a
 8018938:	f000 ff2e 	bl	8019798 <__assert_func>
 801893c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018944:	bb35      	cbnz	r5, 8018994 <__d2b+0x7c>
 8018946:	2e00      	cmp	r6, #0
 8018948:	9301      	str	r3, [sp, #4]
 801894a:	d028      	beq.n	801899e <__d2b+0x86>
 801894c:	4668      	mov	r0, sp
 801894e:	9600      	str	r6, [sp, #0]
 8018950:	f7ff fd2a 	bl	80183a8 <__lo0bits>
 8018954:	9900      	ldr	r1, [sp, #0]
 8018956:	b300      	cbz	r0, 801899a <__d2b+0x82>
 8018958:	9a01      	ldr	r2, [sp, #4]
 801895a:	f1c0 0320 	rsb	r3, r0, #32
 801895e:	fa02 f303 	lsl.w	r3, r2, r3
 8018962:	430b      	orrs	r3, r1
 8018964:	40c2      	lsrs	r2, r0
 8018966:	6163      	str	r3, [r4, #20]
 8018968:	9201      	str	r2, [sp, #4]
 801896a:	9b01      	ldr	r3, [sp, #4]
 801896c:	61a3      	str	r3, [r4, #24]
 801896e:	2b00      	cmp	r3, #0
 8018970:	bf14      	ite	ne
 8018972:	2202      	movne	r2, #2
 8018974:	2201      	moveq	r2, #1
 8018976:	6122      	str	r2, [r4, #16]
 8018978:	b1d5      	cbz	r5, 80189b0 <__d2b+0x98>
 801897a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801897e:	4405      	add	r5, r0
 8018980:	f8c9 5000 	str.w	r5, [r9]
 8018984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018988:	f8c8 0000 	str.w	r0, [r8]
 801898c:	4620      	mov	r0, r4
 801898e:	b003      	add	sp, #12
 8018990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018998:	e7d5      	b.n	8018946 <__d2b+0x2e>
 801899a:	6161      	str	r1, [r4, #20]
 801899c:	e7e5      	b.n	801896a <__d2b+0x52>
 801899e:	a801      	add	r0, sp, #4
 80189a0:	f7ff fd02 	bl	80183a8 <__lo0bits>
 80189a4:	9b01      	ldr	r3, [sp, #4]
 80189a6:	6163      	str	r3, [r4, #20]
 80189a8:	2201      	movs	r2, #1
 80189aa:	6122      	str	r2, [r4, #16]
 80189ac:	3020      	adds	r0, #32
 80189ae:	e7e3      	b.n	8018978 <__d2b+0x60>
 80189b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80189b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80189b8:	f8c9 0000 	str.w	r0, [r9]
 80189bc:	6918      	ldr	r0, [r3, #16]
 80189be:	f7ff fcd3 	bl	8018368 <__hi0bits>
 80189c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80189c6:	e7df      	b.n	8018988 <__d2b+0x70>
 80189c8:	0801c1c7 	.word	0x0801c1c7
 80189cc:	0801c2b4 	.word	0x0801c2b4

080189d0 <__ratio>:
 80189d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189d4:	4688      	mov	r8, r1
 80189d6:	4669      	mov	r1, sp
 80189d8:	4681      	mov	r9, r0
 80189da:	f7ff ff4d 	bl	8018878 <__b2d>
 80189de:	a901      	add	r1, sp, #4
 80189e0:	4640      	mov	r0, r8
 80189e2:	ec55 4b10 	vmov	r4, r5, d0
 80189e6:	f7ff ff47 	bl	8018878 <__b2d>
 80189ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80189ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80189f2:	eba3 0c02 	sub.w	ip, r3, r2
 80189f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80189fa:	1a9b      	subs	r3, r3, r2
 80189fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018a00:	ec51 0b10 	vmov	r0, r1, d0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	bfd6      	itet	le
 8018a08:	460a      	movle	r2, r1
 8018a0a:	462a      	movgt	r2, r5
 8018a0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018a10:	468b      	mov	fp, r1
 8018a12:	462f      	mov	r7, r5
 8018a14:	bfd4      	ite	le
 8018a16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018a1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018a1e:	4620      	mov	r0, r4
 8018a20:	ee10 2a10 	vmov	r2, s0
 8018a24:	465b      	mov	r3, fp
 8018a26:	4639      	mov	r1, r7
 8018a28:	f7e7 ff30 	bl	800088c <__aeabi_ddiv>
 8018a2c:	ec41 0b10 	vmov	d0, r0, r1
 8018a30:	b003      	add	sp, #12
 8018a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a36 <__copybits>:
 8018a36:	3901      	subs	r1, #1
 8018a38:	b570      	push	{r4, r5, r6, lr}
 8018a3a:	1149      	asrs	r1, r1, #5
 8018a3c:	6914      	ldr	r4, [r2, #16]
 8018a3e:	3101      	adds	r1, #1
 8018a40:	f102 0314 	add.w	r3, r2, #20
 8018a44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018a48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018a4c:	1f05      	subs	r5, r0, #4
 8018a4e:	42a3      	cmp	r3, r4
 8018a50:	d30c      	bcc.n	8018a6c <__copybits+0x36>
 8018a52:	1aa3      	subs	r3, r4, r2
 8018a54:	3b11      	subs	r3, #17
 8018a56:	f023 0303 	bic.w	r3, r3, #3
 8018a5a:	3211      	adds	r2, #17
 8018a5c:	42a2      	cmp	r2, r4
 8018a5e:	bf88      	it	hi
 8018a60:	2300      	movhi	r3, #0
 8018a62:	4418      	add	r0, r3
 8018a64:	2300      	movs	r3, #0
 8018a66:	4288      	cmp	r0, r1
 8018a68:	d305      	bcc.n	8018a76 <__copybits+0x40>
 8018a6a:	bd70      	pop	{r4, r5, r6, pc}
 8018a6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018a70:	f845 6f04 	str.w	r6, [r5, #4]!
 8018a74:	e7eb      	b.n	8018a4e <__copybits+0x18>
 8018a76:	f840 3b04 	str.w	r3, [r0], #4
 8018a7a:	e7f4      	b.n	8018a66 <__copybits+0x30>

08018a7c <__any_on>:
 8018a7c:	f100 0214 	add.w	r2, r0, #20
 8018a80:	6900      	ldr	r0, [r0, #16]
 8018a82:	114b      	asrs	r3, r1, #5
 8018a84:	4298      	cmp	r0, r3
 8018a86:	b510      	push	{r4, lr}
 8018a88:	db11      	blt.n	8018aae <__any_on+0x32>
 8018a8a:	dd0a      	ble.n	8018aa2 <__any_on+0x26>
 8018a8c:	f011 011f 	ands.w	r1, r1, #31
 8018a90:	d007      	beq.n	8018aa2 <__any_on+0x26>
 8018a92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018a96:	fa24 f001 	lsr.w	r0, r4, r1
 8018a9a:	fa00 f101 	lsl.w	r1, r0, r1
 8018a9e:	428c      	cmp	r4, r1
 8018aa0:	d10b      	bne.n	8018aba <__any_on+0x3e>
 8018aa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018aa6:	4293      	cmp	r3, r2
 8018aa8:	d803      	bhi.n	8018ab2 <__any_on+0x36>
 8018aaa:	2000      	movs	r0, #0
 8018aac:	bd10      	pop	{r4, pc}
 8018aae:	4603      	mov	r3, r0
 8018ab0:	e7f7      	b.n	8018aa2 <__any_on+0x26>
 8018ab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018ab6:	2900      	cmp	r1, #0
 8018ab8:	d0f5      	beq.n	8018aa6 <__any_on+0x2a>
 8018aba:	2001      	movs	r0, #1
 8018abc:	e7f6      	b.n	8018aac <__any_on+0x30>
	...

08018ac0 <frexp>:
 8018ac0:	b570      	push	{r4, r5, r6, lr}
 8018ac2:	2100      	movs	r1, #0
 8018ac4:	ec55 4b10 	vmov	r4, r5, d0
 8018ac8:	6001      	str	r1, [r0, #0]
 8018aca:	4916      	ldr	r1, [pc, #88]	; (8018b24 <frexp+0x64>)
 8018acc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018ad0:	428a      	cmp	r2, r1
 8018ad2:	4606      	mov	r6, r0
 8018ad4:	462b      	mov	r3, r5
 8018ad6:	dc22      	bgt.n	8018b1e <frexp+0x5e>
 8018ad8:	ee10 1a10 	vmov	r1, s0
 8018adc:	4311      	orrs	r1, r2
 8018ade:	d01e      	beq.n	8018b1e <frexp+0x5e>
 8018ae0:	4911      	ldr	r1, [pc, #68]	; (8018b28 <frexp+0x68>)
 8018ae2:	4029      	ands	r1, r5
 8018ae4:	b969      	cbnz	r1, 8018b02 <frexp+0x42>
 8018ae6:	4b11      	ldr	r3, [pc, #68]	; (8018b2c <frexp+0x6c>)
 8018ae8:	2200      	movs	r2, #0
 8018aea:	ee10 0a10 	vmov	r0, s0
 8018aee:	4629      	mov	r1, r5
 8018af0:	f7e7 fda2 	bl	8000638 <__aeabi_dmul>
 8018af4:	460b      	mov	r3, r1
 8018af6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018afa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018afe:	4604      	mov	r4, r0
 8018b00:	6031      	str	r1, [r6, #0]
 8018b02:	6831      	ldr	r1, [r6, #0]
 8018b04:	1512      	asrs	r2, r2, #20
 8018b06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b0a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018b0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018b12:	440a      	add	r2, r1
 8018b14:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018b18:	6032      	str	r2, [r6, #0]
 8018b1a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018b1e:	ec45 4b10 	vmov	d0, r4, r5
 8018b22:	bd70      	pop	{r4, r5, r6, pc}
 8018b24:	7fefffff 	.word	0x7fefffff
 8018b28:	7ff00000 	.word	0x7ff00000
 8018b2c:	43500000 	.word	0x43500000

08018b30 <nan>:
 8018b30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018b38 <nan+0x8>
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop
 8018b38:	00000000 	.word	0x00000000
 8018b3c:	7ff80000 	.word	0x7ff80000

08018b40 <__sread>:
 8018b40:	b510      	push	{r4, lr}
 8018b42:	460c      	mov	r4, r1
 8018b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b48:	f001 f8f0 	bl	8019d2c <_read_r>
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	bfab      	itete	ge
 8018b50:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8018b52:	89a3      	ldrhlt	r3, [r4, #12]
 8018b54:	181b      	addge	r3, r3, r0
 8018b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018b5a:	bfac      	ite	ge
 8018b5c:	6523      	strge	r3, [r4, #80]	; 0x50
 8018b5e:	81a3      	strhlt	r3, [r4, #12]
 8018b60:	bd10      	pop	{r4, pc}

08018b62 <__swrite>:
 8018b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b66:	461f      	mov	r7, r3
 8018b68:	898b      	ldrh	r3, [r1, #12]
 8018b6a:	05db      	lsls	r3, r3, #23
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	460c      	mov	r4, r1
 8018b70:	4616      	mov	r6, r2
 8018b72:	d505      	bpl.n	8018b80 <__swrite+0x1e>
 8018b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b78:	2302      	movs	r3, #2
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	f001 f8aa 	bl	8019cd4 <_lseek_r>
 8018b80:	89a3      	ldrh	r3, [r4, #12]
 8018b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018b8a:	81a3      	strh	r3, [r4, #12]
 8018b8c:	4632      	mov	r2, r6
 8018b8e:	463b      	mov	r3, r7
 8018b90:	4628      	mov	r0, r5
 8018b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b96:	f000 bdad 	b.w	80196f4 <_write_r>

08018b9a <__sseek>:
 8018b9a:	b510      	push	{r4, lr}
 8018b9c:	460c      	mov	r4, r1
 8018b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ba2:	f001 f897 	bl	8019cd4 <_lseek_r>
 8018ba6:	1c43      	adds	r3, r0, #1
 8018ba8:	89a3      	ldrh	r3, [r4, #12]
 8018baa:	bf15      	itete	ne
 8018bac:	6520      	strne	r0, [r4, #80]	; 0x50
 8018bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018bb6:	81a3      	strheq	r3, [r4, #12]
 8018bb8:	bf18      	it	ne
 8018bba:	81a3      	strhne	r3, [r4, #12]
 8018bbc:	bd10      	pop	{r4, pc}

08018bbe <__sclose>:
 8018bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bc2:	f000 be35 	b.w	8019830 <_close_r>

08018bc6 <strncpy>:
 8018bc6:	b510      	push	{r4, lr}
 8018bc8:	3901      	subs	r1, #1
 8018bca:	4603      	mov	r3, r0
 8018bcc:	b132      	cbz	r2, 8018bdc <strncpy+0x16>
 8018bce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018bd2:	f803 4b01 	strb.w	r4, [r3], #1
 8018bd6:	3a01      	subs	r2, #1
 8018bd8:	2c00      	cmp	r4, #0
 8018bda:	d1f7      	bne.n	8018bcc <strncpy+0x6>
 8018bdc:	441a      	add	r2, r3
 8018bde:	2100      	movs	r1, #0
 8018be0:	4293      	cmp	r3, r2
 8018be2:	d100      	bne.n	8018be6 <strncpy+0x20>
 8018be4:	bd10      	pop	{r4, pc}
 8018be6:	f803 1b01 	strb.w	r1, [r3], #1
 8018bea:	e7f9      	b.n	8018be0 <strncpy+0x1a>

08018bec <__ssprint_r>:
 8018bec:	6893      	ldr	r3, [r2, #8]
 8018bee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf2:	4680      	mov	r8, r0
 8018bf4:	460c      	mov	r4, r1
 8018bf6:	4617      	mov	r7, r2
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d061      	beq.n	8018cc0 <__ssprint_r+0xd4>
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	f8d2 a000 	ldr.w	sl, [r2]
 8018c02:	9301      	str	r3, [sp, #4]
 8018c04:	469b      	mov	fp, r3
 8018c06:	f1bb 0f00 	cmp.w	fp, #0
 8018c0a:	d02b      	beq.n	8018c64 <__ssprint_r+0x78>
 8018c0c:	68a6      	ldr	r6, [r4, #8]
 8018c0e:	45b3      	cmp	fp, r6
 8018c10:	d342      	bcc.n	8018c98 <__ssprint_r+0xac>
 8018c12:	89a2      	ldrh	r2, [r4, #12]
 8018c14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018c18:	d03e      	beq.n	8018c98 <__ssprint_r+0xac>
 8018c1a:	6825      	ldr	r5, [r4, #0]
 8018c1c:	6921      	ldr	r1, [r4, #16]
 8018c1e:	eba5 0901 	sub.w	r9, r5, r1
 8018c22:	6965      	ldr	r5, [r4, #20]
 8018c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018c2c:	f109 0001 	add.w	r0, r9, #1
 8018c30:	106d      	asrs	r5, r5, #1
 8018c32:	4458      	add	r0, fp
 8018c34:	4285      	cmp	r5, r0
 8018c36:	bf38      	it	cc
 8018c38:	4605      	movcc	r5, r0
 8018c3a:	0553      	lsls	r3, r2, #21
 8018c3c:	d545      	bpl.n	8018cca <__ssprint_r+0xde>
 8018c3e:	4629      	mov	r1, r5
 8018c40:	4640      	mov	r0, r8
 8018c42:	f7f9 feef 	bl	8012a24 <_malloc_r>
 8018c46:	4606      	mov	r6, r0
 8018c48:	b9a0      	cbnz	r0, 8018c74 <__ssprint_r+0x88>
 8018c4a:	230c      	movs	r3, #12
 8018c4c:	f8c8 3000 	str.w	r3, [r8]
 8018c50:	89a3      	ldrh	r3, [r4, #12]
 8018c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c56:	81a3      	strh	r3, [r4, #12]
 8018c58:	2300      	movs	r3, #0
 8018c5a:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8018c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8018c62:	e02f      	b.n	8018cc4 <__ssprint_r+0xd8>
 8018c64:	f8da 3000 	ldr.w	r3, [sl]
 8018c68:	f8da b004 	ldr.w	fp, [sl, #4]
 8018c6c:	9301      	str	r3, [sp, #4]
 8018c6e:	f10a 0a08 	add.w	sl, sl, #8
 8018c72:	e7c8      	b.n	8018c06 <__ssprint_r+0x1a>
 8018c74:	464a      	mov	r2, r9
 8018c76:	6921      	ldr	r1, [r4, #16]
 8018c78:	f7fa f924 	bl	8012ec4 <memcpy>
 8018c7c:	89a2      	ldrh	r2, [r4, #12]
 8018c7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8018c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018c86:	81a2      	strh	r2, [r4, #12]
 8018c88:	6126      	str	r6, [r4, #16]
 8018c8a:	6165      	str	r5, [r4, #20]
 8018c8c:	444e      	add	r6, r9
 8018c8e:	eba5 0509 	sub.w	r5, r5, r9
 8018c92:	6026      	str	r6, [r4, #0]
 8018c94:	60a5      	str	r5, [r4, #8]
 8018c96:	465e      	mov	r6, fp
 8018c98:	455e      	cmp	r6, fp
 8018c9a:	bf28      	it	cs
 8018c9c:	465e      	movcs	r6, fp
 8018c9e:	4632      	mov	r2, r6
 8018ca0:	9901      	ldr	r1, [sp, #4]
 8018ca2:	6820      	ldr	r0, [r4, #0]
 8018ca4:	f001 f828 	bl	8019cf8 <memmove>
 8018ca8:	68a2      	ldr	r2, [r4, #8]
 8018caa:	1b92      	subs	r2, r2, r6
 8018cac:	60a2      	str	r2, [r4, #8]
 8018cae:	6822      	ldr	r2, [r4, #0]
 8018cb0:	4432      	add	r2, r6
 8018cb2:	6022      	str	r2, [r4, #0]
 8018cb4:	68ba      	ldr	r2, [r7, #8]
 8018cb6:	eba2 030b 	sub.w	r3, r2, fp
 8018cba:	60bb      	str	r3, [r7, #8]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d1d1      	bne.n	8018c64 <__ssprint_r+0x78>
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	b003      	add	sp, #12
 8018cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cca:	462a      	mov	r2, r5
 8018ccc:	4640      	mov	r0, r8
 8018cce:	f001 f83f 	bl	8019d50 <_realloc_r>
 8018cd2:	4606      	mov	r6, r0
 8018cd4:	2800      	cmp	r0, #0
 8018cd6:	d1d7      	bne.n	8018c88 <__ssprint_r+0x9c>
 8018cd8:	6921      	ldr	r1, [r4, #16]
 8018cda:	4640      	mov	r0, r8
 8018cdc:	f7fe fda8 	bl	8017830 <_free_r>
 8018ce0:	e7b3      	b.n	8018c4a <__ssprint_r+0x5e>

08018ce2 <__sprint_r>:
 8018ce2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce6:	6893      	ldr	r3, [r2, #8]
 8018ce8:	4680      	mov	r8, r0
 8018cea:	460f      	mov	r7, r1
 8018cec:	4614      	mov	r4, r2
 8018cee:	b91b      	cbnz	r3, 8018cf8 <__sprint_r+0x16>
 8018cf0:	6053      	str	r3, [r2, #4]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8018cfa:	049d      	lsls	r5, r3, #18
 8018cfc:	d520      	bpl.n	8018d40 <__sprint_r+0x5e>
 8018cfe:	6815      	ldr	r5, [r2, #0]
 8018d00:	3508      	adds	r5, #8
 8018d02:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8018d06:	f04f 0900 	mov.w	r9, #0
 8018d0a:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8018d0e:	45ca      	cmp	sl, r9
 8018d10:	dc0b      	bgt.n	8018d2a <__sprint_r+0x48>
 8018d12:	68a3      	ldr	r3, [r4, #8]
 8018d14:	f026 0003 	bic.w	r0, r6, #3
 8018d18:	1a18      	subs	r0, r3, r0
 8018d1a:	60a0      	str	r0, [r4, #8]
 8018d1c:	3508      	adds	r5, #8
 8018d1e:	2800      	cmp	r0, #0
 8018d20:	d1ef      	bne.n	8018d02 <__sprint_r+0x20>
 8018d22:	2300      	movs	r3, #0
 8018d24:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8018d28:	e7e4      	b.n	8018cf4 <__sprint_r+0x12>
 8018d2a:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8018d2e:	463a      	mov	r2, r7
 8018d30:	4640      	mov	r0, r8
 8018d32:	f000 fe38 	bl	80199a6 <_fputwc_r>
 8018d36:	1c43      	adds	r3, r0, #1
 8018d38:	d0f3      	beq.n	8018d22 <__sprint_r+0x40>
 8018d3a:	f109 0901 	add.w	r9, r9, #1
 8018d3e:	e7e6      	b.n	8018d0e <__sprint_r+0x2c>
 8018d40:	f000 fe6e 	bl	8019a20 <__sfvwrite_r>
 8018d44:	e7ed      	b.n	8018d22 <__sprint_r+0x40>
	...

08018d48 <_vfiprintf_r>:
 8018d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4c:	ed2d 8b02 	vpush	{d8}
 8018d50:	b0b9      	sub	sp, #228	; 0xe4
 8018d52:	460f      	mov	r7, r1
 8018d54:	9201      	str	r2, [sp, #4]
 8018d56:	461d      	mov	r5, r3
 8018d58:	461c      	mov	r4, r3
 8018d5a:	4681      	mov	r9, r0
 8018d5c:	b118      	cbz	r0, 8018d66 <_vfiprintf_r+0x1e>
 8018d5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018d60:	b90b      	cbnz	r3, 8018d66 <_vfiprintf_r+0x1e>
 8018d62:	f7fe fcd5 	bl	8017710 <__sinit>
 8018d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018d68:	07d8      	lsls	r0, r3, #31
 8018d6a:	d405      	bmi.n	8018d78 <_vfiprintf_r+0x30>
 8018d6c:	89bb      	ldrh	r3, [r7, #12]
 8018d6e:	0599      	lsls	r1, r3, #22
 8018d70:	d402      	bmi.n	8018d78 <_vfiprintf_r+0x30>
 8018d72:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018d74:	f7ff f9b6 	bl	80180e4 <__retarget_lock_acquire_recursive>
 8018d78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018d7c:	049a      	lsls	r2, r3, #18
 8018d7e:	d406      	bmi.n	8018d8e <_vfiprintf_r+0x46>
 8018d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018d84:	81bb      	strh	r3, [r7, #12]
 8018d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018d88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8018d8e:	89bb      	ldrh	r3, [r7, #12]
 8018d90:	071e      	lsls	r6, r3, #28
 8018d92:	d501      	bpl.n	8018d98 <_vfiprintf_r+0x50>
 8018d94:	693b      	ldr	r3, [r7, #16]
 8018d96:	b9bb      	cbnz	r3, 8018dc8 <_vfiprintf_r+0x80>
 8018d98:	4639      	mov	r1, r7
 8018d9a:	4648      	mov	r0, r9
 8018d9c:	f7fd fcee 	bl	801677c <__swsetup_r>
 8018da0:	b190      	cbz	r0, 8018dc8 <_vfiprintf_r+0x80>
 8018da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018da4:	07d8      	lsls	r0, r3, #31
 8018da6:	d508      	bpl.n	8018dba <_vfiprintf_r+0x72>
 8018da8:	f04f 33ff 	mov.w	r3, #4294967295
 8018dac:	9302      	str	r3, [sp, #8]
 8018dae:	9802      	ldr	r0, [sp, #8]
 8018db0:	b039      	add	sp, #228	; 0xe4
 8018db2:	ecbd 8b02 	vpop	{d8}
 8018db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dba:	89bb      	ldrh	r3, [r7, #12]
 8018dbc:	0599      	lsls	r1, r3, #22
 8018dbe:	d4f3      	bmi.n	8018da8 <_vfiprintf_r+0x60>
 8018dc0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018dc2:	f7ff f990 	bl	80180e6 <__retarget_lock_release_recursive>
 8018dc6:	e7ef      	b.n	8018da8 <_vfiprintf_r+0x60>
 8018dc8:	89bb      	ldrh	r3, [r7, #12]
 8018dca:	f003 021a 	and.w	r2, r3, #26
 8018dce:	2a0a      	cmp	r2, #10
 8018dd0:	d113      	bne.n	8018dfa <_vfiprintf_r+0xb2>
 8018dd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8018dd6:	2a00      	cmp	r2, #0
 8018dd8:	db0f      	blt.n	8018dfa <_vfiprintf_r+0xb2>
 8018dda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018ddc:	07d2      	lsls	r2, r2, #31
 8018dde:	d404      	bmi.n	8018dea <_vfiprintf_r+0xa2>
 8018de0:	059e      	lsls	r6, r3, #22
 8018de2:	d402      	bmi.n	8018dea <_vfiprintf_r+0xa2>
 8018de4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018de6:	f7ff f97e 	bl	80180e6 <__retarget_lock_release_recursive>
 8018dea:	9a01      	ldr	r2, [sp, #4]
 8018dec:	462b      	mov	r3, r5
 8018dee:	4639      	mov	r1, r7
 8018df0:	4648      	mov	r0, r9
 8018df2:	f000 fc31 	bl	8019658 <__sbprintf>
 8018df6:	9002      	str	r0, [sp, #8]
 8018df8:	e7d9      	b.n	8018dae <_vfiprintf_r+0x66>
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8018e00:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018e04:	ae0f      	add	r6, sp, #60	; 0x3c
 8018e06:	ee08 3a10 	vmov	s16, r3
 8018e0a:	960c      	str	r6, [sp, #48]	; 0x30
 8018e0c:	9307      	str	r3, [sp, #28]
 8018e0e:	9302      	str	r3, [sp, #8]
 8018e10:	9b01      	ldr	r3, [sp, #4]
 8018e12:	461d      	mov	r5, r3
 8018e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e18:	b10a      	cbz	r2, 8018e1e <_vfiprintf_r+0xd6>
 8018e1a:	2a25      	cmp	r2, #37	; 0x25
 8018e1c:	d1f9      	bne.n	8018e12 <_vfiprintf_r+0xca>
 8018e1e:	9b01      	ldr	r3, [sp, #4]
 8018e20:	ebb5 0803 	subs.w	r8, r5, r3
 8018e24:	d00d      	beq.n	8018e42 <_vfiprintf_r+0xfa>
 8018e26:	e9c6 3800 	strd	r3, r8, [r6]
 8018e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e2c:	4443      	add	r3, r8
 8018e2e:	930e      	str	r3, [sp, #56]	; 0x38
 8018e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e32:	3301      	adds	r3, #1
 8018e34:	2b07      	cmp	r3, #7
 8018e36:	930d      	str	r3, [sp, #52]	; 0x34
 8018e38:	dc75      	bgt.n	8018f26 <_vfiprintf_r+0x1de>
 8018e3a:	3608      	adds	r6, #8
 8018e3c:	9b02      	ldr	r3, [sp, #8]
 8018e3e:	4443      	add	r3, r8
 8018e40:	9302      	str	r3, [sp, #8]
 8018e42:	782b      	ldrb	r3, [r5, #0]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	f000 83c8 	beq.w	80195da <_vfiprintf_r+0x892>
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8018e50:	1c6a      	adds	r2, r5, #1
 8018e52:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018e56:	9100      	str	r1, [sp, #0]
 8018e58:	9303      	str	r3, [sp, #12]
 8018e5a:	469a      	mov	sl, r3
 8018e5c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018e60:	9201      	str	r2, [sp, #4]
 8018e62:	f1a3 0220 	sub.w	r2, r3, #32
 8018e66:	2a5a      	cmp	r2, #90	; 0x5a
 8018e68:	f200 8310 	bhi.w	801948c <_vfiprintf_r+0x744>
 8018e6c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8018e70:	030e0099 	.word	0x030e0099
 8018e74:	00a1030e 	.word	0x00a1030e
 8018e78:	030e030e 	.word	0x030e030e
 8018e7c:	0080030e 	.word	0x0080030e
 8018e80:	030e030e 	.word	0x030e030e
 8018e84:	00ae00a4 	.word	0x00ae00a4
 8018e88:	00ab030e 	.word	0x00ab030e
 8018e8c:	030e00b0 	.word	0x030e00b0
 8018e90:	00ce00cb 	.word	0x00ce00cb
 8018e94:	00ce00ce 	.word	0x00ce00ce
 8018e98:	00ce00ce 	.word	0x00ce00ce
 8018e9c:	00ce00ce 	.word	0x00ce00ce
 8018ea0:	00ce00ce 	.word	0x00ce00ce
 8018ea4:	030e030e 	.word	0x030e030e
 8018ea8:	030e030e 	.word	0x030e030e
 8018eac:	030e030e 	.word	0x030e030e
 8018eb0:	030e030e 	.word	0x030e030e
 8018eb4:	00f8030e 	.word	0x00f8030e
 8018eb8:	030e0106 	.word	0x030e0106
 8018ebc:	030e030e 	.word	0x030e030e
 8018ec0:	030e030e 	.word	0x030e030e
 8018ec4:	030e030e 	.word	0x030e030e
 8018ec8:	030e030e 	.word	0x030e030e
 8018ecc:	014d030e 	.word	0x014d030e
 8018ed0:	030e030e 	.word	0x030e030e
 8018ed4:	0192030e 	.word	0x0192030e
 8018ed8:	0270030e 	.word	0x0270030e
 8018edc:	030e030e 	.word	0x030e030e
 8018ee0:	030e028e 	.word	0x030e028e
 8018ee4:	030e030e 	.word	0x030e030e
 8018ee8:	030e030e 	.word	0x030e030e
 8018eec:	030e030e 	.word	0x030e030e
 8018ef0:	030e030e 	.word	0x030e030e
 8018ef4:	00f8030e 	.word	0x00f8030e
 8018ef8:	030e0108 	.word	0x030e0108
 8018efc:	030e030e 	.word	0x030e030e
 8018f00:	010800de 	.word	0x010800de
 8018f04:	030e00f2 	.word	0x030e00f2
 8018f08:	030e00eb 	.word	0x030e00eb
 8018f0c:	014f0130 	.word	0x014f0130
 8018f10:	00f20182 	.word	0x00f20182
 8018f14:	0192030e 	.word	0x0192030e
 8018f18:	02720097 	.word	0x02720097
 8018f1c:	030e030e 	.word	0x030e030e
 8018f20:	030e0065 	.word	0x030e0065
 8018f24:	0097      	.short	0x0097
 8018f26:	aa0c      	add	r2, sp, #48	; 0x30
 8018f28:	4639      	mov	r1, r7
 8018f2a:	4648      	mov	r0, r9
 8018f2c:	f7ff fed9 	bl	8018ce2 <__sprint_r>
 8018f30:	2800      	cmp	r0, #0
 8018f32:	f040 8331 	bne.w	8019598 <_vfiprintf_r+0x850>
 8018f36:	ae0f      	add	r6, sp, #60	; 0x3c
 8018f38:	e780      	b.n	8018e3c <_vfiprintf_r+0xf4>
 8018f3a:	4a95      	ldr	r2, [pc, #596]	; (8019190 <_vfiprintf_r+0x448>)
 8018f3c:	9205      	str	r2, [sp, #20]
 8018f3e:	f01a 0f20 	tst.w	sl, #32
 8018f42:	f000 8225 	beq.w	8019390 <_vfiprintf_r+0x648>
 8018f46:	3407      	adds	r4, #7
 8018f48:	f024 0b07 	bic.w	fp, r4, #7
 8018f4c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8018f50:	f01a 0f01 	tst.w	sl, #1
 8018f54:	d009      	beq.n	8018f6a <_vfiprintf_r+0x222>
 8018f56:	ea54 0205 	orrs.w	r2, r4, r5
 8018f5a:	bf1f      	itttt	ne
 8018f5c:	2230      	movne	r2, #48	; 0x30
 8018f5e:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8018f62:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8018f66:	f04a 0a02 	orrne.w	sl, sl, #2
 8018f6a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8018f6e:	e10d      	b.n	801918c <_vfiprintf_r+0x444>
 8018f70:	4648      	mov	r0, r9
 8018f72:	f7ff f8b1 	bl	80180d8 <_localeconv_r>
 8018f76:	6843      	ldr	r3, [r0, #4]
 8018f78:	4618      	mov	r0, r3
 8018f7a:	ee08 3a10 	vmov	s16, r3
 8018f7e:	f7e7 f941 	bl	8000204 <strlen>
 8018f82:	9007      	str	r0, [sp, #28]
 8018f84:	4648      	mov	r0, r9
 8018f86:	f7ff f8a7 	bl	80180d8 <_localeconv_r>
 8018f8a:	6883      	ldr	r3, [r0, #8]
 8018f8c:	9306      	str	r3, [sp, #24]
 8018f8e:	9b07      	ldr	r3, [sp, #28]
 8018f90:	b12b      	cbz	r3, 8018f9e <_vfiprintf_r+0x256>
 8018f92:	9b06      	ldr	r3, [sp, #24]
 8018f94:	b11b      	cbz	r3, 8018f9e <_vfiprintf_r+0x256>
 8018f96:	781b      	ldrb	r3, [r3, #0]
 8018f98:	b10b      	cbz	r3, 8018f9e <_vfiprintf_r+0x256>
 8018f9a:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8018f9e:	9a01      	ldr	r2, [sp, #4]
 8018fa0:	e75c      	b.n	8018e5c <_vfiprintf_r+0x114>
 8018fa2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d1f9      	bne.n	8018f9e <_vfiprintf_r+0x256>
 8018faa:	2320      	movs	r3, #32
 8018fac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8018fb0:	e7f5      	b.n	8018f9e <_vfiprintf_r+0x256>
 8018fb2:	f04a 0a01 	orr.w	sl, sl, #1
 8018fb6:	e7f2      	b.n	8018f9e <_vfiprintf_r+0x256>
 8018fb8:	f854 3b04 	ldr.w	r3, [r4], #4
 8018fbc:	9303      	str	r3, [sp, #12]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	daed      	bge.n	8018f9e <_vfiprintf_r+0x256>
 8018fc2:	425b      	negs	r3, r3
 8018fc4:	9303      	str	r3, [sp, #12]
 8018fc6:	f04a 0a04 	orr.w	sl, sl, #4
 8018fca:	e7e8      	b.n	8018f9e <_vfiprintf_r+0x256>
 8018fcc:	232b      	movs	r3, #43	; 0x2b
 8018fce:	e7ed      	b.n	8018fac <_vfiprintf_r+0x264>
 8018fd0:	9a01      	ldr	r2, [sp, #4]
 8018fd2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8018fd8:	d112      	bne.n	8019000 <_vfiprintf_r+0x2b8>
 8018fda:	f854 0b04 	ldr.w	r0, [r4], #4
 8018fde:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8018fe2:	e9cd 3200 	strd	r3, r2, [sp]
 8018fe6:	e7da      	b.n	8018f9e <_vfiprintf_r+0x256>
 8018fe8:	9b00      	ldr	r3, [sp, #0]
 8018fea:	200a      	movs	r0, #10
 8018fec:	fb00 1303 	mla	r3, r0, r3, r1
 8018ff0:	9300      	str	r3, [sp, #0]
 8018ff2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018ff6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8018ffa:	2909      	cmp	r1, #9
 8018ffc:	d9f4      	bls.n	8018fe8 <_vfiprintf_r+0x2a0>
 8018ffe:	e72f      	b.n	8018e60 <_vfiprintf_r+0x118>
 8019000:	2100      	movs	r1, #0
 8019002:	9100      	str	r1, [sp, #0]
 8019004:	e7f7      	b.n	8018ff6 <_vfiprintf_r+0x2ae>
 8019006:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801900a:	e7c8      	b.n	8018f9e <_vfiprintf_r+0x256>
 801900c:	2100      	movs	r1, #0
 801900e:	9a01      	ldr	r2, [sp, #4]
 8019010:	9103      	str	r1, [sp, #12]
 8019012:	9903      	ldr	r1, [sp, #12]
 8019014:	3b30      	subs	r3, #48	; 0x30
 8019016:	200a      	movs	r0, #10
 8019018:	fb00 3301 	mla	r3, r0, r1, r3
 801901c:	9303      	str	r3, [sp, #12]
 801901e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8019022:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019026:	2909      	cmp	r1, #9
 8019028:	d9f3      	bls.n	8019012 <_vfiprintf_r+0x2ca>
 801902a:	e719      	b.n	8018e60 <_vfiprintf_r+0x118>
 801902c:	9b01      	ldr	r3, [sp, #4]
 801902e:	781b      	ldrb	r3, [r3, #0]
 8019030:	2b68      	cmp	r3, #104	; 0x68
 8019032:	bf01      	itttt	eq
 8019034:	9b01      	ldreq	r3, [sp, #4]
 8019036:	3301      	addeq	r3, #1
 8019038:	9301      	streq	r3, [sp, #4]
 801903a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801903e:	bf18      	it	ne
 8019040:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8019044:	e7ab      	b.n	8018f9e <_vfiprintf_r+0x256>
 8019046:	9b01      	ldr	r3, [sp, #4]
 8019048:	781b      	ldrb	r3, [r3, #0]
 801904a:	2b6c      	cmp	r3, #108	; 0x6c
 801904c:	d105      	bne.n	801905a <_vfiprintf_r+0x312>
 801904e:	9b01      	ldr	r3, [sp, #4]
 8019050:	3301      	adds	r3, #1
 8019052:	9301      	str	r3, [sp, #4]
 8019054:	f04a 0a20 	orr.w	sl, sl, #32
 8019058:	e7a1      	b.n	8018f9e <_vfiprintf_r+0x256>
 801905a:	f04a 0a10 	orr.w	sl, sl, #16
 801905e:	e79e      	b.n	8018f9e <_vfiprintf_r+0x256>
 8019060:	46a3      	mov	fp, r4
 8019062:	2100      	movs	r1, #0
 8019064:	f85b 3b04 	ldr.w	r3, [fp], #4
 8019068:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801906c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8019070:	2301      	movs	r3, #1
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	460d      	mov	r5, r1
 8019076:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 801907a:	e0a0      	b.n	80191be <_vfiprintf_r+0x476>
 801907c:	f04a 0a10 	orr.w	sl, sl, #16
 8019080:	f01a 0f20 	tst.w	sl, #32
 8019084:	d011      	beq.n	80190aa <_vfiprintf_r+0x362>
 8019086:	3407      	adds	r4, #7
 8019088:	f024 0b07 	bic.w	fp, r4, #7
 801908c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8019090:	2c00      	cmp	r4, #0
 8019092:	f175 0300 	sbcs.w	r3, r5, #0
 8019096:	da06      	bge.n	80190a6 <_vfiprintf_r+0x35e>
 8019098:	4264      	negs	r4, r4
 801909a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801909e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80190a2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80190a6:	2301      	movs	r3, #1
 80190a8:	e03f      	b.n	801912a <_vfiprintf_r+0x3e2>
 80190aa:	f01a 0f10 	tst.w	sl, #16
 80190ae:	f104 0b04 	add.w	fp, r4, #4
 80190b2:	d002      	beq.n	80190ba <_vfiprintf_r+0x372>
 80190b4:	6824      	ldr	r4, [r4, #0]
 80190b6:	17e5      	asrs	r5, r4, #31
 80190b8:	e7ea      	b.n	8019090 <_vfiprintf_r+0x348>
 80190ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80190be:	6824      	ldr	r4, [r4, #0]
 80190c0:	d001      	beq.n	80190c6 <_vfiprintf_r+0x37e>
 80190c2:	b224      	sxth	r4, r4
 80190c4:	e7f7      	b.n	80190b6 <_vfiprintf_r+0x36e>
 80190c6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80190ca:	bf18      	it	ne
 80190cc:	b264      	sxtbne	r4, r4
 80190ce:	e7f2      	b.n	80190b6 <_vfiprintf_r+0x36e>
 80190d0:	f01a 0f20 	tst.w	sl, #32
 80190d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80190d8:	d005      	beq.n	80190e6 <_vfiprintf_r+0x39e>
 80190da:	9a02      	ldr	r2, [sp, #8]
 80190dc:	4610      	mov	r0, r2
 80190de:	17d1      	asrs	r1, r2, #31
 80190e0:	e9c3 0100 	strd	r0, r1, [r3]
 80190e4:	e694      	b.n	8018e10 <_vfiprintf_r+0xc8>
 80190e6:	f01a 0f10 	tst.w	sl, #16
 80190ea:	d002      	beq.n	80190f2 <_vfiprintf_r+0x3aa>
 80190ec:	9a02      	ldr	r2, [sp, #8]
 80190ee:	601a      	str	r2, [r3, #0]
 80190f0:	e68e      	b.n	8018e10 <_vfiprintf_r+0xc8>
 80190f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80190f6:	d002      	beq.n	80190fe <_vfiprintf_r+0x3b6>
 80190f8:	9a02      	ldr	r2, [sp, #8]
 80190fa:	801a      	strh	r2, [r3, #0]
 80190fc:	e688      	b.n	8018e10 <_vfiprintf_r+0xc8>
 80190fe:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8019102:	d0f3      	beq.n	80190ec <_vfiprintf_r+0x3a4>
 8019104:	9a02      	ldr	r2, [sp, #8]
 8019106:	701a      	strb	r2, [r3, #0]
 8019108:	e682      	b.n	8018e10 <_vfiprintf_r+0xc8>
 801910a:	f04a 0a10 	orr.w	sl, sl, #16
 801910e:	f01a 0f20 	tst.w	sl, #32
 8019112:	d01d      	beq.n	8019150 <_vfiprintf_r+0x408>
 8019114:	3407      	adds	r4, #7
 8019116:	f024 0b07 	bic.w	fp, r4, #7
 801911a:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801911e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8019122:	2300      	movs	r3, #0
 8019124:	2200      	movs	r2, #0
 8019126:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801912a:	9a00      	ldr	r2, [sp, #0]
 801912c:	3201      	adds	r2, #1
 801912e:	f000 8261 	beq.w	80195f4 <_vfiprintf_r+0x8ac>
 8019132:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8019136:	9204      	str	r2, [sp, #16]
 8019138:	ea54 0205 	orrs.w	r2, r4, r5
 801913c:	f040 8260 	bne.w	8019600 <_vfiprintf_r+0x8b8>
 8019140:	9a00      	ldr	r2, [sp, #0]
 8019142:	2a00      	cmp	r2, #0
 8019144:	f000 8197 	beq.w	8019476 <_vfiprintf_r+0x72e>
 8019148:	2b01      	cmp	r3, #1
 801914a:	f040 825c 	bne.w	8019606 <_vfiprintf_r+0x8be>
 801914e:	e135      	b.n	80193bc <_vfiprintf_r+0x674>
 8019150:	f01a 0f10 	tst.w	sl, #16
 8019154:	f104 0b04 	add.w	fp, r4, #4
 8019158:	d001      	beq.n	801915e <_vfiprintf_r+0x416>
 801915a:	6824      	ldr	r4, [r4, #0]
 801915c:	e003      	b.n	8019166 <_vfiprintf_r+0x41e>
 801915e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8019162:	d002      	beq.n	801916a <_vfiprintf_r+0x422>
 8019164:	8824      	ldrh	r4, [r4, #0]
 8019166:	2500      	movs	r5, #0
 8019168:	e7d9      	b.n	801911e <_vfiprintf_r+0x3d6>
 801916a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801916e:	d0f4      	beq.n	801915a <_vfiprintf_r+0x412>
 8019170:	7824      	ldrb	r4, [r4, #0]
 8019172:	e7f8      	b.n	8019166 <_vfiprintf_r+0x41e>
 8019174:	46a3      	mov	fp, r4
 8019176:	f647 0330 	movw	r3, #30768	; 0x7830
 801917a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801917e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8019182:	4b03      	ldr	r3, [pc, #12]	; (8019190 <_vfiprintf_r+0x448>)
 8019184:	9305      	str	r3, [sp, #20]
 8019186:	2500      	movs	r5, #0
 8019188:	f04a 0a02 	orr.w	sl, sl, #2
 801918c:	2302      	movs	r3, #2
 801918e:	e7c9      	b.n	8019124 <_vfiprintf_r+0x3dc>
 8019190:	0801c030 	.word	0x0801c030
 8019194:	9b00      	ldr	r3, [sp, #0]
 8019196:	46a3      	mov	fp, r4
 8019198:	2500      	movs	r5, #0
 801919a:	1c5c      	adds	r4, r3, #1
 801919c:	f85b 8b04 	ldr.w	r8, [fp], #4
 80191a0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80191a4:	f000 80cf 	beq.w	8019346 <_vfiprintf_r+0x5fe>
 80191a8:	461a      	mov	r2, r3
 80191aa:	4629      	mov	r1, r5
 80191ac:	4640      	mov	r0, r8
 80191ae:	f7e7 f837 	bl	8000220 <memchr>
 80191b2:	2800      	cmp	r0, #0
 80191b4:	f000 8174 	beq.w	80194a0 <_vfiprintf_r+0x758>
 80191b8:	eba0 0308 	sub.w	r3, r0, r8
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	9b00      	ldr	r3, [sp, #0]
 80191c0:	42ab      	cmp	r3, r5
 80191c2:	bfb8      	it	lt
 80191c4:	462b      	movlt	r3, r5
 80191c6:	9304      	str	r3, [sp, #16]
 80191c8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80191cc:	b113      	cbz	r3, 80191d4 <_vfiprintf_r+0x48c>
 80191ce:	9b04      	ldr	r3, [sp, #16]
 80191d0:	3301      	adds	r3, #1
 80191d2:	9304      	str	r3, [sp, #16]
 80191d4:	f01a 0302 	ands.w	r3, sl, #2
 80191d8:	9308      	str	r3, [sp, #32]
 80191da:	bf1e      	ittt	ne
 80191dc:	9b04      	ldrne	r3, [sp, #16]
 80191de:	3302      	addne	r3, #2
 80191e0:	9304      	strne	r3, [sp, #16]
 80191e2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80191e6:	9309      	str	r3, [sp, #36]	; 0x24
 80191e8:	d11f      	bne.n	801922a <_vfiprintf_r+0x4e2>
 80191ea:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80191ee:	1a9c      	subs	r4, r3, r2
 80191f0:	2c00      	cmp	r4, #0
 80191f2:	dd1a      	ble.n	801922a <_vfiprintf_r+0x4e2>
 80191f4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80191f8:	48b9      	ldr	r0, [pc, #740]	; (80194e0 <_vfiprintf_r+0x798>)
 80191fa:	6030      	str	r0, [r6, #0]
 80191fc:	2c10      	cmp	r4, #16
 80191fe:	f103 0301 	add.w	r3, r3, #1
 8019202:	f106 0108 	add.w	r1, r6, #8
 8019206:	f300 814d 	bgt.w	80194a4 <_vfiprintf_r+0x75c>
 801920a:	6074      	str	r4, [r6, #4]
 801920c:	2b07      	cmp	r3, #7
 801920e:	4414      	add	r4, r2
 8019210:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8019214:	f340 8158 	ble.w	80194c8 <_vfiprintf_r+0x780>
 8019218:	aa0c      	add	r2, sp, #48	; 0x30
 801921a:	4639      	mov	r1, r7
 801921c:	4648      	mov	r0, r9
 801921e:	f7ff fd60 	bl	8018ce2 <__sprint_r>
 8019222:	2800      	cmp	r0, #0
 8019224:	f040 81b8 	bne.w	8019598 <_vfiprintf_r+0x850>
 8019228:	ae0f      	add	r6, sp, #60	; 0x3c
 801922a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801922e:	b173      	cbz	r3, 801924e <_vfiprintf_r+0x506>
 8019230:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8019234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019236:	6032      	str	r2, [r6, #0]
 8019238:	2201      	movs	r2, #1
 801923a:	6072      	str	r2, [r6, #4]
 801923c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801923e:	3301      	adds	r3, #1
 8019240:	3201      	adds	r2, #1
 8019242:	2b07      	cmp	r3, #7
 8019244:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8019248:	f300 8140 	bgt.w	80194cc <_vfiprintf_r+0x784>
 801924c:	3608      	adds	r6, #8
 801924e:	9b08      	ldr	r3, [sp, #32]
 8019250:	b16b      	cbz	r3, 801926e <_vfiprintf_r+0x526>
 8019252:	aa0b      	add	r2, sp, #44	; 0x2c
 8019254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019256:	6032      	str	r2, [r6, #0]
 8019258:	2202      	movs	r2, #2
 801925a:	6072      	str	r2, [r6, #4]
 801925c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801925e:	3301      	adds	r3, #1
 8019260:	3202      	adds	r2, #2
 8019262:	2b07      	cmp	r3, #7
 8019264:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8019268:	f300 8140 	bgt.w	80194ec <_vfiprintf_r+0x7a4>
 801926c:	3608      	adds	r6, #8
 801926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019270:	2b80      	cmp	r3, #128	; 0x80
 8019272:	d11f      	bne.n	80192b4 <_vfiprintf_r+0x56c>
 8019274:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8019278:	1a9c      	subs	r4, r3, r2
 801927a:	2c00      	cmp	r4, #0
 801927c:	dd1a      	ble.n	80192b4 <_vfiprintf_r+0x56c>
 801927e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8019282:	4898      	ldr	r0, [pc, #608]	; (80194e4 <_vfiprintf_r+0x79c>)
 8019284:	6030      	str	r0, [r6, #0]
 8019286:	2c10      	cmp	r4, #16
 8019288:	f103 0301 	add.w	r3, r3, #1
 801928c:	f106 0108 	add.w	r1, r6, #8
 8019290:	f300 8135 	bgt.w	80194fe <_vfiprintf_r+0x7b6>
 8019294:	6074      	str	r4, [r6, #4]
 8019296:	2b07      	cmp	r3, #7
 8019298:	4414      	add	r4, r2
 801929a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801929e:	f340 8140 	ble.w	8019522 <_vfiprintf_r+0x7da>
 80192a2:	aa0c      	add	r2, sp, #48	; 0x30
 80192a4:	4639      	mov	r1, r7
 80192a6:	4648      	mov	r0, r9
 80192a8:	f7ff fd1b 	bl	8018ce2 <__sprint_r>
 80192ac:	2800      	cmp	r0, #0
 80192ae:	f040 8173 	bne.w	8019598 <_vfiprintf_r+0x850>
 80192b2:	ae0f      	add	r6, sp, #60	; 0x3c
 80192b4:	9b00      	ldr	r3, [sp, #0]
 80192b6:	1aec      	subs	r4, r5, r3
 80192b8:	2c00      	cmp	r4, #0
 80192ba:	dd1a      	ble.n	80192f2 <_vfiprintf_r+0x5aa>
 80192bc:	4d89      	ldr	r5, [pc, #548]	; (80194e4 <_vfiprintf_r+0x79c>)
 80192be:	6035      	str	r5, [r6, #0]
 80192c0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80192c4:	2c10      	cmp	r4, #16
 80192c6:	f103 0301 	add.w	r3, r3, #1
 80192ca:	f106 0208 	add.w	r2, r6, #8
 80192ce:	f300 812a 	bgt.w	8019526 <_vfiprintf_r+0x7de>
 80192d2:	6074      	str	r4, [r6, #4]
 80192d4:	2b07      	cmp	r3, #7
 80192d6:	440c      	add	r4, r1
 80192d8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80192dc:	f340 8134 	ble.w	8019548 <_vfiprintf_r+0x800>
 80192e0:	aa0c      	add	r2, sp, #48	; 0x30
 80192e2:	4639      	mov	r1, r7
 80192e4:	4648      	mov	r0, r9
 80192e6:	f7ff fcfc 	bl	8018ce2 <__sprint_r>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	f040 8154 	bne.w	8019598 <_vfiprintf_r+0x850>
 80192f0:	ae0f      	add	r6, sp, #60	; 0x3c
 80192f2:	9b00      	ldr	r3, [sp, #0]
 80192f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80192f6:	6073      	str	r3, [r6, #4]
 80192f8:	4418      	add	r0, r3
 80192fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192fc:	f8c6 8000 	str.w	r8, [r6]
 8019300:	3301      	adds	r3, #1
 8019302:	2b07      	cmp	r3, #7
 8019304:	900e      	str	r0, [sp, #56]	; 0x38
 8019306:	930d      	str	r3, [sp, #52]	; 0x34
 8019308:	f300 8120 	bgt.w	801954c <_vfiprintf_r+0x804>
 801930c:	f106 0308 	add.w	r3, r6, #8
 8019310:	f01a 0f04 	tst.w	sl, #4
 8019314:	f040 8122 	bne.w	801955c <_vfiprintf_r+0x814>
 8019318:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801931c:	9904      	ldr	r1, [sp, #16]
 801931e:	428a      	cmp	r2, r1
 8019320:	bfac      	ite	ge
 8019322:	189b      	addge	r3, r3, r2
 8019324:	185b      	addlt	r3, r3, r1
 8019326:	9302      	str	r3, [sp, #8]
 8019328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801932a:	b13b      	cbz	r3, 801933c <_vfiprintf_r+0x5f4>
 801932c:	aa0c      	add	r2, sp, #48	; 0x30
 801932e:	4639      	mov	r1, r7
 8019330:	4648      	mov	r0, r9
 8019332:	f7ff fcd6 	bl	8018ce2 <__sprint_r>
 8019336:	2800      	cmp	r0, #0
 8019338:	f040 812e 	bne.w	8019598 <_vfiprintf_r+0x850>
 801933c:	2300      	movs	r3, #0
 801933e:	930d      	str	r3, [sp, #52]	; 0x34
 8019340:	465c      	mov	r4, fp
 8019342:	ae0f      	add	r6, sp, #60	; 0x3c
 8019344:	e564      	b.n	8018e10 <_vfiprintf_r+0xc8>
 8019346:	4640      	mov	r0, r8
 8019348:	f7e6 ff5c 	bl	8000204 <strlen>
 801934c:	9000      	str	r0, [sp, #0]
 801934e:	e736      	b.n	80191be <_vfiprintf_r+0x476>
 8019350:	f04a 0a10 	orr.w	sl, sl, #16
 8019354:	f01a 0f20 	tst.w	sl, #32
 8019358:	d006      	beq.n	8019368 <_vfiprintf_r+0x620>
 801935a:	3407      	adds	r4, #7
 801935c:	f024 0b07 	bic.w	fp, r4, #7
 8019360:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8019364:	2301      	movs	r3, #1
 8019366:	e6dd      	b.n	8019124 <_vfiprintf_r+0x3dc>
 8019368:	f01a 0f10 	tst.w	sl, #16
 801936c:	f104 0b04 	add.w	fp, r4, #4
 8019370:	d001      	beq.n	8019376 <_vfiprintf_r+0x62e>
 8019372:	6824      	ldr	r4, [r4, #0]
 8019374:	e003      	b.n	801937e <_vfiprintf_r+0x636>
 8019376:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801937a:	d002      	beq.n	8019382 <_vfiprintf_r+0x63a>
 801937c:	8824      	ldrh	r4, [r4, #0]
 801937e:	2500      	movs	r5, #0
 8019380:	e7f0      	b.n	8019364 <_vfiprintf_r+0x61c>
 8019382:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8019386:	d0f4      	beq.n	8019372 <_vfiprintf_r+0x62a>
 8019388:	7824      	ldrb	r4, [r4, #0]
 801938a:	e7f8      	b.n	801937e <_vfiprintf_r+0x636>
 801938c:	4a56      	ldr	r2, [pc, #344]	; (80194e8 <_vfiprintf_r+0x7a0>)
 801938e:	e5d5      	b.n	8018f3c <_vfiprintf_r+0x1f4>
 8019390:	f01a 0f10 	tst.w	sl, #16
 8019394:	f104 0b04 	add.w	fp, r4, #4
 8019398:	d001      	beq.n	801939e <_vfiprintf_r+0x656>
 801939a:	6824      	ldr	r4, [r4, #0]
 801939c:	e003      	b.n	80193a6 <_vfiprintf_r+0x65e>
 801939e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80193a2:	d002      	beq.n	80193aa <_vfiprintf_r+0x662>
 80193a4:	8824      	ldrh	r4, [r4, #0]
 80193a6:	2500      	movs	r5, #0
 80193a8:	e5d2      	b.n	8018f50 <_vfiprintf_r+0x208>
 80193aa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80193ae:	d0f4      	beq.n	801939a <_vfiprintf_r+0x652>
 80193b0:	7824      	ldrb	r4, [r4, #0]
 80193b2:	e7f8      	b.n	80193a6 <_vfiprintf_r+0x65e>
 80193b4:	2d00      	cmp	r5, #0
 80193b6:	bf08      	it	eq
 80193b8:	2c0a      	cmpeq	r4, #10
 80193ba:	d205      	bcs.n	80193c8 <_vfiprintf_r+0x680>
 80193bc:	3430      	adds	r4, #48	; 0x30
 80193be:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80193c2:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80193c6:	e13c      	b.n	8019642 <_vfiprintf_r+0x8fa>
 80193c8:	ab38      	add	r3, sp, #224	; 0xe0
 80193ca:	9308      	str	r3, [sp, #32]
 80193cc:	9b04      	ldr	r3, [sp, #16]
 80193ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80193d2:	f04f 0a00 	mov.w	sl, #0
 80193d6:	9309      	str	r3, [sp, #36]	; 0x24
 80193d8:	9b08      	ldr	r3, [sp, #32]
 80193da:	220a      	movs	r2, #10
 80193dc:	f103 38ff 	add.w	r8, r3, #4294967295
 80193e0:	4620      	mov	r0, r4
 80193e2:	2300      	movs	r3, #0
 80193e4:	4629      	mov	r1, r5
 80193e6:	f7e7 fc6f 	bl	8000cc8 <__aeabi_uldivmod>
 80193ea:	9b08      	ldr	r3, [sp, #32]
 80193ec:	3230      	adds	r2, #48	; 0x30
 80193ee:	f803 2c01 	strb.w	r2, [r3, #-1]
 80193f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193f4:	f10a 0a01 	add.w	sl, sl, #1
 80193f8:	b1db      	cbz	r3, 8019432 <_vfiprintf_r+0x6ea>
 80193fa:	9b06      	ldr	r3, [sp, #24]
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	4553      	cmp	r3, sl
 8019400:	d117      	bne.n	8019432 <_vfiprintf_r+0x6ea>
 8019402:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019406:	d014      	beq.n	8019432 <_vfiprintf_r+0x6ea>
 8019408:	2d00      	cmp	r5, #0
 801940a:	bf08      	it	eq
 801940c:	2c0a      	cmpeq	r4, #10
 801940e:	d310      	bcc.n	8019432 <_vfiprintf_r+0x6ea>
 8019410:	9b07      	ldr	r3, [sp, #28]
 8019412:	eba8 0803 	sub.w	r8, r8, r3
 8019416:	461a      	mov	r2, r3
 8019418:	ee18 1a10 	vmov	r1, s16
 801941c:	4640      	mov	r0, r8
 801941e:	f7ff fbd2 	bl	8018bc6 <strncpy>
 8019422:	9b06      	ldr	r3, [sp, #24]
 8019424:	785b      	ldrb	r3, [r3, #1]
 8019426:	b1a3      	cbz	r3, 8019452 <_vfiprintf_r+0x70a>
 8019428:	9b06      	ldr	r3, [sp, #24]
 801942a:	3301      	adds	r3, #1
 801942c:	9306      	str	r3, [sp, #24]
 801942e:	f04f 0a00 	mov.w	sl, #0
 8019432:	220a      	movs	r2, #10
 8019434:	2300      	movs	r3, #0
 8019436:	4620      	mov	r0, r4
 8019438:	4629      	mov	r1, r5
 801943a:	f7e7 fc45 	bl	8000cc8 <__aeabi_uldivmod>
 801943e:	2d00      	cmp	r5, #0
 8019440:	bf08      	it	eq
 8019442:	2c0a      	cmpeq	r4, #10
 8019444:	f0c0 80fd 	bcc.w	8019642 <_vfiprintf_r+0x8fa>
 8019448:	4604      	mov	r4, r0
 801944a:	460d      	mov	r5, r1
 801944c:	f8cd 8020 	str.w	r8, [sp, #32]
 8019450:	e7c2      	b.n	80193d8 <_vfiprintf_r+0x690>
 8019452:	469a      	mov	sl, r3
 8019454:	e7ed      	b.n	8019432 <_vfiprintf_r+0x6ea>
 8019456:	9a05      	ldr	r2, [sp, #20]
 8019458:	f004 030f 	and.w	r3, r4, #15
 801945c:	5cd3      	ldrb	r3, [r2, r3]
 801945e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8019462:	0923      	lsrs	r3, r4, #4
 8019464:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8019468:	092a      	lsrs	r2, r5, #4
 801946a:	461c      	mov	r4, r3
 801946c:	4615      	mov	r5, r2
 801946e:	ea54 0305 	orrs.w	r3, r4, r5
 8019472:	d1f0      	bne.n	8019456 <_vfiprintf_r+0x70e>
 8019474:	e0e5      	b.n	8019642 <_vfiprintf_r+0x8fa>
 8019476:	b933      	cbnz	r3, 8019486 <_vfiprintf_r+0x73e>
 8019478:	f01a 0f01 	tst.w	sl, #1
 801947c:	d003      	beq.n	8019486 <_vfiprintf_r+0x73e>
 801947e:	2330      	movs	r3, #48	; 0x30
 8019480:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8019484:	e79d      	b.n	80193c2 <_vfiprintf_r+0x67a>
 8019486:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801948a:	e0da      	b.n	8019642 <_vfiprintf_r+0x8fa>
 801948c:	2b00      	cmp	r3, #0
 801948e:	f000 80a4 	beq.w	80195da <_vfiprintf_r+0x892>
 8019492:	2100      	movs	r1, #0
 8019494:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019498:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801949c:	46a3      	mov	fp, r4
 801949e:	e5e7      	b.n	8019070 <_vfiprintf_r+0x328>
 80194a0:	4605      	mov	r5, r0
 80194a2:	e68c      	b.n	80191be <_vfiprintf_r+0x476>
 80194a4:	2010      	movs	r0, #16
 80194a6:	4402      	add	r2, r0
 80194a8:	2b07      	cmp	r3, #7
 80194aa:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80194ae:	6070      	str	r0, [r6, #4]
 80194b0:	dd07      	ble.n	80194c2 <_vfiprintf_r+0x77a>
 80194b2:	aa0c      	add	r2, sp, #48	; 0x30
 80194b4:	4639      	mov	r1, r7
 80194b6:	4648      	mov	r0, r9
 80194b8:	f7ff fc13 	bl	8018ce2 <__sprint_r>
 80194bc:	2800      	cmp	r0, #0
 80194be:	d16b      	bne.n	8019598 <_vfiprintf_r+0x850>
 80194c0:	a90f      	add	r1, sp, #60	; 0x3c
 80194c2:	3c10      	subs	r4, #16
 80194c4:	460e      	mov	r6, r1
 80194c6:	e695      	b.n	80191f4 <_vfiprintf_r+0x4ac>
 80194c8:	460e      	mov	r6, r1
 80194ca:	e6ae      	b.n	801922a <_vfiprintf_r+0x4e2>
 80194cc:	aa0c      	add	r2, sp, #48	; 0x30
 80194ce:	4639      	mov	r1, r7
 80194d0:	4648      	mov	r0, r9
 80194d2:	f7ff fc06 	bl	8018ce2 <__sprint_r>
 80194d6:	2800      	cmp	r0, #0
 80194d8:	d15e      	bne.n	8019598 <_vfiprintf_r+0x850>
 80194da:	ae0f      	add	r6, sp, #60	; 0x3c
 80194dc:	e6b7      	b.n	801924e <_vfiprintf_r+0x506>
 80194de:	bf00      	nop
 80194e0:	0801c414 	.word	0x0801c414
 80194e4:	0801c424 	.word	0x0801c424
 80194e8:	0801c041 	.word	0x0801c041
 80194ec:	aa0c      	add	r2, sp, #48	; 0x30
 80194ee:	4639      	mov	r1, r7
 80194f0:	4648      	mov	r0, r9
 80194f2:	f7ff fbf6 	bl	8018ce2 <__sprint_r>
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d14e      	bne.n	8019598 <_vfiprintf_r+0x850>
 80194fa:	ae0f      	add	r6, sp, #60	; 0x3c
 80194fc:	e6b7      	b.n	801926e <_vfiprintf_r+0x526>
 80194fe:	2010      	movs	r0, #16
 8019500:	4402      	add	r2, r0
 8019502:	2b07      	cmp	r3, #7
 8019504:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8019508:	6070      	str	r0, [r6, #4]
 801950a:	dd07      	ble.n	801951c <_vfiprintf_r+0x7d4>
 801950c:	aa0c      	add	r2, sp, #48	; 0x30
 801950e:	4639      	mov	r1, r7
 8019510:	4648      	mov	r0, r9
 8019512:	f7ff fbe6 	bl	8018ce2 <__sprint_r>
 8019516:	2800      	cmp	r0, #0
 8019518:	d13e      	bne.n	8019598 <_vfiprintf_r+0x850>
 801951a:	a90f      	add	r1, sp, #60	; 0x3c
 801951c:	3c10      	subs	r4, #16
 801951e:	460e      	mov	r6, r1
 8019520:	e6ad      	b.n	801927e <_vfiprintf_r+0x536>
 8019522:	460e      	mov	r6, r1
 8019524:	e6c6      	b.n	80192b4 <_vfiprintf_r+0x56c>
 8019526:	2010      	movs	r0, #16
 8019528:	4401      	add	r1, r0
 801952a:	2b07      	cmp	r3, #7
 801952c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019530:	6070      	str	r0, [r6, #4]
 8019532:	dd06      	ble.n	8019542 <_vfiprintf_r+0x7fa>
 8019534:	aa0c      	add	r2, sp, #48	; 0x30
 8019536:	4639      	mov	r1, r7
 8019538:	4648      	mov	r0, r9
 801953a:	f7ff fbd2 	bl	8018ce2 <__sprint_r>
 801953e:	bb58      	cbnz	r0, 8019598 <_vfiprintf_r+0x850>
 8019540:	aa0f      	add	r2, sp, #60	; 0x3c
 8019542:	3c10      	subs	r4, #16
 8019544:	4616      	mov	r6, r2
 8019546:	e6ba      	b.n	80192be <_vfiprintf_r+0x576>
 8019548:	4616      	mov	r6, r2
 801954a:	e6d2      	b.n	80192f2 <_vfiprintf_r+0x5aa>
 801954c:	aa0c      	add	r2, sp, #48	; 0x30
 801954e:	4639      	mov	r1, r7
 8019550:	4648      	mov	r0, r9
 8019552:	f7ff fbc6 	bl	8018ce2 <__sprint_r>
 8019556:	b9f8      	cbnz	r0, 8019598 <_vfiprintf_r+0x850>
 8019558:	ab0f      	add	r3, sp, #60	; 0x3c
 801955a:	e6d9      	b.n	8019310 <_vfiprintf_r+0x5c8>
 801955c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8019560:	1a54      	subs	r4, r2, r1
 8019562:	2c00      	cmp	r4, #0
 8019564:	f77f aed8 	ble.w	8019318 <_vfiprintf_r+0x5d0>
 8019568:	4d3a      	ldr	r5, [pc, #232]	; (8019654 <_vfiprintf_r+0x90c>)
 801956a:	2610      	movs	r6, #16
 801956c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019570:	2c10      	cmp	r4, #16
 8019572:	f102 0201 	add.w	r2, r2, #1
 8019576:	601d      	str	r5, [r3, #0]
 8019578:	dc1d      	bgt.n	80195b6 <_vfiprintf_r+0x86e>
 801957a:	605c      	str	r4, [r3, #4]
 801957c:	2a07      	cmp	r2, #7
 801957e:	440c      	add	r4, r1
 8019580:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8019584:	f77f aec8 	ble.w	8019318 <_vfiprintf_r+0x5d0>
 8019588:	aa0c      	add	r2, sp, #48	; 0x30
 801958a:	4639      	mov	r1, r7
 801958c:	4648      	mov	r0, r9
 801958e:	f7ff fba8 	bl	8018ce2 <__sprint_r>
 8019592:	2800      	cmp	r0, #0
 8019594:	f43f aec0 	beq.w	8019318 <_vfiprintf_r+0x5d0>
 8019598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801959a:	07d9      	lsls	r1, r3, #31
 801959c:	d405      	bmi.n	80195aa <_vfiprintf_r+0x862>
 801959e:	89bb      	ldrh	r3, [r7, #12]
 80195a0:	059a      	lsls	r2, r3, #22
 80195a2:	d402      	bmi.n	80195aa <_vfiprintf_r+0x862>
 80195a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80195a6:	f7fe fd9e 	bl	80180e6 <__retarget_lock_release_recursive>
 80195aa:	89bb      	ldrh	r3, [r7, #12]
 80195ac:	065b      	lsls	r3, r3, #25
 80195ae:	f57f abfe 	bpl.w	8018dae <_vfiprintf_r+0x66>
 80195b2:	f7ff bbf9 	b.w	8018da8 <_vfiprintf_r+0x60>
 80195b6:	3110      	adds	r1, #16
 80195b8:	2a07      	cmp	r2, #7
 80195ba:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80195be:	605e      	str	r6, [r3, #4]
 80195c0:	dc02      	bgt.n	80195c8 <_vfiprintf_r+0x880>
 80195c2:	3308      	adds	r3, #8
 80195c4:	3c10      	subs	r4, #16
 80195c6:	e7d1      	b.n	801956c <_vfiprintf_r+0x824>
 80195c8:	aa0c      	add	r2, sp, #48	; 0x30
 80195ca:	4639      	mov	r1, r7
 80195cc:	4648      	mov	r0, r9
 80195ce:	f7ff fb88 	bl	8018ce2 <__sprint_r>
 80195d2:	2800      	cmp	r0, #0
 80195d4:	d1e0      	bne.n	8019598 <_vfiprintf_r+0x850>
 80195d6:	ab0f      	add	r3, sp, #60	; 0x3c
 80195d8:	e7f4      	b.n	80195c4 <_vfiprintf_r+0x87c>
 80195da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195dc:	b913      	cbnz	r3, 80195e4 <_vfiprintf_r+0x89c>
 80195de:	2300      	movs	r3, #0
 80195e0:	930d      	str	r3, [sp, #52]	; 0x34
 80195e2:	e7d9      	b.n	8019598 <_vfiprintf_r+0x850>
 80195e4:	aa0c      	add	r2, sp, #48	; 0x30
 80195e6:	4639      	mov	r1, r7
 80195e8:	4648      	mov	r0, r9
 80195ea:	f7ff fb7a 	bl	8018ce2 <__sprint_r>
 80195ee:	2800      	cmp	r0, #0
 80195f0:	d0f5      	beq.n	80195de <_vfiprintf_r+0x896>
 80195f2:	e7d1      	b.n	8019598 <_vfiprintf_r+0x850>
 80195f4:	ea54 0205 	orrs.w	r2, r4, r5
 80195f8:	f8cd a010 	str.w	sl, [sp, #16]
 80195fc:	f43f ada4 	beq.w	8019148 <_vfiprintf_r+0x400>
 8019600:	2b01      	cmp	r3, #1
 8019602:	f43f aed7 	beq.w	80193b4 <_vfiprintf_r+0x66c>
 8019606:	2b02      	cmp	r3, #2
 8019608:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801960c:	f43f af23 	beq.w	8019456 <_vfiprintf_r+0x70e>
 8019610:	08e2      	lsrs	r2, r4, #3
 8019612:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8019616:	08e8      	lsrs	r0, r5, #3
 8019618:	f004 0307 	and.w	r3, r4, #7
 801961c:	4605      	mov	r5, r0
 801961e:	4614      	mov	r4, r2
 8019620:	3330      	adds	r3, #48	; 0x30
 8019622:	ea54 0205 	orrs.w	r2, r4, r5
 8019626:	4641      	mov	r1, r8
 8019628:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801962c:	d1f0      	bne.n	8019610 <_vfiprintf_r+0x8c8>
 801962e:	9a04      	ldr	r2, [sp, #16]
 8019630:	07d0      	lsls	r0, r2, #31
 8019632:	d506      	bpl.n	8019642 <_vfiprintf_r+0x8fa>
 8019634:	2b30      	cmp	r3, #48	; 0x30
 8019636:	d004      	beq.n	8019642 <_vfiprintf_r+0x8fa>
 8019638:	2330      	movs	r3, #48	; 0x30
 801963a:	f808 3c01 	strb.w	r3, [r8, #-1]
 801963e:	f1a1 0802 	sub.w	r8, r1, #2
 8019642:	ab38      	add	r3, sp, #224	; 0xe0
 8019644:	eba3 0308 	sub.w	r3, r3, r8
 8019648:	9d00      	ldr	r5, [sp, #0]
 801964a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801964e:	9300      	str	r3, [sp, #0]
 8019650:	e5b5      	b.n	80191be <_vfiprintf_r+0x476>
 8019652:	bf00      	nop
 8019654:	0801c414 	.word	0x0801c414

08019658 <__sbprintf>:
 8019658:	b570      	push	{r4, r5, r6, lr}
 801965a:	460c      	mov	r4, r1
 801965c:	8989      	ldrh	r1, [r1, #12]
 801965e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8019662:	f021 0102 	bic.w	r1, r1, #2
 8019666:	f8ad 1014 	strh.w	r1, [sp, #20]
 801966a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801966c:	911b      	str	r1, [sp, #108]	; 0x6c
 801966e:	89e1      	ldrh	r1, [r4, #14]
 8019670:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019674:	69e1      	ldr	r1, [r4, #28]
 8019676:	9109      	str	r1, [sp, #36]	; 0x24
 8019678:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801967a:	910b      	str	r1, [sp, #44]	; 0x2c
 801967c:	a91c      	add	r1, sp, #112	; 0x70
 801967e:	9102      	str	r1, [sp, #8]
 8019680:	9106      	str	r1, [sp, #24]
 8019682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019686:	4606      	mov	r6, r0
 8019688:	9104      	str	r1, [sp, #16]
 801968a:	9107      	str	r1, [sp, #28]
 801968c:	a818      	add	r0, sp, #96	; 0x60
 801968e:	2100      	movs	r1, #0
 8019690:	e9cd 3200 	strd	r3, r2, [sp]
 8019694:	9108      	str	r1, [sp, #32]
 8019696:	f7fe fd23 	bl	80180e0 <__retarget_lock_init_recursive>
 801969a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801969e:	a902      	add	r1, sp, #8
 80196a0:	4630      	mov	r0, r6
 80196a2:	f7ff fb51 	bl	8018d48 <_vfiprintf_r>
 80196a6:	1e05      	subs	r5, r0, #0
 80196a8:	db07      	blt.n	80196ba <__sbprintf+0x62>
 80196aa:	a902      	add	r1, sp, #8
 80196ac:	4630      	mov	r0, r6
 80196ae:	f7fd ffc3 	bl	8017638 <_fflush_r>
 80196b2:	2800      	cmp	r0, #0
 80196b4:	bf18      	it	ne
 80196b6:	f04f 35ff 	movne.w	r5, #4294967295
 80196ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80196be:	9818      	ldr	r0, [sp, #96]	; 0x60
 80196c0:	065b      	lsls	r3, r3, #25
 80196c2:	bf42      	ittt	mi
 80196c4:	89a3      	ldrhmi	r3, [r4, #12]
 80196c6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80196ca:	81a3      	strhmi	r3, [r4, #12]
 80196cc:	f7fe fd09 	bl	80180e2 <__retarget_lock_close_recursive>
 80196d0:	4628      	mov	r0, r5
 80196d2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80196d6:	bd70      	pop	{r4, r5, r6, pc}

080196d8 <__ascii_wctomb>:
 80196d8:	b149      	cbz	r1, 80196ee <__ascii_wctomb+0x16>
 80196da:	2aff      	cmp	r2, #255	; 0xff
 80196dc:	bf85      	ittet	hi
 80196de:	238a      	movhi	r3, #138	; 0x8a
 80196e0:	6003      	strhi	r3, [r0, #0]
 80196e2:	700a      	strbls	r2, [r1, #0]
 80196e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80196e8:	bf98      	it	ls
 80196ea:	2001      	movls	r0, #1
 80196ec:	4770      	bx	lr
 80196ee:	4608      	mov	r0, r1
 80196f0:	4770      	bx	lr
	...

080196f4 <_write_r>:
 80196f4:	b538      	push	{r3, r4, r5, lr}
 80196f6:	4d07      	ldr	r5, [pc, #28]	; (8019714 <_write_r+0x20>)
 80196f8:	4604      	mov	r4, r0
 80196fa:	4608      	mov	r0, r1
 80196fc:	4611      	mov	r1, r2
 80196fe:	2200      	movs	r2, #0
 8019700:	602a      	str	r2, [r5, #0]
 8019702:	461a      	mov	r2, r3
 8019704:	f7f8 fa6a 	bl	8011bdc <_write>
 8019708:	1c43      	adds	r3, r0, #1
 801970a:	d102      	bne.n	8019712 <_write_r+0x1e>
 801970c:	682b      	ldr	r3, [r5, #0]
 801970e:	b103      	cbz	r3, 8019712 <_write_r+0x1e>
 8019710:	6023      	str	r3, [r4, #0]
 8019712:	bd38      	pop	{r3, r4, r5, pc}
 8019714:	20011374 	.word	0x20011374

08019718 <__register_exitproc>:
 8019718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801971c:	4d1c      	ldr	r5, [pc, #112]	; (8019790 <__register_exitproc+0x78>)
 801971e:	4606      	mov	r6, r0
 8019720:	6828      	ldr	r0, [r5, #0]
 8019722:	4698      	mov	r8, r3
 8019724:	460f      	mov	r7, r1
 8019726:	4691      	mov	r9, r2
 8019728:	f7fe fcdc 	bl	80180e4 <__retarget_lock_acquire_recursive>
 801972c:	4b19      	ldr	r3, [pc, #100]	; (8019794 <__register_exitproc+0x7c>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8019734:	4628      	mov	r0, r5
 8019736:	b91c      	cbnz	r4, 8019740 <__register_exitproc+0x28>
 8019738:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801973c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8019740:	6865      	ldr	r5, [r4, #4]
 8019742:	6800      	ldr	r0, [r0, #0]
 8019744:	2d1f      	cmp	r5, #31
 8019746:	dd05      	ble.n	8019754 <__register_exitproc+0x3c>
 8019748:	f7fe fccd 	bl	80180e6 <__retarget_lock_release_recursive>
 801974c:	f04f 30ff 	mov.w	r0, #4294967295
 8019750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019754:	b19e      	cbz	r6, 801977e <__register_exitproc+0x66>
 8019756:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801975a:	2201      	movs	r2, #1
 801975c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8019760:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8019764:	40aa      	lsls	r2, r5
 8019766:	4313      	orrs	r3, r2
 8019768:	2e02      	cmp	r6, #2
 801976a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801976e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8019772:	bf02      	ittt	eq
 8019774:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8019778:	431a      	orreq	r2, r3
 801977a:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 801977e:	1c6b      	adds	r3, r5, #1
 8019780:	3502      	adds	r5, #2
 8019782:	6063      	str	r3, [r4, #4]
 8019784:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8019788:	f7fe fcad 	bl	80180e6 <__retarget_lock_release_recursive>
 801978c:	2000      	movs	r0, #0
 801978e:	e7df      	b.n	8019750 <__register_exitproc+0x38>
 8019790:	20003200 	.word	0x20003200
 8019794:	0801bfc8 	.word	0x0801bfc8

08019798 <__assert_func>:
 8019798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801979a:	4614      	mov	r4, r2
 801979c:	461a      	mov	r2, r3
 801979e:	4b09      	ldr	r3, [pc, #36]	; (80197c4 <__assert_func+0x2c>)
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	4605      	mov	r5, r0
 80197a4:	68d8      	ldr	r0, [r3, #12]
 80197a6:	b14c      	cbz	r4, 80197bc <__assert_func+0x24>
 80197a8:	4b07      	ldr	r3, [pc, #28]	; (80197c8 <__assert_func+0x30>)
 80197aa:	9100      	str	r1, [sp, #0]
 80197ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80197b0:	4906      	ldr	r1, [pc, #24]	; (80197cc <__assert_func+0x34>)
 80197b2:	462b      	mov	r3, r5
 80197b4:	f000 f8a4 	bl	8019900 <fiprintf>
 80197b8:	f000 fcd0 	bl	801a15c <abort>
 80197bc:	4b04      	ldr	r3, [pc, #16]	; (80197d0 <__assert_func+0x38>)
 80197be:	461c      	mov	r4, r3
 80197c0:	e7f3      	b.n	80197aa <__assert_func+0x12>
 80197c2:	bf00      	nop
 80197c4:	200029c4 	.word	0x200029c4
 80197c8:	0801c434 	.word	0x0801c434
 80197cc:	0801c441 	.word	0x0801c441
 80197d0:	0801c46f 	.word	0x0801c46f

080197d4 <_calloc_r>:
 80197d4:	b510      	push	{r4, lr}
 80197d6:	4351      	muls	r1, r2
 80197d8:	f7f9 f924 	bl	8012a24 <_malloc_r>
 80197dc:	4604      	mov	r4, r0
 80197de:	b198      	cbz	r0, 8019808 <_calloc_r+0x34>
 80197e0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80197e4:	f022 0203 	bic.w	r2, r2, #3
 80197e8:	3a04      	subs	r2, #4
 80197ea:	2a24      	cmp	r2, #36	; 0x24
 80197ec:	d81b      	bhi.n	8019826 <_calloc_r+0x52>
 80197ee:	2a13      	cmp	r2, #19
 80197f0:	d917      	bls.n	8019822 <_calloc_r+0x4e>
 80197f2:	2100      	movs	r1, #0
 80197f4:	2a1b      	cmp	r2, #27
 80197f6:	e9c0 1100 	strd	r1, r1, [r0]
 80197fa:	d807      	bhi.n	801980c <_calloc_r+0x38>
 80197fc:	f100 0308 	add.w	r3, r0, #8
 8019800:	2200      	movs	r2, #0
 8019802:	e9c3 2200 	strd	r2, r2, [r3]
 8019806:	609a      	str	r2, [r3, #8]
 8019808:	4620      	mov	r0, r4
 801980a:	bd10      	pop	{r4, pc}
 801980c:	2a24      	cmp	r2, #36	; 0x24
 801980e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8019812:	bf11      	iteee	ne
 8019814:	f100 0310 	addne.w	r3, r0, #16
 8019818:	6101      	streq	r1, [r0, #16]
 801981a:	f100 0318 	addeq.w	r3, r0, #24
 801981e:	6141      	streq	r1, [r0, #20]
 8019820:	e7ee      	b.n	8019800 <_calloc_r+0x2c>
 8019822:	4603      	mov	r3, r0
 8019824:	e7ec      	b.n	8019800 <_calloc_r+0x2c>
 8019826:	2100      	movs	r1, #0
 8019828:	f7f9 fb5a 	bl	8012ee0 <memset>
 801982c:	e7ec      	b.n	8019808 <_calloc_r+0x34>
	...

08019830 <_close_r>:
 8019830:	b538      	push	{r3, r4, r5, lr}
 8019832:	4d06      	ldr	r5, [pc, #24]	; (801984c <_close_r+0x1c>)
 8019834:	2300      	movs	r3, #0
 8019836:	4604      	mov	r4, r0
 8019838:	4608      	mov	r0, r1
 801983a:	602b      	str	r3, [r5, #0]
 801983c:	f7f8 f9fa 	bl	8011c34 <_close>
 8019840:	1c43      	adds	r3, r0, #1
 8019842:	d102      	bne.n	801984a <_close_r+0x1a>
 8019844:	682b      	ldr	r3, [r5, #0]
 8019846:	b103      	cbz	r3, 801984a <_close_r+0x1a>
 8019848:	6023      	str	r3, [r4, #0]
 801984a:	bd38      	pop	{r3, r4, r5, pc}
 801984c:	20011374 	.word	0x20011374

08019850 <_fclose_r>:
 8019850:	b570      	push	{r4, r5, r6, lr}
 8019852:	4606      	mov	r6, r0
 8019854:	460c      	mov	r4, r1
 8019856:	b911      	cbnz	r1, 801985e <_fclose_r+0xe>
 8019858:	2500      	movs	r5, #0
 801985a:	4628      	mov	r0, r5
 801985c:	bd70      	pop	{r4, r5, r6, pc}
 801985e:	b118      	cbz	r0, 8019868 <_fclose_r+0x18>
 8019860:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019862:	b90b      	cbnz	r3, 8019868 <_fclose_r+0x18>
 8019864:	f7fd ff54 	bl	8017710 <__sinit>
 8019868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801986a:	07d8      	lsls	r0, r3, #31
 801986c:	d405      	bmi.n	801987a <_fclose_r+0x2a>
 801986e:	89a3      	ldrh	r3, [r4, #12]
 8019870:	0599      	lsls	r1, r3, #22
 8019872:	d402      	bmi.n	801987a <_fclose_r+0x2a>
 8019874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019876:	f7fe fc35 	bl	80180e4 <__retarget_lock_acquire_recursive>
 801987a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801987e:	b93b      	cbnz	r3, 8019890 <_fclose_r+0x40>
 8019880:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8019882:	f015 0501 	ands.w	r5, r5, #1
 8019886:	d1e7      	bne.n	8019858 <_fclose_r+0x8>
 8019888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801988a:	f7fe fc2c 	bl	80180e6 <__retarget_lock_release_recursive>
 801988e:	e7e4      	b.n	801985a <_fclose_r+0xa>
 8019890:	4621      	mov	r1, r4
 8019892:	4630      	mov	r0, r6
 8019894:	f7fd fe42 	bl	801751c <__sflush_r>
 8019898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801989a:	4605      	mov	r5, r0
 801989c:	b133      	cbz	r3, 80198ac <_fclose_r+0x5c>
 801989e:	69e1      	ldr	r1, [r4, #28]
 80198a0:	4630      	mov	r0, r6
 80198a2:	4798      	blx	r3
 80198a4:	2800      	cmp	r0, #0
 80198a6:	bfb8      	it	lt
 80198a8:	f04f 35ff 	movlt.w	r5, #4294967295
 80198ac:	89a3      	ldrh	r3, [r4, #12]
 80198ae:	061a      	lsls	r2, r3, #24
 80198b0:	d503      	bpl.n	80198ba <_fclose_r+0x6a>
 80198b2:	6921      	ldr	r1, [r4, #16]
 80198b4:	4630      	mov	r0, r6
 80198b6:	f7fd ffbb 	bl	8017830 <_free_r>
 80198ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80198bc:	b141      	cbz	r1, 80198d0 <_fclose_r+0x80>
 80198be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80198c2:	4299      	cmp	r1, r3
 80198c4:	d002      	beq.n	80198cc <_fclose_r+0x7c>
 80198c6:	4630      	mov	r0, r6
 80198c8:	f7fd ffb2 	bl	8017830 <_free_r>
 80198cc:	2300      	movs	r3, #0
 80198ce:	6323      	str	r3, [r4, #48]	; 0x30
 80198d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80198d2:	b121      	cbz	r1, 80198de <_fclose_r+0x8e>
 80198d4:	4630      	mov	r0, r6
 80198d6:	f7fd ffab 	bl	8017830 <_free_r>
 80198da:	2300      	movs	r3, #0
 80198dc:	6463      	str	r3, [r4, #68]	; 0x44
 80198de:	f7fd feff 	bl	80176e0 <__sfp_lock_acquire>
 80198e2:	2300      	movs	r3, #0
 80198e4:	81a3      	strh	r3, [r4, #12]
 80198e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198e8:	07db      	lsls	r3, r3, #31
 80198ea:	d402      	bmi.n	80198f2 <_fclose_r+0xa2>
 80198ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198ee:	f7fe fbfa 	bl	80180e6 <__retarget_lock_release_recursive>
 80198f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198f4:	f7fe fbf5 	bl	80180e2 <__retarget_lock_close_recursive>
 80198f8:	f7fd fef8 	bl	80176ec <__sfp_lock_release>
 80198fc:	e7ad      	b.n	801985a <_fclose_r+0xa>
	...

08019900 <fiprintf>:
 8019900:	b40e      	push	{r1, r2, r3}
 8019902:	b503      	push	{r0, r1, lr}
 8019904:	4601      	mov	r1, r0
 8019906:	ab03      	add	r3, sp, #12
 8019908:	4805      	ldr	r0, [pc, #20]	; (8019920 <fiprintf+0x20>)
 801990a:	f853 2b04 	ldr.w	r2, [r3], #4
 801990e:	6800      	ldr	r0, [r0, #0]
 8019910:	9301      	str	r3, [sp, #4]
 8019912:	f7ff fa19 	bl	8018d48 <_vfiprintf_r>
 8019916:	b002      	add	sp, #8
 8019918:	f85d eb04 	ldr.w	lr, [sp], #4
 801991c:	b003      	add	sp, #12
 801991e:	4770      	bx	lr
 8019920:	200029c4 	.word	0x200029c4

08019924 <__fputwc>:
 8019924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019928:	4680      	mov	r8, r0
 801992a:	460e      	mov	r6, r1
 801992c:	4615      	mov	r5, r2
 801992e:	f7fe fbcd 	bl	80180cc <__locale_mb_cur_max>
 8019932:	2801      	cmp	r0, #1
 8019934:	d11c      	bne.n	8019970 <__fputwc+0x4c>
 8019936:	1e73      	subs	r3, r6, #1
 8019938:	2bfe      	cmp	r3, #254	; 0xfe
 801993a:	d819      	bhi.n	8019970 <__fputwc+0x4c>
 801993c:	f88d 6004 	strb.w	r6, [sp, #4]
 8019940:	4604      	mov	r4, r0
 8019942:	2700      	movs	r7, #0
 8019944:	f10d 0904 	add.w	r9, sp, #4
 8019948:	42a7      	cmp	r7, r4
 801994a:	d020      	beq.n	801998e <__fputwc+0x6a>
 801994c:	68ab      	ldr	r3, [r5, #8]
 801994e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8019952:	3b01      	subs	r3, #1
 8019954:	2b00      	cmp	r3, #0
 8019956:	60ab      	str	r3, [r5, #8]
 8019958:	da04      	bge.n	8019964 <__fputwc+0x40>
 801995a:	69aa      	ldr	r2, [r5, #24]
 801995c:	4293      	cmp	r3, r2
 801995e:	db1a      	blt.n	8019996 <__fputwc+0x72>
 8019960:	290a      	cmp	r1, #10
 8019962:	d018      	beq.n	8019996 <__fputwc+0x72>
 8019964:	682b      	ldr	r3, [r5, #0]
 8019966:	1c5a      	adds	r2, r3, #1
 8019968:	602a      	str	r2, [r5, #0]
 801996a:	7019      	strb	r1, [r3, #0]
 801996c:	3701      	adds	r7, #1
 801996e:	e7eb      	b.n	8019948 <__fputwc+0x24>
 8019970:	4632      	mov	r2, r6
 8019972:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8019976:	a901      	add	r1, sp, #4
 8019978:	4640      	mov	r0, r8
 801997a:	f000 fbd9 	bl	801a130 <_wcrtomb_r>
 801997e:	1c42      	adds	r2, r0, #1
 8019980:	4604      	mov	r4, r0
 8019982:	d1de      	bne.n	8019942 <__fputwc+0x1e>
 8019984:	89ab      	ldrh	r3, [r5, #12]
 8019986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801998a:	81ab      	strh	r3, [r5, #12]
 801998c:	4606      	mov	r6, r0
 801998e:	4630      	mov	r0, r6
 8019990:	b003      	add	sp, #12
 8019992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019996:	462a      	mov	r2, r5
 8019998:	4640      	mov	r0, r8
 801999a:	f000 fb7f 	bl	801a09c <__swbuf_r>
 801999e:	1c43      	adds	r3, r0, #1
 80199a0:	d1e4      	bne.n	801996c <__fputwc+0x48>
 80199a2:	4606      	mov	r6, r0
 80199a4:	e7f3      	b.n	801998e <__fputwc+0x6a>

080199a6 <_fputwc_r>:
 80199a6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80199a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80199aa:	4614      	mov	r4, r2
 80199ac:	07da      	lsls	r2, r3, #31
 80199ae:	4605      	mov	r5, r0
 80199b0:	d407      	bmi.n	80199c2 <_fputwc_r+0x1c>
 80199b2:	89a3      	ldrh	r3, [r4, #12]
 80199b4:	059b      	lsls	r3, r3, #22
 80199b6:	d404      	bmi.n	80199c2 <_fputwc_r+0x1c>
 80199b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199ba:	9101      	str	r1, [sp, #4]
 80199bc:	f7fe fb92 	bl	80180e4 <__retarget_lock_acquire_recursive>
 80199c0:	9901      	ldr	r1, [sp, #4]
 80199c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199c6:	0498      	lsls	r0, r3, #18
 80199c8:	d406      	bmi.n	80199d8 <_fputwc_r+0x32>
 80199ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80199ce:	81a3      	strh	r3, [r4, #12]
 80199d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80199d6:	6663      	str	r3, [r4, #100]	; 0x64
 80199d8:	4622      	mov	r2, r4
 80199da:	4628      	mov	r0, r5
 80199dc:	f7ff ffa2 	bl	8019924 <__fputwc>
 80199e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199e2:	07da      	lsls	r2, r3, #31
 80199e4:	4605      	mov	r5, r0
 80199e6:	d405      	bmi.n	80199f4 <_fputwc_r+0x4e>
 80199e8:	89a3      	ldrh	r3, [r4, #12]
 80199ea:	059b      	lsls	r3, r3, #22
 80199ec:	d402      	bmi.n	80199f4 <_fputwc_r+0x4e>
 80199ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199f0:	f7fe fb79 	bl	80180e6 <__retarget_lock_release_recursive>
 80199f4:	4628      	mov	r0, r5
 80199f6:	b003      	add	sp, #12
 80199f8:	bd30      	pop	{r4, r5, pc}
	...

080199fc <_fstat_r>:
 80199fc:	b538      	push	{r3, r4, r5, lr}
 80199fe:	4d07      	ldr	r5, [pc, #28]	; (8019a1c <_fstat_r+0x20>)
 8019a00:	2300      	movs	r3, #0
 8019a02:	4604      	mov	r4, r0
 8019a04:	4608      	mov	r0, r1
 8019a06:	4611      	mov	r1, r2
 8019a08:	602b      	str	r3, [r5, #0]
 8019a0a:	f7f8 f916 	bl	8011c3a <_fstat>
 8019a0e:	1c43      	adds	r3, r0, #1
 8019a10:	d102      	bne.n	8019a18 <_fstat_r+0x1c>
 8019a12:	682b      	ldr	r3, [r5, #0]
 8019a14:	b103      	cbz	r3, 8019a18 <_fstat_r+0x1c>
 8019a16:	6023      	str	r3, [r4, #0]
 8019a18:	bd38      	pop	{r3, r4, r5, pc}
 8019a1a:	bf00      	nop
 8019a1c:	20011374 	.word	0x20011374

08019a20 <__sfvwrite_r>:
 8019a20:	6893      	ldr	r3, [r2, #8]
 8019a22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a26:	4606      	mov	r6, r0
 8019a28:	460c      	mov	r4, r1
 8019a2a:	4690      	mov	r8, r2
 8019a2c:	b91b      	cbnz	r3, 8019a36 <__sfvwrite_r+0x16>
 8019a2e:	2000      	movs	r0, #0
 8019a30:	b003      	add	sp, #12
 8019a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a36:	898b      	ldrh	r3, [r1, #12]
 8019a38:	0718      	lsls	r0, r3, #28
 8019a3a:	d550      	bpl.n	8019ade <__sfvwrite_r+0xbe>
 8019a3c:	690b      	ldr	r3, [r1, #16]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d04d      	beq.n	8019ade <__sfvwrite_r+0xbe>
 8019a42:	89a3      	ldrh	r3, [r4, #12]
 8019a44:	f8d8 7000 	ldr.w	r7, [r8]
 8019a48:	f013 0902 	ands.w	r9, r3, #2
 8019a4c:	d16c      	bne.n	8019b28 <__sfvwrite_r+0x108>
 8019a4e:	f013 0301 	ands.w	r3, r3, #1
 8019a52:	f000 809c 	beq.w	8019b8e <__sfvwrite_r+0x16e>
 8019a56:	4648      	mov	r0, r9
 8019a58:	46ca      	mov	sl, r9
 8019a5a:	46cb      	mov	fp, r9
 8019a5c:	f1bb 0f00 	cmp.w	fp, #0
 8019a60:	f000 8103 	beq.w	8019c6a <__sfvwrite_r+0x24a>
 8019a64:	b950      	cbnz	r0, 8019a7c <__sfvwrite_r+0x5c>
 8019a66:	465a      	mov	r2, fp
 8019a68:	210a      	movs	r1, #10
 8019a6a:	4650      	mov	r0, sl
 8019a6c:	f7e6 fbd8 	bl	8000220 <memchr>
 8019a70:	2800      	cmp	r0, #0
 8019a72:	f000 80ff 	beq.w	8019c74 <__sfvwrite_r+0x254>
 8019a76:	3001      	adds	r0, #1
 8019a78:	eba0 090a 	sub.w	r9, r0, sl
 8019a7c:	6820      	ldr	r0, [r4, #0]
 8019a7e:	6921      	ldr	r1, [r4, #16]
 8019a80:	6963      	ldr	r3, [r4, #20]
 8019a82:	45d9      	cmp	r9, fp
 8019a84:	464a      	mov	r2, r9
 8019a86:	bf28      	it	cs
 8019a88:	465a      	movcs	r2, fp
 8019a8a:	4288      	cmp	r0, r1
 8019a8c:	f240 80f5 	bls.w	8019c7a <__sfvwrite_r+0x25a>
 8019a90:	68a5      	ldr	r5, [r4, #8]
 8019a92:	441d      	add	r5, r3
 8019a94:	42aa      	cmp	r2, r5
 8019a96:	f340 80f0 	ble.w	8019c7a <__sfvwrite_r+0x25a>
 8019a9a:	4651      	mov	r1, sl
 8019a9c:	462a      	mov	r2, r5
 8019a9e:	f000 f92b 	bl	8019cf8 <memmove>
 8019aa2:	6823      	ldr	r3, [r4, #0]
 8019aa4:	442b      	add	r3, r5
 8019aa6:	6023      	str	r3, [r4, #0]
 8019aa8:	4621      	mov	r1, r4
 8019aaa:	4630      	mov	r0, r6
 8019aac:	f7fd fdc4 	bl	8017638 <_fflush_r>
 8019ab0:	2800      	cmp	r0, #0
 8019ab2:	d167      	bne.n	8019b84 <__sfvwrite_r+0x164>
 8019ab4:	ebb9 0905 	subs.w	r9, r9, r5
 8019ab8:	f040 80f7 	bne.w	8019caa <__sfvwrite_r+0x28a>
 8019abc:	4621      	mov	r1, r4
 8019abe:	4630      	mov	r0, r6
 8019ac0:	f7fd fdba 	bl	8017638 <_fflush_r>
 8019ac4:	2800      	cmp	r0, #0
 8019ac6:	d15d      	bne.n	8019b84 <__sfvwrite_r+0x164>
 8019ac8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8019acc:	44aa      	add	sl, r5
 8019ace:	ebab 0b05 	sub.w	fp, fp, r5
 8019ad2:	1b55      	subs	r5, r2, r5
 8019ad4:	f8c8 5008 	str.w	r5, [r8, #8]
 8019ad8:	2d00      	cmp	r5, #0
 8019ada:	d1bf      	bne.n	8019a5c <__sfvwrite_r+0x3c>
 8019adc:	e7a7      	b.n	8019a2e <__sfvwrite_r+0xe>
 8019ade:	4621      	mov	r1, r4
 8019ae0:	4630      	mov	r0, r6
 8019ae2:	f7fc fe4b 	bl	801677c <__swsetup_r>
 8019ae6:	2800      	cmp	r0, #0
 8019ae8:	d0ab      	beq.n	8019a42 <__sfvwrite_r+0x22>
 8019aea:	f04f 30ff 	mov.w	r0, #4294967295
 8019aee:	e79f      	b.n	8019a30 <__sfvwrite_r+0x10>
 8019af0:	e9d7 b900 	ldrd	fp, r9, [r7]
 8019af4:	3708      	adds	r7, #8
 8019af6:	f1b9 0f00 	cmp.w	r9, #0
 8019afa:	d0f9      	beq.n	8019af0 <__sfvwrite_r+0xd0>
 8019afc:	45d1      	cmp	r9, sl
 8019afe:	464b      	mov	r3, r9
 8019b00:	69e1      	ldr	r1, [r4, #28]
 8019b02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019b04:	bf28      	it	cs
 8019b06:	4653      	movcs	r3, sl
 8019b08:	465a      	mov	r2, fp
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	47a8      	blx	r5
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	dd38      	ble.n	8019b84 <__sfvwrite_r+0x164>
 8019b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019b16:	4483      	add	fp, r0
 8019b18:	eba9 0900 	sub.w	r9, r9, r0
 8019b1c:	1a18      	subs	r0, r3, r0
 8019b1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019b22:	2800      	cmp	r0, #0
 8019b24:	d1e7      	bne.n	8019af6 <__sfvwrite_r+0xd6>
 8019b26:	e782      	b.n	8019a2e <__sfvwrite_r+0xe>
 8019b28:	f04f 0b00 	mov.w	fp, #0
 8019b2c:	f8df a180 	ldr.w	sl, [pc, #384]	; 8019cb0 <__sfvwrite_r+0x290>
 8019b30:	46d9      	mov	r9, fp
 8019b32:	e7e0      	b.n	8019af6 <__sfvwrite_r+0xd6>
 8019b34:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8019b38:	3708      	adds	r7, #8
 8019b3a:	f1ba 0f00 	cmp.w	sl, #0
 8019b3e:	d0f9      	beq.n	8019b34 <__sfvwrite_r+0x114>
 8019b40:	89a3      	ldrh	r3, [r4, #12]
 8019b42:	68a2      	ldr	r2, [r4, #8]
 8019b44:	6820      	ldr	r0, [r4, #0]
 8019b46:	0599      	lsls	r1, r3, #22
 8019b48:	d563      	bpl.n	8019c12 <__sfvwrite_r+0x1f2>
 8019b4a:	4552      	cmp	r2, sl
 8019b4c:	d836      	bhi.n	8019bbc <__sfvwrite_r+0x19c>
 8019b4e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8019b52:	d033      	beq.n	8019bbc <__sfvwrite_r+0x19c>
 8019b54:	6921      	ldr	r1, [r4, #16]
 8019b56:	6965      	ldr	r5, [r4, #20]
 8019b58:	eba0 0b01 	sub.w	fp, r0, r1
 8019b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b64:	f10b 0201 	add.w	r2, fp, #1
 8019b68:	106d      	asrs	r5, r5, #1
 8019b6a:	4452      	add	r2, sl
 8019b6c:	4295      	cmp	r5, r2
 8019b6e:	bf38      	it	cc
 8019b70:	4615      	movcc	r5, r2
 8019b72:	055b      	lsls	r3, r3, #21
 8019b74:	d53d      	bpl.n	8019bf2 <__sfvwrite_r+0x1d2>
 8019b76:	4629      	mov	r1, r5
 8019b78:	4630      	mov	r0, r6
 8019b7a:	f7f8 ff53 	bl	8012a24 <_malloc_r>
 8019b7e:	b948      	cbnz	r0, 8019b94 <__sfvwrite_r+0x174>
 8019b80:	230c      	movs	r3, #12
 8019b82:	6033      	str	r3, [r6, #0]
 8019b84:	89a3      	ldrh	r3, [r4, #12]
 8019b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b8a:	81a3      	strh	r3, [r4, #12]
 8019b8c:	e7ad      	b.n	8019aea <__sfvwrite_r+0xca>
 8019b8e:	4699      	mov	r9, r3
 8019b90:	469a      	mov	sl, r3
 8019b92:	e7d2      	b.n	8019b3a <__sfvwrite_r+0x11a>
 8019b94:	465a      	mov	r2, fp
 8019b96:	6921      	ldr	r1, [r4, #16]
 8019b98:	9001      	str	r0, [sp, #4]
 8019b9a:	f7f9 f993 	bl	8012ec4 <memcpy>
 8019b9e:	89a2      	ldrh	r2, [r4, #12]
 8019ba0:	9b01      	ldr	r3, [sp, #4]
 8019ba2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8019ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019baa:	81a2      	strh	r2, [r4, #12]
 8019bac:	6123      	str	r3, [r4, #16]
 8019bae:	6165      	str	r5, [r4, #20]
 8019bb0:	445b      	add	r3, fp
 8019bb2:	eba5 050b 	sub.w	r5, r5, fp
 8019bb6:	6023      	str	r3, [r4, #0]
 8019bb8:	4652      	mov	r2, sl
 8019bba:	60a5      	str	r5, [r4, #8]
 8019bbc:	4552      	cmp	r2, sl
 8019bbe:	bf28      	it	cs
 8019bc0:	4652      	movcs	r2, sl
 8019bc2:	6820      	ldr	r0, [r4, #0]
 8019bc4:	9201      	str	r2, [sp, #4]
 8019bc6:	4649      	mov	r1, r9
 8019bc8:	f000 f896 	bl	8019cf8 <memmove>
 8019bcc:	68a3      	ldr	r3, [r4, #8]
 8019bce:	9a01      	ldr	r2, [sp, #4]
 8019bd0:	1a9b      	subs	r3, r3, r2
 8019bd2:	60a3      	str	r3, [r4, #8]
 8019bd4:	6823      	ldr	r3, [r4, #0]
 8019bd6:	441a      	add	r2, r3
 8019bd8:	4655      	mov	r5, sl
 8019bda:	6022      	str	r2, [r4, #0]
 8019bdc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8019be0:	44a9      	add	r9, r5
 8019be2:	ebaa 0a05 	sub.w	sl, sl, r5
 8019be6:	1b45      	subs	r5, r0, r5
 8019be8:	f8c8 5008 	str.w	r5, [r8, #8]
 8019bec:	2d00      	cmp	r5, #0
 8019bee:	d1a4      	bne.n	8019b3a <__sfvwrite_r+0x11a>
 8019bf0:	e71d      	b.n	8019a2e <__sfvwrite_r+0xe>
 8019bf2:	462a      	mov	r2, r5
 8019bf4:	4630      	mov	r0, r6
 8019bf6:	f000 f8ab 	bl	8019d50 <_realloc_r>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	2800      	cmp	r0, #0
 8019bfe:	d1d5      	bne.n	8019bac <__sfvwrite_r+0x18c>
 8019c00:	6921      	ldr	r1, [r4, #16]
 8019c02:	4630      	mov	r0, r6
 8019c04:	f7fd fe14 	bl	8017830 <_free_r>
 8019c08:	89a3      	ldrh	r3, [r4, #12]
 8019c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019c0e:	81a3      	strh	r3, [r4, #12]
 8019c10:	e7b6      	b.n	8019b80 <__sfvwrite_r+0x160>
 8019c12:	6923      	ldr	r3, [r4, #16]
 8019c14:	4283      	cmp	r3, r0
 8019c16:	d302      	bcc.n	8019c1e <__sfvwrite_r+0x1fe>
 8019c18:	6961      	ldr	r1, [r4, #20]
 8019c1a:	4551      	cmp	r1, sl
 8019c1c:	d915      	bls.n	8019c4a <__sfvwrite_r+0x22a>
 8019c1e:	4552      	cmp	r2, sl
 8019c20:	bf28      	it	cs
 8019c22:	4652      	movcs	r2, sl
 8019c24:	4649      	mov	r1, r9
 8019c26:	4615      	mov	r5, r2
 8019c28:	f000 f866 	bl	8019cf8 <memmove>
 8019c2c:	68a3      	ldr	r3, [r4, #8]
 8019c2e:	6822      	ldr	r2, [r4, #0]
 8019c30:	1b5b      	subs	r3, r3, r5
 8019c32:	442a      	add	r2, r5
 8019c34:	60a3      	str	r3, [r4, #8]
 8019c36:	6022      	str	r2, [r4, #0]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d1cf      	bne.n	8019bdc <__sfvwrite_r+0x1bc>
 8019c3c:	4621      	mov	r1, r4
 8019c3e:	4630      	mov	r0, r6
 8019c40:	f7fd fcfa 	bl	8017638 <_fflush_r>
 8019c44:	2800      	cmp	r0, #0
 8019c46:	d0c9      	beq.n	8019bdc <__sfvwrite_r+0x1bc>
 8019c48:	e79c      	b.n	8019b84 <__sfvwrite_r+0x164>
 8019c4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019c4e:	459a      	cmp	sl, r3
 8019c50:	bf38      	it	cc
 8019c52:	4653      	movcc	r3, sl
 8019c54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019c56:	fb93 f3f1 	sdiv	r3, r3, r1
 8019c5a:	464a      	mov	r2, r9
 8019c5c:	434b      	muls	r3, r1
 8019c5e:	4630      	mov	r0, r6
 8019c60:	69e1      	ldr	r1, [r4, #28]
 8019c62:	47a8      	blx	r5
 8019c64:	1e05      	subs	r5, r0, #0
 8019c66:	dcb9      	bgt.n	8019bdc <__sfvwrite_r+0x1bc>
 8019c68:	e78c      	b.n	8019b84 <__sfvwrite_r+0x164>
 8019c6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8019c6e:	2000      	movs	r0, #0
 8019c70:	3708      	adds	r7, #8
 8019c72:	e6f3      	b.n	8019a5c <__sfvwrite_r+0x3c>
 8019c74:	f10b 0901 	add.w	r9, fp, #1
 8019c78:	e700      	b.n	8019a7c <__sfvwrite_r+0x5c>
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	dc08      	bgt.n	8019c90 <__sfvwrite_r+0x270>
 8019c7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019c80:	69e1      	ldr	r1, [r4, #28]
 8019c82:	4652      	mov	r2, sl
 8019c84:	4630      	mov	r0, r6
 8019c86:	47a8      	blx	r5
 8019c88:	1e05      	subs	r5, r0, #0
 8019c8a:	f73f af13 	bgt.w	8019ab4 <__sfvwrite_r+0x94>
 8019c8e:	e779      	b.n	8019b84 <__sfvwrite_r+0x164>
 8019c90:	4651      	mov	r1, sl
 8019c92:	9201      	str	r2, [sp, #4]
 8019c94:	f000 f830 	bl	8019cf8 <memmove>
 8019c98:	9a01      	ldr	r2, [sp, #4]
 8019c9a:	68a3      	ldr	r3, [r4, #8]
 8019c9c:	1a9b      	subs	r3, r3, r2
 8019c9e:	60a3      	str	r3, [r4, #8]
 8019ca0:	6823      	ldr	r3, [r4, #0]
 8019ca2:	4413      	add	r3, r2
 8019ca4:	6023      	str	r3, [r4, #0]
 8019ca6:	4615      	mov	r5, r2
 8019ca8:	e704      	b.n	8019ab4 <__sfvwrite_r+0x94>
 8019caa:	2001      	movs	r0, #1
 8019cac:	e70c      	b.n	8019ac8 <__sfvwrite_r+0xa8>
 8019cae:	bf00      	nop
 8019cb0:	7ffffc00 	.word	0x7ffffc00

08019cb4 <_isatty_r>:
 8019cb4:	b538      	push	{r3, r4, r5, lr}
 8019cb6:	4d06      	ldr	r5, [pc, #24]	; (8019cd0 <_isatty_r+0x1c>)
 8019cb8:	2300      	movs	r3, #0
 8019cba:	4604      	mov	r4, r0
 8019cbc:	4608      	mov	r0, r1
 8019cbe:	602b      	str	r3, [r5, #0]
 8019cc0:	f7f7 ffc0 	bl	8011c44 <_isatty>
 8019cc4:	1c43      	adds	r3, r0, #1
 8019cc6:	d102      	bne.n	8019cce <_isatty_r+0x1a>
 8019cc8:	682b      	ldr	r3, [r5, #0]
 8019cca:	b103      	cbz	r3, 8019cce <_isatty_r+0x1a>
 8019ccc:	6023      	str	r3, [r4, #0]
 8019cce:	bd38      	pop	{r3, r4, r5, pc}
 8019cd0:	20011374 	.word	0x20011374

08019cd4 <_lseek_r>:
 8019cd4:	b538      	push	{r3, r4, r5, lr}
 8019cd6:	4d07      	ldr	r5, [pc, #28]	; (8019cf4 <_lseek_r+0x20>)
 8019cd8:	4604      	mov	r4, r0
 8019cda:	4608      	mov	r0, r1
 8019cdc:	4611      	mov	r1, r2
 8019cde:	2200      	movs	r2, #0
 8019ce0:	602a      	str	r2, [r5, #0]
 8019ce2:	461a      	mov	r2, r3
 8019ce4:	f7f7 ffb0 	bl	8011c48 <_lseek>
 8019ce8:	1c43      	adds	r3, r0, #1
 8019cea:	d102      	bne.n	8019cf2 <_lseek_r+0x1e>
 8019cec:	682b      	ldr	r3, [r5, #0]
 8019cee:	b103      	cbz	r3, 8019cf2 <_lseek_r+0x1e>
 8019cf0:	6023      	str	r3, [r4, #0]
 8019cf2:	bd38      	pop	{r3, r4, r5, pc}
 8019cf4:	20011374 	.word	0x20011374

08019cf8 <memmove>:
 8019cf8:	4288      	cmp	r0, r1
 8019cfa:	b510      	push	{r4, lr}
 8019cfc:	eb01 0402 	add.w	r4, r1, r2
 8019d00:	d902      	bls.n	8019d08 <memmove+0x10>
 8019d02:	4284      	cmp	r4, r0
 8019d04:	4623      	mov	r3, r4
 8019d06:	d807      	bhi.n	8019d18 <memmove+0x20>
 8019d08:	1e43      	subs	r3, r0, #1
 8019d0a:	42a1      	cmp	r1, r4
 8019d0c:	d008      	beq.n	8019d20 <memmove+0x28>
 8019d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d16:	e7f8      	b.n	8019d0a <memmove+0x12>
 8019d18:	4402      	add	r2, r0
 8019d1a:	4601      	mov	r1, r0
 8019d1c:	428a      	cmp	r2, r1
 8019d1e:	d100      	bne.n	8019d22 <memmove+0x2a>
 8019d20:	bd10      	pop	{r4, pc}
 8019d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d2a:	e7f7      	b.n	8019d1c <memmove+0x24>

08019d2c <_read_r>:
 8019d2c:	b538      	push	{r3, r4, r5, lr}
 8019d2e:	4d07      	ldr	r5, [pc, #28]	; (8019d4c <_read_r+0x20>)
 8019d30:	4604      	mov	r4, r0
 8019d32:	4608      	mov	r0, r1
 8019d34:	4611      	mov	r1, r2
 8019d36:	2200      	movs	r2, #0
 8019d38:	602a      	str	r2, [r5, #0]
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	f7f7 ff3e 	bl	8011bbc <_read>
 8019d40:	1c43      	adds	r3, r0, #1
 8019d42:	d102      	bne.n	8019d4a <_read_r+0x1e>
 8019d44:	682b      	ldr	r3, [r5, #0]
 8019d46:	b103      	cbz	r3, 8019d4a <_read_r+0x1e>
 8019d48:	6023      	str	r3, [r4, #0]
 8019d4a:	bd38      	pop	{r3, r4, r5, pc}
 8019d4c:	20011374 	.word	0x20011374

08019d50 <_realloc_r>:
 8019d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d54:	4681      	mov	r9, r0
 8019d56:	460c      	mov	r4, r1
 8019d58:	b929      	cbnz	r1, 8019d66 <_realloc_r+0x16>
 8019d5a:	4611      	mov	r1, r2
 8019d5c:	b003      	add	sp, #12
 8019d5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d62:	f7f8 be5f 	b.w	8012a24 <_malloc_r>
 8019d66:	9201      	str	r2, [sp, #4]
 8019d68:	f7f9 f8c2 	bl	8012ef0 <__malloc_lock>
 8019d6c:	9a01      	ldr	r2, [sp, #4]
 8019d6e:	f102 080b 	add.w	r8, r2, #11
 8019d72:	f1b8 0f16 	cmp.w	r8, #22
 8019d76:	d90b      	bls.n	8019d90 <_realloc_r+0x40>
 8019d78:	f038 0807 	bics.w	r8, r8, #7
 8019d7c:	d50a      	bpl.n	8019d94 <_realloc_r+0x44>
 8019d7e:	230c      	movs	r3, #12
 8019d80:	f8c9 3000 	str.w	r3, [r9]
 8019d84:	f04f 0b00 	mov.w	fp, #0
 8019d88:	4658      	mov	r0, fp
 8019d8a:	b003      	add	sp, #12
 8019d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d90:	f04f 0810 	mov.w	r8, #16
 8019d94:	4590      	cmp	r8, r2
 8019d96:	d3f2      	bcc.n	8019d7e <_realloc_r+0x2e>
 8019d98:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8019d9c:	f025 0603 	bic.w	r6, r5, #3
 8019da0:	45b0      	cmp	r8, r6
 8019da2:	f1a4 0a08 	sub.w	sl, r4, #8
 8019da6:	f340 8170 	ble.w	801a08a <_realloc_r+0x33a>
 8019daa:	48a9      	ldr	r0, [pc, #676]	; (801a050 <_realloc_r+0x300>)
 8019dac:	9001      	str	r0, [sp, #4]
 8019dae:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8019db2:	eb0a 0306 	add.w	r3, sl, r6
 8019db6:	459c      	cmp	ip, r3
 8019db8:	6859      	ldr	r1, [r3, #4]
 8019dba:	d005      	beq.n	8019dc8 <_realloc_r+0x78>
 8019dbc:	f021 0001 	bic.w	r0, r1, #1
 8019dc0:	4418      	add	r0, r3
 8019dc2:	6840      	ldr	r0, [r0, #4]
 8019dc4:	07c7      	lsls	r7, r0, #31
 8019dc6:	d427      	bmi.n	8019e18 <_realloc_r+0xc8>
 8019dc8:	f021 0103 	bic.w	r1, r1, #3
 8019dcc:	459c      	cmp	ip, r3
 8019dce:	eb06 0701 	add.w	r7, r6, r1
 8019dd2:	d119      	bne.n	8019e08 <_realloc_r+0xb8>
 8019dd4:	f108 0010 	add.w	r0, r8, #16
 8019dd8:	42b8      	cmp	r0, r7
 8019dda:	dc1f      	bgt.n	8019e1c <_realloc_r+0xcc>
 8019ddc:	eb0a 0308 	add.w	r3, sl, r8
 8019de0:	9a01      	ldr	r2, [sp, #4]
 8019de2:	eba7 0708 	sub.w	r7, r7, r8
 8019de6:	f047 0701 	orr.w	r7, r7, #1
 8019dea:	6093      	str	r3, [r2, #8]
 8019dec:	605f      	str	r7, [r3, #4]
 8019dee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019df2:	f003 0301 	and.w	r3, r3, #1
 8019df6:	ea43 0308 	orr.w	r3, r3, r8
 8019dfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8019dfe:	4648      	mov	r0, r9
 8019e00:	f7f9 f87c 	bl	8012efc <__malloc_unlock>
 8019e04:	46a3      	mov	fp, r4
 8019e06:	e7bf      	b.n	8019d88 <_realloc_r+0x38>
 8019e08:	45b8      	cmp	r8, r7
 8019e0a:	dc07      	bgt.n	8019e1c <_realloc_r+0xcc>
 8019e0c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8019e10:	60da      	str	r2, [r3, #12]
 8019e12:	6093      	str	r3, [r2, #8]
 8019e14:	4655      	mov	r5, sl
 8019e16:	e07f      	b.n	8019f18 <_realloc_r+0x1c8>
 8019e18:	2100      	movs	r1, #0
 8019e1a:	460b      	mov	r3, r1
 8019e1c:	07e8      	lsls	r0, r5, #31
 8019e1e:	f100 80e5 	bmi.w	8019fec <_realloc_r+0x29c>
 8019e22:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8019e26:	ebaa 0505 	sub.w	r5, sl, r5
 8019e2a:	6868      	ldr	r0, [r5, #4]
 8019e2c:	f020 0003 	bic.w	r0, r0, #3
 8019e30:	eb00 0b06 	add.w	fp, r0, r6
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	f000 80a5 	beq.w	8019f84 <_realloc_r+0x234>
 8019e3a:	459c      	cmp	ip, r3
 8019e3c:	eb01 070b 	add.w	r7, r1, fp
 8019e40:	d14a      	bne.n	8019ed8 <_realloc_r+0x188>
 8019e42:	f108 0310 	add.w	r3, r8, #16
 8019e46:	42bb      	cmp	r3, r7
 8019e48:	f300 809c 	bgt.w	8019f84 <_realloc_r+0x234>
 8019e4c:	46ab      	mov	fp, r5
 8019e4e:	68eb      	ldr	r3, [r5, #12]
 8019e50:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8019e54:	60d3      	str	r3, [r2, #12]
 8019e56:	609a      	str	r2, [r3, #8]
 8019e58:	1f32      	subs	r2, r6, #4
 8019e5a:	2a24      	cmp	r2, #36	; 0x24
 8019e5c:	d837      	bhi.n	8019ece <_realloc_r+0x17e>
 8019e5e:	2a13      	cmp	r2, #19
 8019e60:	d933      	bls.n	8019eca <_realloc_r+0x17a>
 8019e62:	6823      	ldr	r3, [r4, #0]
 8019e64:	60ab      	str	r3, [r5, #8]
 8019e66:	6863      	ldr	r3, [r4, #4]
 8019e68:	60eb      	str	r3, [r5, #12]
 8019e6a:	2a1b      	cmp	r2, #27
 8019e6c:	d81b      	bhi.n	8019ea6 <_realloc_r+0x156>
 8019e6e:	3408      	adds	r4, #8
 8019e70:	f105 0310 	add.w	r3, r5, #16
 8019e74:	6822      	ldr	r2, [r4, #0]
 8019e76:	601a      	str	r2, [r3, #0]
 8019e78:	6862      	ldr	r2, [r4, #4]
 8019e7a:	605a      	str	r2, [r3, #4]
 8019e7c:	68a2      	ldr	r2, [r4, #8]
 8019e7e:	609a      	str	r2, [r3, #8]
 8019e80:	eb05 0308 	add.w	r3, r5, r8
 8019e84:	9a01      	ldr	r2, [sp, #4]
 8019e86:	eba7 0708 	sub.w	r7, r7, r8
 8019e8a:	f047 0701 	orr.w	r7, r7, #1
 8019e8e:	6093      	str	r3, [r2, #8]
 8019e90:	605f      	str	r7, [r3, #4]
 8019e92:	686b      	ldr	r3, [r5, #4]
 8019e94:	f003 0301 	and.w	r3, r3, #1
 8019e98:	ea43 0308 	orr.w	r3, r3, r8
 8019e9c:	606b      	str	r3, [r5, #4]
 8019e9e:	4648      	mov	r0, r9
 8019ea0:	f7f9 f82c 	bl	8012efc <__malloc_unlock>
 8019ea4:	e770      	b.n	8019d88 <_realloc_r+0x38>
 8019ea6:	68a3      	ldr	r3, [r4, #8]
 8019ea8:	612b      	str	r3, [r5, #16]
 8019eaa:	68e3      	ldr	r3, [r4, #12]
 8019eac:	616b      	str	r3, [r5, #20]
 8019eae:	2a24      	cmp	r2, #36	; 0x24
 8019eb0:	bf01      	itttt	eq
 8019eb2:	6923      	ldreq	r3, [r4, #16]
 8019eb4:	61ab      	streq	r3, [r5, #24]
 8019eb6:	6962      	ldreq	r2, [r4, #20]
 8019eb8:	61ea      	streq	r2, [r5, #28]
 8019eba:	bf19      	ittee	ne
 8019ebc:	3410      	addne	r4, #16
 8019ebe:	f105 0318 	addne.w	r3, r5, #24
 8019ec2:	f105 0320 	addeq.w	r3, r5, #32
 8019ec6:	3418      	addeq	r4, #24
 8019ec8:	e7d4      	b.n	8019e74 <_realloc_r+0x124>
 8019eca:	465b      	mov	r3, fp
 8019ecc:	e7d2      	b.n	8019e74 <_realloc_r+0x124>
 8019ece:	4621      	mov	r1, r4
 8019ed0:	4658      	mov	r0, fp
 8019ed2:	f7ff ff11 	bl	8019cf8 <memmove>
 8019ed6:	e7d3      	b.n	8019e80 <_realloc_r+0x130>
 8019ed8:	45b8      	cmp	r8, r7
 8019eda:	dc53      	bgt.n	8019f84 <_realloc_r+0x234>
 8019edc:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8019ee0:	4628      	mov	r0, r5
 8019ee2:	60da      	str	r2, [r3, #12]
 8019ee4:	6093      	str	r3, [r2, #8]
 8019ee6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8019eea:	68eb      	ldr	r3, [r5, #12]
 8019eec:	60d3      	str	r3, [r2, #12]
 8019eee:	609a      	str	r2, [r3, #8]
 8019ef0:	1f32      	subs	r2, r6, #4
 8019ef2:	2a24      	cmp	r2, #36	; 0x24
 8019ef4:	d842      	bhi.n	8019f7c <_realloc_r+0x22c>
 8019ef6:	2a13      	cmp	r2, #19
 8019ef8:	d908      	bls.n	8019f0c <_realloc_r+0x1bc>
 8019efa:	6823      	ldr	r3, [r4, #0]
 8019efc:	60ab      	str	r3, [r5, #8]
 8019efe:	6863      	ldr	r3, [r4, #4]
 8019f00:	60eb      	str	r3, [r5, #12]
 8019f02:	2a1b      	cmp	r2, #27
 8019f04:	d828      	bhi.n	8019f58 <_realloc_r+0x208>
 8019f06:	3408      	adds	r4, #8
 8019f08:	f105 0010 	add.w	r0, r5, #16
 8019f0c:	6823      	ldr	r3, [r4, #0]
 8019f0e:	6003      	str	r3, [r0, #0]
 8019f10:	6863      	ldr	r3, [r4, #4]
 8019f12:	6043      	str	r3, [r0, #4]
 8019f14:	68a3      	ldr	r3, [r4, #8]
 8019f16:	6083      	str	r3, [r0, #8]
 8019f18:	686a      	ldr	r2, [r5, #4]
 8019f1a:	eba7 0008 	sub.w	r0, r7, r8
 8019f1e:	280f      	cmp	r0, #15
 8019f20:	f002 0201 	and.w	r2, r2, #1
 8019f24:	eb05 0307 	add.w	r3, r5, r7
 8019f28:	f240 80b1 	bls.w	801a08e <_realloc_r+0x33e>
 8019f2c:	eb05 0108 	add.w	r1, r5, r8
 8019f30:	ea48 0202 	orr.w	r2, r8, r2
 8019f34:	f040 0001 	orr.w	r0, r0, #1
 8019f38:	606a      	str	r2, [r5, #4]
 8019f3a:	6048      	str	r0, [r1, #4]
 8019f3c:	685a      	ldr	r2, [r3, #4]
 8019f3e:	f042 0201 	orr.w	r2, r2, #1
 8019f42:	605a      	str	r2, [r3, #4]
 8019f44:	3108      	adds	r1, #8
 8019f46:	4648      	mov	r0, r9
 8019f48:	f7fd fc72 	bl	8017830 <_free_r>
 8019f4c:	4648      	mov	r0, r9
 8019f4e:	f7f8 ffd5 	bl	8012efc <__malloc_unlock>
 8019f52:	f105 0b08 	add.w	fp, r5, #8
 8019f56:	e717      	b.n	8019d88 <_realloc_r+0x38>
 8019f58:	68a3      	ldr	r3, [r4, #8]
 8019f5a:	612b      	str	r3, [r5, #16]
 8019f5c:	68e3      	ldr	r3, [r4, #12]
 8019f5e:	616b      	str	r3, [r5, #20]
 8019f60:	2a24      	cmp	r2, #36	; 0x24
 8019f62:	bf01      	itttt	eq
 8019f64:	6923      	ldreq	r3, [r4, #16]
 8019f66:	61ab      	streq	r3, [r5, #24]
 8019f68:	6963      	ldreq	r3, [r4, #20]
 8019f6a:	61eb      	streq	r3, [r5, #28]
 8019f6c:	bf19      	ittee	ne
 8019f6e:	3410      	addne	r4, #16
 8019f70:	f105 0018 	addne.w	r0, r5, #24
 8019f74:	f105 0020 	addeq.w	r0, r5, #32
 8019f78:	3418      	addeq	r4, #24
 8019f7a:	e7c7      	b.n	8019f0c <_realloc_r+0x1bc>
 8019f7c:	4621      	mov	r1, r4
 8019f7e:	f7ff febb 	bl	8019cf8 <memmove>
 8019f82:	e7c9      	b.n	8019f18 <_realloc_r+0x1c8>
 8019f84:	45d8      	cmp	r8, fp
 8019f86:	dc31      	bgt.n	8019fec <_realloc_r+0x29c>
 8019f88:	4628      	mov	r0, r5
 8019f8a:	68eb      	ldr	r3, [r5, #12]
 8019f8c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8019f90:	60d3      	str	r3, [r2, #12]
 8019f92:	609a      	str	r2, [r3, #8]
 8019f94:	1f32      	subs	r2, r6, #4
 8019f96:	2a24      	cmp	r2, #36	; 0x24
 8019f98:	d824      	bhi.n	8019fe4 <_realloc_r+0x294>
 8019f9a:	2a13      	cmp	r2, #19
 8019f9c:	d908      	bls.n	8019fb0 <_realloc_r+0x260>
 8019f9e:	6823      	ldr	r3, [r4, #0]
 8019fa0:	60ab      	str	r3, [r5, #8]
 8019fa2:	6863      	ldr	r3, [r4, #4]
 8019fa4:	60eb      	str	r3, [r5, #12]
 8019fa6:	2a1b      	cmp	r2, #27
 8019fa8:	d80a      	bhi.n	8019fc0 <_realloc_r+0x270>
 8019faa:	3408      	adds	r4, #8
 8019fac:	f105 0010 	add.w	r0, r5, #16
 8019fb0:	6823      	ldr	r3, [r4, #0]
 8019fb2:	6003      	str	r3, [r0, #0]
 8019fb4:	6863      	ldr	r3, [r4, #4]
 8019fb6:	6043      	str	r3, [r0, #4]
 8019fb8:	68a3      	ldr	r3, [r4, #8]
 8019fba:	6083      	str	r3, [r0, #8]
 8019fbc:	465f      	mov	r7, fp
 8019fbe:	e7ab      	b.n	8019f18 <_realloc_r+0x1c8>
 8019fc0:	68a3      	ldr	r3, [r4, #8]
 8019fc2:	612b      	str	r3, [r5, #16]
 8019fc4:	68e3      	ldr	r3, [r4, #12]
 8019fc6:	616b      	str	r3, [r5, #20]
 8019fc8:	2a24      	cmp	r2, #36	; 0x24
 8019fca:	bf01      	itttt	eq
 8019fcc:	6923      	ldreq	r3, [r4, #16]
 8019fce:	61ab      	streq	r3, [r5, #24]
 8019fd0:	6963      	ldreq	r3, [r4, #20]
 8019fd2:	61eb      	streq	r3, [r5, #28]
 8019fd4:	bf19      	ittee	ne
 8019fd6:	3410      	addne	r4, #16
 8019fd8:	f105 0018 	addne.w	r0, r5, #24
 8019fdc:	f105 0020 	addeq.w	r0, r5, #32
 8019fe0:	3418      	addeq	r4, #24
 8019fe2:	e7e5      	b.n	8019fb0 <_realloc_r+0x260>
 8019fe4:	4621      	mov	r1, r4
 8019fe6:	f7ff fe87 	bl	8019cf8 <memmove>
 8019fea:	e7e7      	b.n	8019fbc <_realloc_r+0x26c>
 8019fec:	4611      	mov	r1, r2
 8019fee:	4648      	mov	r0, r9
 8019ff0:	f7f8 fd18 	bl	8012a24 <_malloc_r>
 8019ff4:	4683      	mov	fp, r0
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	f43f af51 	beq.w	8019e9e <_realloc_r+0x14e>
 8019ffc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a000:	f023 0301 	bic.w	r3, r3, #1
 801a004:	4453      	add	r3, sl
 801a006:	f1a0 0208 	sub.w	r2, r0, #8
 801a00a:	4293      	cmp	r3, r2
 801a00c:	d105      	bne.n	801a01a <_realloc_r+0x2ca>
 801a00e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801a012:	f027 0703 	bic.w	r7, r7, #3
 801a016:	4437      	add	r7, r6
 801a018:	e6fc      	b.n	8019e14 <_realloc_r+0xc4>
 801a01a:	1f32      	subs	r2, r6, #4
 801a01c:	2a24      	cmp	r2, #36	; 0x24
 801a01e:	d830      	bhi.n	801a082 <_realloc_r+0x332>
 801a020:	2a13      	cmp	r2, #19
 801a022:	d92b      	bls.n	801a07c <_realloc_r+0x32c>
 801a024:	6823      	ldr	r3, [r4, #0]
 801a026:	6003      	str	r3, [r0, #0]
 801a028:	6863      	ldr	r3, [r4, #4]
 801a02a:	6043      	str	r3, [r0, #4]
 801a02c:	2a1b      	cmp	r2, #27
 801a02e:	d811      	bhi.n	801a054 <_realloc_r+0x304>
 801a030:	f104 0208 	add.w	r2, r4, #8
 801a034:	f100 0308 	add.w	r3, r0, #8
 801a038:	6811      	ldr	r1, [r2, #0]
 801a03a:	6019      	str	r1, [r3, #0]
 801a03c:	6851      	ldr	r1, [r2, #4]
 801a03e:	6059      	str	r1, [r3, #4]
 801a040:	6892      	ldr	r2, [r2, #8]
 801a042:	609a      	str	r2, [r3, #8]
 801a044:	4621      	mov	r1, r4
 801a046:	4648      	mov	r0, r9
 801a048:	f7fd fbf2 	bl	8017830 <_free_r>
 801a04c:	e727      	b.n	8019e9e <_realloc_r+0x14e>
 801a04e:	bf00      	nop
 801a050:	20002df0 	.word	0x20002df0
 801a054:	68a3      	ldr	r3, [r4, #8]
 801a056:	6083      	str	r3, [r0, #8]
 801a058:	68e3      	ldr	r3, [r4, #12]
 801a05a:	60c3      	str	r3, [r0, #12]
 801a05c:	2a24      	cmp	r2, #36	; 0x24
 801a05e:	bf01      	itttt	eq
 801a060:	6923      	ldreq	r3, [r4, #16]
 801a062:	6103      	streq	r3, [r0, #16]
 801a064:	6961      	ldreq	r1, [r4, #20]
 801a066:	6141      	streq	r1, [r0, #20]
 801a068:	bf19      	ittee	ne
 801a06a:	f104 0210 	addne.w	r2, r4, #16
 801a06e:	f100 0310 	addne.w	r3, r0, #16
 801a072:	f104 0218 	addeq.w	r2, r4, #24
 801a076:	f100 0318 	addeq.w	r3, r0, #24
 801a07a:	e7dd      	b.n	801a038 <_realloc_r+0x2e8>
 801a07c:	4603      	mov	r3, r0
 801a07e:	4622      	mov	r2, r4
 801a080:	e7da      	b.n	801a038 <_realloc_r+0x2e8>
 801a082:	4621      	mov	r1, r4
 801a084:	f7ff fe38 	bl	8019cf8 <memmove>
 801a088:	e7dc      	b.n	801a044 <_realloc_r+0x2f4>
 801a08a:	4637      	mov	r7, r6
 801a08c:	e6c2      	b.n	8019e14 <_realloc_r+0xc4>
 801a08e:	4317      	orrs	r7, r2
 801a090:	606f      	str	r7, [r5, #4]
 801a092:	685a      	ldr	r2, [r3, #4]
 801a094:	f042 0201 	orr.w	r2, r2, #1
 801a098:	605a      	str	r2, [r3, #4]
 801a09a:	e757      	b.n	8019f4c <_realloc_r+0x1fc>

0801a09c <__swbuf_r>:
 801a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a09e:	460e      	mov	r6, r1
 801a0a0:	4614      	mov	r4, r2
 801a0a2:	4605      	mov	r5, r0
 801a0a4:	b118      	cbz	r0, 801a0ae <__swbuf_r+0x12>
 801a0a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a0a8:	b90b      	cbnz	r3, 801a0ae <__swbuf_r+0x12>
 801a0aa:	f7fd fb31 	bl	8017710 <__sinit>
 801a0ae:	69a3      	ldr	r3, [r4, #24]
 801a0b0:	60a3      	str	r3, [r4, #8]
 801a0b2:	89a3      	ldrh	r3, [r4, #12]
 801a0b4:	0719      	lsls	r1, r3, #28
 801a0b6:	d529      	bpl.n	801a10c <__swbuf_r+0x70>
 801a0b8:	6923      	ldr	r3, [r4, #16]
 801a0ba:	b33b      	cbz	r3, 801a10c <__swbuf_r+0x70>
 801a0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0c0:	b2f6      	uxtb	r6, r6
 801a0c2:	049a      	lsls	r2, r3, #18
 801a0c4:	4637      	mov	r7, r6
 801a0c6:	d52a      	bpl.n	801a11e <__swbuf_r+0x82>
 801a0c8:	6823      	ldr	r3, [r4, #0]
 801a0ca:	6920      	ldr	r0, [r4, #16]
 801a0cc:	1a18      	subs	r0, r3, r0
 801a0ce:	6963      	ldr	r3, [r4, #20]
 801a0d0:	4283      	cmp	r3, r0
 801a0d2:	dc04      	bgt.n	801a0de <__swbuf_r+0x42>
 801a0d4:	4621      	mov	r1, r4
 801a0d6:	4628      	mov	r0, r5
 801a0d8:	f7fd faae 	bl	8017638 <_fflush_r>
 801a0dc:	b9e0      	cbnz	r0, 801a118 <__swbuf_r+0x7c>
 801a0de:	68a3      	ldr	r3, [r4, #8]
 801a0e0:	3b01      	subs	r3, #1
 801a0e2:	60a3      	str	r3, [r4, #8]
 801a0e4:	6823      	ldr	r3, [r4, #0]
 801a0e6:	1c5a      	adds	r2, r3, #1
 801a0e8:	6022      	str	r2, [r4, #0]
 801a0ea:	701e      	strb	r6, [r3, #0]
 801a0ec:	6962      	ldr	r2, [r4, #20]
 801a0ee:	1c43      	adds	r3, r0, #1
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d004      	beq.n	801a0fe <__swbuf_r+0x62>
 801a0f4:	89a3      	ldrh	r3, [r4, #12]
 801a0f6:	07db      	lsls	r3, r3, #31
 801a0f8:	d506      	bpl.n	801a108 <__swbuf_r+0x6c>
 801a0fa:	2e0a      	cmp	r6, #10
 801a0fc:	d104      	bne.n	801a108 <__swbuf_r+0x6c>
 801a0fe:	4621      	mov	r1, r4
 801a100:	4628      	mov	r0, r5
 801a102:	f7fd fa99 	bl	8017638 <_fflush_r>
 801a106:	b938      	cbnz	r0, 801a118 <__swbuf_r+0x7c>
 801a108:	4638      	mov	r0, r7
 801a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a10c:	4621      	mov	r1, r4
 801a10e:	4628      	mov	r0, r5
 801a110:	f7fc fb34 	bl	801677c <__swsetup_r>
 801a114:	2800      	cmp	r0, #0
 801a116:	d0d1      	beq.n	801a0bc <__swbuf_r+0x20>
 801a118:	f04f 37ff 	mov.w	r7, #4294967295
 801a11c:	e7f4      	b.n	801a108 <__swbuf_r+0x6c>
 801a11e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a122:	81a3      	strh	r3, [r4, #12]
 801a124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a12a:	6663      	str	r3, [r4, #100]	; 0x64
 801a12c:	e7cc      	b.n	801a0c8 <__swbuf_r+0x2c>
	...

0801a130 <_wcrtomb_r>:
 801a130:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a132:	4c09      	ldr	r4, [pc, #36]	; (801a158 <_wcrtomb_r+0x28>)
 801a134:	b085      	sub	sp, #20
 801a136:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801a13a:	4605      	mov	r5, r0
 801a13c:	461e      	mov	r6, r3
 801a13e:	b909      	cbnz	r1, 801a144 <_wcrtomb_r+0x14>
 801a140:	460a      	mov	r2, r1
 801a142:	a901      	add	r1, sp, #4
 801a144:	47b8      	blx	r7
 801a146:	1c43      	adds	r3, r0, #1
 801a148:	bf01      	itttt	eq
 801a14a:	2300      	moveq	r3, #0
 801a14c:	6033      	streq	r3, [r6, #0]
 801a14e:	238a      	moveq	r3, #138	; 0x8a
 801a150:	602b      	streq	r3, [r5, #0]
 801a152:	b005      	add	sp, #20
 801a154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a156:	bf00      	nop
 801a158:	20003208 	.word	0x20003208

0801a15c <abort>:
 801a15c:	b508      	push	{r3, lr}
 801a15e:	2006      	movs	r0, #6
 801a160:	f000 f82c 	bl	801a1bc <raise>
 801a164:	2001      	movs	r0, #1
 801a166:	f7f7 fd23 	bl	8011bb0 <_exit>

0801a16a <_raise_r>:
 801a16a:	291f      	cmp	r1, #31
 801a16c:	b538      	push	{r3, r4, r5, lr}
 801a16e:	4604      	mov	r4, r0
 801a170:	460d      	mov	r5, r1
 801a172:	d904      	bls.n	801a17e <_raise_r+0x14>
 801a174:	2316      	movs	r3, #22
 801a176:	6003      	str	r3, [r0, #0]
 801a178:	f04f 30ff 	mov.w	r0, #4294967295
 801a17c:	bd38      	pop	{r3, r4, r5, pc}
 801a17e:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801a182:	b112      	cbz	r2, 801a18a <_raise_r+0x20>
 801a184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a188:	b94b      	cbnz	r3, 801a19e <_raise_r+0x34>
 801a18a:	4620      	mov	r0, r4
 801a18c:	f000 f830 	bl	801a1f0 <_getpid_r>
 801a190:	462a      	mov	r2, r5
 801a192:	4601      	mov	r1, r0
 801a194:	4620      	mov	r0, r4
 801a196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a19a:	f000 b817 	b.w	801a1cc <_kill_r>
 801a19e:	2b01      	cmp	r3, #1
 801a1a0:	d00a      	beq.n	801a1b8 <_raise_r+0x4e>
 801a1a2:	1c59      	adds	r1, r3, #1
 801a1a4:	d103      	bne.n	801a1ae <_raise_r+0x44>
 801a1a6:	2316      	movs	r3, #22
 801a1a8:	6003      	str	r3, [r0, #0]
 801a1aa:	2001      	movs	r0, #1
 801a1ac:	e7e6      	b.n	801a17c <_raise_r+0x12>
 801a1ae:	2400      	movs	r4, #0
 801a1b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a1b4:	4628      	mov	r0, r5
 801a1b6:	4798      	blx	r3
 801a1b8:	2000      	movs	r0, #0
 801a1ba:	e7df      	b.n	801a17c <_raise_r+0x12>

0801a1bc <raise>:
 801a1bc:	4b02      	ldr	r3, [pc, #8]	; (801a1c8 <raise+0xc>)
 801a1be:	4601      	mov	r1, r0
 801a1c0:	6818      	ldr	r0, [r3, #0]
 801a1c2:	f7ff bfd2 	b.w	801a16a <_raise_r>
 801a1c6:	bf00      	nop
 801a1c8:	200029c4 	.word	0x200029c4

0801a1cc <_kill_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4d07      	ldr	r5, [pc, #28]	; (801a1ec <_kill_r+0x20>)
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	4608      	mov	r0, r1
 801a1d6:	4611      	mov	r1, r2
 801a1d8:	602b      	str	r3, [r5, #0]
 801a1da:	f7f7 fce1 	bl	8011ba0 <_kill>
 801a1de:	1c43      	adds	r3, r0, #1
 801a1e0:	d102      	bne.n	801a1e8 <_kill_r+0x1c>
 801a1e2:	682b      	ldr	r3, [r5, #0]
 801a1e4:	b103      	cbz	r3, 801a1e8 <_kill_r+0x1c>
 801a1e6:	6023      	str	r3, [r4, #0]
 801a1e8:	bd38      	pop	{r3, r4, r5, pc}
 801a1ea:	bf00      	nop
 801a1ec:	20011374 	.word	0x20011374

0801a1f0 <_getpid_r>:
 801a1f0:	f7f7 bcd4 	b.w	8011b9c <_getpid>

0801a1f4 <_init>:
 801a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1f6:	bf00      	nop
 801a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1fa:	bc08      	pop	{r3}
 801a1fc:	469e      	mov	lr, r3
 801a1fe:	4770      	bx	lr

0801a200 <_fini>:
 801a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a202:	bf00      	nop
 801a204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a206:	bc08      	pop	{r3}
 801a208:	469e      	mov	lr, r3
 801a20a:	4770      	bx	lr
